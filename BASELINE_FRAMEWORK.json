{
  "version": "0.1.0",
  "timestamp": "2025-10-05T01:14:11.230611",
  "workspace_root": "/home/hai/hai_vscode/MyDevelopment",
  "components": {
    ".github/copilot-instructions.md": {
      "name": ".github/copilot-instructions.md",
      "path": ".github/copilot-instructions.md",
      "component_type": "documentation",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 49,
      "complexity_score": 0,
      "last_modified": "2025-10-04T18:37:28.391570",
      "checksum": "cebb424f20e1fa345ff3336ffc217b66",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".github/prompts/Copilot-prompt.md": {
      "name": ".github/prompts/Copilot-prompt.md",
      "path": ".github/prompts/Copilot-prompt.md",
      "component_type": "documentation",
      "description": "🤖 GitHub Copilot Prompt and Instruction Set for Automation Project",
      "dependencies": [],
      "exports": [
        "🤖 GitHub Copilot Prompt and Instruction Set for Automation Project",
        "🔐 Project Goal:",
        "🧠 Copilot Prompt to Use (Paste into your active file before prompting Copilot):",
        "🧩 VS Code Setup Instructions (Every Developer Must Follow)",
        "1. 🔧 Setup VS Code (Run this):",
        "2. 🤖 Enable Copilot Context",
        "3. 📜 Use This Copilot Prompt in Your Source File",
        "4. ✅ Required Dev Workflow",
        "5. 🧪 Testing Rules",
        "6. 🔁 GitHub Contribution Rules",
        "7. 🧠 Examples",
        "src/modules/data_processing/csv_reader.py",
        "8. Configure Workspace",
        "9. Contribution Rules",
        "10. Debugging",
        "11. Python Code Guideline"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 151,
      "complexity_score": 0,
      "last_modified": "2025-10-04T18:39:19.622825",
      "checksum": "847523d4771659d291b05d130e48140f",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md": {
      "name": ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      "path": ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Performance Testing Completion",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Performance Testing Completion",
        "🎉 PERFORMANCE TESTING SUCCESSFULLY IMPLEMENTED",
        "✅ What Was Delivered",
        "1. Basic Performance Testing Suite",
        "2. Integration Testing Framework",
        "3. Performance Validation Results",
        "Core System Tests",
        "Performance Tests",
        "Total System Health: 13/13 PASSING (100%)",
        "📊 Performance Metrics Achieved",
        "Response Time Performance",
        "Concurrency Testing",
        "Production Readiness Validation",
        "🚀 Production Deployment Status",
        "📋 Files Created/Modified",
        "New Performance Testing Files",
        "Testing Commands Available",
        "Run all performance tests",
        "Run integration tests",
        "Run complete test suite",
        "Run performance tests directly",
        "🎯 Performance Testing Capabilities Delivered",
        "📈 Next Steps for Production"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 89,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "2af8acd15c02584a4b7c7ae220379dd6",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md": {
      "name": ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      "path": ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Performance Testing Report",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Performance Testing Report",
        "Executive Summary",
        "Performance Testing Implementation",
        "1. Basic Performance Testing Suite",
        "2. Integration Testing Suite",
        "3. Performance Test Categories",
        "A. Execution Performance",
        "B. Concurrent Access Testing",
        "C. File I/O Performance",
        "D. Memory Usage Analysis",
        "Production Readiness Assessment",
        "✅ Performance Criteria Met",
        "✅ Testing Infrastructure",
        "✅ Production Features Validated",
        "Performance Testing Results Summary",
        "Core Functionality Tests",
        "Performance Tests",
        "Integration Tests",
        "Recommendations for Production Deployment",
        "1. Performance Monitoring",
        "2. Load Testing",
        "3. Infrastructure Considerations",
        "4. Performance Optimization Opportunities",
        "Conclusion"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 124,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "8c04ee8ab2d8935ef0343602ffc15961",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/PROJECT_COMPLETION_REPORT.md": {
      "name": ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      "path": ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      "component_type": "documentation",
      "description": "🎉 Framework0 Enhanced Context Server - Project Completion Report",
      "dependencies": [],
      "exports": [
        "🎉 Framework0 Enhanced Context Server - Project Completion Report",
        "📅 **Project Summary**",
        "🏆 **All Components Successfully Delivered**",
        "✅ **1. Enhanced Context Server**",
        "✅ **2. Shell Script Utilities**",
        "✅ **3. Python Client Library**",
        "✅ **4. Dash Integration**",
        "✅ **5. Configuration & Deployment**",
        "✅ **6. Working Examples**",
        "✅ **7. File Dumping Support**",
        "✅ **8. Comprehensive Test Suite**",
        "✅ **9. Complete Documentation**",
        "📊 **Technical Specifications**",
        "**Architecture**",
        "**Key Features Implemented**",
        "**Performance & Reliability**",
        "🚀 **Deployment Ready**",
        "**Quick Start Commands**",
        "1. Environment Setup",
        "2. Start Server",
        "3. Test Client Operations",
        "4. Launch Dashboard",
        "**Production Deployment**",
        "Docker Deployment",
        "Or Manual Production",
        "📈 **Project Metrics**",
        "🎯 **Quality Assurance**",
        "**Code Quality**",
        "**Testing & Validation**",
        "**Documentation Quality**",
        "🌟 **Project Highlights**",
        "**Innovation & Features**",
        "**Technical Excellence**",
        "🎉 **Final Status: COMPLETE & PRODUCTION READY**"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 166,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "a35cd63243eb3b4dedb449825a87d624",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/README.md": {
      "name": ".restructuring_backup/README.md",
      "path": ".restructuring_backup/README.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Baseline Framework Documentation",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Baseline Framework Documentation",
        "🚀 Framework Overview",
        "📊 Current Baseline Framework Status",
        "Framework Metrics Summary",
        "Framework Component Breakdown",
        "Key Framework Capabilities",
        "🏗️ Framework Architecture",
        "Current Framework Structure",
        "Architecture Principles",
        "✨ Key Features",
        "🎯 Recipe-Based Automation",
        "🔄 Distributed Context Management",
        "🧩 Modular Scriptlet Architecture",
        "📊 Performance Testing & Monitoring",
        "🤖 AI-Powered Analysis",
        "🚀 Quick Start",
        "Prerequisites",
        "Installation",
        "Basic Usage",
        "Next Steps",
        "📚 Documentation",
        "Core Documentation",
        "User Documentation",
        "Developer Documentation",
        "Technical Analysis",
        "🤝 Contributing",
        "Development Principles",
        "Getting Involved",
        "Development Workflow",
        "Set up development environment",
        "Run baseline analysis",
        "Run compliance checks",
        "Update documentation",
        "📄 License"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 204,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:37:17.846071",
      "checksum": "5bdabb940a24cd66459fa0b56c841578",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md": {
      "name": ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      "path": ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      "component_type": "documentation",
      "description": "WebSocket Async Performance Testing - COMPLETION REPORT",
      "dependencies": [],
      "exports": [
        "WebSocket Async Performance Testing - COMPLETION REPORT",
        "🎉 WEBSOCKET ASYNC PERFORMANCE TESTING SUCCESSFULLY IMPLEMENTED",
        "✅ What Was Delivered",
        "1. WebSocket Async Performance Testing Suite",
        "2. Real-time Performance Monitoring System",
        "3. Async Load Testing Framework",
        "4. Integration and Comprehensive Validation",
        "📊 Performance Capabilities Achieved",
        "WebSocket Performance Testing",
        "WebSocket Test Results",
        "Real-time Performance Monitoring",
        "Monitoring Capabilities",
        "Async Load Testing",
        "Load Testing Results",
        "🚀 Technical Implementation Highlights",
        "1. Advanced Async/Await Architecture",
        "2. Production-Grade Performance Monitoring",
        "3. Comprehensive WebSocket Testing",
        "4. Integration and Validation Framework",
        "📋 Files Created/Enhanced",
        "New WebSocket Async Testing Files",
        "Testing Commands Available",
        "WebSocket Performance Testing",
        "Real-time Performance Monitoring Tests",
        "Async Load Testing Framework",
        "Comprehensive Integration Testing",
        "Complete Async Performance Demonstration",
        "🎯 WebSocket Async Testing Capabilities Delivered",
        "📈 Production Readiness Assessment",
        "✅ WebSocket Async Performance Validated",
        "✅ Real-time Monitoring Operational",
        "✅ Async Load Testing Framework Ready",
        "📊 Performance Test Results Summary",
        "WebSocket Performance Tests",
        "Real-time Monitoring Tests",
        "Async Load Testing Results",
        "Integration Testing Results",
        "🎯 Next Steps for Production",
        "🔧 Advanced Capabilities"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 204,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "922cea8f99b2421881b8ff34882a2230",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json": {
      "name": ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      "path": ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 537,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:44:43.098660",
      "checksum": "d27031ec7e75f5658920c2ec374bd889",
      "framework_role": "entry_point",
      "stability": "stable"
    },
    ".restructuring_backup/cleanup_report.json": {
      "name": ".restructuring_backup/cleanup_report.json",
      "path": ".restructuring_backup/cleanup_report.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 70,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:17:36.653843",
      "checksum": "3659f627b3b56d695e559609ae6f1bec",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    ".restructuring_backup/configs/server_config.py": {
      "name": ".restructuring_backup/configs/server_config.py",
      "path": ".restructuring_backup/configs/server_config.py",
      "component_type": "utility",
      "description": "Framework0 Context Server Configuration Management",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "create_default_config_file",
        "main",
        "__init__",
        "_load_default_config",
        "_load_config_file",
        "_load_environment_config",
        "_deep_merge",
        "_set_nested_value",
        "get",
        "set",
        "validate",
        "save",
        "to_dict",
        "__init__",
        "_signal_handler",
        "start",
        "stop",
        "restart",
        "is_running",
        "get_status",
        "ContextServerConfig",
        "ServerManager"
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "signal",
        "subprocess",
        "sys",
        "time",
        "pathlib",
        "typing",
        "argparse"
      ],
      "functions": [
        {
          "name": "create_default_config_file",
          "line": 497,
          "args": [
            "config_path"
          ],
          "docstring": "Create a default configuration file with all settings and comments.\n\nArgs:\n    config_path: Path where to create the configuration file",
          "decorators": []
        },
        {
          "name": "main",
          "line": 578,
          "args": [],
          "docstring": "Main entry point for configuration and server management.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 30,
          "args": [
            "self",
            "config_file"
          ],
          "docstring": "Initialize configuration manager with optional config file.\n\nArgs:\n    config_file: Path to configuration file (JSON format)",
          "decorators": []
        },
        {
          "name": "_load_default_config",
          "line": 55,
          "args": [
            "self"
          ],
          "docstring": "Load default configuration values for all settings.",
          "decorators": []
        },
        {
          "name": "_load_config_file",
          "line": 115,
          "args": [
            "self",
            "config_file"
          ],
          "docstring": "Load configuration from JSON file.\n\nArgs:\n    config_file: Path to JSON configuration file",
          "decorators": []
        },
        {
          "name": "_load_environment_config",
          "line": 141,
          "args": [
            "self"
          ],
          "docstring": "Load configuration overrides from environment variables.",
          "decorators": []
        },
        {
          "name": "_deep_merge",
          "line": 197,
          "args": [
            "self",
            "base",
            "update"
          ],
          "docstring": "Deep merge two dictionaries, updating base with values from update.\n\nArgs:\n    base: Base dictionary to update\n    update: Dictionary with updates to apply",
          "decorators": []
        },
        {
          "name": "_set_nested_value",
          "line": 211,
          "args": [
            "self",
            "config",
            "path",
            "value"
          ],
          "docstring": "Set nested configuration value using dot notation path.\n\nArgs:\n    config: Configuration dictionary to update\n    path: Dot notation path (e.g., 'server.host')\n    value: Value to set",
          "decorators": []
        },
        {
          "name": "get",
          "line": 232,
          "args": [
            "self",
            "path",
            "default"
          ],
          "docstring": "Get configuration value using dot notation path.\n\nArgs:\n    path: Dot notation path to configuration value\n    default: Default value if path not found\n    \nReturns:\n    Configuration value or default",
          "decorators": []
        },
        {
          "name": "set",
          "line": 253,
          "args": [
            "self",
            "path",
            "value"
          ],
          "docstring": "Set configuration value using dot notation path.\n\nArgs:\n    path: Dot notation path to set\n    value: Value to set",
          "decorators": []
        },
        {
          "name": "validate",
          "line": 263,
          "args": [
            "self"
          ],
          "docstring": "Validate configuration and return list of errors.\n\nReturns:\n    List of validation error messages",
          "decorators": []
        },
        {
          "name": "save",
          "line": 294,
          "args": [
            "self",
            "config_file"
          ],
          "docstring": "Save current configuration to JSON file.\n\nArgs:\n    config_file: Path to save configuration file",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 314,
          "args": [
            "self"
          ],
          "docstring": "Get complete configuration as dictionary.\n\nReturns:\n    Complete configuration dictionary",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 332,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize server manager with configuration.\n\nArgs:\n    config: Context server configuration instance",
          "decorators": []
        },
        {
          "name": "_signal_handler",
          "line": 350,
          "args": [
            "self",
            "signum",
            "frame"
          ],
          "docstring": "Handle shutdown signals for graceful server termination.\n\nArgs:\n    signum: Signal number received\n    frame: Current stack frame",
          "decorators": []
        },
        {
          "name": "start",
          "line": 362,
          "args": [
            "self"
          ],
          "docstring": "Start the context server process.\n\nReturns:\n    True if server started successfully",
          "decorators": []
        },
        {
          "name": "stop",
          "line": 414,
          "args": [
            "self"
          ],
          "docstring": "Stop the context server process gracefully.\n\nReturns:\n    True if server stopped successfully",
          "decorators": []
        },
        {
          "name": "restart",
          "line": 447,
          "args": [
            "self"
          ],
          "docstring": "Restart the context server process.\n\nReturns:\n    True if server restarted successfully",
          "decorators": []
        },
        {
          "name": "is_running",
          "line": 463,
          "args": [
            "self"
          ],
          "docstring": "Check if server process is currently running.\n\nReturns:\n    True if server process is active",
          "decorators": []
        },
        {
          "name": "get_status",
          "line": 472,
          "args": [
            "self"
          ],
          "docstring": "Get current server status information.\n\nReturns:\n    Dictionary with server status details",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextServerConfig",
          "line": 21,
          "bases": [],
          "docstring": "Configuration manager for Framework0 Enhanced Context Server.\n\nThis class handles loading, validation, and management of server\nconfiguration from files, environment variables, and command-line\narguments with support for multiple deployment environments.",
          "methods": [
            {
              "name": "__init__",
              "line": 30,
              "args": [
                "self",
                "config_file"
              ],
              "docstring": "Initialize configuration manager with optional config file.\n\nArgs:\n    config_file: Path to configuration file (JSON format)"
            },
            {
              "name": "_load_default_config",
              "line": 55,
              "args": [
                "self"
              ],
              "docstring": "Load default configuration values for all settings."
            },
            {
              "name": "_load_config_file",
              "line": 115,
              "args": [
                "self",
                "config_file"
              ],
              "docstring": "Load configuration from JSON file.\n\nArgs:\n    config_file: Path to JSON configuration file"
            },
            {
              "name": "_load_environment_config",
              "line": 141,
              "args": [
                "self"
              ],
              "docstring": "Load configuration overrides from environment variables."
            },
            {
              "name": "_deep_merge",
              "line": 197,
              "args": [
                "self",
                "base",
                "update"
              ],
              "docstring": "Deep merge two dictionaries, updating base with values from update.\n\nArgs:\n    base: Base dictionary to update\n    update: Dictionary with updates to apply"
            },
            {
              "name": "_set_nested_value",
              "line": 211,
              "args": [
                "self",
                "config",
                "path",
                "value"
              ],
              "docstring": "Set nested configuration value using dot notation path.\n\nArgs:\n    config: Configuration dictionary to update\n    path: Dot notation path (e.g., 'server.host')\n    value: Value to set"
            },
            {
              "name": "get",
              "line": 232,
              "args": [
                "self",
                "path",
                "default"
              ],
              "docstring": "Get configuration value using dot notation path.\n\nArgs:\n    path: Dot notation path to configuration value\n    default: Default value if path not found\n    \nReturns:\n    Configuration value or default"
            },
            {
              "name": "set",
              "line": 253,
              "args": [
                "self",
                "path",
                "value"
              ],
              "docstring": "Set configuration value using dot notation path.\n\nArgs:\n    path: Dot notation path to set\n    value: Value to set"
            },
            {
              "name": "validate",
              "line": 263,
              "args": [
                "self"
              ],
              "docstring": "Validate configuration and return list of errors.\n\nReturns:\n    List of validation error messages"
            },
            {
              "name": "save",
              "line": 294,
              "args": [
                "self",
                "config_file"
              ],
              "docstring": "Save current configuration to JSON file.\n\nArgs:\n    config_file: Path to save configuration file"
            },
            {
              "name": "to_dict",
              "line": 314,
              "args": [
                "self"
              ],
              "docstring": "Get complete configuration as dictionary.\n\nReturns:\n    Complete configuration dictionary"
            }
          ]
        },
        {
          "name": "ServerManager",
          "line": 324,
          "bases": [],
          "docstring": "Server process manager for starting, stopping, and monitoring the context server.\n\nThis class handles server lifecycle management including process control,\nhealth monitoring, and graceful shutdown handling for production deployments.",
          "methods": [
            {
              "name": "__init__",
              "line": 332,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize server manager with configuration.\n\nArgs:\n    config: Context server configuration instance"
            },
            {
              "name": "_signal_handler",
              "line": 350,
              "args": [
                "self",
                "signum",
                "frame"
              ],
              "docstring": "Handle shutdown signals for graceful server termination.\n\nArgs:\n    signum: Signal number received\n    frame: Current stack frame"
            },
            {
              "name": "start",
              "line": 362,
              "args": [
                "self"
              ],
              "docstring": "Start the context server process.\n\nReturns:\n    True if server started successfully"
            },
            {
              "name": "stop",
              "line": 414,
              "args": [
                "self"
              ],
              "docstring": "Stop the context server process gracefully.\n\nReturns:\n    True if server stopped successfully"
            },
            {
              "name": "restart",
              "line": 447,
              "args": [
                "self"
              ],
              "docstring": "Restart the context server process.\n\nReturns:\n    True if server restarted successfully"
            },
            {
              "name": "is_running",
              "line": 463,
              "args": [
                "self"
              ],
              "docstring": "Check if server process is currently running.\n\nReturns:\n    True if server process is active"
            },
            {
              "name": "get_status",
              "line": 472,
              "args": [
                "self"
              ],
              "docstring": "Get current server status information.\n\nReturns:\n    Dictionary with server status details"
            }
          ]
        }
      ],
      "lines_of_code": 569,
      "complexity_score": 78,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "86fca82fc2cca15452fc99f945b58f1f",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/debug_enhanced_memory_bus.py": {
      "name": ".restructuring_backup/debug_enhanced_memory_bus.py",
      "path": ".restructuring_backup/debug_enhanced_memory_bus.py",
      "component_type": "utility",
      "description": "Debugging script to identify and fix test failures in Enhanced Memory Bus.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md"
      ],
      "exports": [
        "debug_metrics_test",
        "debug_basic_operations_test",
        "debug_backup_restore_test",
        "main"
      ],
      "imports": [
        "os",
        "tempfile",
        "json",
        "orchestrator.enhanced_memory_bus",
        "traceback",
        "traceback"
      ],
      "functions": [
        {
          "name": "debug_metrics_test",
          "line": 17,
          "args": [],
          "docstring": "Debug the metrics update operation stats test.",
          "decorators": []
        },
        {
          "name": "debug_basic_operations_test",
          "line": 48,
          "args": [],
          "docstring": "Debug the basic operations test.",
          "decorators": []
        },
        {
          "name": "debug_backup_restore_test",
          "line": 85,
          "args": [],
          "docstring": "Debug the backup and restore test.",
          "decorators": []
        },
        {
          "name": "main",
          "line": 156,
          "args": [],
          "docstring": "Run all debug tests.",
          "decorators": []
        }
      ],
      "classes": [],
      "lines_of_code": 140,
      "complexity_score": 17,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "2a0a3666b690820b73949c66c27de92f",
      "framework_role": "data_storage",
      "stability": "stable"
    },
    ".restructuring_backup/docker-compose.yml": {
      "name": ".restructuring_backup/docker-compose.yml",
      "path": ".restructuring_backup/docker-compose.yml",
      "component_type": "configuration",
      "description": "Framework0 Context Server Docker Compose Configuration",
      "dependencies": [],
      "exports": [
        "version",
        "services",
        "volumes",
        "networks"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 184,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "cb501302f24ce6d141cb0b0cb57da2ab",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/docs/api_reference.md": {
      "name": ".restructuring_backup/docs/api_reference.md",
      "path": ".restructuring_backup/docs/api_reference.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - API Reference",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - API Reference",
        "Overview",
        "Table of Contents",
        "orchestrator.context..ipynb_checkpoints.context-checkpoint",
        "Classes",
        "Context",
        "__init__",
        "set",
        "get",
        "to_dict",
        "get_history",
        "_validate_json_serializable",
        "clear",
        "keys",
        "__repr__",
        "orchestrator.context..ipynb_checkpoints.memory_bus-checkpoint",
        "Classes",
        "MemoryBus",
        "__init__",
        "set",
        "get",
        "clear",
        "keys",
        "_validate_json_serializable",
        "__repr__",
        "orchestrator.context.context",
        "Classes",
        "ContextHistoryEntry",
        "to_dict",
        "ContextMetrics",
        "update_operation_count",
        "Context",
        "__init__",
        "get",
        "set",
        "to_dict",
        "to_json",
        "from_json",
        "get_history",
        "pop_dirty_keys",
        "keys",
        "register_callback",
        "get_metrics",
        "clear_history",
        "merge_from",
        "_execute_callbacks",
        "_estimate_memory_usage",
        "__repr__",
        "orchestrator.context.db_adapter",
        "Classes",
        "DBAdapter",
        "__init__",
        "_init_db",
        "save_context",
        "load_context",
        "get_versions",
        "clear",
        "__repr__",
        "FileAdapter",
        "__init__",
        "save_context",
        "load_context",
        "list_files",
        "delete_file",
        "__repr__",
        "orchestrator.context.memory_bus",
        "Classes",
        "MemoryBus",
        "__init__",
        "set",
        "get",
        "clear",
        "keys",
        "_validate_json_serializable",
        "__repr__",
        "orchestrator.context.persistence",
        "Classes",
        "Persistence",
        "__init__",
        "flush",
        "check_and_flush",
        "load_from_disk",
        "load_from_db",
        "_flush_to_disk",
        "_flush_to_db",
        "_compute_diff",
        "__repr__",
        "orchestrator.context.version_control",
        "Classes",
        "VersionControl",
        "__init__",
        "commit",
        "rollback",
        "get_versions",
        "_generate_version_id",
        "__repr__",
        "orchestrator.dependency_graph",
        "Classes",
        "DependencyGraph",
        "__init__",
        "add_task",
        "get_task_order",
        "get_task_dependencies",
        "get_task_dependents",
        "remove_task",
        "visualize",
        "orchestrator.enhanced_memory_bus",
        "Classes",
        "MemoryBusMetrics",
        "update_operation_stats",
        "to_dict",
        "PersistenceBackend",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "JSONPersistenceBackend",
        "__init__",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "SQLitePersistenceBackend",
        "__init__",
        "_init_database",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "MessageEvent",
        "is_expired",
        "to_dict",
        "from_dict",
        "EnhancedMemoryBus",
        "__init__",
        "_load_from_persistence",
        "_start_background_tasks",
        "_auto_persist_worker",
        "_message_cleanup_worker",
        "get",
        "set",
        "delete",
        "keys",
        "clear",
        "persist",
        "backup",
        "restore",
        "subscribe",
        "unsubscribe",
        "publish",
        "_publish_event",
        "get_metrics",
        "health_check",
        "shutdown",
        "__enter__",
        "__exit__",
        "orchestrator.enhanced_recipe_parser",
        "Classes",
        "RecipeFormat",
        "ValidationSeverity",
        "ValidationMessage",
        "__str__",
        "RecipeMetadata",
        "StepInfo",
        "__post_init__",
        "ParsedRecipe",
        "is_valid",
        "error_count",
        "warning_count",
        "RecipeValidator",
        "__init__",
        "_setup_default_validators",
        "add_validator",
        "validate",
        "_validate_required_fields",
        "_validate_step_structure",
        "_validate_dependency_graph",
        "_validate_module_imports",
        "_validate_step_indices",
        "EnhancedRecipeParser",
        "__init__",
        "detect_format",
        "load_file",
        "_compute_content_hash",
        "_extract_metadata",
        "_parse_steps",
        "parse_recipe",
        "get_validation_summary",
        "clear_cache",
        "add_validator",
        "orchestrator.memory_bus",
        "Classes",
        "MemoryBusClient",
        "__init__",
        "fetch_snapshot",
        "push_patch",
        "sync",
        "MemoryBusServer",
        "__init__",
        "get_snapshot",
        "apply_patch",
        "handle_snapshot_request",
        "handle_patch_request",
        "orchestrator.persistence",
        "Classes",
        "PersistenceManager",
        "__init__",
        "start_background_flush",
        "stop_background_flush",
        "flush",
        "load_latest",
        "orchestrator.persistence.cache",
        "Classes",
        "CacheError",
        "CacheFullError",
        "CacheEntryNotFoundError",
        "CacheEntry",
        "__init__",
        "_estimate_size",
        "access",
        "is_expired",
        "get_age",
        "get_idle_time",
        "to_dict",
        "from_dict",
        "EvictionPolicy",
        "all_policies",
        "Cache",
        "__init__",
        "_with_lock",
        "set",
        "_set",
        "__set",
        "get",
        "_get",
        "__get",
        "contains",
        "_contains",
        "__contains",
        "delete",
        "_delete",
        "__delete",
        "clear",
        "_clear",
        "__clear",
        "get_stats",
        "_get_stats",
        "__get_stats",
        "get_keys",
        "_get_keys",
        "__get_keys",
        "get_entry_metadata",
        "_get_entry_metadata",
        "__get_entry_metadata",
        "_clean_expired_entries",
        "_evict_entries",
        "_evict_memory",
        "_select_eviction_candidate",
        "PersistentCache",
        "__init__",
        "_schedule_auto_persist",
        "persist",
        "_persist",
        "__persist",
        "_load_cache",
        "clear",
        "_clear_and_remove",
        "__clear_and_remove",
        "__del__",
        "TieredCache",
        "__init__",
        "set",
        "_set",
        "__set",
        "get",
        "_get",
        "__get",
        "contains",
        "_contains",
        "__contains",
        "delete",
        "_delete",
        "__delete",
        "clear",
        "_clear",
        "__clear",
        "get_stats",
        "_get_stats",
        "__get_stats",
        "get_keys",
        "_get_keys",
        "__get_keys",
        "CacheDecorator",
        "__init__",
        "_default_key_func",
        "__call__",
        "orchestrator.persistence.core",
        "Classes",
        "StorageBackend",
        "CacheStrategy",
        "DeltaStrategy",
        "PersistenceError",
        "DataIntegrityError",
        "ThreadSafeContextWrapper",
        "__init__",
        "__enter__",
        "__exit__",
        "PersistenceMetrics",
        "__init__",
        "start_operation",
        "end_operation",
        "update_save",
        "update_load",
        "update_operation_time",
        "increment_errors",
        "increment_cache_hits",
        "increment_cache_misses",
        "get_average_save_time",
        "get_average_load_time",
        "get_cache_hit_ratio",
        "to_dict",
        "reset",
        "PersistenceBase",
        "save",
        "load",
        "get",
        "set",
        "delete",
        "clear",
        "get_metrics",
        "orchestrator.persistence.delta",
        "Classes",
        "DeltaCompressionError",
        "DeltaRecord",
        "__init__",
        "__repr__",
        "to_dict",
        "from_dict",
        "DeltaCompressor",
        "__init__",
        "calculate_delta",
        "_dict_delta",
        "_binary_delta",
        "apply_delta",
        "create_delta_record",
        "merge_deltas",
        "get_compression_stats",
        "serialize_delta",
        "deserialize_delta",
        "DeltaChain",
        "__init__",
        "add_delta",
        "add_state",
        "get_state_at_index",
        "get_current_state",
        "get_delta_at_index",
        "clear_chain",
        "rebaseline",
        "_optimize_chain",
        "get_chain_metrics",
        "orchestrator.persistence.enhanced",
        "Classes",
        "EnhancedPersistenceError",
        "EnhancedPersistenceV2",
        "__init__",
        "_with_lock",
        "_schedule_auto_snapshot",
        "_has_changes_since_last_snapshot",
        "_load_current_state",
        "save",
        "_save",
        "load",
        "_load",
        "get",
        "_get",
        "set",
        "_set",
        "delete",
        "_delete",
        "clear",
        "_clear",
        "create_snapshot",
        "_create_snapshot",
        "create_delta_snapshot",
        "_create_delta_snapshot",
        "restore_snapshot",
        "_restore_snapshot",
        "restore_snapshot_by_tag",
        "_restore_snapshot_by_tag",
        "list_snapshots",
        "get_snapshot_data",
        "compare_snapshots",
        "get_metrics",
        "export_data",
        "_export_data",
        "import_data",
        "_import_data",
        "cleanup",
        "__del__",
        "CachedPersistenceDecorator",
        "__init__",
        "save",
        "load",
        "get",
        "set",
        "delete",
        "clear",
        "__getattr__",
        "orchestrator.persistence.snapshot",
        "Classes",
        "SnapshotError",
        "VersioningError",
        "SnapshotNotFoundError",
        "SnapshotMetadata",
        "__init__",
        "to_dict",
        "from_dict",
        "update_integrity_info",
        "SnapshotManager",
        "__init__",
        "_initialize_storage",
        "_load_registry",
        "_save_registry",
        "create_snapshot",
        "_save_data_to_file",
        "_load_data_from_file",
        "get_snapshot",
        "get_latest_snapshot",
        "get_snapshot_by_tag",
        "list_snapshots",
        "list_versions",
        "list_tags",
        "tag_snapshot",
        "untag_snapshot",
        "delete_snapshot",
        "_enforce_snapshot_limit",
        "create_delta_snapshot",
        "get_delta_snapshot",
        "compare_snapshots",
        "export_snapshot",
        "import_snapshot",
        "cleanup",
        "clear_all",
        "__del__",
        "orchestrator.recipe_parser",
        "orchestrator.runner",
        "Classes",
        "RecipeExecutionStatus",
        "StepExecutionResult",
        "success",
        "to_dict",
        "RecipeExecutionResult",
        "execution_time_seconds",
        "success_rate",
        "overall_success",
        "add_step_result",
        "add_global_error",
        "add_global_warning",
        "to_dict",
        "EnhancedRecipeRunner",
        "__init__",
        "run_recipe",
        "cancel_execution",
        "is_execution_cancelled",
        "get_execution_statistics",
        "get_execution_history",
        "_load_recipe",
        "_validate_recipe_structure",
        "_initialize_context",
        "_execute_recipe_steps",
        "_execute_single_step",
        "_attempt_step_execution",
        "_finalize_context",
        "scriptlets.framework",
        "Classes",
        "ScriptletState",
        "ScriptletCategory",
        "ScriptletResult",
        "to_dict",
        "ScriptletConfig",
        "validate_configuration",
        "ScriptletProtocol",
        "validate",
        "run",
        "get_category",
        "BaseScriptlet",
        "__init__",
        "execution_duration",
        "is_executing",
        "get_category",
        "get_capabilities",
        "get_metadata",
        "execute",
        "_execute_hooks",
        "_handle_error",
        "_handle_completion",
        "_extract_result_data",
        "validate",
        "validate_custom",
        "run",
        "check_paradigm",
        "_check_method_signatures",
        "_check_json_compatibility",
        "_check_state_management",
        "__repr__",
        "ComputeScriptlet",
        "__init__",
        "validate_custom",
        "IOScriptlet",
        "__init__",
        "validate_custom",
        "ExecutionContext",
        "__init__",
        "add_scriptlet",
        "resolve_dependencies",
        "execute_all",
        "server.enhanced_context_server",
        "Classes",
        "Context",
        "__init__",
        "get",
        "set",
        "to_dict",
        "get_history",
        "pop_dirty_keys",
        "EnhancedContextServer",
        "__init__",
        "_setup_routes",
        "_setup_websocket_handlers",
        "_write_json_dump",
        "_write_pretty_dump",
        "_write_csv_dump",
        "_write_text_dump",
        "run",
        "MemoryBus",
        "__init__",
        "get",
        "set",
        "to_dict",
        "src.analysis.components",
        "Classes",
        "EnhancedSummarizer",
        "__init__",
        "_analyze_impl",
        "_analyze_sequence",
        "_analyze_numeric_data",
        "_percentile",
        "_analyze_string_data",
        "_analyze_dictionary",
        "_analyze_string",
        "_analyze_other",
        "_assess_data_quality",
        "_assess_sequence_quality",
        "_assess_dictionary_quality",
        "_assess_string_quality",
        "StatisticalAnalyzer",
        "__init__",
        "_analyze_impl",
        "PatternAnalyzer",
        "__init__",
        "_analyze_impl",
        "QualityAnalyzer",
        "__init__",
        "_analyze_impl",
        "src.analysis.enhanced_components",
        "Classes",
        "ContextAwareSummarizer",
        "__init__",
        "_analyze_impl",
        "_create_enhanced_summary",
        "_store_summary_in_context",
        "_compare_with_history",
        "_calculate_multi_period_trends",
        "_analyze_trends",
        "_generate_context_recommendations",
        "_generate_trend_recommendations",
        "_update_performance_metrics",
        "_track_analysis_trends",
        "MetricsAnalyzer",
        "__init__",
        "_analyze_impl",
        "_collect_metrics",
        "_analyze_dict_metrics",
        "_analyze_sequence_metrics",
        "_analyze_general_metrics",
        "_collect_context_metrics",
        "_analyze_performance_metrics",
        "_analyze_metric_trends",
        "_calculate_metric_trend",
        "_summarize_metric_trends",
        "_check_alert_conditions",
        "_generate_metrics_recommendations",
        "_store_metrics_in_context",
        "RegisteredContextAwareSummarizer",
        "RegisteredMetricsAnalyzer",
        "src.analysis.enhanced_framework",
        "Classes",
        "EnhancedAnalysisError",
        "__init__",
        "EnhancedAnalysisConfig",
        "to_dict",
        "from_dict",
        "EnhancedAnalysisResult",
        "add_context_key_created",
        "add_context_key_accessed",
        "add_dependency_resolved",
        "add_dependency_failed",
        "to_dict",
        "EnhancedAnalyzerV2",
        "__init__",
        "_initialize_context_keys",
        "add_dependency",
        "remove_dependency",
        "_check_dependencies",
        "send_message",
        "receive_messages",
        "share_data",
        "get_shared_data",
        "_execution_context",
        "analyze",
        "_analyze_impl",
        "EnhancedAnalysisRegistry",
        "create_enhanced_pipeline",
        "src.analysis.framework",
        "Classes",
        "AnalysisError",
        "__init__",
        "AnalysisConfig",
        "to_dict",
        "from_dict",
        "AnalysisResult",
        "add_error",
        "add_warning",
        "add_statistic",
        "add_pattern",
        "to_dict",
        "BaseAnalyzerV2",
        "__init__",
        "add_hook",
        "remove_hook",
        "_run_hooks",
        "_calculate_statistics",
        "_detect_patterns",
        "_assess_quality",
        "get_statistics",
        "_analyze_impl",
        "analyze",
        "src.analysis.registry",
        "Classes",
        "AnalyzerFactory",
        "__init__",
        "create_analyzer",
        "_validate_config",
        "clear_cache",
        "get_cached_analyzers",
        "AnalysisRegistry",
        "register",
        "unregister",
        "get_analyzer_info",
        "get_available_analyzers",
        "get_analyzer",
        "create_analyzer_chain",
        "clear_registry",
        "src.context_client",
        "Classes",
        "ContextClientError",
        "ConnectionError",
        "ServerError",
        "TimeoutError",
        "ContextClient",
        "__init__",
        "_make_request",
        "get",
        "set",
        "list_all",
        "get_history",
        "get_status",
        "ping",
        "dump_context",
        "list_dumps",
        "download_dump",
        "AsyncContextClient",
        "__init__",
        "_setup_socketio_handlers",
        "on",
        "src.core.logger",
        "Classes",
        "LoggerConfig",
        "__init__",
        "ContextualFormatter",
        "__init__",
        "format",
        "Framework0Logger",
        "__init__",
        "_create_logger",
        "_create_console_handler",
        "_create_file_handler",
        "debug",
        "info",
        "warning",
        "error",
        "critical",
        "log_context_operation",
        "get_logger_stats",
        "src.dash_integration",
        "Classes",
        "ContextDashError",
        "ContextDashboard",
        "__init__",
        "_setup_layout",
        "_setup_callbacks",
        "_get_disconnected_state",
        "_get_error_state",
        "_build_context_display",
        "_build_context_stats",
        "_build_recent_changes",
        "_build_history_timeline",
        "run",
        "src.visualization.enhanced_visualizer",
        "Classes",
        "VisualizationFormat",
        "NodeType",
        "EdgeType",
        "VisualizationNode",
        "__post_init__",
        "_get_default_style",
        "VisualizationEdge",
        "__post_init__",
        "_get_default_style",
        "EnhancedVisualizer",
        "__init__",
        "_detect_capabilities",
        "create_recipe_execution_graph",
        "render_graph",
        "_generate_metadata_html",
        "update_execution_state",
        "get_available_graphs",
        "cleanup_graphs",
        "export_all_graphs",
        "shutdown",
        "src.visualization.execution_flow",
        "Classes",
        "ExecutionStatus",
        "FlowLayout",
        "ExecutionStep",
        "get_duration",
        "is_terminal_status",
        "RecipeExecution",
        "get_total_duration",
        "get_step_by_id",
        "get_completion_percentage",
        "update_metrics",
        "ExecutionFlowVisualizer",
        "__init__",
        "start_recipe_execution",
        "update_step_status",
        "_complete_recipe_execution",
        "create_execution_timeline",
        "_create_plotly_timeline",
        "_create_matplotlib_timeline",
        "_create_json_timeline",
        "_build_execution_state",
        "_start_monitoring",
        "_take_performance_snapshot",
        "get_execution_summary",
        "shutdown",
        "src.visualization.performance_dashboard",
        "Classes",
        "MetricType",
        "ChartType",
        "MetricPoint",
        "age_seconds",
        "PerformanceAlert",
        "is_active",
        "duration",
        "PerformanceDashboard",
        "__init__",
        "_initialize_default_thresholds",
        "add_metric",
        "_check_alert_thresholds",
        "_trigger_alert",
        "_update_aggregated_metrics",
        "create_realtime_dashboard",
        "_get_recent_metric_data",
        "_generate_dashboard_html",
        "_generate_alerts_html",
        "_generate_metrics_summary_html",
        "export_performance_report",
        "_collect_performance_data",
        "_calculate_system_health",
        "_generate_performance_report_html",
        "get_dashboard_status",
        "shutdown",
        "src.visualization.timeline_visualizer",
        "Classes",
        "TimelineType",
        "LayoutEngine",
        "TimelineEvent",
        "get_end_time",
        "overlaps_with",
        "FlowNode",
        "get_duration",
        "FlowEdge",
        "TimelineVisualizer",
        "__init__",
        "create_gantt_timeline",
        "create_dependency_flow",
        "_group_events_by_field",
        "_get_status_color",
        "_get_color_map",
        "_calculate_layout_positions",
        "_add_flow_edges_to_figure",
        "_add_flow_nodes_to_figure",
        "_add_arrowhead",
        "_generate_enhanced_gantt_html",
        "_generate_enhanced_flow_html",
        "get_timeline_summary",
        "_calculate_event_statistics",
        "_calculate_timeline_span",
        "_calculate_status_distribution",
        "shutdown",
        "tools.documentation_updater",
        "Classes",
        "DocumentationGenerator",
        "__init__",
        "scan_python_modules",
        "_extract_module_info",
        "_extract_class_info",
        "_extract_function_info",
        "_extract_import_info",
        "generate_api_reference",
        "_generate_module_documentation",
        "_generate_class_documentation",
        "_generate_function_documentation",
        "generate_method_index",
        "_build_signature",
        "generate_deployment_guide",
        "generate_integration_patterns",
        "generate_troubleshooting_guide",
        "update_all_documentation",
        "tools.workspace_cleaner_clean",
        "Classes",
        "WorkspaceCleaner",
        "__init__",
        "run_cleanup",
        "_create_backup",
        "_remove_obsolete_files",
        "_create_fresh_directories",
        "_verify_consolidated_components",
        "_create_essential_configs",
        "_generate_fresh_documentation",
        "_verify_baseline_integrity",
        "_generate_cleanup_report",
        "tools.workspace_cleaner_v2",
        "Classes",
        "CleanupRule",
        "CleanupResult",
        "WorkspaceCleanerV2",
        "__init__",
        "add_cleanup_rule",
        "add_standard_rules",
        "save_configuration",
        "load_configuration",
        "execute_cleanup",
        "_create_backup",
        "_execute_single_rule",
        "_update_rule_metrics",
        "generate_report"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 6142,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:39:58.809620",
      "checksum": "45737687a6bbf058b44e746e16a74999",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/docs/delta_compression.md": {
      "name": ".restructuring_backup/docs/delta_compression.md",
      "path": ".restructuring_backup/docs/delta_compression.md",
      "component_type": "documentation",
      "description": "Delta Compression Module Documentation",
      "dependencies": [],
      "exports": [
        "Delta Compression Module Documentation",
        "Overview",
        "Key Components",
        "DeltaRecord",
        "DeltaRecord Methods",
        "DeltaCompressor",
        "DeltaCompressor Methods",
        "DeltaChain",
        "DeltaChain Methods",
        "Strategy Options",
        "Usage Examples",
        "Basic Usage",
        "Create a delta compressor",
        "Calculate delta between states",
        "Apply delta to reconstruct state",
        "Using DeltaChain for State History",
        "Create a delta chain",
        "Add states",
        "Get state history",
        "Optimize chain",
        "Performance Considerations",
        "Integration with Other Modules"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 103,
      "complexity_score": 0,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "3d45372c4ef8886648c289547ab5ab84",
      "framework_role": "general_utility",
      "stability": "stable"
    },
    ".restructuring_backup/docs/deployment_guide.md": {
      "name": ".restructuring_backup/docs/deployment_guide.md",
      "path": ".restructuring_backup/docs/deployment_guide.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Deployment Guide",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Deployment Guide",
        "System Requirements",
        "Minimum Requirements",
        "Supported Platforms",
        "Installation",
        "Quick Start",
        "Clone the repository",
        "Create virtual environment",
        "Install dependencies",
        "Start the server",
        "Configuration Options",
        "Environment Variables",
        "Docker Deployment",
        "Using Docker Compose",
        "Production Deployment",
        "Security Considerations",
        "Performance Optimization"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 62,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:39:58.825620",
      "checksum": "5b745af11603bb791e191440fc091aef",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/docs/getting_started.md": {
      "name": ".restructuring_backup/docs/getting_started.md",
      "path": ".restructuring_backup/docs/getting_started.md",
      "component_type": "documentation",
      "description": "Getting Started with IAF0 Framework",
      "dependencies": [],
      "exports": [
        "Getting Started with IAF0 Framework",
        "Quick Start",
        "1. Context System Usage",
        "Create context instance",
        "Store and retrieve data",
        "Track changes",
        "2. Scriptlet Development",
        "3. Analysis Framework",
        "Configure analysis",
        "Run analysis",
        "Testing",
        "Development Tools",
        "Format code",
        "Run compliance check",
        "Update documentation"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 48,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:17:36.649843",
      "checksum": "b4364746f4d32f3ba832434d1eee202b",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/docs/integration_patterns.md": {
      "name": ".restructuring_backup/docs/integration_patterns.md",
      "path": ".restructuring_backup/docs/integration_patterns.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Integration Patterns",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Integration Patterns",
        "Python Client Integration",
        "Synchronous Client",
        "Initialize client",
        "Basic operations",
        "File dumping",
        "Asynchronous Client",
        "Run async client",
        "Shell Script Integration",
        "Basic Commands",
        "Set context values",
        "Get context values",
        "List all context",
        "Create context dump",
        "Advanced Shell Integration",
        "Deployment script with context integration",
        "Update deployment context",
        "Perform deployment steps",
        "WebSocket Real-time Integration",
        "Python WebSocket Client",
        "Create WebSocket client",
        "Connect to server",
        "Dashboard Integration",
        "Custom Dash Application",
        "Initialize Dash app with context integration"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 122,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:39:58.825620",
      "checksum": "9df786c703d60915c97d23009ac9c2a1",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/docs/method_index.md": {
      "name": ".restructuring_backup/docs/method_index.md",
      "path": ".restructuring_backup/docs/method_index.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Method Index",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Method Index",
        "_",
        "__call__",
        "__clear",
        "__clear",
        "__clear_and_remove",
        "__contains",
        "__contains",
        "__del__",
        "__del__",
        "__del__",
        "__delete",
        "__delete",
        "__enter__",
        "__enter__",
        "__exit__",
        "__exit__",
        "__get",
        "__get",
        "__get_entry_metadata",
        "__get_keys",
        "__get_keys",
        "__get_stats",
        "__get_stats",
        "__getattr__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__persist",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__set",
        "__set",
        "__str__",
        "_add_arrowhead",
        "_add_flow_edges_to_figure",
        "_add_flow_nodes_to_figure",
        "_analyze_dict_metrics",
        "_analyze_dictionary",
        "_analyze_general_metrics",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_metric_trends",
        "_analyze_numeric_data",
        "_analyze_other",
        "_analyze_performance_metrics",
        "_analyze_sequence",
        "_analyze_sequence_metrics",
        "_analyze_string",
        "_analyze_string_data",
        "_analyze_trends",
        "_assess_data_quality",
        "_assess_dictionary_quality",
        "_assess_quality",
        "_assess_sequence_quality",
        "_assess_string_quality",
        "_attempt_step_execution",
        "_auto_persist_worker",
        "_binary_delta",
        "_build_context_display",
        "_build_context_stats",
        "_build_execution_state",
        "_build_history_timeline",
        "_build_recent_changes",
        "_build_signature",
        "_calculate_event_statistics",
        "_calculate_layout_positions",
        "_calculate_metric_trend",
        "_calculate_multi_period_trends",
        "_calculate_statistics",
        "_calculate_status_distribution",
        "_calculate_system_health",
        "_calculate_timeline_span",
        "_check_alert_conditions",
        "_check_alert_thresholds",
        "_check_dependencies",
        "_check_json_compatibility",
        "_check_method_signatures",
        "_check_state_management",
        "_clean_expired_entries",
        "_clear",
        "_clear",
        "_clear",
        "_clear_and_remove",
        "_collect_context_metrics",
        "_collect_metrics",
        "_collect_performance_data",
        "_compare_with_history",
        "_complete_recipe_execution",
        "_compute_content_hash",
        "_compute_diff",
        "_contains",
        "_contains",
        "_create_backup",
        "_create_backup",
        "_create_console_handler",
        "_create_delta_snapshot",
        "_create_enhanced_summary",
        "_create_essential_configs",
        "_create_file_handler",
        "_create_fresh_directories",
        "_create_json_timeline",
        "_create_logger",
        "_create_matplotlib_timeline",
        "_create_plotly_timeline",
        "_create_snapshot",
        "_default_key_func",
        "_delete",
        "_delete",
        "_delete",
        "_detect_capabilities",
        "_detect_patterns",
        "_dict_delta",
        "_enforce_snapshot_limit",
        "_estimate_memory_usage",
        "_estimate_size",
        "_evict_entries",
        "_evict_memory",
        "_execute_callbacks",
        "_execute_hooks",
        "_execute_recipe_steps",
        "_execute_single_rule",
        "_execute_single_step",
        "_execution_context",
        "_export_data",
        "_extract_class_info",
        "_extract_function_info",
        "_extract_import_info",
        "_extract_metadata",
        "_extract_module_info",
        "_extract_result_data",
        "_finalize_context",
        "_flush_to_db",
        "_flush_to_disk",
        "_generate_alerts_html",
        "_generate_class_documentation",
        "_generate_cleanup_report",
        "_generate_context_recommendations",
        "_generate_dashboard_html",
        "_generate_enhanced_flow_html",
        "_generate_enhanced_gantt_html",
        "_generate_fresh_documentation",
        "_generate_function_documentation",
        "_generate_metadata_html",
        "_generate_metrics_recommendations",
        "_generate_metrics_summary_html",
        "_generate_module_documentation",
        "_generate_performance_report_html",
        "_generate_trend_recommendations",
        "_generate_version_id",
        "_get",
        "_get",
        "_get",
        "_get_color_map",
        "_get_default_style",
        "_get_default_style",
        "_get_disconnected_state",
        "_get_entry_metadata",
        "_get_error_state",
        "_get_keys",
        "_get_keys",
        "_get_recent_metric_data",
        "_get_stats",
        "_get_stats",
        "_get_status_color",
        "_group_events_by_field",
        "_handle_completion",
        "_handle_error",
        "_has_changes_since_last_snapshot",
        "_import_data",
        "_init_database",
        "_init_db",
        "_initialize_context",
        "_initialize_context_keys",
        "_initialize_default_thresholds",
        "_initialize_storage",
        "_load",
        "_load_cache",
        "_load_current_state",
        "_load_data_from_file",
        "_load_from_persistence",
        "_load_recipe",
        "_load_registry",
        "_make_request",
        "_message_cleanup_worker",
        "_optimize_chain",
        "_parse_steps",
        "_percentile",
        "_persist",
        "_publish_event",
        "_remove_obsolete_files",
        "_restore_snapshot",
        "_restore_snapshot_by_tag",
        "_run_hooks",
        "_save",
        "_save_data_to_file",
        "_save_registry",
        "_schedule_auto_persist",
        "_schedule_auto_snapshot",
        "_select_eviction_candidate",
        "_set",
        "_set",
        "_set",
        "_setup_callbacks",
        "_setup_default_validators",
        "_setup_layout",
        "_setup_routes",
        "_setup_socketio_handlers",
        "_setup_websocket_handlers",
        "_start_background_tasks",
        "_start_monitoring",
        "_store_metrics_in_context",
        "_store_summary_in_context",
        "_summarize_metric_trends",
        "_take_performance_snapshot",
        "_track_analysis_trends",
        "_trigger_alert",
        "_update_aggregated_metrics",
        "_update_performance_metrics",
        "_update_rule_metrics",
        "_validate_config",
        "_validate_dependency_graph",
        "_validate_json_serializable",
        "_validate_json_serializable",
        "_validate_json_serializable",
        "_validate_module_imports",
        "_validate_recipe_structure",
        "_validate_required_fields",
        "_validate_step_indices",
        "_validate_step_structure",
        "_verify_baseline_integrity",
        "_verify_consolidated_components",
        "_with_lock",
        "_with_lock",
        "_write_csv_dump",
        "_write_json_dump",
        "_write_pretty_dump",
        "_write_text_dump",
        "A",
        "access",
        "add_cleanup_rule",
        "add_context_key_accessed",
        "add_context_key_created",
        "add_delta",
        "add_dependency",
        "add_dependency_failed",
        "add_dependency_resolved",
        "add_error",
        "add_global_error",
        "add_global_warning",
        "add_hook",
        "add_metric",
        "add_pattern",
        "add_scriptlet",
        "add_standard_rules",
        "add_state",
        "add_statistic",
        "add_step_result",
        "add_task",
        "add_validator",
        "add_validator",
        "add_warning",
        "age_seconds",
        "all_policies",
        "analyze",
        "analyze",
        "apply_delta",
        "apply_patch",
        "B",
        "backup",
        "backup",
        "backup",
        "backup",
        "C",
        "calculate_delta",
        "cancel_execution",
        "check_and_flush",
        "check_paradigm",
        "cleanup",
        "cleanup",
        "cleanup_graphs",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear_all",
        "clear_cache",
        "clear_cache",
        "clear_chain",
        "clear_history",
        "clear_registry",
        "commit",
        "compare_snapshots",
        "compare_snapshots",
        "contains",
        "contains",
        "create_analyzer",
        "create_analyzer_chain",
        "create_delta_record",
        "create_delta_snapshot",
        "create_delta_snapshot",
        "create_dependency_flow",
        "create_enhanced_pipeline",
        "create_execution_timeline",
        "create_gantt_timeline",
        "create_realtime_dashboard",
        "create_recipe_execution_graph",
        "create_snapshot",
        "create_snapshot",
        "critical",
        "D",
        "debug",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete_file",
        "delete_snapshot",
        "deserialize_delta",
        "detect_format",
        "download_dump",
        "dump_context",
        "duration",
        "E",
        "end_operation",
        "error",
        "error_count",
        "execute",
        "execute_all",
        "execute_cleanup",
        "execution_duration",
        "execution_time_seconds",
        "exists",
        "exists",
        "exists",
        "export_all_graphs",
        "export_data",
        "export_performance_report",
        "export_snapshot",
        "F",
        "fetch_snapshot",
        "flush",
        "flush",
        "format",
        "from_dict",
        "from_dict",
        "from_dict",
        "from_dict",
        "from_dict",
        "from_dict",
        "from_json",
        "G",
        "generate_api_reference",
        "generate_deployment_guide",
        "generate_integration_patterns",
        "generate_method_index",
        "generate_report",
        "generate_troubleshooting_guide",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get_age",
        "get_analyzer",
        "get_analyzer_info",
        "get_available_analyzers",
        "get_available_graphs",
        "get_average_load_time",
        "get_average_save_time",
        "get_cache_hit_ratio",
        "get_cached_analyzers",
        "get_capabilities",
        "get_category",
        "get_category",
        "get_chain_metrics",
        "get_completion_percentage",
        "get_compression_stats",
        "get_current_state",
        "get_dashboard_status",
        "get_delta_at_index",
        "get_delta_snapshot",
        "get_duration",
        "get_duration",
        "get_end_time",
        "get_entry_metadata",
        "get_execution_history",
        "get_execution_statistics",
        "get_execution_summary",
        "get_history",
        "get_history",
        "get_history",
        "get_history",
        "get_idle_time",
        "get_keys",
        "get_keys",
        "get_latest_snapshot",
        "get_logger_stats",
        "get_metadata",
        "get_metrics",
        "get_metrics",
        "get_metrics",
        "get_metrics",
        "get_shared_data",
        "get_snapshot",
        "get_snapshot",
        "get_snapshot_by_tag",
        "get_snapshot_data",
        "get_state_at_index",
        "get_statistics",
        "get_stats",
        "get_stats",
        "get_status",
        "get_step_by_id",
        "get_task_dependencies",
        "get_task_dependents",
        "get_task_order",
        "get_timeline_summary",
        "get_total_duration",
        "get_validation_summary",
        "get_versions",
        "get_versions",
        "H",
        "handle_patch_request",
        "handle_snapshot_request",
        "health_check",
        "I",
        "import_data",
        "import_snapshot",
        "increment_cache_hits",
        "increment_cache_misses",
        "increment_errors",
        "info",
        "is_active",
        "is_executing",
        "is_execution_cancelled",
        "is_expired",
        "is_expired",
        "is_terminal_status",
        "is_valid",
        "K",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "L",
        "list_all",
        "list_dumps",
        "list_files",
        "list_snapshots",
        "list_snapshots",
        "list_tags",
        "list_versions",
        "load",
        "load",
        "load",
        "load",
        "load",
        "load",
        "load_configuration",
        "load_context",
        "load_context",
        "load_file",
        "load_from_db",
        "load_from_disk",
        "load_latest",
        "log_context_operation",
        "M",
        "merge_deltas",
        "merge_from",
        "O",
        "on",
        "overall_success",
        "overlaps_with",
        "P",
        "parse_recipe",
        "persist",
        "persist",
        "ping",
        "pop_dirty_keys",
        "pop_dirty_keys",
        "publish",
        "push_patch",
        "R",
        "rebaseline",
        "receive_messages",
        "register",
        "register_callback",
        "remove_dependency",
        "remove_hook",
        "remove_task",
        "render_graph",
        "reset",
        "resolve_dependencies",
        "restore",
        "restore",
        "restore",
        "restore",
        "restore_snapshot",
        "restore_snapshot_by_tag",
        "rollback",
        "run",
        "run",
        "run",
        "run",
        "run_cleanup",
        "run_recipe",
        "S",
        "save",
        "save",
        "save",
        "save",
        "save",
        "save",
        "save_configuration",
        "save_context",
        "save_context",
        "scan_python_modules",
        "send_message",
        "serialize_delta",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "share_data",
        "shutdown",
        "shutdown",
        "shutdown",
        "shutdown",
        "shutdown",
        "start_background_flush",
        "start_operation",
        "start_recipe_execution",
        "stop_background_flush",
        "subscribe",
        "success",
        "success_rate",
        "sync",
        "T",
        "tag_snapshot",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_json",
        "U",
        "unregister",
        "unsubscribe",
        "untag_snapshot",
        "update_all_documentation",
        "update_execution_state",
        "update_integrity_info",
        "update_load",
        "update_metrics",
        "update_operation_count",
        "update_operation_stats",
        "update_operation_time",
        "update_save",
        "update_step_status",
        "V",
        "validate",
        "validate",
        "validate",
        "validate_configuration",
        "validate_custom",
        "validate_custom",
        "validate_custom",
        "visualize",
        "W",
        "warning",
        "warning_count"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 5360,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:39:58.825620",
      "checksum": "b8eda4674105703e53cdebbeda222f7b",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/docs/troubleshooting.md": {
      "name": ".restructuring_backup/docs/troubleshooting.md",
      "path": ".restructuring_backup/docs/troubleshooting.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Troubleshooting Guide",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Troubleshooting Guide",
        "Connection Issues",
        "Server Won't Start",
        "Client Connection Refused",
        "Performance Issues",
        "High Memory Usage",
        "Slow Response Times",
        "File Dumping Issues",
        "Dump Directory Permission Error",
        "Invalid Dump Format Error",
        "Client Integration Issues",
        "Python Import Errors",
        "Shell Script Permission Error",
        "Debugging and Logging",
        "Enable Debug Mode",
        "Server debug mode",
        "Client debug mode",
        "Log Analysis",
        "Frequently Asked Questions",
        "Q: Can I run multiple context servers?",
        "Q: How do I backup context data?",
        "Q: Is the context server thread-safe?",
        "Q: What's the maximum context size?"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 124,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:39:58.825620",
      "checksum": "78cd3a3bb94a7ed49eb62db451739c75",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/enhanced_analysis_framework_test_report.json": {
      "name": ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      "path": ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 203,
      "complexity_score": 0,
      "last_modified": "2025-10-04T17:17:40.091895",
      "checksum": "2fa0496664074a9f7227376c6d0a7986",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/examples/README.md": {
      "name": ".restructuring_backup/examples/README.md",
      "path": ".restructuring_backup/examples/README.md",
      "component_type": "documentation",
      "description": "Framework0 Context Server Examples",
      "dependencies": [],
      "exports": [
        "Framework0 Context Server Examples",
        "Quick Start",
        "Example Files",
        "1. `shell_demo.sh`",
        "Run all examples",
        "Run specific example",
        "2. `integration_demo.py`",
        "Run all examples",
        "Run specific example",
        "3. `dash_demo.py`",
        "Start dashboard on default port 8050",
        "Custom configuration",
        "Integration Workflow",
        "Data Flow Example",
        "Environment Variables",
        "Monitoring the System",
        "Next Steps"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 118,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "ec988b62804645164ab219f51a7a135b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/examples/basic_usage.py": {
      "name": ".restructuring_backup/examples/basic_usage.py",
      "path": ".restructuring_backup/examples/basic_usage.py",
      "component_type": "utility",
      "description": "Basic Usage Example - IAF0 Framework Integration",
      "dependencies": [
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md"
      ],
      "exports": [
        "main",
        "__init__",
        "run",
        "_analyze_impl",
        "DataProcessor",
        "CustomAnalyzer"
      ],
      "imports": [
        "sys",
        "os",
        "orchestrator.context.context",
        "scriptlets.framework",
        "src.analysis.framework"
      ],
      "functions": [
        {
          "name": "main",
          "line": 79,
          "args": [],
          "docstring": "Demonstrate integrated usage of IAF0 frameworks.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 25,
          "args": [
            "self"
          ],
          "docstring": "Initialize the processor.",
          "decorators": []
        },
        {
          "name": "run",
          "line": 30,
          "args": [
            "self",
            "input_data"
          ],
          "docstring": "Process input data and store results in context.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 51,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Internal analysis implementation required by base class.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DataProcessor",
          "line": 22,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "Example scriptlet for data processing.",
          "methods": [
            {
              "name": "__init__",
              "line": 25,
              "args": [
                "self"
              ],
              "docstring": "Initialize the processor."
            },
            {
              "name": "run",
              "line": 30,
              "args": [
                "self",
                "input_data"
              ],
              "docstring": "Process input data and store results in context."
            }
          ]
        },
        {
          "name": "CustomAnalyzer",
          "line": 48,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Example analyzer for statistical analysis.",
          "methods": [
            {
              "name": "_analyze_impl",
              "line": 51,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Internal analysis implementation required by base class."
            }
          ]
        }
      ],
      "lines_of_code": 93,
      "complexity_score": 14,
      "last_modified": "2025-10-04T16:23:42.071527",
      "checksum": "6b8100fa83b9e372d96c88d9be90c209",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/examples/dash_demo.py": {
      "name": ".restructuring_backup/examples/dash_demo.py",
      "path": ".restructuring_backup/examples/dash_demo.py",
      "component_type": "utility",
      "description": "Framework0 Context Server - Dash Dashboard Demo",
      "dependencies": [
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "src/dash_demo.py",
        "src/dash_integration.py",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "src/dash_demo.py",
        "src/dash_integration.py",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "main",
        "__init__",
        "setup_layout",
        "setup_callbacks",
        "create_system_metrics_chart",
        "create_config_chart",
        "create_context_table",
        "create_alerts_table",
        "run",
        "update_dashboard",
        "SimpleDashDemo"
      ],
      "imports": [
        "logging",
        "datetime",
        "dash",
        "dash",
        "plotly.graph_objects",
        "src.context_client",
        "argparse"
      ],
      "functions": [
        {
          "name": "main",
          "line": 421,
          "args": [],
          "docstring": "Main entry point for the Dash demo.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 31,
          "args": [
            "self",
            "server_host",
            "server_port"
          ],
          "docstring": "Initialize the Dash demo application.\n\nArgs:\n    server_host: Context server hostname\n    server_port: Context server port number",
          "decorators": []
        },
        {
          "name": "setup_layout",
          "line": 61,
          "args": [
            "self"
          ],
          "docstring": "Set up the dashboard layout with components and styling.",
          "decorators": []
        },
        {
          "name": "setup_callbacks",
          "line": 123,
          "args": [
            "self"
          ],
          "docstring": "Set up Dash callbacks for interactivity and real-time updates.",
          "decorators": []
        },
        {
          "name": "create_system_metrics_chart",
          "line": 199,
          "args": [
            "self",
            "all_data"
          ],
          "docstring": "Create system monitoring metrics chart.",
          "decorators": []
        },
        {
          "name": "create_config_chart",
          "line": 253,
          "args": [
            "self",
            "all_data"
          ],
          "docstring": "Create configuration status overview chart.",
          "decorators": []
        },
        {
          "name": "create_context_table",
          "line": 298,
          "args": [
            "self",
            "all_data"
          ],
          "docstring": "Create a table showing recent context data.",
          "decorators": []
        },
        {
          "name": "create_alerts_table",
          "line": 345,
          "args": [
            "self",
            "all_data"
          ],
          "docstring": "Create a table showing recent alerts.",
          "decorators": []
        },
        {
          "name": "run",
          "line": 410,
          "args": [
            "self",
            "host",
            "port",
            "debug"
          ],
          "docstring": "Run the Dash application.",
          "decorators": []
        },
        {
          "name": "update_dashboard",
          "line": 137,
          "args": [
            "n_intervals",
            "refresh_clicks"
          ],
          "docstring": "Update all dashboard components with latest data.",
          "decorators": [
            "unknown_decorator"
          ]
        }
      ],
      "classes": [
        {
          "name": "SimpleDashDemo",
          "line": 22,
          "bases": [],
          "docstring": "Simple Dash demo application for Framework0 Context Server integration.\n\nThis class creates a basic dashboard that displays context server data\nin real-time with charts, tables, and interactive controls for\nmonitoring system status and configuration values.",
          "methods": [
            {
              "name": "__init__",
              "line": 31,
              "args": [
                "self",
                "server_host",
                "server_port"
              ],
              "docstring": "Initialize the Dash demo application.\n\nArgs:\n    server_host: Context server hostname\n    server_port: Context server port number"
            },
            {
              "name": "setup_layout",
              "line": 61,
              "args": [
                "self"
              ],
              "docstring": "Set up the dashboard layout with components and styling."
            },
            {
              "name": "setup_callbacks",
              "line": 123,
              "args": [
                "self"
              ],
              "docstring": "Set up Dash callbacks for interactivity and real-time updates."
            },
            {
              "name": "create_system_metrics_chart",
              "line": 199,
              "args": [
                "self",
                "all_data"
              ],
              "docstring": "Create system monitoring metrics chart."
            },
            {
              "name": "create_config_chart",
              "line": 253,
              "args": [
                "self",
                "all_data"
              ],
              "docstring": "Create configuration status overview chart."
            },
            {
              "name": "create_context_table",
              "line": 298,
              "args": [
                "self",
                "all_data"
              ],
              "docstring": "Create a table showing recent context data."
            },
            {
              "name": "create_alerts_table",
              "line": 345,
              "args": [
                "self",
                "all_data"
              ],
              "docstring": "Create a table showing recent alerts."
            },
            {
              "name": "run",
              "line": 410,
              "args": [
                "self",
                "host",
                "port",
                "debug"
              ],
              "docstring": "Run the Dash application."
            }
          ]
        }
      ],
      "lines_of_code": 370,
      "complexity_score": 40,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "64ac53eb300309267d37fa32137226ac",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/examples/integration_demo.py": {
      "name": ".restructuring_backup/examples/integration_demo.py",
      "path": ".restructuring_backup/examples/integration_demo.py",
      "component_type": "utility",
      "description": "Framework0 Context Server - Interactive Example Suite",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "main",
        "__init__",
        "check_server_connection",
        "example_basic_operations",
        "example_shell_integration",
        "example_monitoring_simulation",
        "example_configuration_management",
        "show_context_summary",
        "run_all_examples",
        "ExampleSuite"
      ],
      "imports": [
        "asyncio",
        "logging",
        "subprocess",
        "time",
        "datetime",
        "pathlib",
        "src.context_client",
        "argparse"
      ],
      "functions": [
        {
          "name": "main",
          "line": 640,
          "args": [],
          "docstring": "Main entry point for running the example suite.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 30,
          "args": [
            "self",
            "server_host",
            "server_port"
          ],
          "docstring": "Initialize the example suite with server connection details.\n\nArgs:\n    server_host: Context server hostname\n    server_port: Context server port number",
          "decorators": []
        },
        {
          "name": "check_server_connection",
          "line": 54,
          "args": [
            "self"
          ],
          "docstring": "Check if context server is running and accessible.\n\nReturns:\n    True if server is reachable, False otherwise",
          "decorators": []
        },
        {
          "name": "example_basic_operations",
          "line": 67,
          "args": [
            "self"
          ],
          "docstring": "Demonstrate basic context operations (get/set/list).",
          "decorators": []
        },
        {
          "name": "example_shell_integration",
          "line": 119,
          "args": [
            "self"
          ],
          "docstring": "Demonstrate shell script integration using the context.sh client.",
          "decorators": []
        },
        {
          "name": "example_monitoring_simulation",
          "line": 312,
          "args": [
            "self"
          ],
          "docstring": "Simulate a monitoring scenario with multiple data sources.",
          "decorators": []
        },
        {
          "name": "example_configuration_management",
          "line": 427,
          "args": [
            "self"
          ],
          "docstring": "Demonstrate configuration management across services.",
          "decorators": []
        },
        {
          "name": "show_context_summary",
          "line": 529,
          "args": [
            "self"
          ],
          "docstring": "Display a summary of all context data created during examples.",
          "decorators": []
        },
        {
          "name": "run_all_examples",
          "line": 597,
          "args": [
            "self"
          ],
          "docstring": "Run all examples in sequence.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExampleSuite",
          "line": 21,
          "bases": [],
          "docstring": "Interactive example suite demonstrating context server integration.\n\nThis class provides a comprehensive demonstration of how different types\nof applications can share data through the Enhanced Context Server using\nREST API, WebSocket, and shell script interfaces.",
          "methods": [
            {
              "name": "__init__",
              "line": 30,
              "args": [
                "self",
                "server_host",
                "server_port"
              ],
              "docstring": "Initialize the example suite with server connection details.\n\nArgs:\n    server_host: Context server hostname\n    server_port: Context server port number"
            },
            {
              "name": "check_server_connection",
              "line": 54,
              "args": [
                "self"
              ],
              "docstring": "Check if context server is running and accessible.\n\nReturns:\n    True if server is reachable, False otherwise"
            },
            {
              "name": "example_basic_operations",
              "line": 67,
              "args": [
                "self"
              ],
              "docstring": "Demonstrate basic context operations (get/set/list)."
            },
            {
              "name": "example_shell_integration",
              "line": 119,
              "args": [
                "self"
              ],
              "docstring": "Demonstrate shell script integration using the context.sh client."
            },
            {
              "name": "example_monitoring_simulation",
              "line": 312,
              "args": [
                "self"
              ],
              "docstring": "Simulate a monitoring scenario with multiple data sources."
            },
            {
              "name": "example_configuration_management",
              "line": 427,
              "args": [
                "self"
              ],
              "docstring": "Demonstrate configuration management across services."
            },
            {
              "name": "show_context_summary",
              "line": 529,
              "args": [
                "self"
              ],
              "docstring": "Display a summary of all context data created during examples."
            },
            {
              "name": "run_all_examples",
              "line": 597,
              "args": [
                "self"
              ],
              "docstring": "Run all examples in sequence."
            }
          ]
        }
      ],
      "lines_of_code": 548,
      "complexity_score": 55,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "7f63b236f9bef5302d20d721f008a4d2",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/examples/shell_demo.sh": {
      "name": ".restructuring_backup/examples/shell_demo.sh",
      "path": ".restructuring_backup/examples/shell_demo.sh",
      "component_type": "shell_script",
      "description": "Framework0 Context Server - Shell Integration Demo",
      "dependencies": [],
      "exports": [
        "log_info",
        "log_warn",
        "log_error",
        "log_step",
        "log_success",
        "check_server",
        "example_system_monitoring",
        "example_process_monitoring",
        "example_configuration",
        "example_data_pipeline",
        "example_alerting",
        "show_context_summary",
        "main"
      ],
      "imports": [],
      "functions": [
        {
          "name": "log_info",
          "line": 27,
          "type": "shell_function"
        },
        {
          "name": "log_warn",
          "line": 31,
          "type": "shell_function"
        },
        {
          "name": "log_error",
          "line": 35,
          "type": "shell_function"
        },
        {
          "name": "log_step",
          "line": 39,
          "type": "shell_function"
        },
        {
          "name": "log_success",
          "line": 43,
          "type": "shell_function"
        },
        {
          "name": "check_server",
          "line": 48,
          "type": "shell_function"
        },
        {
          "name": "example_system_monitoring",
          "line": 71,
          "type": "shell_function"
        },
        {
          "name": "example_process_monitoring",
          "line": 112,
          "type": "shell_function"
        },
        {
          "name": "example_configuration",
          "line": 148,
          "type": "shell_function"
        },
        {
          "name": "example_data_pipeline",
          "line": 191,
          "type": "shell_function"
        },
        {
          "name": "example_alerting",
          "line": 237,
          "type": "shell_function"
        },
        {
          "name": "show_context_summary",
          "line": 282,
          "type": "shell_function"
        },
        {
          "name": "main",
          "line": 317,
          "type": "shell_function"
        }
      ],
      "classes": [],
      "lines_of_code": 309,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "85542e4779be17ce4555ab486154387b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/integrated_async_performance_demo.json": {
      "name": ".restructuring_backup/integrated_async_performance_demo.json",
      "path": ".restructuring_backup/integrated_async_performance_demo.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 23,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:10:46.189340",
      "checksum": "3e977c50b443140152e3fc0d0befc0f4",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/__init__.py": {
      "name": ".restructuring_backup/orchestrator/__init__.py",
      "path": ".restructuring_backup/orchestrator/__init__.py",
      "component_type": "orchestration",
      "description": "orchestrator/__init__.py",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docker-compose.yml",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [],
      "imports": [
        "context.context",
        "context.memory_bus",
        "context.persistence",
        "context.version_control"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 32,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:23:42.067528",
      "checksum": "b7a8ce005013528ce4571a48f7eaa885",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py": {
      "name": ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      "path": ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      "component_type": "orchestration",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 4,
      "complexity_score": 0,
      "last_modified": "2025-10-03T20:06:47.957118",
      "checksum": "2f766ec4ca25742414a1ae077df960ab",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py": {
      "name": ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      "path": ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      "component_type": "orchestration",
      "description": "Context class for managing JSON-safe, traceable shared state.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "set",
        "get",
        "to_dict",
        "get_history",
        "_validate_json_serializable",
        "clear",
        "keys",
        "__repr__",
        "Context"
      ],
      "imports": [
        "json",
        "copy",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 20,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 26,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 39,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 47,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get_history",
          "line": 53,
          "args": [
            "self",
            "key"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_validate_json_serializable",
          "line": 63,
          "args": [
            "self",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 73,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 79,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 84,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Context",
          "line": 13,
          "bases": [],
          "docstring": "Context class for managing JSON-safe, traceable shared state.\nAll values must be JSON-serializable (primitives, lists, dicts).\nKeys are dotted strings for namespacing (e.g., \"numbers.stats_v1\").",
          "methods": [
            {
              "name": "__init__",
              "line": 20,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 26,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 39,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": ""
            },
            {
              "name": "to_dict",
              "line": 47,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "get_history",
              "line": 53,
              "args": [
                "self",
                "key"
              ],
              "docstring": ""
            },
            {
              "name": "_validate_json_serializable",
              "line": 63,
              "args": [
                "self",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "clear",
              "line": 73,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "keys",
              "line": 79,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "__repr__",
              "line": 84,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 78,
      "complexity_score": 13,
      "last_modified": "2025-10-03T08:24:06.993546",
      "checksum": "f6cd62d33d16fcfb243ffdcea63ea87a",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py": {
      "name": ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "path": ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "component_type": "orchestration",
      "description": "MemoryBus class for in-memory, thread-safe, JSON-serializable caching.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "set",
        "get",
        "clear",
        "keys",
        "_validate_json_serializable",
        "__repr__",
        "MemoryBus"
      ],
      "imports": [
        "json",
        "threading",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 22,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 28,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 38,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 48,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 54,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_validate_json_serializable",
          "line": 60,
          "args": [
            "self",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 69,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MemoryBus",
          "line": 15,
          "bases": [],
          "docstring": "MemoryBus class for in-memory, thread-safe, JSON-serializable caching.\nDesigned for shared access across hosts via the central server.\nValidates all stored values for JSON compatibility.",
          "methods": [
            {
              "name": "__init__",
              "line": 22,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 28,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 38,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": ""
            },
            {
              "name": "clear",
              "line": 48,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "keys",
              "line": 54,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "_validate_json_serializable",
              "line": 60,
              "args": [
                "self",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "__repr__",
              "line": 69,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 66,
      "complexity_score": 14,
      "last_modified": "2025-10-03T08:24:06.993546",
      "checksum": "24df2825ad5111987329515ef2361922",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/context/__init__.py": {
      "name": ".restructuring_backup/orchestrator/context/__init__.py",
      "path": ".restructuring_backup/orchestrator/context/__init__.py",
      "component_type": "orchestration",
      "description": "orchestrator/context/__init__.py",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        "orchestrator/context/__init__.py",
        "orchestrator/context/context.py",
        "orchestrator/context/db_adapter.py",
        "orchestrator/context/memory_bus.py",
        "orchestrator/context/persistence.py",
        "orchestrator/context/version_control.py",
        "orchestrator/context_client.py",
        "orchestrator/enhanced_context_server.py",
        "tests/test_enhanced_context_server.py",
        "tools/context.sh",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        "docs/method_index.md",
        "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        "orchestrator/context/memory_bus.py",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/memory_bus.py",
        "src/debug_enhanced_memory_bus.py",
        "tests/test_enhanced_memory_bus.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context/persistence.py",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence.py",
        "orchestrator/persistence/__init__.py",
        "orchestrator/persistence/cache.py",
        "orchestrator/persistence/core.py",
        "orchestrator/persistence/delta.py",
        "orchestrator/persistence/enhanced.py",
        "orchestrator/persistence/snapshot.py",
        "tests/test_enhanced_persistence.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/src/context_client.py",
        "docker-compose.yml",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context/version_control.py",
        "orchestrator/context_client.py"
      ],
      "exports": [],
      "imports": [
        "context",
        "memory_bus",
        "persistence",
        "version_control"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 12,
      "complexity_score": 0,
      "last_modified": "2025-10-04T14:13:30.549349",
      "checksum": "cd823a6b46d0fb75fdfe39b4f2423f0b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/context/context.py": {
      "name": ".restructuring_backup/orchestrator/context/context.py",
      "path": ".restructuring_backup/orchestrator/context/context.py",
      "component_type": "orchestration",
      "description": "Consolidated IAF0 Context System - Version 2.0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "to_dict",
        "update_operation_count",
        "__init__",
        "get",
        "set",
        "to_dict",
        "to_json",
        "from_json",
        "get_history",
        "pop_dirty_keys",
        "keys",
        "register_callback",
        "get_metrics",
        "clear_history",
        "merge_from",
        "_execute_callbacks",
        "_estimate_memory_usage",
        "__repr__",
        "ContextHistoryEntry",
        "ContextMetrics",
        "Context"
      ],
      "imports": [
        "os",
        "json",
        "copy",
        "time",
        "threading",
        "weakref",
        "typing",
        "pathlib",
        "dataclasses",
        "datetime",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "to_dict",
          "line": 50,
          "args": [
            "self"
          ],
          "docstring": "Convert history entry to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "update_operation_count",
          "line": 80,
          "args": [
            "self",
            "operation_type"
          ],
          "docstring": "Update operation counters based on operation type.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 108,
          "args": [
            "self",
            "enable_history",
            "enable_metrics"
          ],
          "docstring": "Initialize the Context with integrated components.\n\nArgs:\n    enable_history: Whether to track change history (default: True)\n    enable_metrics: Whether to collect performance metrics (default: True)",
          "decorators": []
        },
        {
          "name": "get",
          "line": 156,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Retrieve value for a given dotted key with optional default.\n\nThis method provides thread-safe access to stored values with\ncomprehensive logging and metrics collection.\n\nArgs:\n    key: Dotted string key for hierarchical access\n    default: Value to return if key is not found\n\nReturns:\n    Stored value or default if key doesn't exist",
          "decorators": []
        },
        {
          "name": "set",
          "line": 189,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "Set a context key to a new value with change tracking.\n\nThis method provides comprehensive state management including\nhistory tracking, dirty key management, and event notifications.\n\nArgs:\n    key: Dotted string key for hierarchical organization\n    value: JSON-serializable value to store\n    who: Optional identifier of who made the change\n\nRaises:\n    ValueError: If value is not JSON-serializable\n    TypeError: If key is not a string",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 271,
          "args": [
            "self"
          ],
          "docstring": "Return a deep copy of the complete context data.\n\nProvides safe access to all stored data without risk of\nexternal modification affecting internal state.\n\nReturns:\n    Deep copy of all context data as dictionary",
          "decorators": []
        },
        {
          "name": "to_json",
          "line": 286,
          "args": [
            "self"
          ],
          "docstring": "Convert the entire context data to formatted JSON string.\n\nProvides serialized representation suitable for persistence,\nnetwork transmission, or external system integration.\n\nReturns:\n    Formatted JSON string representation of context data\n\nRaises:\n    ValueError: If context contains non-JSON-serializable data",
          "decorators": []
        },
        {
          "name": "from_json",
          "line": 307,
          "args": [
            "cls",
            "json_string"
          ],
          "docstring": "Create a new Context instance from JSON string.\n\nDeserializes JSON data into a new context instance with\noptional configuration for history and metrics tracking.\n\nArgs:\n    json_string: JSON string containing context data\n    **kwargs: Additional arguments for Context initialization\n\nReturns:\n    New Context instance with deserialized data\n\nRaises:\n    ValueError: If JSON string is invalid or contains invalid data",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "get_history",
          "line": 344,
          "args": [
            "self"
          ],
          "docstring": "Retrieve complete change history as list of dictionaries.\n\nProvides access to all tracked changes for debugging,\nauditing, and rollback operations.\n\nReturns:\n    List of history entries as dictionaries",
          "decorators": []
        },
        {
          "name": "pop_dirty_keys",
          "line": 359,
          "args": [
            "self"
          ],
          "docstring": "Return and clear the list of dirty keys.\n\nThis method is essential for efficient persistence operations,\nallowing systems to save only changed data.\n\nReturns:\n    List of keys that have changed since last call",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 380,
          "args": [
            "self"
          ],
          "docstring": "Return list of all current keys in the context.\n\nProvides safe access to key enumeration for iteration\nand introspection purposes.\n\nReturns:\n    List of all keys currently stored in context",
          "decorators": []
        },
        {
          "name": "register_callback",
          "line": 393,
          "args": [
            "self",
            "event",
            "callback"
          ],
          "docstring": "Register a callback function for specific context events.\n\nEnables extensibility through event-driven programming patterns\nfor monitoring, validation, and custom processing.\n\nArgs:\n    event: Event name ('before_set', 'after_set', 'before_get', 'after_get', 'on_dirty')\n    callback: Function to call when event occurs\n\nRaises:\n    ValueError: If event name is not supported",
          "decorators": []
        },
        {
          "name": "get_metrics",
          "line": 417,
          "args": [
            "self"
          ],
          "docstring": "Retrieve current performance metrics.\n\nProvides access to operational statistics for monitoring,\noptimization, and capacity planning.\n\nReturns:\n    Dictionary of current metrics or None if metrics disabled",
          "decorators": []
        },
        {
          "name": "clear_history",
          "line": 448,
          "args": [
            "self"
          ],
          "docstring": "Clear all history entries and return count of cleared entries.\n\nUseful for memory management in long-running applications\nwith extensive change tracking requirements.\n\nReturns:\n    Number of history entries that were cleared",
          "decorators": []
        },
        {
          "name": "merge_from",
          "line": 469,
          "args": [
            "self",
            "other",
            "conflict_strategy",
            "prefix"
          ],
          "docstring": "Merge data from another Context instance with conflict resolution.\n\nProvides distributed Context integration capabilities with\nconfigurable conflict resolution strategies.\n\nArgs:\n    other: Another Context instance to merge from\n    conflict_strategy: How to handle conflicts ('last_wins', 'first_wins', 'error')\n    prefix: Optional prefix to add to keys from other context\n\nRaises:\n    ValueError: If conflict_strategy is not supported or conflicts found with 'error' strategy",
          "decorators": []
        },
        {
          "name": "_execute_callbacks",
          "line": 533,
          "args": [
            "self",
            "event"
          ],
          "docstring": "Execute all registered callbacks for a specific event.\n\nInternal method for triggering event-driven functionality\nwith proper error handling and logging.\n\nArgs:\n    event: Event name to trigger\n    **kwargs: Arguments to pass to callback functions",
          "decorators": []
        },
        {
          "name": "_estimate_memory_usage",
          "line": 552,
          "args": [
            "self"
          ],
          "docstring": "Estimate memory usage of the context data.\n\nProvides approximate memory consumption for monitoring\nand optimization purposes.\n\nReturns:\n    Estimated memory usage in bytes",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 577,
          "args": [
            "self"
          ],
          "docstring": "Provide detailed string representation for debugging.\n\nReturns comprehensive information about context state\nfor development and troubleshooting purposes.\n\nReturns:\n    Detailed string representation of Context instance",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextHistoryEntry",
          "line": 37,
          "bases": [],
          "docstring": "Structured representation of a Context history entry.\nProvides type safety and validation for history tracking.",
          "methods": [
            {
              "name": "to_dict",
              "line": 50,
              "args": [
                "self"
              ],
              "docstring": "Convert history entry to dictionary for serialization."
            }
          ]
        },
        {
          "name": "ContextMetrics",
          "line": 63,
          "bases": [],
          "docstring": "Metrics and statistics for Context operations.\nEnables performance monitoring and optimization.",
          "methods": [
            {
              "name": "update_operation_count",
              "line": 80,
              "args": [
                "self",
                "operation_type"
              ],
              "docstring": "Update operation counters based on operation type."
            }
          ]
        },
        {
          "name": "Context",
          "line": 90,
          "bases": [],
          "docstring": "Consolidated Context system with all functionality in one place.\n\nThis class combines state management, persistence, memory bus integration,\nversion control, and performance monitoring into a single, cohesive system\nthat follows IAF0 framework patterns and maintains backward compatibility.\n\nFeatures:\n- JSON-serializable state management with type safety\n- Comprehensive change history tracking with attribution\n- Dirty key tracking for efficient persistence operations\n- Integrated memory bus for cross-process communication\n- Built-in performance monitoring and metrics collection\n- Thread-safe operations with proper locking mechanisms\n- Extensible callback system for event notifications",
          "methods": [
            {
              "name": "__init__",
              "line": 108,
              "args": [
                "self",
                "enable_history",
                "enable_metrics"
              ],
              "docstring": "Initialize the Context with integrated components.\n\nArgs:\n    enable_history: Whether to track change history (default: True)\n    enable_metrics: Whether to collect performance metrics (default: True)"
            },
            {
              "name": "get",
              "line": 156,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Retrieve value for a given dotted key with optional default.\n\nThis method provides thread-safe access to stored values with\ncomprehensive logging and metrics collection.\n\nArgs:\n    key: Dotted string key for hierarchical access\n    default: Value to return if key is not found\n\nReturns:\n    Stored value or default if key doesn't exist"
            },
            {
              "name": "set",
              "line": 189,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": "Set a context key to a new value with change tracking.\n\nThis method provides comprehensive state management including\nhistory tracking, dirty key management, and event notifications.\n\nArgs:\n    key: Dotted string key for hierarchical organization\n    value: JSON-serializable value to store\n    who: Optional identifier of who made the change\n\nRaises:\n    ValueError: If value is not JSON-serializable\n    TypeError: If key is not a string"
            },
            {
              "name": "to_dict",
              "line": 271,
              "args": [
                "self"
              ],
              "docstring": "Return a deep copy of the complete context data.\n\nProvides safe access to all stored data without risk of\nexternal modification affecting internal state.\n\nReturns:\n    Deep copy of all context data as dictionary"
            },
            {
              "name": "to_json",
              "line": 286,
              "args": [
                "self"
              ],
              "docstring": "Convert the entire context data to formatted JSON string.\n\nProvides serialized representation suitable for persistence,\nnetwork transmission, or external system integration.\n\nReturns:\n    Formatted JSON string representation of context data\n\nRaises:\n    ValueError: If context contains non-JSON-serializable data"
            },
            {
              "name": "from_json",
              "line": 307,
              "args": [
                "cls",
                "json_string"
              ],
              "docstring": "Create a new Context instance from JSON string.\n\nDeserializes JSON data into a new context instance with\noptional configuration for history and metrics tracking.\n\nArgs:\n    json_string: JSON string containing context data\n    **kwargs: Additional arguments for Context initialization\n\nReturns:\n    New Context instance with deserialized data\n\nRaises:\n    ValueError: If JSON string is invalid or contains invalid data"
            },
            {
              "name": "get_history",
              "line": 344,
              "args": [
                "self"
              ],
              "docstring": "Retrieve complete change history as list of dictionaries.\n\nProvides access to all tracked changes for debugging,\nauditing, and rollback operations.\n\nReturns:\n    List of history entries as dictionaries"
            },
            {
              "name": "pop_dirty_keys",
              "line": 359,
              "args": [
                "self"
              ],
              "docstring": "Return and clear the list of dirty keys.\n\nThis method is essential for efficient persistence operations,\nallowing systems to save only changed data.\n\nReturns:\n    List of keys that have changed since last call"
            },
            {
              "name": "keys",
              "line": 380,
              "args": [
                "self"
              ],
              "docstring": "Return list of all current keys in the context.\n\nProvides safe access to key enumeration for iteration\nand introspection purposes.\n\nReturns:\n    List of all keys currently stored in context"
            },
            {
              "name": "register_callback",
              "line": 393,
              "args": [
                "self",
                "event",
                "callback"
              ],
              "docstring": "Register a callback function for specific context events.\n\nEnables extensibility through event-driven programming patterns\nfor monitoring, validation, and custom processing.\n\nArgs:\n    event: Event name ('before_set', 'after_set', 'before_get', 'after_get', 'on_dirty')\n    callback: Function to call when event occurs\n\nRaises:\n    ValueError: If event name is not supported"
            },
            {
              "name": "get_metrics",
              "line": 417,
              "args": [
                "self"
              ],
              "docstring": "Retrieve current performance metrics.\n\nProvides access to operational statistics for monitoring,\noptimization, and capacity planning.\n\nReturns:\n    Dictionary of current metrics or None if metrics disabled"
            },
            {
              "name": "clear_history",
              "line": 448,
              "args": [
                "self"
              ],
              "docstring": "Clear all history entries and return count of cleared entries.\n\nUseful for memory management in long-running applications\nwith extensive change tracking requirements.\n\nReturns:\n    Number of history entries that were cleared"
            },
            {
              "name": "merge_from",
              "line": 469,
              "args": [
                "self",
                "other",
                "conflict_strategy",
                "prefix"
              ],
              "docstring": "Merge data from another Context instance with conflict resolution.\n\nProvides distributed Context integration capabilities with\nconfigurable conflict resolution strategies.\n\nArgs:\n    other: Another Context instance to merge from\n    conflict_strategy: How to handle conflicts ('last_wins', 'first_wins', 'error')\n    prefix: Optional prefix to add to keys from other context\n\nRaises:\n    ValueError: If conflict_strategy is not supported or conflicts found with 'error' strategy"
            },
            {
              "name": "_execute_callbacks",
              "line": 533,
              "args": [
                "self",
                "event"
              ],
              "docstring": "Execute all registered callbacks for a specific event.\n\nInternal method for triggering event-driven functionality\nwith proper error handling and logging.\n\nArgs:\n    event: Event name to trigger\n    **kwargs: Arguments to pass to callback functions"
            },
            {
              "name": "_estimate_memory_usage",
              "line": 552,
              "args": [
                "self"
              ],
              "docstring": "Estimate memory usage of the context data.\n\nProvides approximate memory consumption for monitoring\nand optimization purposes.\n\nReturns:\n    Estimated memory usage in bytes"
            },
            {
              "name": "__repr__",
              "line": 577,
              "args": [
                "self"
              ],
              "docstring": "Provide detailed string representation for debugging.\n\nReturns comprehensive information about context state\nfor development and troubleshooting purposes.\n\nReturns:\n    Detailed string representation of Context instance"
            }
          ]
        }
      ],
      "lines_of_code": 486,
      "complexity_score": 61,
      "last_modified": "2025-10-04T14:13:32.509333",
      "checksum": "b3b79f296185eb5fbb2d2b70e02704da",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/context/db_adapter.py": {
      "name": ".restructuring_backup/orchestrator/context/db_adapter.py",
      "path": ".restructuring_backup/orchestrator/context/db_adapter.py",
      "component_type": "orchestration",
      "description": "Simple DB Adapter - IAF0 Framework Storage Component",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "_init_db",
        "save_context",
        "load_context",
        "get_versions",
        "clear",
        "__repr__",
        "__init__",
        "save_context",
        "load_context",
        "list_files",
        "delete_file",
        "__repr__",
        "DBAdapter",
        "FileAdapter"
      ],
      "imports": [
        "json",
        "sqlite3",
        "os",
        "pathlib",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 17,
          "args": [
            "self",
            "db_path"
          ],
          "docstring": "Initialize database adapter with SQLite backend.",
          "decorators": []
        },
        {
          "name": "_init_db",
          "line": 23,
          "args": [
            "self"
          ],
          "docstring": "Initialize database schema.",
          "decorators": []
        },
        {
          "name": "save_context",
          "line": 37,
          "args": [
            "self",
            "data",
            "mode"
          ],
          "docstring": "Save context data to database.",
          "decorators": []
        },
        {
          "name": "load_context",
          "line": 52,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Load context data from database.",
          "decorators": []
        },
        {
          "name": "get_versions",
          "line": 75,
          "args": [
            "self"
          ],
          "docstring": "Get list of available versions.",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 85,
          "args": [
            "self"
          ],
          "docstring": "Clear all data from database.",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 91,
          "args": [
            "self"
          ],
          "docstring": "String representation of adapter.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 100,
          "args": [
            "self",
            "storage_dir"
          ],
          "docstring": "Initialize file adapter.",
          "decorators": []
        },
        {
          "name": "save_context",
          "line": 105,
          "args": [
            "self",
            "data",
            "filename"
          ],
          "docstring": "Save context data to file.",
          "decorators": []
        },
        {
          "name": "load_context",
          "line": 111,
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Load context data from file.",
          "decorators": []
        },
        {
          "name": "list_files",
          "line": 120,
          "args": [
            "self"
          ],
          "docstring": "List all JSON files in storage directory.",
          "decorators": []
        },
        {
          "name": "delete_file",
          "line": 124,
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Delete a storage file.",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 130,
          "args": [
            "self"
          ],
          "docstring": "String representation of adapter.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DBAdapter",
          "line": 14,
          "bases": [],
          "docstring": "Simple database adapter for context persistence.",
          "methods": [
            {
              "name": "__init__",
              "line": 17,
              "args": [
                "self",
                "db_path"
              ],
              "docstring": "Initialize database adapter with SQLite backend."
            },
            {
              "name": "_init_db",
              "line": 23,
              "args": [
                "self"
              ],
              "docstring": "Initialize database schema."
            },
            {
              "name": "save_context",
              "line": 37,
              "args": [
                "self",
                "data",
                "mode"
              ],
              "docstring": "Save context data to database."
            },
            {
              "name": "load_context",
              "line": 52,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Load context data from database."
            },
            {
              "name": "get_versions",
              "line": 75,
              "args": [
                "self"
              ],
              "docstring": "Get list of available versions."
            },
            {
              "name": "clear",
              "line": 85,
              "args": [
                "self"
              ],
              "docstring": "Clear all data from database."
            },
            {
              "name": "__repr__",
              "line": 91,
              "args": [
                "self"
              ],
              "docstring": "String representation of adapter."
            }
          ]
        },
        {
          "name": "FileAdapter",
          "line": 97,
          "bases": [],
          "docstring": "Simple file-based storage adapter.",
          "methods": [
            {
              "name": "__init__",
              "line": 100,
              "args": [
                "self",
                "storage_dir"
              ],
              "docstring": "Initialize file adapter."
            },
            {
              "name": "save_context",
              "line": 105,
              "args": [
                "self",
                "data",
                "filename"
              ],
              "docstring": "Save context data to file."
            },
            {
              "name": "load_context",
              "line": 111,
              "args": [
                "self",
                "filename"
              ],
              "docstring": "Load context data from file."
            },
            {
              "name": "list_files",
              "line": 120,
              "args": [
                "self"
              ],
              "docstring": "List all JSON files in storage directory."
            },
            {
              "name": "delete_file",
              "line": 124,
              "args": [
                "self",
                "filename"
              ],
              "docstring": "Delete a storage file."
            },
            {
              "name": "__repr__",
              "line": 130,
              "args": [
                "self"
              ],
              "docstring": "String representation of adapter."
            }
          ]
        }
      ],
      "lines_of_code": 110,
      "complexity_score": 30,
      "last_modified": "2025-10-04T16:23:42.067528",
      "checksum": "7b8bc148f2837d5b2c048108a16bb244",
      "framework_role": "context_system",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/context/memory_bus.py": {
      "name": ".restructuring_backup/orchestrator/context/memory_bus.py",
      "path": ".restructuring_backup/orchestrator/context/memory_bus.py",
      "component_type": "orchestration",
      "description": "MemoryBus class for in-memory, thread-safe, JSON-serializable caching.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "set",
        "get",
        "clear",
        "keys",
        "_validate_json_serializable",
        "__repr__",
        "MemoryBus"
      ],
      "imports": [
        "json",
        "threading",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 27,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 37,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 49,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 61,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 67,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_validate_json_serializable",
          "line": 73,
          "args": [
            "self",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 84,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MemoryBus",
          "line": 20,
          "bases": [],
          "docstring": "MemoryBus class for in-memory, thread-safe, JSON-serializable caching.\nDesigned for shared access across hosts via the central server.\nValidates all stored values for JSON compatibility.",
          "methods": [
            {
              "name": "__init__",
              "line": 27,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 37,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 49,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": ""
            },
            {
              "name": "clear",
              "line": 61,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "keys",
              "line": 67,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "_validate_json_serializable",
              "line": 73,
              "args": [
                "self",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "__repr__",
              "line": 84,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 80,
      "complexity_score": 14,
      "last_modified": "2025-10-04T14:13:30.833347",
      "checksum": "b95ac4135cb717ad82c8aab2aaa3a853",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/context/persistence.py": {
      "name": ".restructuring_backup/orchestrator/context/persistence.py",
      "path": ".restructuring_backup/orchestrator/context/persistence.py",
      "component_type": "orchestration",
      "description": "Persistence class for flushing context data to disk or DB with compression.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        "docs/method_index.md",
        "orchestrator/context/db_adapter.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docker-compose.yml",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "flush",
        "check_and_flush",
        "load_from_disk",
        "load_from_db",
        "_flush_to_disk",
        "_flush_to_db",
        "_compute_diff",
        "__repr__",
        "Persistence"
      ],
      "imports": [
        "gzip",
        "json",
        "os",
        "time",
        "typing",
        "orchestrator.context.context",
        "db_adapter",
        "orchestrator.context.version_control"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 39,
          "args": [
            "self",
            "context",
            "db_adapter",
            "flush_interval",
            "flush_dir"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "flush",
          "line": 66,
          "args": [
            "self",
            "mode",
            "compress"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "check_and_flush",
          "line": 102,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "load_from_disk",
          "line": 111,
          "args": [
            "self",
            "file_name"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "load_from_db",
          "line": 135,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_flush_to_disk",
          "line": 153,
          "args": [
            "self",
            "data",
            "compress"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_flush_to_db",
          "line": 173,
          "args": [
            "self",
            "data",
            "mode"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_compute_diff",
          "line": 183,
          "args": [
            "self",
            "current_data"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 198,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Persistence",
          "line": 32,
          "bases": [],
          "docstring": "Persistence class for flushing context data to disk or DB with compression.\nSupports interval, diff-only, and on-demand modes.\nIntegrates with DBAdapter for persistent storage and VersionControl for versioning.",
          "methods": [
            {
              "name": "__init__",
              "line": 39,
              "args": [
                "self",
                "context",
                "db_adapter",
                "flush_interval",
                "flush_dir"
              ],
              "docstring": ""
            },
            {
              "name": "flush",
              "line": 66,
              "args": [
                "self",
                "mode",
                "compress"
              ],
              "docstring": ""
            },
            {
              "name": "check_and_flush",
              "line": 102,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "load_from_disk",
              "line": 111,
              "args": [
                "self",
                "file_name"
              ],
              "docstring": ""
            },
            {
              "name": "load_from_db",
              "line": 135,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": ""
            },
            {
              "name": "_flush_to_disk",
              "line": 153,
              "args": [
                "self",
                "data",
                "compress"
              ],
              "docstring": ""
            },
            {
              "name": "_flush_to_db",
              "line": 173,
              "args": [
                "self",
                "data",
                "mode"
              ],
              "docstring": ""
            },
            {
              "name": "_compute_diff",
              "line": 183,
              "args": [
                "self",
                "current_data"
              ],
              "docstring": ""
            },
            {
              "name": "__repr__",
              "line": 198,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 184,
      "complexity_score": 26,
      "last_modified": "2025-10-04T16:23:42.067528",
      "checksum": "3493873741fa053e4dec44daabf4a91d",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/context/version_control.py": {
      "name": ".restructuring_backup/orchestrator/context/version_control.py",
      "path": ".restructuring_backup/orchestrator/context/version_control.py",
      "component_type": "orchestration",
      "description": "Simplified VersionControl class that provides basic versioning without database dependencies.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "commit",
        "rollback",
        "get_versions",
        "_generate_version_id",
        "__repr__",
        "VersionControl"
      ],
      "imports": [
        "datetime",
        "json",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 16,
          "args": [
            "self",
            "db_adapter"
          ],
          "docstring": "Initialize the VersionControl instance.\n\nArgs:\n    db_adapter: Optional database adapter (unused in stub)",
          "decorators": []
        },
        {
          "name": "commit",
          "line": 26,
          "args": [
            "self",
            "context",
            "version_id",
            "parent_version"
          ],
          "docstring": "Commit the current context state as a new version.\n\nArgs:\n    context: The Context object to version\n    version_id: Optional custom version ID\n    parent_version: Optional parent version ID\n\nReturns:\n    The committed version_id",
          "decorators": []
        },
        {
          "name": "rollback",
          "line": 59,
          "args": [
            "self",
            "version_id",
            "context"
          ],
          "docstring": "Rollback the context to a previous version (stub implementation).\n\nArgs:\n    version_id: The version ID to rollback to\n    context: The Context object to update",
          "decorators": []
        },
        {
          "name": "get_versions",
          "line": 69,
          "args": [
            "self",
            "limit"
          ],
          "docstring": "Get a list of recent versions.\n\nArgs:\n    limit: Number of versions to return\n\nReturns:\n    List of version metadata",
          "decorators": []
        },
        {
          "name": "_generate_version_id",
          "line": 81,
          "args": [
            "self"
          ],
          "docstring": "Generate a unique version ID.",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "String representation for debugging.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "VersionControl",
          "line": 10,
          "bases": [],
          "docstring": "Simplified VersionControl class that provides basic versioning without database dependencies.\nThis is a stub implementation for compatibility with the persistence module.",
          "methods": [
            {
              "name": "__init__",
              "line": 16,
              "args": [
                "self",
                "db_adapter"
              ],
              "docstring": "Initialize the VersionControl instance.\n\nArgs:\n    db_adapter: Optional database adapter (unused in stub)"
            },
            {
              "name": "commit",
              "line": 26,
              "args": [
                "self",
                "context",
                "version_id",
                "parent_version"
              ],
              "docstring": "Commit the current context state as a new version.\n\nArgs:\n    context: The Context object to version\n    version_id: Optional custom version ID\n    parent_version: Optional parent version ID\n\nReturns:\n    The committed version_id"
            },
            {
              "name": "rollback",
              "line": 59,
              "args": [
                "self",
                "version_id",
                "context"
              ],
              "docstring": "Rollback the context to a previous version (stub implementation).\n\nArgs:\n    version_id: The version ID to rollback to\n    context: The Context object to update"
            },
            {
              "name": "get_versions",
              "line": 69,
              "args": [
                "self",
                "limit"
              ],
              "docstring": "Get a list of recent versions.\n\nArgs:\n    limit: Number of versions to return\n\nReturns:\n    List of version metadata"
            },
            {
              "name": "_generate_version_id",
              "line": 81,
              "args": [
                "self"
              ],
              "docstring": "Generate a unique version ID."
            },
            {
              "name": "__repr__",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": "String representation for debugging."
            }
          ]
        }
      ],
      "lines_of_code": 71,
      "complexity_score": 9,
      "last_modified": "2025-10-04T14:13:31.081345",
      "checksum": "af4d743e457097383f139f7cd85dc15d",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/dependency_graph.py": {
      "name": ".restructuring_backup/orchestrator/dependency_graph.py",
      "path": ".restructuring_backup/orchestrator/dependency_graph.py",
      "component_type": "orchestration",
      "description": "A class to represent a directed acyclic graph (DAG) of tasks and their dependencies.",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "add_task",
        "get_task_order",
        "get_task_dependencies",
        "get_task_dependents",
        "remove_task",
        "visualize",
        "DependencyGraph"
      ],
      "imports": [
        "networkx",
        "typing",
        "matplotlib.pyplot"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 15,
          "args": [
            "self"
          ],
          "docstring": "Initializes an empty directed graph.",
          "decorators": []
        },
        {
          "name": "add_task",
          "line": 21,
          "args": [
            "self",
            "task_name",
            "dependencies"
          ],
          "docstring": "Adds a task to the graph with its dependencies.\n\nArgs:\n    task_name (str): The name of the task.\n    dependencies (List[str], optional): A list of task names that this task depends on. Defaults to [].",
          "decorators": []
        },
        {
          "name": "get_task_order",
          "line": 36,
          "args": [
            "self"
          ],
          "docstring": "Returns a list of tasks in the order they should be executed,\nrespecting their dependencies.\n\nReturns:\n    List[str]: A list of task names in execution order.",
          "decorators": []
        },
        {
          "name": "get_task_dependencies",
          "line": 47,
          "args": [
            "self",
            "task_name"
          ],
          "docstring": "Returns a list of tasks that the given task depends on.\n\nArgs:\n    task_name (str): The name of the task.\n\nReturns:\n    List[str]: A list of task names that the given task depends on.",
          "decorators": []
        },
        {
          "name": "get_task_dependents",
          "line": 60,
          "args": [
            "self",
            "task_name"
          ],
          "docstring": "Returns a list of tasks that depend on the given task.\n\nArgs:\n    task_name (str): The name of the task.\n\nReturns:\n    List[str]: A list of task names that depend on the given task.",
          "decorators": []
        },
        {
          "name": "remove_task",
          "line": 73,
          "args": [
            "self",
            "task_name"
          ],
          "docstring": "Removes a task and all its dependencies from the graph.\n\nArgs:\n    task_name (str): The name of the task to remove.",
          "decorators": []
        },
        {
          "name": "visualize",
          "line": 83,
          "args": [
            "self"
          ],
          "docstring": "Visualizes the dependency graph using matplotlib.\n\nNote:\n    Requires matplotlib to be installed.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DependencyGraph",
          "line": 7,
          "bases": [],
          "docstring": "A class to represent a directed acyclic graph (DAG) of tasks and their dependencies.\n\nAttributes:\n    graph (networkx.DiGraph): A directed graph to store tasks and their dependencies.",
          "methods": [
            {
              "name": "__init__",
              "line": 15,
              "args": [
                "self"
              ],
              "docstring": "Initializes an empty directed graph."
            },
            {
              "name": "add_task",
              "line": 21,
              "args": [
                "self",
                "task_name",
                "dependencies"
              ],
              "docstring": "Adds a task to the graph with its dependencies.\n\nArgs:\n    task_name (str): The name of the task.\n    dependencies (List[str], optional): A list of task names that this task depends on. Defaults to []."
            },
            {
              "name": "get_task_order",
              "line": 36,
              "args": [
                "self"
              ],
              "docstring": "Returns a list of tasks in the order they should be executed,\nrespecting their dependencies.\n\nReturns:\n    List[str]: A list of task names in execution order."
            },
            {
              "name": "get_task_dependencies",
              "line": 47,
              "args": [
                "self",
                "task_name"
              ],
              "docstring": "Returns a list of tasks that the given task depends on.\n\nArgs:\n    task_name (str): The name of the task.\n\nReturns:\n    List[str]: A list of task names that the given task depends on."
            },
            {
              "name": "get_task_dependents",
              "line": 60,
              "args": [
                "self",
                "task_name"
              ],
              "docstring": "Returns a list of tasks that depend on the given task.\n\nArgs:\n    task_name (str): The name of the task.\n\nReturns:\n    List[str]: A list of task names that depend on the given task."
            },
            {
              "name": "remove_task",
              "line": 73,
              "args": [
                "self",
                "task_name"
              ],
              "docstring": "Removes a task and all its dependencies from the graph.\n\nArgs:\n    task_name (str): The name of the task to remove."
            },
            {
              "name": "visualize",
              "line": 83,
              "args": [
                "self"
              ],
              "docstring": "Visualizes the dependency graph using matplotlib.\n\nNote:\n    Requires matplotlib to be installed."
            }
          ]
        }
      ],
      "lines_of_code": 80,
      "complexity_score": 11,
      "last_modified": "2025-10-04T14:13:31.285343",
      "checksum": "3b0ea18f8ce14ffbc7cdaafd9fa4d0a1",
      "framework_role": "dependency_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/enhanced_memory_bus.py": {
      "name": ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      "path": ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      "component_type": "orchestration",
      "description": "Enhanced Memory Bus System with Advanced Features",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py"
      ],
      "exports": [
        "create_json_memory_bus",
        "create_sqlite_memory_bus",
        "create_memory_only_bus",
        "update_operation_stats",
        "to_dict",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "__init__",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "__init__",
        "_init_database",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "is_expired",
        "to_dict",
        "from_dict",
        "__init__",
        "_load_from_persistence",
        "_start_background_tasks",
        "_auto_persist_worker",
        "_message_cleanup_worker",
        "get",
        "set",
        "delete",
        "keys",
        "clear",
        "persist",
        "backup",
        "restore",
        "subscribe",
        "unsubscribe",
        "publish",
        "_publish_event",
        "get_metrics",
        "health_check",
        "shutdown",
        "__enter__",
        "__exit__",
        "MemoryBusMetrics",
        "PersistenceBackend",
        "JSONPersistenceBackend",
        "SQLitePersistenceBackend",
        "MessageEvent",
        "EnhancedMemoryBus"
      ],
      "imports": [
        "os",
        "json",
        "sqlite3",
        "pickle",
        "asyncio",
        "threading",
        "time",
        "weakref",
        "hashlib",
        "typing",
        "dataclasses",
        "datetime",
        "pathlib",
        "abc",
        "contextlib",
        "collections",
        "uuid",
        "src.core.logger",
        "orchestrator.context.context",
        "orchestrator.context.memory_bus",
        "sys",
        "shutil",
        "shutil",
        "shutil",
        "shutil"
      ],
      "functions": [
        {
          "name": "create_json_memory_bus",
          "line": 1066,
          "args": [
            "file_path"
          ],
          "docstring": "Create memory bus with JSON persistence backend.",
          "decorators": []
        },
        {
          "name": "create_sqlite_memory_bus",
          "line": 1075,
          "args": [
            "db_path"
          ],
          "docstring": "Create memory bus with SQLite persistence backend.",
          "decorators": []
        },
        {
          "name": "create_memory_only_bus",
          "line": 1084,
          "args": [],
          "docstring": "Create memory bus without persistence (for testing).",
          "decorators": []
        },
        {
          "name": "update_operation_stats",
          "line": 80,
          "args": [
            "self",
            "operation_type",
            "response_time"
          ],
          "docstring": "Update operation statistics with new data point.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 103,
          "args": [
            "self"
          ],
          "docstring": "Convert metrics to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 134,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to persistent storage.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "load",
          "line": 139,
          "args": [
            "self"
          ],
          "docstring": "Load data from persistent storage.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "delete",
          "line": 144,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete specific key from storage.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "exists",
          "line": 149,
          "args": [
            "self"
          ],
          "docstring": "Check if storage exists.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "backup",
          "line": 154,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Create backup of storage.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "restore",
          "line": 159,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Restore from backup.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "__init__",
          "line": 172,
          "args": [
            "self",
            "file_path",
            "enable_compression"
          ],
          "docstring": "Initialize JSON persistence backend.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 183,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to JSON file.",
          "decorators": []
        },
        {
          "name": "load",
          "line": 206,
          "args": [
            "self"
          ],
          "docstring": "Load data from JSON file.",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 222,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete specific key from JSON storage.",
          "decorators": []
        },
        {
          "name": "exists",
          "line": 235,
          "args": [
            "self"
          ],
          "docstring": "Check if JSON file exists.",
          "decorators": []
        },
        {
          "name": "backup",
          "line": 239,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Create backup of JSON file.",
          "decorators": []
        },
        {
          "name": "restore",
          "line": 256,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Restore from JSON backup.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 280,
          "args": [
            "self",
            "db_path",
            "table_name"
          ],
          "docstring": "Initialize SQLite persistence backend.",
          "decorators": []
        },
        {
          "name": "_init_database",
          "line": 294,
          "args": [
            "self"
          ],
          "docstring": "Initialize SQLite database and create table.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 317,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to SQLite database.",
          "decorators": []
        },
        {
          "name": "load",
          "line": 342,
          "args": [
            "self"
          ],
          "docstring": "Load data from SQLite database.",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 363,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete specific key from SQLite storage.",
          "decorators": []
        },
        {
          "name": "exists",
          "line": 377,
          "args": [
            "self"
          ],
          "docstring": "Check if SQLite database exists.",
          "decorators": []
        },
        {
          "name": "backup",
          "line": 381,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Create backup of SQLite database.",
          "decorators": []
        },
        {
          "name": "restore",
          "line": 396,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Restore from SQLite backup.",
          "decorators": []
        },
        {
          "name": "is_expired",
          "line": 430,
          "args": [
            "self"
          ],
          "docstring": "Check if event has expired.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 434,
          "args": [
            "self"
          ],
          "docstring": "Convert event to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 448,
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create event from dictionary.",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "__init__",
          "line": 488,
          "args": [
            "self",
            "persistence_backend",
            "context",
            "enable_messaging",
            "enable_persistence",
            "auto_persist_interval"
          ],
          "docstring": "Initialize enhanced memory bus with advanced features.\n\nArgs:\n    persistence_backend: Backend for persistent storage\n    context: Context instance for integration (creates if None)\n    enable_messaging: Whether to enable messaging capabilities\n    enable_persistence: Whether to enable persistence\n    auto_persist_interval: Auto-persistence interval in seconds",
          "decorators": []
        },
        {
          "name": "_load_from_persistence",
          "line": 546,
          "args": [
            "self"
          ],
          "docstring": "Load data from persistence backend.",
          "decorators": []
        },
        {
          "name": "_start_background_tasks",
          "line": 561,
          "args": [
            "self"
          ],
          "docstring": "Start background tasks for auto-persistence and cleanup.",
          "decorators": []
        },
        {
          "name": "_auto_persist_worker",
          "line": 581,
          "args": [
            "self"
          ],
          "docstring": "Background worker for automatic persistence.",
          "decorators": []
        },
        {
          "name": "_message_cleanup_worker",
          "line": 598,
          "args": [
            "self"
          ],
          "docstring": "Background worker for cleaning up expired messages.",
          "decorators": []
        },
        {
          "name": "get",
          "line": 613,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get value from memory bus with performance tracking.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key not found\n    \nReturns:\n    Retrieved value or default",
          "decorators": []
        },
        {
          "name": "set",
          "line": 662,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "Set value in memory bus with persistence and Context integration.\n\nArgs:\n    key: Key to set\n    value: Value to store\n    who: Who is setting this value (for Context tracking)\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 714,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete key from memory bus and persistence.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 767,
          "args": [
            "self"
          ],
          "docstring": "Get list of all keys in memory bus.",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 772,
          "args": [
            "self"
          ],
          "docstring": "Clear all data from memory bus.",
          "decorators": []
        },
        {
          "name": "persist",
          "line": 786,
          "args": [
            "self"
          ],
          "docstring": "Manually trigger persistence of current data.\n\nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "backup",
          "line": 812,
          "args": [
            "self",
            "backup_name"
          ],
          "docstring": "Create backup of current data.\n\nArgs:\n    backup_name: Name for backup (uses timestamp if None)\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "restore",
          "line": 846,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Restore data from backup.\n\nArgs:\n    backup_path: Path to backup file\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "subscribe",
          "line": 886,
          "args": [
            "self",
            "event_type",
            "callback"
          ],
          "docstring": "Subscribe to events of specific type.\n\nArgs:\n    event_type: Type of events to subscribe to\n    callback: Function to call when event occurs\n    \nReturns:\n    Subscription ID for unsubscribing",
          "decorators": []
        },
        {
          "name": "unsubscribe",
          "line": 909,
          "args": [
            "self",
            "event_type",
            "callback"
          ],
          "docstring": "Unsubscribe from events.\n\nArgs:\n    event_type: Type of events to unsubscribe from\n    callback: Callback function to remove\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "publish",
          "line": 935,
          "args": [
            "self",
            "event"
          ],
          "docstring": "Publish event to subscribers.\n\nArgs:\n    event: Event to publish\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "_publish_event",
          "line": 950,
          "args": [
            "self",
            "event"
          ],
          "docstring": "Internal method to publish events.",
          "decorators": []
        },
        {
          "name": "get_metrics",
          "line": 975,
          "args": [
            "self"
          ],
          "docstring": "Get current metrics.",
          "decorators": []
        },
        {
          "name": "health_check",
          "line": 983,
          "args": [
            "self"
          ],
          "docstring": "Perform comprehensive health check.\n\nReturns:\n    Health status information",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 1037,
          "args": [
            "self"
          ],
          "docstring": "Gracefully shutdown memory bus.",
          "decorators": []
        },
        {
          "name": "__enter__",
          "line": 1056,
          "args": [
            "self"
          ],
          "docstring": "Context manager entry.",
          "decorators": []
        },
        {
          "name": "__exit__",
          "line": 1060,
          "args": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "docstring": "Context manager exit with cleanup.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MemoryBusMetrics",
          "line": 46,
          "bases": [],
          "docstring": "Comprehensive metrics tracking for memory bus operations.\n\nProvides detailed performance monitoring and operational statistics\nfor optimization and troubleshooting purposes.",
          "methods": [
            {
              "name": "update_operation_stats",
              "line": 80,
              "args": [
                "self",
                "operation_type",
                "response_time"
              ],
              "docstring": "Update operation statistics with new data point."
            },
            {
              "name": "to_dict",
              "line": 103,
              "args": [
                "self"
              ],
              "docstring": "Convert metrics to dictionary for serialization."
            }
          ]
        },
        {
          "name": "PersistenceBackend",
          "line": 125,
          "bases": [
            "ABC"
          ],
          "docstring": "Abstract base class for persistence backends.\n\nDefines the interface that all persistence backends must implement\nfor storing and retrieving memory bus data.",
          "methods": [
            {
              "name": "save",
              "line": 134,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to persistent storage."
            },
            {
              "name": "load",
              "line": 139,
              "args": [
                "self"
              ],
              "docstring": "Load data from persistent storage."
            },
            {
              "name": "delete",
              "line": 144,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete specific key from storage."
            },
            {
              "name": "exists",
              "line": 149,
              "args": [
                "self"
              ],
              "docstring": "Check if storage exists."
            },
            {
              "name": "backup",
              "line": 154,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Create backup of storage."
            },
            {
              "name": "restore",
              "line": 159,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Restore from backup."
            }
          ]
        },
        {
          "name": "JSONPersistenceBackend",
          "line": 164,
          "bases": [
            "PersistenceBackend"
          ],
          "docstring": "JSON file-based persistence backend.\n\nProvides simple file-based persistence using JSON format\nfor easy debugging and cross-platform compatibility.",
          "methods": [
            {
              "name": "__init__",
              "line": 172,
              "args": [
                "self",
                "file_path",
                "enable_compression"
              ],
              "docstring": "Initialize JSON persistence backend."
            },
            {
              "name": "save",
              "line": 183,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to JSON file."
            },
            {
              "name": "load",
              "line": 206,
              "args": [
                "self"
              ],
              "docstring": "Load data from JSON file."
            },
            {
              "name": "delete",
              "line": 222,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete specific key from JSON storage."
            },
            {
              "name": "exists",
              "line": 235,
              "args": [
                "self"
              ],
              "docstring": "Check if JSON file exists."
            },
            {
              "name": "backup",
              "line": 239,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Create backup of JSON file."
            },
            {
              "name": "restore",
              "line": 256,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Restore from JSON backup."
            }
          ]
        },
        {
          "name": "SQLitePersistenceBackend",
          "line": 272,
          "bases": [
            "PersistenceBackend"
          ],
          "docstring": "SQLite database persistence backend.\n\nProvides robust database-based persistence with transaction support\nand better performance for large datasets.",
          "methods": [
            {
              "name": "__init__",
              "line": 280,
              "args": [
                "self",
                "db_path",
                "table_name"
              ],
              "docstring": "Initialize SQLite persistence backend."
            },
            {
              "name": "_init_database",
              "line": 294,
              "args": [
                "self"
              ],
              "docstring": "Initialize SQLite database and create table."
            },
            {
              "name": "save",
              "line": 317,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to SQLite database."
            },
            {
              "name": "load",
              "line": 342,
              "args": [
                "self"
              ],
              "docstring": "Load data from SQLite database."
            },
            {
              "name": "delete",
              "line": 363,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete specific key from SQLite storage."
            },
            {
              "name": "exists",
              "line": 377,
              "args": [
                "self"
              ],
              "docstring": "Check if SQLite database exists."
            },
            {
              "name": "backup",
              "line": 381,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Create backup of SQLite database."
            },
            {
              "name": "restore",
              "line": 396,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Restore from SQLite backup."
            }
          ]
        },
        {
          "name": "MessageEvent",
          "line": 413,
          "bases": [],
          "docstring": "Event structure for memory bus messaging system.\n\nProvides structured messaging between components with\nmetadata and routing information.",
          "methods": [
            {
              "name": "is_expired",
              "line": 430,
              "args": [
                "self"
              ],
              "docstring": "Check if event has expired."
            },
            {
              "name": "to_dict",
              "line": 434,
              "args": [
                "self"
              ],
              "docstring": "Convert event to dictionary for serialization."
            },
            {
              "name": "from_dict",
              "line": 448,
              "args": [
                "cls",
                "data"
              ],
              "docstring": "Create event from dictionary."
            }
          ]
        },
        {
          "name": "EnhancedMemoryBus",
          "line": 470,
          "bases": [],
          "docstring": "Enhanced memory bus with advanced features and Context integration.\n\nProvides comprehensive memory management with persistence, messaging,\nreliability features, and seamless Context system integration.\n\nFeatures:\n    - Multiple persistence backends (JSON, SQLite, Redis)\n    - Cross-process messaging with pub/sub\n    - Enhanced reliability with backup/recovery\n    - Context system integration\n    - Performance monitoring and metrics\n    - Distributed caching with consistency\n    - Event-driven architecture\n    - Advanced security and access control",
          "methods": [
            {
              "name": "__init__",
              "line": 488,
              "args": [
                "self",
                "persistence_backend",
                "context",
                "enable_messaging",
                "enable_persistence",
                "auto_persist_interval"
              ],
              "docstring": "Initialize enhanced memory bus with advanced features.\n\nArgs:\n    persistence_backend: Backend for persistent storage\n    context: Context instance for integration (creates if None)\n    enable_messaging: Whether to enable messaging capabilities\n    enable_persistence: Whether to enable persistence\n    auto_persist_interval: Auto-persistence interval in seconds"
            },
            {
              "name": "_load_from_persistence",
              "line": 546,
              "args": [
                "self"
              ],
              "docstring": "Load data from persistence backend."
            },
            {
              "name": "_start_background_tasks",
              "line": 561,
              "args": [
                "self"
              ],
              "docstring": "Start background tasks for auto-persistence and cleanup."
            },
            {
              "name": "_auto_persist_worker",
              "line": 581,
              "args": [
                "self"
              ],
              "docstring": "Background worker for automatic persistence."
            },
            {
              "name": "_message_cleanup_worker",
              "line": 598,
              "args": [
                "self"
              ],
              "docstring": "Background worker for cleaning up expired messages."
            },
            {
              "name": "get",
              "line": 613,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get value from memory bus with performance tracking.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key not found\n    \nReturns:\n    Retrieved value or default"
            },
            {
              "name": "set",
              "line": 662,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": "Set value in memory bus with persistence and Context integration.\n\nArgs:\n    key: Key to set\n    value: Value to store\n    who: Who is setting this value (for Context tracking)\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "delete",
              "line": 714,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete key from memory bus and persistence.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "keys",
              "line": 767,
              "args": [
                "self"
              ],
              "docstring": "Get list of all keys in memory bus."
            },
            {
              "name": "clear",
              "line": 772,
              "args": [
                "self"
              ],
              "docstring": "Clear all data from memory bus."
            },
            {
              "name": "persist",
              "line": 786,
              "args": [
                "self"
              ],
              "docstring": "Manually trigger persistence of current data.\n\nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "backup",
              "line": 812,
              "args": [
                "self",
                "backup_name"
              ],
              "docstring": "Create backup of current data.\n\nArgs:\n    backup_name: Name for backup (uses timestamp if None)\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "restore",
              "line": 846,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Restore data from backup.\n\nArgs:\n    backup_path: Path to backup file\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "subscribe",
              "line": 886,
              "args": [
                "self",
                "event_type",
                "callback"
              ],
              "docstring": "Subscribe to events of specific type.\n\nArgs:\n    event_type: Type of events to subscribe to\n    callback: Function to call when event occurs\n    \nReturns:\n    Subscription ID for unsubscribing"
            },
            {
              "name": "unsubscribe",
              "line": 909,
              "args": [
                "self",
                "event_type",
                "callback"
              ],
              "docstring": "Unsubscribe from events.\n\nArgs:\n    event_type: Type of events to unsubscribe from\n    callback: Callback function to remove\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "publish",
              "line": 935,
              "args": [
                "self",
                "event"
              ],
              "docstring": "Publish event to subscribers.\n\nArgs:\n    event: Event to publish\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "_publish_event",
              "line": 950,
              "args": [
                "self",
                "event"
              ],
              "docstring": "Internal method to publish events."
            },
            {
              "name": "get_metrics",
              "line": 975,
              "args": [
                "self"
              ],
              "docstring": "Get current metrics."
            },
            {
              "name": "health_check",
              "line": 983,
              "args": [
                "self"
              ],
              "docstring": "Perform comprehensive health check.\n\nReturns:\n    Health status information"
            },
            {
              "name": "shutdown",
              "line": 1037,
              "args": [
                "self"
              ],
              "docstring": "Gracefully shutdown memory bus."
            },
            {
              "name": "__enter__",
              "line": 1056,
              "args": [
                "self"
              ],
              "docstring": "Context manager entry."
            },
            {
              "name": "__exit__",
              "line": 1060,
              "args": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ],
              "docstring": "Context manager exit with cleanup."
            }
          ]
        }
      ],
      "lines_of_code": 885,
      "complexity_score": 161,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "c71c4de4e972a9e88f14a48af7c95075",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/enhanced_recipe_parser.py": {
      "name": ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      "path": ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      "component_type": "orchestration",
      "description": "Enhanced Recipe Parser with Context Integration and Advanced Features.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
        ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
        ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
        ".restructuring_backup/README.md",
        ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/configs/server_config.py",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/delta_compression.md",
        ".restructuring_backup/docs/deployment_guide.md",
        ".restructuring_backup/docs/getting_started.md",
        ".restructuring_backup/docs/integration_patterns.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/docs/troubleshooting.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/examples/README.md",
        ".restructuring_backup/examples/basic_usage.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/examples/integration_demo.py",
        ".restructuring_backup/examples/shell_demo.sh",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/orchestrator/__init__.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/__init__.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/orchestrator/recipe_parser.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/orchestrator/runner.py",
        ".restructuring_backup/pyproject.toml",
        ".restructuring_backup/requirements.txt",
        ".restructuring_backup/scriptlets/__init__.py",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/setup.cfg",
        ".restructuring_backup/src/__init__.py",
        ".restructuring_backup/src/analysis/__init__.py",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/src/analysis/registry.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/core/__init__.py",
        ".restructuring_backup/src/core/logger.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/__init__.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/start_server.sh",
        ".restructuring_backup/test_delta_module.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        ".restructuring_backup/test_enhanced_recipe_parser.py",
        ".restructuring_backup/test_execution_report.md",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/test_visualization_system.py",
        ".restructuring_backup/test_workspace_cleaner_v2.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_integration.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_basic_performance.py",
        ".restructuring_backup/tests/test_core_functionality.py",
        ".restructuring_backup/tests/test_delta_compression.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        ".restructuring_backup/tests/test_integration.py",
        ".restructuring_backup/tests/test_performance_load.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tests/test_simple_validation.py",
        ".restructuring_backup/tests/test_websocket_performance.py",
        ".restructuring_backup/tools/baseline_documentation_updater.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        ".restructuring_backup/tools/context.sh",
        ".restructuring_backup/tools/documentation_updater.py",
        ".restructuring_backup/tools/phased_restructurer.py",
        ".restructuring_backup/tools/workspace_cleaner.py",
        ".restructuring_backup/tools/workspace_cleaner_clean.py",
        ".restructuring_backup/tools/workspace_cleaner_v2.py",
        ".restructuring_backup/tools/workspace_restructurer.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/delta_compression.md",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "docs/test_execution_report.md",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/enhanced_recipe_parser.py",
        "orchestrator/persistence/core.py",
        "orchestrator/recipe_parser.py",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        "requirements.txt",
        "src/analysis/registry.py",
        "src/core/__init__.py",
        "src/core/logger.py",
        "tests/test_core_functionality.py",
        "tests/test_delta_compression.py",
        "tests/test_enhanced_recipe_parser.py",
        "tests/test_realtime_performance.py",
        "tools/phased_restructurer.py",
        "tools/post_restructure_validator.py",
        "tools/workspace_restructurer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "parse_recipe_file",
        "validate_recipe_data",
        "__str__",
        "__post_init__",
        "is_valid",
        "error_count",
        "warning_count",
        "__init__",
        "_setup_default_validators",
        "add_validator",
        "validate",
        "_validate_required_fields",
        "_validate_step_structure",
        "_validate_dependency_graph",
        "_validate_module_imports",
        "_validate_step_indices",
        "__init__",
        "detect_format",
        "load_file",
        "_compute_content_hash",
        "_extract_metadata",
        "_parse_steps",
        "parse_recipe",
        "get_validation_summary",
        "clear_cache",
        "add_validator",
        "has_cycle",
        "RecipeFormat",
        "ValidationSeverity",
        "ValidationMessage",
        "RecipeMetadata",
        "StepInfo",
        "ParsedRecipe",
        "RecipeValidator",
        "EnhancedRecipeParser"
      ],
      "imports": [
        "json",
        "os",
        "re",
        "importlib",
        "hashlib",
        "pathlib",
        "datetime",
        "typing",
        "dataclasses",
        "enum",
        "yaml",
        "orchestrator.context.context",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "parse_recipe_file",
          "line": 799,
          "args": [
            "file_path",
            "context"
          ],
          "docstring": "Convenience function for parsing recipe files with Context integration.\n\nThis function provides backward compatibility with the existing recipe_parser\ninterface while leveraging the enhanced features of EnhancedRecipeParser.\n\n:param file_path: Path to recipe file to parse\n:param context: Optional Context instance for integration\n:return: Parsed recipe with validation results\n:raises FileNotFoundError: If recipe file not found\n:raises ValueError: If recipe parsing fails",
          "decorators": []
        },
        {
          "name": "validate_recipe_data",
          "line": 816,
          "args": [
            "recipe_data",
            "context"
          ],
          "docstring": "Convenience function for validating recipe data with Context integration.\n\n:param recipe_data: Raw recipe dictionary to validate\n:param context: Optional Context instance for integration\n:return: List of validation messages",
          "decorators": []
        },
        {
          "name": "__str__",
          "line": 60,
          "args": [
            "self"
          ],
          "docstring": "Return formatted validation message.",
          "decorators": []
        },
        {
          "name": "__post_init__",
          "line": 97,
          "args": [
            "self"
          ],
          "docstring": "Validate step information after initialization.",
          "decorators": []
        },
        {
          "name": "is_valid",
          "line": 121,
          "args": [
            "self"
          ],
          "docstring": "Check if recipe has no validation errors.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "error_count",
          "line": 127,
          "args": [
            "self"
          ],
          "docstring": "Count of validation errors.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "warning_count",
          "line": 133,
          "args": [
            "self"
          ],
          "docstring": "Count of validation warnings.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__init__",
          "line": 142,
          "args": [
            "self",
            "context"
          ],
          "docstring": "Initialize recipe validator with optional Context integration.\n\n:param context: Optional Context instance for logging and data sharing",
          "decorators": []
        },
        {
          "name": "_setup_default_validators",
          "line": 154,
          "args": [
            "self"
          ],
          "docstring": "Set up default validation rules for recipe structure.",
          "decorators": []
        },
        {
          "name": "add_validator",
          "line": 166,
          "args": [
            "self",
            "name",
            "validator"
          ],
          "docstring": "Add custom validation rule to validator.\n\n:param name: Validator name/identifier\n:param validator: Validation function returning ValidationMessage list",
          "decorators": []
        },
        {
          "name": "validate",
          "line": 176,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate recipe data using all registered validation rules.\n\n:param recipe_data: Raw recipe dictionary to validate\n:return: List of validation messages (errors, warnings, info)",
          "decorators": []
        },
        {
          "name": "_validate_required_fields",
          "line": 211,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate presence of required recipe fields.",
          "decorators": []
        },
        {
          "name": "_validate_step_structure",
          "line": 245,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate individual step structure and required fields.",
          "decorators": []
        },
        {
          "name": "_validate_dependency_graph",
          "line": 287,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate step dependency graph for cycles and missing dependencies.",
          "decorators": []
        },
        {
          "name": "_validate_module_imports",
          "line": 374,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate that required modules and functions can be imported.",
          "decorators": []
        },
        {
          "name": "_validate_step_indices",
          "line": 421,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate step index uniqueness and ordering.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 487,
          "args": [
            "self",
            "context"
          ],
          "docstring": "Initialize enhanced recipe parser with Context integration.\n\n:param context: Optional Context instance for logging and data sharing",
          "decorators": []
        },
        {
          "name": "detect_format",
          "line": 504,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Detect recipe file format based on file extension.\n\n:param file_path: Path to recipe file\n:return: Detected file format\n:raises ValueError: If file format is not supported",
          "decorators": []
        },
        {
          "name": "load_file",
          "line": 530,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Load and parse recipe file content based on detected format.\n\n:param file_path: Path to recipe file\n:return: Parsed recipe data as dictionary\n:raises FileNotFoundError: If file does not exist\n:raises ValueError: If file cannot be parsed",
          "decorators": []
        },
        {
          "name": "_compute_content_hash",
          "line": 582,
          "args": [
            "self",
            "content"
          ],
          "docstring": "Compute hash of recipe content for caching and change detection.\n\n:param content: Recipe content dictionary\n:return: SHA-256 hash of content",
          "decorators": []
        },
        {
          "name": "_extract_metadata",
          "line": 592,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Extract recipe metadata from raw recipe data.\n\n:param recipe_data: Raw recipe dictionary\n:return: Extracted metadata information",
          "decorators": []
        },
        {
          "name": "_parse_steps",
          "line": 633,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Parse and validate individual steps from recipe data.\n\n:param recipe_data: Raw recipe dictionary containing steps\n:return: List of parsed step information\n:raises ValueError: If step parsing fails",
          "decorators": []
        },
        {
          "name": "parse_recipe",
          "line": 694,
          "args": [
            "self",
            "file_path",
            "use_cache"
          ],
          "docstring": "Parse recipe file with comprehensive validation and Context integration.\n\n:param file_path: Path to recipe file to parse\n:param use_cache: Whether to use cached results if available\n:return: Parsed recipe with validation results\n:raises FileNotFoundError: If recipe file not found\n:raises ValueError: If recipe parsing fails",
          "decorators": []
        },
        {
          "name": "get_validation_summary",
          "line": 759,
          "args": [
            "self",
            "parsed_recipe"
          ],
          "docstring": "Generate human-readable validation summary for parsed recipe.\n\n:param parsed_recipe: Parsed recipe with validation results\n:return: Formatted validation summary string",
          "decorators": []
        },
        {
          "name": "clear_cache",
          "line": 783,
          "args": [
            "self"
          ],
          "docstring": "Clear internal recipe cache.",
          "decorators": []
        },
        {
          "name": "add_validator",
          "line": 788,
          "args": [
            "self",
            "name",
            "validator"
          ],
          "docstring": "Add custom validation rule to parser.\n\n:param name: Validator name/identifier\n:param validator: Validation function returning ValidationMessage list",
          "decorators": []
        },
        {
          "name": "has_cycle",
          "line": 343,
          "args": [
            "node"
          ],
          "docstring": "Detect cycles in dependency graph using DFS.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RecipeFormat",
          "line": 37,
          "bases": [
            "Enum"
          ],
          "docstring": "Supported recipe file formats.",
          "methods": []
        },
        {
          "name": "ValidationSeverity",
          "line": 44,
          "bases": [
            "Enum"
          ],
          "docstring": "Validation message severity levels.",
          "methods": []
        },
        {
          "name": "ValidationMessage",
          "line": 52,
          "bases": [],
          "docstring": "Container for validation messages with location and severity.",
          "methods": [
            {
              "name": "__str__",
              "line": 60,
              "args": [
                "self"
              ],
              "docstring": "Return formatted validation message."
            }
          ]
        },
        {
          "name": "RecipeMetadata",
          "line": 68,
          "bases": [],
          "docstring": "Container for recipe metadata information.",
          "methods": []
        },
        {
          "name": "StepInfo",
          "line": 82,
          "bases": [],
          "docstring": "Container for parsed step information with validation.",
          "methods": [
            {
              "name": "__post_init__",
              "line": 97,
              "args": [
                "self"
              ],
              "docstring": "Validate step information after initialization."
            }
          ]
        },
        {
          "name": "ParsedRecipe",
          "line": 110,
          "bases": [],
          "docstring": "Container for complete parsed recipe with validation results.",
          "methods": [
            {
              "name": "is_valid",
              "line": 121,
              "args": [
                "self"
              ],
              "docstring": "Check if recipe has no validation errors."
            },
            {
              "name": "error_count",
              "line": 127,
              "args": [
                "self"
              ],
              "docstring": "Count of validation errors."
            },
            {
              "name": "warning_count",
              "line": 133,
              "args": [
                "self"
              ],
              "docstring": "Count of validation warnings."
            }
          ]
        },
        {
          "name": "RecipeValidator",
          "line": 139,
          "bases": [],
          "docstring": "Advanced recipe validation with extensible rule system.",
          "methods": [
            {
              "name": "__init__",
              "line": 142,
              "args": [
                "self",
                "context"
              ],
              "docstring": "Initialize recipe validator with optional Context integration.\n\n:param context: Optional Context instance for logging and data sharing"
            },
            {
              "name": "_setup_default_validators",
              "line": 154,
              "args": [
                "self"
              ],
              "docstring": "Set up default validation rules for recipe structure."
            },
            {
              "name": "add_validator",
              "line": 166,
              "args": [
                "self",
                "name",
                "validator"
              ],
              "docstring": "Add custom validation rule to validator.\n\n:param name: Validator name/identifier\n:param validator: Validation function returning ValidationMessage list"
            },
            {
              "name": "validate",
              "line": 176,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate recipe data using all registered validation rules.\n\n:param recipe_data: Raw recipe dictionary to validate\n:return: List of validation messages (errors, warnings, info)"
            },
            {
              "name": "_validate_required_fields",
              "line": 211,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate presence of required recipe fields."
            },
            {
              "name": "_validate_step_structure",
              "line": 245,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate individual step structure and required fields."
            },
            {
              "name": "_validate_dependency_graph",
              "line": 287,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate step dependency graph for cycles and missing dependencies."
            },
            {
              "name": "_validate_module_imports",
              "line": 374,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate that required modules and functions can be imported."
            },
            {
              "name": "_validate_step_indices",
              "line": 421,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate step index uniqueness and ordering."
            }
          ]
        },
        {
          "name": "EnhancedRecipeParser",
          "line": 475,
          "bases": [],
          "docstring": "Advanced recipe parser with Context integration and comprehensive features.\n\nThis parser provides enhanced functionality over the basic recipe_parser including:\n- Context system integration for logging and data sharing\n- Support for multiple file formats (YAML, JSON)\n- Comprehensive schema validation with detailed error reporting\n- Caching and performance optimization\n- Extensible validation and parsing pipeline",
          "methods": [
            {
              "name": "__init__",
              "line": 487,
              "args": [
                "self",
                "context"
              ],
              "docstring": "Initialize enhanced recipe parser with Context integration.\n\n:param context: Optional Context instance for logging and data sharing"
            },
            {
              "name": "detect_format",
              "line": 504,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Detect recipe file format based on file extension.\n\n:param file_path: Path to recipe file\n:return: Detected file format\n:raises ValueError: If file format is not supported"
            },
            {
              "name": "load_file",
              "line": 530,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Load and parse recipe file content based on detected format.\n\n:param file_path: Path to recipe file\n:return: Parsed recipe data as dictionary\n:raises FileNotFoundError: If file does not exist\n:raises ValueError: If file cannot be parsed"
            },
            {
              "name": "_compute_content_hash",
              "line": 582,
              "args": [
                "self",
                "content"
              ],
              "docstring": "Compute hash of recipe content for caching and change detection.\n\n:param content: Recipe content dictionary\n:return: SHA-256 hash of content"
            },
            {
              "name": "_extract_metadata",
              "line": 592,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Extract recipe metadata from raw recipe data.\n\n:param recipe_data: Raw recipe dictionary\n:return: Extracted metadata information"
            },
            {
              "name": "_parse_steps",
              "line": 633,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Parse and validate individual steps from recipe data.\n\n:param recipe_data: Raw recipe dictionary containing steps\n:return: List of parsed step information\n:raises ValueError: If step parsing fails"
            },
            {
              "name": "parse_recipe",
              "line": 694,
              "args": [
                "self",
                "file_path",
                "use_cache"
              ],
              "docstring": "Parse recipe file with comprehensive validation and Context integration.\n\n:param file_path: Path to recipe file to parse\n:param use_cache: Whether to use cached results if available\n:return: Parsed recipe with validation results\n:raises FileNotFoundError: If recipe file not found\n:raises ValueError: If recipe parsing fails"
            },
            {
              "name": "get_validation_summary",
              "line": 759,
              "args": [
                "self",
                "parsed_recipe"
              ],
              "docstring": "Generate human-readable validation summary for parsed recipe.\n\n:param parsed_recipe: Parsed recipe with validation results\n:return: Formatted validation summary string"
            },
            {
              "name": "clear_cache",
              "line": 783,
              "args": [
                "self"
              ],
              "docstring": "Clear internal recipe cache."
            },
            {
              "name": "add_validator",
              "line": 788,
              "args": [
                "self",
                "name",
                "validator"
              ],
              "docstring": "Add custom validation rule to parser.\n\n:param name: Validator name/identifier\n:param validator: Validation function returning ValidationMessage list"
            }
          ]
        }
      ],
      "lines_of_code": 672,
      "complexity_score": 111,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "762f055fcbd676b0613bb8d7e2ce93da",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/memory_bus.py": {
      "name": ".restructuring_backup/orchestrator/memory_bus.py",
      "path": ".restructuring_backup/orchestrator/memory_bus.py",
      "component_type": "orchestration",
      "description": "MemoryBusClient is a client-side interface for interacting",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "fetch_snapshot",
        "push_patch",
        "sync",
        "__init__",
        "get_snapshot",
        "apply_patch",
        "handle_snapshot_request",
        "handle_patch_request",
        "MemoryBusClient",
        "MemoryBusServer"
      ],
      "imports": [
        "json",
        "threading",
        "time",
        "typing",
        "requests",
        "orchestrator.context"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 23,
          "args": [
            "self",
            "server_url",
            "timeout"
          ],
          "docstring": ":param server_url: Base URL of the context server (e.g. \"http://ctxserver:8000\")\n:param timeout: HTTP request timeout (seconds)",
          "decorators": []
        },
        {
          "name": "fetch_snapshot",
          "line": 33,
          "args": [
            "self"
          ],
          "docstring": "Fetch the full context snapshot from the server.\nReturns a Context object or None (if server returned empty or error).",
          "decorators": []
        },
        {
          "name": "push_patch",
          "line": 49,
          "args": [
            "self",
            "patch"
          ],
          "docstring": "Send a JSON patch (key→value mapping) to the server.\nReturns True if accepted / successful, False otherwise.",
          "decorators": []
        },
        {
          "name": "sync",
          "line": 59,
          "args": [
            "self",
            "local_ctx"
          ],
          "docstring": "Two‑way sync: fetch latest from server, merge into local context,\nthen push only local dirty keys as patch.\n\nReturns the merged Context (i.e. updated local context).",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get_snapshot",
          "line": 90,
          "args": [
            "self"
          ],
          "docstring": "Returns the full context data as a JSON‑serializable dict.",
          "decorators": []
        },
        {
          "name": "apply_patch",
          "line": 97,
          "args": [
            "self",
            "patch"
          ],
          "docstring": "Apply a patch (key → value) to the master context.\nOverwrites existing keys (last-write-wins by default).",
          "decorators": []
        },
        {
          "name": "handle_snapshot_request",
          "line": 108,
          "args": [
            "self",
            "request"
          ],
          "docstring": "HTTP endpoint handler for GET /snapshot\nReturns JSON dict of context snapshot.",
          "decorators": []
        },
        {
          "name": "handle_patch_request",
          "line": 116,
          "args": [
            "self",
            "request"
          ],
          "docstring": "HTTP endpoint handler for POST /patch\nExpects JSON body of key→value mapping.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MemoryBusClient",
          "line": 13,
          "bases": [],
          "docstring": "MemoryBusClient is a client-side interface for interacting\nwith a centralized context server (MemoryBus). It allows\nfetching/pushing context state or patches (deltas) over the network.\n\nThis helps multiple agents or test runners share a common context\nwithout each writing to disk locally.",
          "methods": [
            {
              "name": "__init__",
              "line": 23,
              "args": [
                "self",
                "server_url",
                "timeout"
              ],
              "docstring": ":param server_url: Base URL of the context server (e.g. \"http://ctxserver:8000\")\n:param timeout: HTTP request timeout (seconds)"
            },
            {
              "name": "fetch_snapshot",
              "line": 33,
              "args": [
                "self"
              ],
              "docstring": "Fetch the full context snapshot from the server.\nReturns a Context object or None (if server returned empty or error)."
            },
            {
              "name": "push_patch",
              "line": 49,
              "args": [
                "self",
                "patch"
              ],
              "docstring": "Send a JSON patch (key→value mapping) to the server.\nReturns True if accepted / successful, False otherwise."
            },
            {
              "name": "sync",
              "line": 59,
              "args": [
                "self",
                "local_ctx"
              ],
              "docstring": "Two‑way sync: fetch latest from server, merge into local context,\nthen push only local dirty keys as patch.\n\nReturns the merged Context (i.e. updated local context)."
            }
          ]
        },
        {
          "name": "MemoryBusServer",
          "line": 80,
          "bases": [],
          "docstring": "A simple in-memory context server. Exposes HTTP endpoints for clients\nto get snapshot, push patches, etc. Maintains an internal master Context.",
          "methods": [
            {
              "name": "__init__",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "get_snapshot",
              "line": 90,
              "args": [
                "self"
              ],
              "docstring": "Returns the full context data as a JSON‑serializable dict."
            },
            {
              "name": "apply_patch",
              "line": 97,
              "args": [
                "self",
                "patch"
              ],
              "docstring": "Apply a patch (key → value) to the master context.\nOverwrites existing keys (last-write-wins by default)."
            },
            {
              "name": "handle_snapshot_request",
              "line": 108,
              "args": [
                "self",
                "request"
              ],
              "docstring": "HTTP endpoint handler for GET /snapshot\nReturns JSON dict of context snapshot."
            },
            {
              "name": "handle_patch_request",
              "line": 116,
              "args": [
                "self",
                "request"
              ],
              "docstring": "HTTP endpoint handler for POST /patch\nExpects JSON body of key→value mapping."
            }
          ]
        }
      ],
      "lines_of_code": 106,
      "complexity_score": 22,
      "last_modified": "2025-10-04T14:13:31.761339",
      "checksum": "c5c615e3e27351495ef23c6b296de591",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/persistence.py": {
      "name": ".restructuring_backup/orchestrator/persistence.py",
      "path": ".restructuring_backup/orchestrator/persistence.py",
      "component_type": "orchestration",
      "description": "PersistenceManager handles writing the Context state (or deltas) to",
      "dependencies": [
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "start_background_flush",
        "stop_background_flush",
        "flush",
        "load_latest",
        "_flush_loop",
        "PersistenceManager"
      ],
      "imports": [
        "threading",
        "time",
        "json",
        "os",
        "typing",
        "orchestrator.context"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 19,
          "args": [
            "self",
            "persist_dir",
            "flush_interval_sec",
            "max_history"
          ],
          "docstring": ":param persist_dir: Directory where serialized snapshots or delta files go.\n:param flush_interval_sec: If not None, flush dirty data every N seconds.\n:param max_history: Optional cap on how many history entries to retain.",
          "decorators": []
        },
        {
          "name": "start_background_flush",
          "line": 42,
          "args": [
            "self",
            "ctx"
          ],
          "docstring": "Begin a background thread that periodically flushes dirty keys\nfrom the context to disk / persistent storage.",
          "decorators": []
        },
        {
          "name": "stop_background_flush",
          "line": 67,
          "args": [
            "self"
          ],
          "docstring": "Signal the background flush thread to stop, and join it.",
          "decorators": []
        },
        {
          "name": "flush",
          "line": 75,
          "args": [
            "self",
            "ctx"
          ],
          "docstring": "Persist the current context state or dirty deltas to disk.\nFor now, this writes a full snapshot JSON. You may later optimize\nto delta-only or compressed storage.",
          "decorators": []
        },
        {
          "name": "load_latest",
          "line": 107,
          "args": [
            "self"
          ],
          "docstring": "Load the most recent snapshot file, reconstruct into a Context.\nReturns None if no snapshot exists.",
          "decorators": []
        },
        {
          "name": "_flush_loop",
          "line": 50,
          "args": [],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PersistenceManager",
          "line": 12,
          "bases": [],
          "docstring": "PersistenceManager handles writing the Context state (or deltas) to\ndurable storage (disk or database). It also schedules periodic flushes,\nand can perform full snapshotting or delta-only flushing.",
          "methods": [
            {
              "name": "__init__",
              "line": 19,
              "args": [
                "self",
                "persist_dir",
                "flush_interval_sec",
                "max_history"
              ],
              "docstring": ":param persist_dir: Directory where serialized snapshots or delta files go.\n:param flush_interval_sec: If not None, flush dirty data every N seconds.\n:param max_history: Optional cap on how many history entries to retain."
            },
            {
              "name": "start_background_flush",
              "line": 42,
              "args": [
                "self",
                "ctx"
              ],
              "docstring": "Begin a background thread that periodically flushes dirty keys\nfrom the context to disk / persistent storage."
            },
            {
              "name": "stop_background_flush",
              "line": 67,
              "args": [
                "self"
              ],
              "docstring": "Signal the background flush thread to stop, and join it."
            },
            {
              "name": "flush",
              "line": 75,
              "args": [
                "self",
                "ctx"
              ],
              "docstring": "Persist the current context state or dirty deltas to disk.\nFor now, this writes a full snapshot JSON. You may later optimize\nto delta-only or compressed storage."
            },
            {
              "name": "load_latest",
              "line": 107,
              "args": [
                "self"
              ],
              "docstring": "Load the most recent snapshot file, reconstruct into a Context.\nReturns None if no snapshot exists."
            }
          ]
        }
      ],
      "lines_of_code": 112,
      "complexity_score": 21,
      "last_modified": "2025-10-04T14:13:32.037337",
      "checksum": "96b3961c51a4bd1b14d746373755ff20",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/persistence/__init__.py": {
      "name": ".restructuring_backup/orchestrator/persistence/__init__.py",
      "path": ".restructuring_backup/orchestrator/persistence/__init__.py",
      "component_type": "orchestration",
      "description": "Persistence package initialization.",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 4,
      "complexity_score": 0,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "efcc51462c11de166b38446a4272be4a",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/persistence/cache.py": {
      "name": ".restructuring_backup/orchestrator/persistence/cache.py",
      "path": ".restructuring_backup/orchestrator/persistence/cache.py",
      "component_type": "orchestration",
      "description": "Cache Management Module for Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py"
      ],
      "exports": [
        "create_cache",
        "cache_function",
        "__init__",
        "_estimate_size",
        "access",
        "is_expired",
        "get_age",
        "get_idle_time",
        "to_dict",
        "from_dict",
        "all_policies",
        "__init__",
        "_with_lock",
        "set",
        "_set",
        "__set",
        "get",
        "_get",
        "__get",
        "contains",
        "_contains",
        "__contains",
        "delete",
        "_delete",
        "__delete",
        "clear",
        "_clear",
        "__clear",
        "get_stats",
        "_get_stats",
        "__get_stats",
        "get_keys",
        "_get_keys",
        "__get_keys",
        "get_entry_metadata",
        "_get_entry_metadata",
        "__get_entry_metadata",
        "_clean_expired_entries",
        "_evict_entries",
        "_evict_memory",
        "_select_eviction_candidate",
        "__init__",
        "_schedule_auto_persist",
        "persist",
        "_persist",
        "__persist",
        "_load_cache",
        "clear",
        "_clear_and_remove",
        "__clear_and_remove",
        "__del__",
        "__init__",
        "set",
        "_set",
        "__set",
        "get",
        "_get",
        "__get",
        "contains",
        "_contains",
        "__contains",
        "delete",
        "_delete",
        "__delete",
        "clear",
        "_clear",
        "__clear",
        "get_stats",
        "_get_stats",
        "__get_stats",
        "get_keys",
        "_get_keys",
        "__get_keys",
        "__init__",
        "_default_key_func",
        "__call__",
        "wrapper",
        "_auto_persist",
        "wrapper",
        "clear_cache",
        "CacheError",
        "CacheFullError",
        "CacheEntryNotFoundError",
        "CacheEntry",
        "EvictionPolicy",
        "Cache",
        "PersistentCache",
        "TieredCache",
        "CacheDecorator"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "uuid",
        "shutil",
        "hashlib",
        "logging",
        "tempfile",
        "threading",
        "functools",
        "datetime",
        "pathlib",
        "typing",
        "orchestrator.persistence.core",
        "numpy",
        "sys"
      ],
      "functions": [
        {
          "name": "create_cache",
          "line": 1322,
          "args": [
            "cache_type",
            "max_size",
            "max_memory_mb",
            "default_ttl",
            "eviction_policy",
            "disk_cache_dir"
          ],
          "docstring": "Create a cache instance with the specified configuration.\n\nArgs:\n    cache_type: Type of cache to create\n    max_size: Maximum number of entries\n    max_memory_mb: Maximum memory usage in MB\n    default_ttl: Default time-to-live in seconds\n    eviction_policy: Eviction policy to use\n    disk_cache_dir: Directory for disk cache (if applicable)\n    \nReturns:\n    Cache: Configured cache instance\n    \nRaises:\n    ValueError: If an invalid cache type is specified",
          "decorators": []
        },
        {
          "name": "cache_function",
          "line": 1380,
          "args": [
            "func"
          ],
          "docstring": "Decorator for caching function results.\n\nCan be used as @cache_function or @cache_function(ttl=60).\n\nArgs:\n    func: Function to decorate (when used as @cache_function)\n    ttl: Time-to-live in seconds\n    max_size: Maximum cache size\n    cache_type: Type of cache to use\n    \nReturns:\n    Callable: Decorated function or decorator",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 62,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Initialize a cache entry.\n\nArgs:\n    key: The cache key\n    value: The cached value\n    ttl: Time-to-live in seconds (None for no expiration)",
          "decorators": []
        },
        {
          "name": "_estimate_size",
          "line": 85,
          "args": [
            "self",
            "obj"
          ],
          "docstring": "Estimate the memory size of an object in bytes.\n\nArgs:\n    obj: The object to measure\n    \nReturns:\n    int: Estimated size in bytes",
          "decorators": []
        },
        {
          "name": "access",
          "line": 129,
          "args": [
            "self"
          ],
          "docstring": "Record an access to this cache entry.",
          "decorators": []
        },
        {
          "name": "is_expired",
          "line": 134,
          "args": [
            "self"
          ],
          "docstring": "Check if this cache entry has expired.\n\nReturns:\n    bool: True if expired, False otherwise",
          "decorators": []
        },
        {
          "name": "get_age",
          "line": 144,
          "args": [
            "self"
          ],
          "docstring": "Get the age of this cache entry in seconds.\n\nReturns:\n    float: Age in seconds",
          "decorators": []
        },
        {
          "name": "get_idle_time",
          "line": 152,
          "args": [
            "self"
          ],
          "docstring": "Get time since last access in seconds.\n\nReturns:\n    float: Idle time in seconds",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 160,
          "args": [
            "self"
          ],
          "docstring": "Convert cache entry to a dictionary for serialization.\n\nReturns:\n    Dict[str, Any]: Dictionary representation",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 177,
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create a cache entry from a dictionary.\n\nArgs:\n    data: Dictionary representation of cache entry\n    \nReturns:\n    CacheEntry: Reconstructed cache entry",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "all_policies",
          "line": 218,
          "args": [],
          "docstring": "Return all available eviction policies.\n\nReturns:\n    List[str]: List of all policy names",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "__init__",
          "line": 239,
          "args": [
            "self",
            "max_size",
            "max_memory_mb",
            "default_ttl",
            "eviction_policy",
            "thread_safe"
          ],
          "docstring": "Initialize the cache.\n\nArgs:\n    max_size: Maximum number of entries (0 for unlimited)\n    max_memory_mb: Maximum memory usage in MB (None for unlimited)\n    default_ttl: Default time-to-live in seconds (None for no expiration)\n    eviction_policy: Eviction policy to use (LRU, LFU, FIFO, TTL)\n    thread_safe: Whether to make this cache thread-safe",
          "decorators": []
        },
        {
          "name": "_with_lock",
          "line": 280,
          "args": [
            "self",
            "func"
          ],
          "docstring": "Decorator to execute a function with the cache lock if thread safety is enabled.\n\nArgs:\n    func: Function to wrap\n    \nReturns:\n    Callable: Wrapped function",
          "decorators": []
        },
        {
          "name": "set",
          "line": 301,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Set a value in the cache.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (None uses default_ttl)\n    \nRaises:\n    CacheFullError: If cache is full and no items can be evicted",
          "decorators": []
        },
        {
          "name": "_set",
          "line": 315,
          "args": [
            "self"
          ],
          "docstring": "Get the set method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__set",
          "line": 319,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Internal implementation of set (without locking).",
          "decorators": []
        },
        {
          "name": "get",
          "line": 363,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get a value from the cache.\n\nArgs:\n    key: Cache key\n    default: Default value if key is not found\n    \nReturns:\n    Optional[V]: The cached value or default",
          "decorators": []
        },
        {
          "name": "_get",
          "line": 376,
          "args": [
            "self"
          ],
          "docstring": "Get the get method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get",
          "line": 380,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Internal implementation of get (without locking).",
          "decorators": []
        },
        {
          "name": "contains",
          "line": 405,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Check if a key exists in the cache.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key exists and is not expired",
          "decorators": []
        },
        {
          "name": "_contains",
          "line": 417,
          "args": [
            "self"
          ],
          "docstring": "Get the contains method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__contains",
          "line": 421,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of contains (without locking).",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 440,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete a key from the cache.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key was deleted, False if not found",
          "decorators": []
        },
        {
          "name": "_delete",
          "line": 452,
          "args": [
            "self"
          ],
          "docstring": "Get the delete method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__delete",
          "line": 456,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of delete (without locking).",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 465,
          "args": [
            "self"
          ],
          "docstring": "Clear all entries from the cache.",
          "decorators": []
        },
        {
          "name": "_clear",
          "line": 470,
          "args": [
            "self"
          ],
          "docstring": "Get the clear method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__clear",
          "line": 474,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of clear (without locking).",
          "decorators": []
        },
        {
          "name": "get_stats",
          "line": 480,
          "args": [
            "self"
          ],
          "docstring": "Get cache statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of statistics",
          "decorators": []
        },
        {
          "name": "_get_stats",
          "line": 489,
          "args": [
            "self"
          ],
          "docstring": "Get the get_stats method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_stats",
          "line": 493,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of get_stats (without locking).",
          "decorators": []
        },
        {
          "name": "get_keys",
          "line": 513,
          "args": [
            "self"
          ],
          "docstring": "Get all keys in the cache.\n\nReturns:\n    List[K]: List of all cache keys (excluding expired entries)",
          "decorators": []
        },
        {
          "name": "_get_keys",
          "line": 522,
          "args": [
            "self"
          ],
          "docstring": "Get the get_keys method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_keys",
          "line": 526,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of get_keys (without locking).",
          "decorators": []
        },
        {
          "name": "get_entry_metadata",
          "line": 533,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Get metadata for a specific cache entry.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    Dict[str, Any]: Dictionary of metadata\n    \nRaises:\n    CacheEntryNotFoundError: If entry not found or expired",
          "decorators": []
        },
        {
          "name": "_get_entry_metadata",
          "line": 548,
          "args": [
            "self"
          ],
          "docstring": "Get the get_entry_metadata method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_entry_metadata",
          "line": 552,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of get_entry_metadata (without locking).",
          "decorators": []
        },
        {
          "name": "_clean_expired_entries",
          "line": 579,
          "args": [
            "self"
          ],
          "docstring": "Remove all expired entries from the cache.\n\nReturns:\n    int: Number of entries removed",
          "decorators": []
        },
        {
          "name": "_evict_entries",
          "line": 608,
          "args": [
            "self",
            "count"
          ],
          "docstring": "Evict a specified number of entries based on the eviction policy.\n\nArgs:\n    count: Number of entries to evict\n    \nReturns:\n    int: Number of entries actually evicted",
          "decorators": []
        },
        {
          "name": "_evict_memory",
          "line": 641,
          "args": [
            "self",
            "bytes_needed"
          ],
          "docstring": "Evict entries to free the specified amount of memory.\n\nArgs:\n    bytes_needed: Number of bytes to free\n    \nReturns:\n    int: Number of bytes actually freed",
          "decorators": []
        },
        {
          "name": "_select_eviction_candidate",
          "line": 677,
          "args": [
            "self"
          ],
          "docstring": "Select a candidate for eviction based on the configured policy.\n\nReturns:\n    Optional[K]: Key of the entry to evict, or None if no suitable candidate",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 742,
          "args": [
            "self",
            "cache_dir",
            "max_size",
            "max_memory_mb",
            "default_ttl",
            "eviction_policy",
            "thread_safe",
            "persist_on_shutdown",
            "auto_persist_interval"
          ],
          "docstring": "Initialize the persistent cache.\n\nArgs:\n    cache_dir: Directory for cache persistence (None for temp dir)\n    max_size: Maximum number of entries (0 for unlimited)\n    max_memory_mb: Maximum memory usage in MB (None for unlimited)\n    default_ttl: Default time-to-live in seconds (None for no expiration)\n    eviction_policy: Eviction policy to use (LRU, LFU, FIFO, TTL)\n    thread_safe: Whether to make this cache thread-safe\n    persist_on_shutdown: Whether to automatically persist on shutdown\n    auto_persist_interval: Interval in seconds for auto-persist (None to disable)",
          "decorators": []
        },
        {
          "name": "_schedule_auto_persist",
          "line": 799,
          "args": [
            "self"
          ],
          "docstring": "Schedule the next auto-persist operation.",
          "decorators": []
        },
        {
          "name": "persist",
          "line": 820,
          "args": [
            "self"
          ],
          "docstring": "Persist the cache contents to disk.",
          "decorators": []
        },
        {
          "name": "_persist",
          "line": 825,
          "args": [
            "self"
          ],
          "docstring": "Get the persist method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__persist",
          "line": 829,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of persist (without locking).",
          "decorators": []
        },
        {
          "name": "_load_cache",
          "line": 879,
          "args": [
            "self"
          ],
          "docstring": "Load cache contents from disk if available.",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 931,
          "args": [
            "self"
          ],
          "docstring": "Clear all entries from the cache and remove cache file.",
          "decorators": []
        },
        {
          "name": "_clear_and_remove",
          "line": 936,
          "args": [
            "self"
          ],
          "docstring": "Get the clear_and_remove method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__clear_and_remove",
          "line": 940,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of clear_and_remove (without locking).",
          "decorators": []
        },
        {
          "name": "__del__",
          "line": 954,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources when object is garbage collected.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 975,
          "args": [
            "self",
            "max_size",
            "max_memory_mb",
            "default_ttl",
            "eviction_policy",
            "thread_safe",
            "disk_cache_dir",
            "disk_cache_size_mb",
            "promote_on_access"
          ],
          "docstring": "Initialize the tiered cache.\n\nArgs:\n    max_size: Maximum number of entries in memory cache\n    max_memory_mb: Maximum memory usage in MB\n    default_ttl: Default time-to-live in seconds\n    eviction_policy: Eviction policy to use\n    thread_safe: Whether to make this cache thread-safe\n    disk_cache_dir: Directory for disk cache\n    disk_cache_size_mb: Maximum disk cache size in MB\n    promote_on_access: Whether to promote disk entries to memory on access",
          "decorators": []
        },
        {
          "name": "set",
          "line": 1023,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Set a value in the cache.\n\nThis will store in the memory cache first, and items evicted from\nmemory will cascade to disk cache.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (None uses default_ttl)",
          "decorators": []
        },
        {
          "name": "_set",
          "line": 1037,
          "args": [
            "self"
          ],
          "docstring": "Get the set method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__set",
          "line": 1041,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Internal implementation of set (without locking).",
          "decorators": []
        },
        {
          "name": "get",
          "line": 1050,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get a value from the cache.\n\nThis will check the memory cache first, then the disk cache.\n\nArgs:\n    key: Cache key\n    default: Default value if key is not found\n    \nReturns:\n    Optional[V]: The cached value or default",
          "decorators": []
        },
        {
          "name": "_get",
          "line": 1065,
          "args": [
            "self"
          ],
          "docstring": "Get the get method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get",
          "line": 1069,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Internal implementation of get (without locking).",
          "decorators": []
        },
        {
          "name": "contains",
          "line": 1092,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Check if a key exists in any cache level.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key exists in any cache level",
          "decorators": []
        },
        {
          "name": "_contains",
          "line": 1104,
          "args": [
            "self"
          ],
          "docstring": "Get the contains method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__contains",
          "line": 1108,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of contains (without locking).",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 1117,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete a key from all cache levels.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key was deleted from any level",
          "decorators": []
        },
        {
          "name": "_delete",
          "line": 1129,
          "args": [
            "self"
          ],
          "docstring": "Get the delete method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__delete",
          "line": 1133,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of delete (without locking).",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 1142,
          "args": [
            "self"
          ],
          "docstring": "Clear all entries from both cache levels.",
          "decorators": []
        },
        {
          "name": "_clear",
          "line": 1147,
          "args": [
            "self"
          ],
          "docstring": "Get the clear method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__clear",
          "line": 1151,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of clear (without locking).",
          "decorators": []
        },
        {
          "name": "get_stats",
          "line": 1157,
          "args": [
            "self"
          ],
          "docstring": "Get combined cache statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of statistics for both cache levels",
          "decorators": []
        },
        {
          "name": "_get_stats",
          "line": 1166,
          "args": [
            "self"
          ],
          "docstring": "Get the get_stats method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_stats",
          "line": 1170,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of get_stats (without locking).",
          "decorators": []
        },
        {
          "name": "get_keys",
          "line": 1200,
          "args": [
            "self"
          ],
          "docstring": "Get all keys from both cache levels.\n\nReturns:\n    List[K]: List of all cache keys from both levels",
          "decorators": []
        },
        {
          "name": "_get_keys",
          "line": 1209,
          "args": [
            "self"
          ],
          "docstring": "Get the get_keys method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_keys",
          "line": 1213,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of get_keys (without locking).",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 1231,
          "args": [
            "self",
            "cache",
            "ttl",
            "key_func"
          ],
          "docstring": "Initialize the cache decorator.\n\nArgs:\n    cache: Cache instance to use (creates a new one if None)\n    ttl: Time-to-live for cached results\n    key_func: Function to generate cache keys from function arguments",
          "decorators": []
        },
        {
          "name": "_default_key_func",
          "line": 1254,
          "args": [
            "self",
            "func",
            "args",
            "kwargs"
          ],
          "docstring": "Default function to generate cache keys from function arguments.\n\nArgs:\n    func: The function being called\n    args: Positional arguments\n    kwargs: Keyword arguments\n    \nReturns:\n    str: Cache key",
          "decorators": []
        },
        {
          "name": "__call__",
          "line": 1279,
          "args": [
            "self",
            "func"
          ],
          "docstring": "Make this class callable as a decorator.\n\nArgs:\n    func: Function to decorate\n    \nReturns:\n    Callable: Decorated function",
          "decorators": []
        },
        {
          "name": "wrapper",
          "line": 290,
          "args": [],
          "docstring": "",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "_auto_persist",
          "line": 807,
          "args": [],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "wrapper",
          "line": 1289,
          "args": [],
          "docstring": "",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "clear_cache",
          "line": 1309,
          "args": [],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CacheError",
          "line": 44,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when cache operations fail.",
          "methods": []
        },
        {
          "name": "CacheFullError",
          "line": 49,
          "bases": [
            "CacheError"
          ],
          "docstring": "Exception raised when the cache is full and cannot accept more entries.",
          "methods": []
        },
        {
          "name": "CacheEntryNotFoundError",
          "line": 54,
          "bases": [
            "CacheError"
          ],
          "docstring": "Exception raised when a cache entry is not found.",
          "methods": []
        },
        {
          "name": "CacheEntry",
          "line": 59,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Represents a single entry in the cache with metadata.",
          "methods": [
            {
              "name": "__init__",
              "line": 62,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Initialize a cache entry.\n\nArgs:\n    key: The cache key\n    value: The cached value\n    ttl: Time-to-live in seconds (None for no expiration)"
            },
            {
              "name": "_estimate_size",
              "line": 85,
              "args": [
                "self",
                "obj"
              ],
              "docstring": "Estimate the memory size of an object in bytes.\n\nArgs:\n    obj: The object to measure\n    \nReturns:\n    int: Estimated size in bytes"
            },
            {
              "name": "access",
              "line": 129,
              "args": [
                "self"
              ],
              "docstring": "Record an access to this cache entry."
            },
            {
              "name": "is_expired",
              "line": 134,
              "args": [
                "self"
              ],
              "docstring": "Check if this cache entry has expired.\n\nReturns:\n    bool: True if expired, False otherwise"
            },
            {
              "name": "get_age",
              "line": 144,
              "args": [
                "self"
              ],
              "docstring": "Get the age of this cache entry in seconds.\n\nReturns:\n    float: Age in seconds"
            },
            {
              "name": "get_idle_time",
              "line": 152,
              "args": [
                "self"
              ],
              "docstring": "Get time since last access in seconds.\n\nReturns:\n    float: Idle time in seconds"
            },
            {
              "name": "to_dict",
              "line": 160,
              "args": [
                "self"
              ],
              "docstring": "Convert cache entry to a dictionary for serialization.\n\nReturns:\n    Dict[str, Any]: Dictionary representation"
            },
            {
              "name": "from_dict",
              "line": 177,
              "args": [
                "cls",
                "data"
              ],
              "docstring": "Create a cache entry from a dictionary.\n\nArgs:\n    data: Dictionary representation of cache entry\n    \nReturns:\n    CacheEntry: Reconstructed cache entry"
            }
          ]
        },
        {
          "name": "EvictionPolicy",
          "line": 202,
          "bases": [],
          "docstring": "Enumeration of cache eviction policies.",
          "methods": [
            {
              "name": "all_policies",
              "line": 218,
              "args": [],
              "docstring": "Return all available eviction policies.\n\nReturns:\n    List[str]: List of all policy names"
            }
          ]
        },
        {
          "name": "Cache",
          "line": 232,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Generic cache implementation with configurable eviction policies.\n\nThis class provides a generic in-memory cache with support for different\neviction policies, TTL-based expiration, and size limits.",
          "methods": [
            {
              "name": "__init__",
              "line": 239,
              "args": [
                "self",
                "max_size",
                "max_memory_mb",
                "default_ttl",
                "eviction_policy",
                "thread_safe"
              ],
              "docstring": "Initialize the cache.\n\nArgs:\n    max_size: Maximum number of entries (0 for unlimited)\n    max_memory_mb: Maximum memory usage in MB (None for unlimited)\n    default_ttl: Default time-to-live in seconds (None for no expiration)\n    eviction_policy: Eviction policy to use (LRU, LFU, FIFO, TTL)\n    thread_safe: Whether to make this cache thread-safe"
            },
            {
              "name": "_with_lock",
              "line": 280,
              "args": [
                "self",
                "func"
              ],
              "docstring": "Decorator to execute a function with the cache lock if thread safety is enabled.\n\nArgs:\n    func: Function to wrap\n    \nReturns:\n    Callable: Wrapped function"
            },
            {
              "name": "set",
              "line": 301,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Set a value in the cache.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (None uses default_ttl)\n    \nRaises:\n    CacheFullError: If cache is full and no items can be evicted"
            },
            {
              "name": "_set",
              "line": 315,
              "args": [
                "self"
              ],
              "docstring": "Get the set method with lock if needed."
            },
            {
              "name": "__set",
              "line": 319,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Internal implementation of set (without locking)."
            },
            {
              "name": "get",
              "line": 363,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get a value from the cache.\n\nArgs:\n    key: Cache key\n    default: Default value if key is not found\n    \nReturns:\n    Optional[V]: The cached value or default"
            },
            {
              "name": "_get",
              "line": 376,
              "args": [
                "self"
              ],
              "docstring": "Get the get method with lock if needed."
            },
            {
              "name": "__get",
              "line": 380,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Internal implementation of get (without locking)."
            },
            {
              "name": "contains",
              "line": 405,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Check if a key exists in the cache.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key exists and is not expired"
            },
            {
              "name": "_contains",
              "line": 417,
              "args": [
                "self"
              ],
              "docstring": "Get the contains method with lock if needed."
            },
            {
              "name": "__contains",
              "line": 421,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of contains (without locking)."
            },
            {
              "name": "delete",
              "line": 440,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete a key from the cache.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key was deleted, False if not found"
            },
            {
              "name": "_delete",
              "line": 452,
              "args": [
                "self"
              ],
              "docstring": "Get the delete method with lock if needed."
            },
            {
              "name": "__delete",
              "line": 456,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of delete (without locking)."
            },
            {
              "name": "clear",
              "line": 465,
              "args": [
                "self"
              ],
              "docstring": "Clear all entries from the cache."
            },
            {
              "name": "_clear",
              "line": 470,
              "args": [
                "self"
              ],
              "docstring": "Get the clear method with lock if needed."
            },
            {
              "name": "__clear",
              "line": 474,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of clear (without locking)."
            },
            {
              "name": "get_stats",
              "line": 480,
              "args": [
                "self"
              ],
              "docstring": "Get cache statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of statistics"
            },
            {
              "name": "_get_stats",
              "line": 489,
              "args": [
                "self"
              ],
              "docstring": "Get the get_stats method with lock if needed."
            },
            {
              "name": "__get_stats",
              "line": 493,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of get_stats (without locking)."
            },
            {
              "name": "get_keys",
              "line": 513,
              "args": [
                "self"
              ],
              "docstring": "Get all keys in the cache.\n\nReturns:\n    List[K]: List of all cache keys (excluding expired entries)"
            },
            {
              "name": "_get_keys",
              "line": 522,
              "args": [
                "self"
              ],
              "docstring": "Get the get_keys method with lock if needed."
            },
            {
              "name": "__get_keys",
              "line": 526,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of get_keys (without locking)."
            },
            {
              "name": "get_entry_metadata",
              "line": 533,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Get metadata for a specific cache entry.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    Dict[str, Any]: Dictionary of metadata\n    \nRaises:\n    CacheEntryNotFoundError: If entry not found or expired"
            },
            {
              "name": "_get_entry_metadata",
              "line": 548,
              "args": [
                "self"
              ],
              "docstring": "Get the get_entry_metadata method with lock if needed."
            },
            {
              "name": "__get_entry_metadata",
              "line": 552,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of get_entry_metadata (without locking)."
            },
            {
              "name": "_clean_expired_entries",
              "line": 579,
              "args": [
                "self"
              ],
              "docstring": "Remove all expired entries from the cache.\n\nReturns:\n    int: Number of entries removed"
            },
            {
              "name": "_evict_entries",
              "line": 608,
              "args": [
                "self",
                "count"
              ],
              "docstring": "Evict a specified number of entries based on the eviction policy.\n\nArgs:\n    count: Number of entries to evict\n    \nReturns:\n    int: Number of entries actually evicted"
            },
            {
              "name": "_evict_memory",
              "line": 641,
              "args": [
                "self",
                "bytes_needed"
              ],
              "docstring": "Evict entries to free the specified amount of memory.\n\nArgs:\n    bytes_needed: Number of bytes to free\n    \nReturns:\n    int: Number of bytes actually freed"
            },
            {
              "name": "_select_eviction_candidate",
              "line": 677,
              "args": [
                "self"
              ],
              "docstring": "Select a candidate for eviction based on the configured policy.\n\nReturns:\n    Optional[K]: Key of the entry to evict, or None if no suitable candidate"
            }
          ]
        },
        {
          "name": "PersistentCache",
          "line": 735,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Cache implementation with persistence to disk.\n\nThis class extends the base Cache with the ability to persist the cache\ncontents to disk and load from disk on initialization.",
          "methods": [
            {
              "name": "__init__",
              "line": 742,
              "args": [
                "self",
                "cache_dir",
                "max_size",
                "max_memory_mb",
                "default_ttl",
                "eviction_policy",
                "thread_safe",
                "persist_on_shutdown",
                "auto_persist_interval"
              ],
              "docstring": "Initialize the persistent cache.\n\nArgs:\n    cache_dir: Directory for cache persistence (None for temp dir)\n    max_size: Maximum number of entries (0 for unlimited)\n    max_memory_mb: Maximum memory usage in MB (None for unlimited)\n    default_ttl: Default time-to-live in seconds (None for no expiration)\n    eviction_policy: Eviction policy to use (LRU, LFU, FIFO, TTL)\n    thread_safe: Whether to make this cache thread-safe\n    persist_on_shutdown: Whether to automatically persist on shutdown\n    auto_persist_interval: Interval in seconds for auto-persist (None to disable)"
            },
            {
              "name": "_schedule_auto_persist",
              "line": 799,
              "args": [
                "self"
              ],
              "docstring": "Schedule the next auto-persist operation."
            },
            {
              "name": "persist",
              "line": 820,
              "args": [
                "self"
              ],
              "docstring": "Persist the cache contents to disk."
            },
            {
              "name": "_persist",
              "line": 825,
              "args": [
                "self"
              ],
              "docstring": "Get the persist method with lock if needed."
            },
            {
              "name": "__persist",
              "line": 829,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of persist (without locking)."
            },
            {
              "name": "_load_cache",
              "line": 879,
              "args": [
                "self"
              ],
              "docstring": "Load cache contents from disk if available."
            },
            {
              "name": "clear",
              "line": 931,
              "args": [
                "self"
              ],
              "docstring": "Clear all entries from the cache and remove cache file."
            },
            {
              "name": "_clear_and_remove",
              "line": 936,
              "args": [
                "self"
              ],
              "docstring": "Get the clear_and_remove method with lock if needed."
            },
            {
              "name": "__clear_and_remove",
              "line": 940,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of clear_and_remove (without locking)."
            },
            {
              "name": "__del__",
              "line": 954,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources when object is garbage collected."
            }
          ]
        },
        {
          "name": "TieredCache",
          "line": 968,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Multi-level cache implementation with tiered storage.\n\nThis class implements a tiered cache with different levels (typically\nmemory and disk) to balance between speed and capacity.",
          "methods": [
            {
              "name": "__init__",
              "line": 975,
              "args": [
                "self",
                "max_size",
                "max_memory_mb",
                "default_ttl",
                "eviction_policy",
                "thread_safe",
                "disk_cache_dir",
                "disk_cache_size_mb",
                "promote_on_access"
              ],
              "docstring": "Initialize the tiered cache.\n\nArgs:\n    max_size: Maximum number of entries in memory cache\n    max_memory_mb: Maximum memory usage in MB\n    default_ttl: Default time-to-live in seconds\n    eviction_policy: Eviction policy to use\n    thread_safe: Whether to make this cache thread-safe\n    disk_cache_dir: Directory for disk cache\n    disk_cache_size_mb: Maximum disk cache size in MB\n    promote_on_access: Whether to promote disk entries to memory on access"
            },
            {
              "name": "set",
              "line": 1023,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Set a value in the cache.\n\nThis will store in the memory cache first, and items evicted from\nmemory will cascade to disk cache.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (None uses default_ttl)"
            },
            {
              "name": "_set",
              "line": 1037,
              "args": [
                "self"
              ],
              "docstring": "Get the set method with lock if needed."
            },
            {
              "name": "__set",
              "line": 1041,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Internal implementation of set (without locking)."
            },
            {
              "name": "get",
              "line": 1050,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get a value from the cache.\n\nThis will check the memory cache first, then the disk cache.\n\nArgs:\n    key: Cache key\n    default: Default value if key is not found\n    \nReturns:\n    Optional[V]: The cached value or default"
            },
            {
              "name": "_get",
              "line": 1065,
              "args": [
                "self"
              ],
              "docstring": "Get the get method with lock if needed."
            },
            {
              "name": "__get",
              "line": 1069,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Internal implementation of get (without locking)."
            },
            {
              "name": "contains",
              "line": 1092,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Check if a key exists in any cache level.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key exists in any cache level"
            },
            {
              "name": "_contains",
              "line": 1104,
              "args": [
                "self"
              ],
              "docstring": "Get the contains method with lock if needed."
            },
            {
              "name": "__contains",
              "line": 1108,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of contains (without locking)."
            },
            {
              "name": "delete",
              "line": 1117,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete a key from all cache levels.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key was deleted from any level"
            },
            {
              "name": "_delete",
              "line": 1129,
              "args": [
                "self"
              ],
              "docstring": "Get the delete method with lock if needed."
            },
            {
              "name": "__delete",
              "line": 1133,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of delete (without locking)."
            },
            {
              "name": "clear",
              "line": 1142,
              "args": [
                "self"
              ],
              "docstring": "Clear all entries from both cache levels."
            },
            {
              "name": "_clear",
              "line": 1147,
              "args": [
                "self"
              ],
              "docstring": "Get the clear method with lock if needed."
            },
            {
              "name": "__clear",
              "line": 1151,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of clear (without locking)."
            },
            {
              "name": "get_stats",
              "line": 1157,
              "args": [
                "self"
              ],
              "docstring": "Get combined cache statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of statistics for both cache levels"
            },
            {
              "name": "_get_stats",
              "line": 1166,
              "args": [
                "self"
              ],
              "docstring": "Get the get_stats method with lock if needed."
            },
            {
              "name": "__get_stats",
              "line": 1170,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of get_stats (without locking)."
            },
            {
              "name": "get_keys",
              "line": 1200,
              "args": [
                "self"
              ],
              "docstring": "Get all keys from both cache levels.\n\nReturns:\n    List[K]: List of all cache keys from both levels"
            },
            {
              "name": "_get_keys",
              "line": 1209,
              "args": [
                "self"
              ],
              "docstring": "Get the get_keys method with lock if needed."
            },
            {
              "name": "__get_keys",
              "line": 1213,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of get_keys (without locking)."
            }
          ]
        },
        {
          "name": "CacheDecorator",
          "line": 1224,
          "bases": [],
          "docstring": "Decorator for caching function results.\n\nThis class provides a decorator that can be used to cache the results\nof function calls based on their arguments.",
          "methods": [
            {
              "name": "__init__",
              "line": 1231,
              "args": [
                "self",
                "cache",
                "ttl",
                "key_func"
              ],
              "docstring": "Initialize the cache decorator.\n\nArgs:\n    cache: Cache instance to use (creates a new one if None)\n    ttl: Time-to-live for cached results\n    key_func: Function to generate cache keys from function arguments"
            },
            {
              "name": "_default_key_func",
              "line": 1254,
              "args": [
                "self",
                "func",
                "args",
                "kwargs"
              ],
              "docstring": "Default function to generate cache keys from function arguments.\n\nArgs:\n    func: The function being called\n    args: Positional arguments\n    kwargs: Keyword arguments\n    \nReturns:\n    str: Cache key"
            },
            {
              "name": "__call__",
              "line": 1279,
              "args": [
                "self",
                "func"
              ],
              "docstring": "Make this class callable as a decorator.\n\nArgs:\n    func: Function to decorate\n    \nReturns:\n    Callable: Decorated function"
            }
          ]
        }
      ],
      "lines_of_code": 1127,
      "complexity_score": 174,
      "last_modified": "2025-10-04T21:52:33.133398",
      "checksum": "cee98820697dffd42972710b8462dc2b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/persistence/core.py": {
      "name": ".restructuring_backup/orchestrator/persistence/core.py",
      "path": ".restructuring_backup/orchestrator/persistence/core.py",
      "component_type": "orchestration",
      "description": "Core Persistence Module for Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "get_logger",
        "get_timestamp",
        "calculate_checksum",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "start_operation",
        "end_operation",
        "update_save",
        "update_load",
        "update_operation_time",
        "increment_errors",
        "increment_cache_hits",
        "increment_cache_misses",
        "get_average_save_time",
        "get_average_load_time",
        "get_cache_hit_ratio",
        "to_dict",
        "reset",
        "save",
        "load",
        "get",
        "set",
        "delete",
        "clear",
        "get_metrics",
        "StorageBackend",
        "CacheStrategy",
        "DeltaStrategy",
        "PersistenceError",
        "DataIntegrityError",
        "ThreadSafeContextWrapper",
        "PersistenceMetrics",
        "PersistenceBase"
      ],
      "imports": [
        "os",
        "time",
        "uuid",
        "hashlib",
        "logging",
        "threading",
        "datetime",
        "abc",
        "enum",
        "typing",
        "json"
      ],
      "functions": [
        {
          "name": "get_logger",
          "line": 26,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Create and configure a logger with appropriate settings.\n\nArgs:\n    name: Name for the logger\n    debug: Whether to enable debug level logging\n    \nReturns:\n    logging.Logger: Configured logger instance",
          "decorators": []
        },
        {
          "name": "get_timestamp",
          "line": 437,
          "args": [],
          "docstring": "Get current timestamp with millisecond precision.\n\nReturns:\n    float: Current timestamp",
          "decorators": []
        },
        {
          "name": "calculate_checksum",
          "line": 447,
          "args": [
            "data"
          ],
          "docstring": "Calculate a checksum for data integrity verification.\n\nArgs:\n    data: Data to calculate checksum for\n    \nReturns:\n    str: Hexadecimal checksum",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 126,
          "args": [
            "self",
            "context"
          ],
          "docstring": "Initialize the wrapper with a context object.\n\nArgs:\n    context: Context object to wrap",
          "decorators": []
        },
        {
          "name": "__enter__",
          "line": 138,
          "args": [
            "self"
          ],
          "docstring": "Enter context manager by acquiring lock.\n\nReturns:\n    Any: The wrapped context object",
          "decorators": []
        },
        {
          "name": "__exit__",
          "line": 148,
          "args": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "docstring": "Exit context manager by releasing lock.\n\nArgs:\n    exc_type: Exception type if raised\n    exc_val: Exception value if raised\n    exc_tb: Exception traceback if raised\n    \nReturns:\n    bool: Whether to suppress exception",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 171,
          "args": [
            "self"
          ],
          "docstring": "Initialize metrics with default values.",
          "decorators": []
        },
        {
          "name": "start_operation",
          "line": 194,
          "args": [
            "self"
          ],
          "docstring": "Start timing an operation.",
          "decorators": []
        },
        {
          "name": "end_operation",
          "line": 199,
          "args": [
            "self"
          ],
          "docstring": "End timing an operation and return duration.\n\nReturns:\n    float: Operation duration in seconds",
          "decorators": []
        },
        {
          "name": "update_save",
          "line": 219,
          "args": [
            "self",
            "data_size",
            "operation_time"
          ],
          "docstring": "Update metrics after a save operation.\n\nArgs:\n    data_size: Size of saved data in bytes\n    operation_time: Time taken for operation in seconds",
          "decorators": []
        },
        {
          "name": "update_load",
          "line": 235,
          "args": [
            "self",
            "data_size",
            "operation_time"
          ],
          "docstring": "Update metrics after a load operation.\n\nArgs:\n    data_size: Size of loaded data in bytes\n    operation_time: Time taken for operation in seconds",
          "decorators": []
        },
        {
          "name": "update_operation_time",
          "line": 251,
          "args": [
            "self",
            "operation_time"
          ],
          "docstring": "Update metrics for an arbitrary operation.\n\nArgs:\n    operation_time: Time taken for operation in seconds",
          "decorators": []
        },
        {
          "name": "increment_errors",
          "line": 260,
          "args": [
            "self"
          ],
          "docstring": "Increment error count.",
          "decorators": []
        },
        {
          "name": "increment_cache_hits",
          "line": 265,
          "args": [
            "self"
          ],
          "docstring": "Increment cache hit count.",
          "decorators": []
        },
        {
          "name": "increment_cache_misses",
          "line": 270,
          "args": [
            "self"
          ],
          "docstring": "Increment cache miss count.",
          "decorators": []
        },
        {
          "name": "get_average_save_time",
          "line": 275,
          "args": [
            "self"
          ],
          "docstring": "Calculate average save operation time.\n\nReturns:\n    float: Average save time in seconds",
          "decorators": []
        },
        {
          "name": "get_average_load_time",
          "line": 286,
          "args": [
            "self"
          ],
          "docstring": "Calculate average load operation time.\n\nReturns:\n    float: Average load time in seconds",
          "decorators": []
        },
        {
          "name": "get_cache_hit_ratio",
          "line": 297,
          "args": [
            "self"
          ],
          "docstring": "Calculate cache hit ratio.\n\nReturns:\n    float: Cache hit ratio (0.0-1.0)",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 309,
          "args": [
            "self"
          ],
          "docstring": "Convert metrics to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics",
          "decorators": []
        },
        {
          "name": "reset",
          "line": 332,
          "args": [
            "self"
          ],
          "docstring": "Reset all metrics to initial values.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 346,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to persistence storage.\n\nArgs:\n    data: Dictionary of data to save\n    \nReturns:\n    str: Operation ID for the save operation\n    \nRaises:\n    PersistenceError: If save operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "load",
          "line": 361,
          "args": [
            "self"
          ],
          "docstring": "Load data from persistence storage.\n\nReturns:\n    Dict[str, Any]: Loaded data\n    \nRaises:\n    PersistenceError: If load operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "get",
          "line": 373,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get a specific value from persistence storage.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key doesn't exist\n    \nReturns:\n    Any: The retrieved value or default\n    \nRaises:\n    PersistenceError: If get operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "set",
          "line": 389,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Set a specific value in persistence storage.\n\nArgs:\n    key: Key to set\n    value: Value to set\n    \nRaises:\n    PersistenceError: If set operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "delete",
          "line": 402,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete a specific value from persistence storage.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if key existed and was deleted, False otherwise\n    \nRaises:\n    PersistenceError: If delete operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "clear",
          "line": 417,
          "args": [
            "self"
          ],
          "docstring": "Clear all data from persistence storage.\n\nRaises:\n    PersistenceError: If clear operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "get_metrics",
          "line": 425,
          "args": [
            "self"
          ],
          "docstring": "Get performance and operation metrics.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StorageBackend",
          "line": 59,
          "bases": [
            "str",
            "Enum"
          ],
          "docstring": "Enumeration of available storage backends.",
          "methods": []
        },
        {
          "name": "CacheStrategy",
          "line": 78,
          "bases": [
            "str",
            "Enum"
          ],
          "docstring": "Enumeration of available cache strategies.",
          "methods": []
        },
        {
          "name": "DeltaStrategy",
          "line": 94,
          "bases": [
            "str",
            "Enum"
          ],
          "docstring": "Enumeration of available delta compression strategies.",
          "methods": []
        },
        {
          "name": "PersistenceError",
          "line": 113,
          "bases": [
            "Exception"
          ],
          "docstring": "Base exception for all persistence-related errors.",
          "methods": []
        },
        {
          "name": "DataIntegrityError",
          "line": 118,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when data integrity checks fail.",
          "methods": []
        },
        {
          "name": "ThreadSafeContextWrapper",
          "line": 123,
          "bases": [],
          "docstring": "Thread-safe context wrapper for ensuring consistent access to shared resources.",
          "methods": [
            {
              "name": "__init__",
              "line": 126,
              "args": [
                "self",
                "context"
              ],
              "docstring": "Initialize the wrapper with a context object.\n\nArgs:\n    context: Context object to wrap"
            },
            {
              "name": "__enter__",
              "line": 138,
              "args": [
                "self"
              ],
              "docstring": "Enter context manager by acquiring lock.\n\nReturns:\n    Any: The wrapped context object"
            },
            {
              "name": "__exit__",
              "line": 148,
              "args": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ],
              "docstring": "Exit context manager by releasing lock.\n\nArgs:\n    exc_type: Exception type if raised\n    exc_val: Exception value if raised\n    exc_tb: Exception traceback if raised\n    \nReturns:\n    bool: Whether to suppress exception"
            }
          ]
        },
        {
          "name": "PersistenceMetrics",
          "line": 164,
          "bases": [],
          "docstring": "Metrics tracking for persistence operations.\n\nThis class tracks various metrics related to persistence operations,\nsuch as operation counts, timing, and sizes.",
          "methods": [
            {
              "name": "__init__",
              "line": 171,
              "args": [
                "self"
              ],
              "docstring": "Initialize metrics with default values."
            },
            {
              "name": "start_operation",
              "line": 194,
              "args": [
                "self"
              ],
              "docstring": "Start timing an operation."
            },
            {
              "name": "end_operation",
              "line": 199,
              "args": [
                "self"
              ],
              "docstring": "End timing an operation and return duration.\n\nReturns:\n    float: Operation duration in seconds"
            },
            {
              "name": "update_save",
              "line": 219,
              "args": [
                "self",
                "data_size",
                "operation_time"
              ],
              "docstring": "Update metrics after a save operation.\n\nArgs:\n    data_size: Size of saved data in bytes\n    operation_time: Time taken for operation in seconds"
            },
            {
              "name": "update_load",
              "line": 235,
              "args": [
                "self",
                "data_size",
                "operation_time"
              ],
              "docstring": "Update metrics after a load operation.\n\nArgs:\n    data_size: Size of loaded data in bytes\n    operation_time: Time taken for operation in seconds"
            },
            {
              "name": "update_operation_time",
              "line": 251,
              "args": [
                "self",
                "operation_time"
              ],
              "docstring": "Update metrics for an arbitrary operation.\n\nArgs:\n    operation_time: Time taken for operation in seconds"
            },
            {
              "name": "increment_errors",
              "line": 260,
              "args": [
                "self"
              ],
              "docstring": "Increment error count."
            },
            {
              "name": "increment_cache_hits",
              "line": 265,
              "args": [
                "self"
              ],
              "docstring": "Increment cache hit count."
            },
            {
              "name": "increment_cache_misses",
              "line": 270,
              "args": [
                "self"
              ],
              "docstring": "Increment cache miss count."
            },
            {
              "name": "get_average_save_time",
              "line": 275,
              "args": [
                "self"
              ],
              "docstring": "Calculate average save operation time.\n\nReturns:\n    float: Average save time in seconds"
            },
            {
              "name": "get_average_load_time",
              "line": 286,
              "args": [
                "self"
              ],
              "docstring": "Calculate average load operation time.\n\nReturns:\n    float: Average load time in seconds"
            },
            {
              "name": "get_cache_hit_ratio",
              "line": 297,
              "args": [
                "self"
              ],
              "docstring": "Calculate cache hit ratio.\n\nReturns:\n    float: Cache hit ratio (0.0-1.0)"
            },
            {
              "name": "to_dict",
              "line": 309,
              "args": [
                "self"
              ],
              "docstring": "Convert metrics to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics"
            },
            {
              "name": "reset",
              "line": 332,
              "args": [
                "self"
              ],
              "docstring": "Reset all metrics to initial values."
            }
          ]
        },
        {
          "name": "PersistenceBase",
          "line": 338,
          "bases": [
            "ABC"
          ],
          "docstring": "Abstract base class for persistence implementations.\n\nThis class defines the interface that all persistence implementations\nmust adhere to, ensuring consistent behavior across different backends.",
          "methods": [
            {
              "name": "save",
              "line": 346,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to persistence storage.\n\nArgs:\n    data: Dictionary of data to save\n    \nReturns:\n    str: Operation ID for the save operation\n    \nRaises:\n    PersistenceError: If save operation fails"
            },
            {
              "name": "load",
              "line": 361,
              "args": [
                "self"
              ],
              "docstring": "Load data from persistence storage.\n\nReturns:\n    Dict[str, Any]: Loaded data\n    \nRaises:\n    PersistenceError: If load operation fails"
            },
            {
              "name": "get",
              "line": 373,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get a specific value from persistence storage.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key doesn't exist\n    \nReturns:\n    Any: The retrieved value or default\n    \nRaises:\n    PersistenceError: If get operation fails"
            },
            {
              "name": "set",
              "line": 389,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Set a specific value in persistence storage.\n\nArgs:\n    key: Key to set\n    value: Value to set\n    \nRaises:\n    PersistenceError: If set operation fails"
            },
            {
              "name": "delete",
              "line": 402,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete a specific value from persistence storage.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if key existed and was deleted, False otherwise\n    \nRaises:\n    PersistenceError: If delete operation fails"
            },
            {
              "name": "clear",
              "line": 417,
              "args": [
                "self"
              ],
              "docstring": "Clear all data from persistence storage.\n\nRaises:\n    PersistenceError: If clear operation fails"
            },
            {
              "name": "get_metrics",
              "line": 425,
              "args": [
                "self"
              ],
              "docstring": "Get performance and operation metrics.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics"
            }
          ]
        }
      ],
      "lines_of_code": 355,
      "complexity_score": 51,
      "last_modified": "2025-10-04T21:58:29.010985",
      "checksum": "61253b511e1f6c5005a5f1175a4bcafd",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/persistence/delta.py": {
      "name": ".restructuring_backup/orchestrator/persistence/delta.py",
      "path": ".restructuring_backup/orchestrator/persistence/delta.py",
      "component_type": "orchestration",
      "description": "Delta Compression Module for Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py"
      ],
      "exports": [
        "extract_keys_from_delta",
        "__init__",
        "__repr__",
        "to_dict",
        "from_dict",
        "__init__",
        "calculate_delta",
        "_dict_delta",
        "_binary_delta",
        "apply_delta",
        "create_delta_record",
        "merge_deltas",
        "get_compression_stats",
        "serialize_delta",
        "deserialize_delta",
        "__init__",
        "add_delta",
        "add_state",
        "get_state_at_index",
        "get_current_state",
        "get_delta_at_index",
        "clear_chain",
        "rebaseline",
        "_optimize_chain",
        "get_chain_metrics",
        "DeltaCompressionError",
        "DeltaRecord",
        "DeltaCompressor",
        "DeltaChain"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "gzip",
        "difflib",
        "hashlib",
        "logging",
        "functools",
        "datetime",
        "enum",
        "typing",
        "orchestrator.persistence.core",
        "numpy",
        "bsdiff4"
      ],
      "functions": [
        {
          "name": "extract_keys_from_delta",
          "line": 775,
          "args": [
            "delta"
          ],
          "docstring": "Extract all affected keys from a delta.\n\nArgs:\n    delta: Delta record to extract keys from\n    \nReturns:\n    Set[str]: Set of all keys affected by this delta",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 66,
          "args": [
            "self",
            "timestamp",
            "changes",
            "removed_keys",
            "metadata",
            "compression_ratio",
            "size_bytes",
            "checksum"
          ],
          "docstring": "Initialize a delta record.\n\nArgs:\n    timestamp: When the delta was created\n    changes: Key-value changes\n    removed_keys: Keys that were removed\n    metadata: Additional metadata\n    compression_ratio: Compression ratio achieved\n    size_bytes: Size in bytes after compression\n    checksum: Integrity checksum",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 96,
          "args": [
            "self"
          ],
          "docstring": "String representation of delta record.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 102,
          "args": [
            "self"
          ],
          "docstring": "Convert to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary representation",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 119,
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create from dictionary representation.\n\nArgs:\n    data: Dictionary representation\n    \nReturns:\n    DeltaRecord: Reconstructed delta record",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "__init__",
          "line": 146,
          "args": [
            "self",
            "strategy",
            "enable_compression",
            "compression_level"
          ],
          "docstring": "Initialize the delta compressor.\n\nArgs:\n    strategy: Delta compression strategy to use\n    enable_compression: Whether to enable compression\n    compression_level: Compression level (1-9, higher is more compression)",
          "decorators": []
        },
        {
          "name": "calculate_delta",
          "line": 175,
          "args": [
            "self",
            "old_state",
            "new_state",
            "include_unchanged"
          ],
          "docstring": "Calculate delta between two states.\n\nArgs:\n    old_state: Previous state\n    new_state: Current state\n    include_unchanged: Whether to include unchanged values\n    \nReturns:\n    Dict[str, Any]: Delta information including changes and removals",
          "decorators": []
        },
        {
          "name": "_dict_delta",
          "line": 234,
          "args": [
            "self",
            "old_state",
            "new_state",
            "include_unchanged"
          ],
          "docstring": "Calculate dictionary-based delta.\n\nArgs:\n    old_state: Previous state dictionary\n    new_state: Current state dictionary\n    include_unchanged: Whether to include unchanged values\n    \nReturns:\n    Dict[str, Any]: Delta information",
          "decorators": []
        },
        {
          "name": "_binary_delta",
          "line": 300,
          "args": [
            "self",
            "old_state",
            "new_state"
          ],
          "docstring": "Calculate binary delta using bsdiff if available.\n\nArgs:\n    old_state: Previous state\n    new_state: Current state\n    \nReturns:\n    Dict[str, Any]: Delta information",
          "decorators": []
        },
        {
          "name": "apply_delta",
          "line": 340,
          "args": [
            "self",
            "base_state",
            "delta_info"
          ],
          "docstring": "Apply delta to a base state to produce new state.\n\nArgs:\n    base_state: Base state to apply delta to\n    delta_info: Delta information from calculate_delta\n    \nReturns:\n    Dict[str, Any]: Updated state\n    \nRaises:\n    DeltaCompressionError: If delta application fails",
          "decorators": []
        },
        {
          "name": "create_delta_record",
          "line": 386,
          "args": [
            "self",
            "changes",
            "removed_keys",
            "timestamp"
          ],
          "docstring": "Create compressed delta record from changes.\n\nArgs:\n    changes: Dictionary of changes\n    removed_keys: List of removed keys\n    timestamp: Delta creation timestamp (default: current time)\n    \nReturns:\n    DeltaRecord: Compressed delta record",
          "decorators": []
        },
        {
          "name": "merge_deltas",
          "line": 456,
          "args": [
            "self",
            "deltas"
          ],
          "docstring": "Merge multiple deltas into a single delta.\n\nArgs:\n    deltas: List of deltas to merge\n    \nReturns:\n    Optional[DeltaRecord]: Merged delta or None if input is empty",
          "decorators": []
        },
        {
          "name": "get_compression_stats",
          "line": 498,
          "args": [
            "self"
          ],
          "docstring": "Get compression statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of compression statistics",
          "decorators": []
        },
        {
          "name": "serialize_delta",
          "line": 506,
          "args": [
            "self",
            "delta"
          ],
          "docstring": "Serialize delta record to bytes for storage.\n\nArgs:\n    delta: Delta record to serialize\n    \nReturns:\n    bytes: Serialized delta data",
          "decorators": []
        },
        {
          "name": "deserialize_delta",
          "line": 527,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Deserialize delta record from bytes.\n\nArgs:\n    data: Serialized delta data\n    \nReturns:\n    DeltaRecord: Deserialized delta record",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 557,
          "args": [
            "self",
            "delta_strategy",
            "max_chain_length",
            "enable_rebase"
          ],
          "docstring": "Initialize the delta chain manager.\n\nArgs:\n    delta_strategy: Delta compression strategy\n    max_chain_length: Maximum chain length before optimization\n    enable_rebase: Whether to enable automatic rebaseline",
          "decorators": []
        },
        {
          "name": "add_delta",
          "line": 587,
          "args": [
            "self",
            "delta"
          ],
          "docstring": "Add a delta to the chain.\n\nArgs:\n    delta: Delta record to add",
          "decorators": []
        },
        {
          "name": "add_state",
          "line": 605,
          "args": [
            "self",
            "state",
            "timestamp"
          ],
          "docstring": "Add a new state to the chain by calculating delta from previous state.\n\nArgs:\n    state: New state to add\n    timestamp: Timestamp for the delta (default: current time)\n    \nReturns:\n    DeltaRecord: Created delta record",
          "decorators": []
        },
        {
          "name": "get_state_at_index",
          "line": 655,
          "args": [
            "self",
            "index"
          ],
          "docstring": "Get the state at a specific index in the chain.\n\nArgs:\n    index: Index in the chain (0 is base state)\n    \nReturns:\n    Dict[str, Any]: State at the specified index\n    \nRaises:\n    IndexError: If index is out of range",
          "decorators": []
        },
        {
          "name": "get_current_state",
          "line": 683,
          "args": [
            "self"
          ],
          "docstring": "Get the current (latest) state in the chain.\n\nReturns:\n    Dict[str, Any]: Current state",
          "decorators": []
        },
        {
          "name": "get_delta_at_index",
          "line": 691,
          "args": [
            "self",
            "index"
          ],
          "docstring": "Get a delta record at a specific index in the chain.\n\nArgs:\n    index: Index in the chain\n    \nReturns:\n    Optional[DeltaRecord]: Delta record or None if index out of range",
          "decorators": []
        },
        {
          "name": "clear_chain",
          "line": 705,
          "args": [
            "self"
          ],
          "docstring": "Clear the delta chain.",
          "decorators": []
        },
        {
          "name": "rebaseline",
          "line": 719,
          "args": [
            "self"
          ],
          "docstring": "Rebaseline the chain by setting current state as new base state.",
          "decorators": []
        },
        {
          "name": "_optimize_chain",
          "line": 739,
          "args": [
            "self"
          ],
          "docstring": "Optimize the delta chain by merging deltas.",
          "decorators": []
        },
        {
          "name": "get_chain_metrics",
          "line": 764,
          "args": [
            "self"
          ],
          "docstring": "Get metrics about the delta chain.\n\nReturns:\n    Dict[str, Any]: Dictionary of chain metrics",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DeltaCompressionError",
          "line": 54,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when delta compression operations fail.",
          "methods": []
        },
        {
          "name": "DeltaRecord",
          "line": 59,
          "bases": [],
          "docstring": "Represents a delta record with changes and metadata.\n\nDelta records store the changes between two states, along with\nmetadata about the delta operation.",
          "methods": [
            {
              "name": "__init__",
              "line": 66,
              "args": [
                "self",
                "timestamp",
                "changes",
                "removed_keys",
                "metadata",
                "compression_ratio",
                "size_bytes",
                "checksum"
              ],
              "docstring": "Initialize a delta record.\n\nArgs:\n    timestamp: When the delta was created\n    changes: Key-value changes\n    removed_keys: Keys that were removed\n    metadata: Additional metadata\n    compression_ratio: Compression ratio achieved\n    size_bytes: Size in bytes after compression\n    checksum: Integrity checksum"
            },
            {
              "name": "__repr__",
              "line": 96,
              "args": [
                "self"
              ],
              "docstring": "String representation of delta record."
            },
            {
              "name": "to_dict",
              "line": 102,
              "args": [
                "self"
              ],
              "docstring": "Convert to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary representation"
            },
            {
              "name": "from_dict",
              "line": 119,
              "args": [
                "cls",
                "data"
              ],
              "docstring": "Create from dictionary representation.\n\nArgs:\n    data: Dictionary representation\n    \nReturns:\n    DeltaRecord: Reconstructed delta record"
            }
          ]
        },
        {
          "name": "DeltaCompressor",
          "line": 139,
          "bases": [],
          "docstring": "Delta compression engine for efficient state difference tracking.\n\nThis class handles the detection, compression, and management of \nincremental changes between data states.",
          "methods": [
            {
              "name": "__init__",
              "line": 146,
              "args": [
                "self",
                "strategy",
                "enable_compression",
                "compression_level"
              ],
              "docstring": "Initialize the delta compressor.\n\nArgs:\n    strategy: Delta compression strategy to use\n    enable_compression: Whether to enable compression\n    compression_level: Compression level (1-9, higher is more compression)"
            },
            {
              "name": "calculate_delta",
              "line": 175,
              "args": [
                "self",
                "old_state",
                "new_state",
                "include_unchanged"
              ],
              "docstring": "Calculate delta between two states.\n\nArgs:\n    old_state: Previous state\n    new_state: Current state\n    include_unchanged: Whether to include unchanged values\n    \nReturns:\n    Dict[str, Any]: Delta information including changes and removals"
            },
            {
              "name": "_dict_delta",
              "line": 234,
              "args": [
                "self",
                "old_state",
                "new_state",
                "include_unchanged"
              ],
              "docstring": "Calculate dictionary-based delta.\n\nArgs:\n    old_state: Previous state dictionary\n    new_state: Current state dictionary\n    include_unchanged: Whether to include unchanged values\n    \nReturns:\n    Dict[str, Any]: Delta information"
            },
            {
              "name": "_binary_delta",
              "line": 300,
              "args": [
                "self",
                "old_state",
                "new_state"
              ],
              "docstring": "Calculate binary delta using bsdiff if available.\n\nArgs:\n    old_state: Previous state\n    new_state: Current state\n    \nReturns:\n    Dict[str, Any]: Delta information"
            },
            {
              "name": "apply_delta",
              "line": 340,
              "args": [
                "self",
                "base_state",
                "delta_info"
              ],
              "docstring": "Apply delta to a base state to produce new state.\n\nArgs:\n    base_state: Base state to apply delta to\n    delta_info: Delta information from calculate_delta\n    \nReturns:\n    Dict[str, Any]: Updated state\n    \nRaises:\n    DeltaCompressionError: If delta application fails"
            },
            {
              "name": "create_delta_record",
              "line": 386,
              "args": [
                "self",
                "changes",
                "removed_keys",
                "timestamp"
              ],
              "docstring": "Create compressed delta record from changes.\n\nArgs:\n    changes: Dictionary of changes\n    removed_keys: List of removed keys\n    timestamp: Delta creation timestamp (default: current time)\n    \nReturns:\n    DeltaRecord: Compressed delta record"
            },
            {
              "name": "merge_deltas",
              "line": 456,
              "args": [
                "self",
                "deltas"
              ],
              "docstring": "Merge multiple deltas into a single delta.\n\nArgs:\n    deltas: List of deltas to merge\n    \nReturns:\n    Optional[DeltaRecord]: Merged delta or None if input is empty"
            },
            {
              "name": "get_compression_stats",
              "line": 498,
              "args": [
                "self"
              ],
              "docstring": "Get compression statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of compression statistics"
            },
            {
              "name": "serialize_delta",
              "line": 506,
              "args": [
                "self",
                "delta"
              ],
              "docstring": "Serialize delta record to bytes for storage.\n\nArgs:\n    delta: Delta record to serialize\n    \nReturns:\n    bytes: Serialized delta data"
            },
            {
              "name": "deserialize_delta",
              "line": 527,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Deserialize delta record from bytes.\n\nArgs:\n    data: Serialized delta data\n    \nReturns:\n    DeltaRecord: Deserialized delta record"
            }
          ]
        },
        {
          "name": "DeltaChain",
          "line": 550,
          "bases": [],
          "docstring": "Manages chains of delta records for efficient storage and retrieval.\n\nThis class handles sequences of delta records, including optimization,\nrebaseline, and state reconstruction operations.",
          "methods": [
            {
              "name": "__init__",
              "line": 557,
              "args": [
                "self",
                "delta_strategy",
                "max_chain_length",
                "enable_rebase"
              ],
              "docstring": "Initialize the delta chain manager.\n\nArgs:\n    delta_strategy: Delta compression strategy\n    max_chain_length: Maximum chain length before optimization\n    enable_rebase: Whether to enable automatic rebaseline"
            },
            {
              "name": "add_delta",
              "line": 587,
              "args": [
                "self",
                "delta"
              ],
              "docstring": "Add a delta to the chain.\n\nArgs:\n    delta: Delta record to add"
            },
            {
              "name": "add_state",
              "line": 605,
              "args": [
                "self",
                "state",
                "timestamp"
              ],
              "docstring": "Add a new state to the chain by calculating delta from previous state.\n\nArgs:\n    state: New state to add\n    timestamp: Timestamp for the delta (default: current time)\n    \nReturns:\n    DeltaRecord: Created delta record"
            },
            {
              "name": "get_state_at_index",
              "line": 655,
              "args": [
                "self",
                "index"
              ],
              "docstring": "Get the state at a specific index in the chain.\n\nArgs:\n    index: Index in the chain (0 is base state)\n    \nReturns:\n    Dict[str, Any]: State at the specified index\n    \nRaises:\n    IndexError: If index is out of range"
            },
            {
              "name": "get_current_state",
              "line": 683,
              "args": [
                "self"
              ],
              "docstring": "Get the current (latest) state in the chain.\n\nReturns:\n    Dict[str, Any]: Current state"
            },
            {
              "name": "get_delta_at_index",
              "line": 691,
              "args": [
                "self",
                "index"
              ],
              "docstring": "Get a delta record at a specific index in the chain.\n\nArgs:\n    index: Index in the chain\n    \nReturns:\n    Optional[DeltaRecord]: Delta record or None if index out of range"
            },
            {
              "name": "clear_chain",
              "line": 705,
              "args": [
                "self"
              ],
              "docstring": "Clear the delta chain."
            },
            {
              "name": "rebaseline",
              "line": 719,
              "args": [
                "self"
              ],
              "docstring": "Rebaseline the chain by setting current state as new base state."
            },
            {
              "name": "_optimize_chain",
              "line": 739,
              "args": [
                "self"
              ],
              "docstring": "Optimize the delta chain by merging deltas."
            },
            {
              "name": "get_chain_metrics",
              "line": 764,
              "args": [
                "self"
              ],
              "docstring": "Get metrics about the delta chain.\n\nReturns:\n    Dict[str, Any]: Dictionary of chain metrics"
            }
          ]
        }
      ],
      "lines_of_code": 635,
      "complexity_score": 78,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "e6ba96f46b3d9d8a054ab32d594a1d22",
      "framework_role": "persistence_system",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/persistence/enhanced.py": {
      "name": ".restructuring_backup/orchestrator/persistence/enhanced.py",
      "path": ".restructuring_backup/orchestrator/persistence/enhanced.py",
      "component_type": "orchestration",
      "description": "Enhanced Persistence Module for Framework0.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py"
      ],
      "exports": [
        "create_enhanced_persistence",
        "create_cached_persistence",
        "__init__",
        "_with_lock",
        "_schedule_auto_snapshot",
        "_has_changes_since_last_snapshot",
        "_load_current_state",
        "save",
        "_save",
        "load",
        "_load",
        "get",
        "_get",
        "set",
        "_set",
        "delete",
        "_delete",
        "clear",
        "_clear",
        "create_snapshot",
        "_create_snapshot",
        "create_delta_snapshot",
        "_create_delta_snapshot",
        "restore_snapshot",
        "_restore_snapshot",
        "restore_snapshot_by_tag",
        "_restore_snapshot_by_tag",
        "list_snapshots",
        "get_snapshot_data",
        "compare_snapshots",
        "get_metrics",
        "export_data",
        "_export_data",
        "import_data",
        "_import_data",
        "cleanup",
        "__del__",
        "__init__",
        "save",
        "load",
        "get",
        "set",
        "delete",
        "clear",
        "__getattr__",
        "wrapper",
        "_auto_snapshot",
        "EnhancedPersistenceError",
        "EnhancedPersistenceV2",
        "CachedPersistenceDecorator"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "uuid",
        "shutil",
        "hashlib",
        "logging",
        "tempfile",
        "threading",
        "functools",
        "datetime",
        "pathlib",
        "typing",
        "orchestrator.persistence.core",
        "orchestrator.persistence.delta",
        "orchestrator.persistence.snapshot",
        "orchestrator.persistence.cache",
        "numpy"
      ],
      "functions": [
        {
          "name": "create_enhanced_persistence",
          "line": 1096,
          "args": [
            "base_path",
            "storage_backend",
            "cache_strategy",
            "delta_strategy",
            "max_snapshots",
            "enable_compression",
            "auto_snapshot_interval",
            "thread_safe"
          ],
          "docstring": "Create an enhanced persistence instance with the specified configuration.\n\nArgs:\n    base_path: Base directory for persistence storage\n    storage_backend: Storage backend to use\n    cache_strategy: Cache strategy to use\n    delta_strategy: Delta compression strategy to use\n    max_snapshots: Maximum number of snapshots to keep\n    enable_compression: Whether to enable compression\n    auto_snapshot_interval: Interval for auto snapshots\n    thread_safe: Whether to make operations thread-safe\n    \nReturns:\n    EnhancedPersistenceV2: Configured persistence instance",
          "decorators": []
        },
        {
          "name": "create_cached_persistence",
          "line": 1133,
          "args": [
            "persistence_instance",
            "ttl"
          ],
          "docstring": "Create a cached decorator around a persistence instance.\n\nArgs:\n    persistence_instance: Base persistence instance\n    ttl: Cache time-to-live in seconds\n    \nReturns:\n    CachedPersistenceDecorator: Cached persistence decorator",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 66,
          "args": [
            "self",
            "base_path",
            "storage_backend",
            "cache_strategy",
            "delta_strategy",
            "max_snapshots",
            "enable_compression",
            "auto_snapshot_interval",
            "thread_safe"
          ],
          "docstring": "Initialize the enhanced persistence system.\n\nArgs:\n    base_path: Base directory for persistence storage\n    storage_backend: Storage backend to use\n    cache_strategy: Cache strategy to use\n    delta_strategy: Delta compression strategy to use\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)\n    enable_compression: Whether to enable data compression\n    auto_snapshot_interval: Interval in seconds for auto-snapshots\n    thread_safe: Whether to make operations thread-safe",
          "decorators": []
        },
        {
          "name": "_with_lock",
          "line": 158,
          "args": [
            "self",
            "func"
          ],
          "docstring": "Decorator to execute a function with the lock if thread safety is enabled.\n\nArgs:\n    func: Function to wrap\n    \nReturns:\n    Callable: Wrapped function",
          "decorators": []
        },
        {
          "name": "_schedule_auto_snapshot",
          "line": 179,
          "args": [
            "self"
          ],
          "docstring": "Schedule the next auto-snapshot operation.",
          "decorators": []
        },
        {
          "name": "_has_changes_since_last_snapshot",
          "line": 202,
          "args": [
            "self"
          ],
          "docstring": "Check if data has changed since the last snapshot.\n\nReturns:\n    bool: True if changes detected, False otherwise",
          "decorators": []
        },
        {
          "name": "_load_current_state",
          "line": 224,
          "args": [
            "self"
          ],
          "docstring": "Load the current state from the most recent snapshot if available.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 247,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to persistence storage.\n\nArgs:\n    data: Dictionary of data to save\n    \nReturns:\n    str: Operation ID for the save operation\n    \nRaises:\n    EnhancedPersistenceError: If save operation fails",
          "decorators": []
        },
        {
          "name": "_save",
          "line": 261,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Internal implementation of save (without lock).",
          "decorators": []
        },
        {
          "name": "load",
          "line": 298,
          "args": [
            "self"
          ],
          "docstring": "Load data from persistence storage.\n\nReturns:\n    Dict[str, Any]: Loaded data\n    \nRaises:\n    EnhancedPersistenceError: If load operation fails",
          "decorators": []
        },
        {
          "name": "_load",
          "line": 309,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of load (without lock).",
          "decorators": []
        },
        {
          "name": "get",
          "line": 359,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get a specific value from persistence storage.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key doesn't exist\n    \nReturns:\n    Any: The retrieved value or default\n    \nRaises:\n    EnhancedPersistenceError: If get operation fails",
          "decorators": []
        },
        {
          "name": "_get",
          "line": 374,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Internal implementation of get (without lock).",
          "decorators": []
        },
        {
          "name": "set",
          "line": 406,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Set a specific value in persistence storage.\n\nArgs:\n    key: Key to set\n    value: Value to set\n    \nRaises:\n    EnhancedPersistenceError: If set operation fails",
          "decorators": []
        },
        {
          "name": "_set",
          "line": 418,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Internal implementation of set (without lock).",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 456,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete a specific value from persistence storage.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if key existed and was deleted, False otherwise\n    \nRaises:\n    EnhancedPersistenceError: If delete operation fails",
          "decorators": []
        },
        {
          "name": "_delete",
          "line": 470,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of delete (without lock).",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 514,
          "args": [
            "self"
          ],
          "docstring": "Clear all data from persistence storage.\n\nRaises:\n    EnhancedPersistenceError: If clear operation fails",
          "decorators": []
        },
        {
          "name": "_clear",
          "line": 522,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of clear (without lock).",
          "decorators": []
        },
        {
          "name": "create_snapshot",
          "line": 552,
          "args": [
            "self",
            "tag",
            "description"
          ],
          "docstring": "Create a snapshot of the current data state.\n\nArgs:\n    tag: Tag to apply to the snapshot\n    description: Human-readable description\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    EnhancedPersistenceError: If snapshot creation fails",
          "decorators": []
        },
        {
          "name": "_create_snapshot",
          "line": 569,
          "args": [
            "self",
            "tag",
            "description"
          ],
          "docstring": "Internal implementation of create_snapshot (without lock).",
          "decorators": []
        },
        {
          "name": "create_delta_snapshot",
          "line": 604,
          "args": [
            "self",
            "base_version",
            "tag",
            "description"
          ],
          "docstring": "Create a delta snapshot relative to a base snapshot.\n\nArgs:\n    base_version: Version ID of base snapshot (latest if None)\n    tag: Tag to apply to the snapshot\n    description: Human-readable description\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    EnhancedPersistenceError: If snapshot creation fails",
          "decorators": []
        },
        {
          "name": "_create_delta_snapshot",
          "line": 623,
          "args": [
            "self",
            "base_version",
            "tag",
            "description"
          ],
          "docstring": "Internal implementation of create_delta_snapshot (without lock).",
          "decorators": []
        },
        {
          "name": "restore_snapshot",
          "line": 663,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Restore data from a specific snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to restore\n    \nReturns:\n    Dict[str, Any]: Restored data\n    \nRaises:\n    EnhancedPersistenceError: If restore operation fails",
          "decorators": []
        },
        {
          "name": "_restore_snapshot",
          "line": 677,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Internal implementation of restore_snapshot (without lock).",
          "decorators": []
        },
        {
          "name": "restore_snapshot_by_tag",
          "line": 718,
          "args": [
            "self",
            "tag",
            "latest"
          ],
          "docstring": "Restore data from a snapshot with a specific tag.\n\nArgs:\n    tag: Tag to search for\n    latest: Whether to get the latest snapshot with the tag\n    \nReturns:\n    Dict[str, Any]: Restored data\n    \nRaises:\n    EnhancedPersistenceError: If restore operation fails",
          "decorators": []
        },
        {
          "name": "_restore_snapshot_by_tag",
          "line": 733,
          "args": [
            "self",
            "tag",
            "latest"
          ],
          "docstring": "Internal implementation of restore_snapshot_by_tag (without lock).",
          "decorators": []
        },
        {
          "name": "list_snapshots",
          "line": 774,
          "args": [
            "self"
          ],
          "docstring": "List all available snapshots.\n\nReturns:\n    List[Dict[str, Any]]: List of snapshot metadata",
          "decorators": []
        },
        {
          "name": "get_snapshot_data",
          "line": 787,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Get data from a specific snapshot without restoring it.\n\nArgs:\n    version_id: Version ID of the snapshot\n    \nReturns:\n    Dict[str, Any]: Snapshot data\n    \nRaises:\n    EnhancedPersistenceError: If operation fails",
          "decorators": []
        },
        {
          "name": "compare_snapshots",
          "line": 809,
          "args": [
            "self",
            "version1",
            "version2"
          ],
          "docstring": "Compare two snapshots and return differences.\n\nArgs:\n    version1: First snapshot version ID\n    version2: Second snapshot version ID\n    \nReturns:\n    Dict[str, Any]: Differences between snapshots\n    \nRaises:\n    EnhancedPersistenceError: If comparison fails",
          "decorators": []
        },
        {
          "name": "get_metrics",
          "line": 833,
          "args": [
            "self"
          ],
          "docstring": "Get performance and operation metrics.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics",
          "decorators": []
        },
        {
          "name": "export_data",
          "line": 855,
          "args": [
            "self",
            "export_path"
          ],
          "docstring": "Export the current data to a standalone file.\n\nArgs:\n    export_path: Path to export the data to\n    \nReturns:\n    str: Path to the exported file\n    \nRaises:\n    EnhancedPersistenceError: If export fails",
          "decorators": []
        },
        {
          "name": "_export_data",
          "line": 869,
          "args": [
            "self",
            "export_path"
          ],
          "docstring": "Internal implementation of export_data (without lock).",
          "decorators": []
        },
        {
          "name": "import_data",
          "line": 902,
          "args": [
            "self",
            "import_path"
          ],
          "docstring": "Import data from an exported file.\n\nArgs:\n    import_path: Path to the exported data file\n    \nReturns:\n    Dict[str, Any]: Imported data\n    \nRaises:\n    EnhancedPersistenceError: If import fails",
          "decorators": []
        },
        {
          "name": "_import_data",
          "line": 916,
          "args": [
            "self",
            "import_path"
          ],
          "docstring": "Internal implementation of import_data (without lock).",
          "decorators": []
        },
        {
          "name": "cleanup",
          "line": 959,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources used by persistence system.",
          "decorators": []
        },
        {
          "name": "__del__",
          "line": 978,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources when object is garbage collected.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 989,
          "args": [
            "self",
            "persistence_instance",
            "ttl"
          ],
          "docstring": "Initialize the cached persistence decorator.\n\nArgs:\n    persistence_instance: Persistence instance to decorate\n    ttl: Cache time-to-live in seconds",
          "decorators": []
        },
        {
          "name": "save",
          "line": 1001,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data with cache invalidation.\n\nArgs:\n    data: Data to save\n    \nReturns:\n    str: Operation ID",
          "decorators": []
        },
        {
          "name": "load",
          "line": 1014,
          "args": [
            "self"
          ],
          "docstring": "Load data with caching.\n\nReturns:\n    Dict[str, Any]: Loaded data",
          "decorators": []
        },
        {
          "name": "get",
          "line": 1030,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get value with caching.\n\nArgs:\n    key: Key to get\n    default: Default value\n    \nReturns:\n    Any: Value or default",
          "decorators": []
        },
        {
          "name": "set",
          "line": 1050,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Set value with cache update.\n\nArgs:\n    key: Key to set\n    value: Value to set",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 1062,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete value with cache invalidation.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if deleted",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 1077,
          "args": [
            "self"
          ],
          "docstring": "Clear data with cache invalidation.",
          "decorators": []
        },
        {
          "name": "__getattr__",
          "line": 1082,
          "args": [
            "self",
            "name"
          ],
          "docstring": "Delegate all other methods to the underlying instance.\n\nArgs:\n    name: Method name\n    \nReturns:\n    Any: Method result",
          "decorators": []
        },
        {
          "name": "wrapper",
          "line": 168,
          "args": [],
          "docstring": "",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "_auto_snapshot",
          "line": 187,
          "args": [],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedPersistenceError",
          "line": 53,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when enhanced persistence operations fail.",
          "methods": []
        },
        {
          "name": "EnhancedPersistenceV2",
          "line": 58,
          "bases": [
            "PersistenceBase"
          ],
          "docstring": "Enhanced persistence implementation with comprehensive features.\n\nThis class integrates all persistence components (delta compression,\nsnapshot management, and caching) into a cohesive solution that provides\nefficient, reliable data persistence with advanced features.",
          "methods": [
            {
              "name": "__init__",
              "line": 66,
              "args": [
                "self",
                "base_path",
                "storage_backend",
                "cache_strategy",
                "delta_strategy",
                "max_snapshots",
                "enable_compression",
                "auto_snapshot_interval",
                "thread_safe"
              ],
              "docstring": "Initialize the enhanced persistence system.\n\nArgs:\n    base_path: Base directory for persistence storage\n    storage_backend: Storage backend to use\n    cache_strategy: Cache strategy to use\n    delta_strategy: Delta compression strategy to use\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)\n    enable_compression: Whether to enable data compression\n    auto_snapshot_interval: Interval in seconds for auto-snapshots\n    thread_safe: Whether to make operations thread-safe"
            },
            {
              "name": "_with_lock",
              "line": 158,
              "args": [
                "self",
                "func"
              ],
              "docstring": "Decorator to execute a function with the lock if thread safety is enabled.\n\nArgs:\n    func: Function to wrap\n    \nReturns:\n    Callable: Wrapped function"
            },
            {
              "name": "_schedule_auto_snapshot",
              "line": 179,
              "args": [
                "self"
              ],
              "docstring": "Schedule the next auto-snapshot operation."
            },
            {
              "name": "_has_changes_since_last_snapshot",
              "line": 202,
              "args": [
                "self"
              ],
              "docstring": "Check if data has changed since the last snapshot.\n\nReturns:\n    bool: True if changes detected, False otherwise"
            },
            {
              "name": "_load_current_state",
              "line": 224,
              "args": [
                "self"
              ],
              "docstring": "Load the current state from the most recent snapshot if available."
            },
            {
              "name": "save",
              "line": 247,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to persistence storage.\n\nArgs:\n    data: Dictionary of data to save\n    \nReturns:\n    str: Operation ID for the save operation\n    \nRaises:\n    EnhancedPersistenceError: If save operation fails"
            },
            {
              "name": "_save",
              "line": 261,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Internal implementation of save (without lock)."
            },
            {
              "name": "load",
              "line": 298,
              "args": [
                "self"
              ],
              "docstring": "Load data from persistence storage.\n\nReturns:\n    Dict[str, Any]: Loaded data\n    \nRaises:\n    EnhancedPersistenceError: If load operation fails"
            },
            {
              "name": "_load",
              "line": 309,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of load (without lock)."
            },
            {
              "name": "get",
              "line": 359,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get a specific value from persistence storage.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key doesn't exist\n    \nReturns:\n    Any: The retrieved value or default\n    \nRaises:\n    EnhancedPersistenceError: If get operation fails"
            },
            {
              "name": "_get",
              "line": 374,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Internal implementation of get (without lock)."
            },
            {
              "name": "set",
              "line": 406,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Set a specific value in persistence storage.\n\nArgs:\n    key: Key to set\n    value: Value to set\n    \nRaises:\n    EnhancedPersistenceError: If set operation fails"
            },
            {
              "name": "_set",
              "line": 418,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Internal implementation of set (without lock)."
            },
            {
              "name": "delete",
              "line": 456,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete a specific value from persistence storage.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if key existed and was deleted, False otherwise\n    \nRaises:\n    EnhancedPersistenceError: If delete operation fails"
            },
            {
              "name": "_delete",
              "line": 470,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of delete (without lock)."
            },
            {
              "name": "clear",
              "line": 514,
              "args": [
                "self"
              ],
              "docstring": "Clear all data from persistence storage.\n\nRaises:\n    EnhancedPersistenceError: If clear operation fails"
            },
            {
              "name": "_clear",
              "line": 522,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of clear (without lock)."
            },
            {
              "name": "create_snapshot",
              "line": 552,
              "args": [
                "self",
                "tag",
                "description"
              ],
              "docstring": "Create a snapshot of the current data state.\n\nArgs:\n    tag: Tag to apply to the snapshot\n    description: Human-readable description\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    EnhancedPersistenceError: If snapshot creation fails"
            },
            {
              "name": "_create_snapshot",
              "line": 569,
              "args": [
                "self",
                "tag",
                "description"
              ],
              "docstring": "Internal implementation of create_snapshot (without lock)."
            },
            {
              "name": "create_delta_snapshot",
              "line": 604,
              "args": [
                "self",
                "base_version",
                "tag",
                "description"
              ],
              "docstring": "Create a delta snapshot relative to a base snapshot.\n\nArgs:\n    base_version: Version ID of base snapshot (latest if None)\n    tag: Tag to apply to the snapshot\n    description: Human-readable description\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    EnhancedPersistenceError: If snapshot creation fails"
            },
            {
              "name": "_create_delta_snapshot",
              "line": 623,
              "args": [
                "self",
                "base_version",
                "tag",
                "description"
              ],
              "docstring": "Internal implementation of create_delta_snapshot (without lock)."
            },
            {
              "name": "restore_snapshot",
              "line": 663,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Restore data from a specific snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to restore\n    \nReturns:\n    Dict[str, Any]: Restored data\n    \nRaises:\n    EnhancedPersistenceError: If restore operation fails"
            },
            {
              "name": "_restore_snapshot",
              "line": 677,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Internal implementation of restore_snapshot (without lock)."
            },
            {
              "name": "restore_snapshot_by_tag",
              "line": 718,
              "args": [
                "self",
                "tag",
                "latest"
              ],
              "docstring": "Restore data from a snapshot with a specific tag.\n\nArgs:\n    tag: Tag to search for\n    latest: Whether to get the latest snapshot with the tag\n    \nReturns:\n    Dict[str, Any]: Restored data\n    \nRaises:\n    EnhancedPersistenceError: If restore operation fails"
            },
            {
              "name": "_restore_snapshot_by_tag",
              "line": 733,
              "args": [
                "self",
                "tag",
                "latest"
              ],
              "docstring": "Internal implementation of restore_snapshot_by_tag (without lock)."
            },
            {
              "name": "list_snapshots",
              "line": 774,
              "args": [
                "self"
              ],
              "docstring": "List all available snapshots.\n\nReturns:\n    List[Dict[str, Any]]: List of snapshot metadata"
            },
            {
              "name": "get_snapshot_data",
              "line": 787,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Get data from a specific snapshot without restoring it.\n\nArgs:\n    version_id: Version ID of the snapshot\n    \nReturns:\n    Dict[str, Any]: Snapshot data\n    \nRaises:\n    EnhancedPersistenceError: If operation fails"
            },
            {
              "name": "compare_snapshots",
              "line": 809,
              "args": [
                "self",
                "version1",
                "version2"
              ],
              "docstring": "Compare two snapshots and return differences.\n\nArgs:\n    version1: First snapshot version ID\n    version2: Second snapshot version ID\n    \nReturns:\n    Dict[str, Any]: Differences between snapshots\n    \nRaises:\n    EnhancedPersistenceError: If comparison fails"
            },
            {
              "name": "get_metrics",
              "line": 833,
              "args": [
                "self"
              ],
              "docstring": "Get performance and operation metrics.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics"
            },
            {
              "name": "export_data",
              "line": 855,
              "args": [
                "self",
                "export_path"
              ],
              "docstring": "Export the current data to a standalone file.\n\nArgs:\n    export_path: Path to export the data to\n    \nReturns:\n    str: Path to the exported file\n    \nRaises:\n    EnhancedPersistenceError: If export fails"
            },
            {
              "name": "_export_data",
              "line": 869,
              "args": [
                "self",
                "export_path"
              ],
              "docstring": "Internal implementation of export_data (without lock)."
            },
            {
              "name": "import_data",
              "line": 902,
              "args": [
                "self",
                "import_path"
              ],
              "docstring": "Import data from an exported file.\n\nArgs:\n    import_path: Path to the exported data file\n    \nReturns:\n    Dict[str, Any]: Imported data\n    \nRaises:\n    EnhancedPersistenceError: If import fails"
            },
            {
              "name": "_import_data",
              "line": 916,
              "args": [
                "self",
                "import_path"
              ],
              "docstring": "Internal implementation of import_data (without lock)."
            },
            {
              "name": "cleanup",
              "line": 959,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources used by persistence system."
            },
            {
              "name": "__del__",
              "line": 978,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources when object is garbage collected."
            }
          ]
        },
        {
          "name": "CachedPersistenceDecorator",
          "line": 986,
          "bases": [],
          "docstring": "Decorator that adds caching to persistence operations.",
          "methods": [
            {
              "name": "__init__",
              "line": 989,
              "args": [
                "self",
                "persistence_instance",
                "ttl"
              ],
              "docstring": "Initialize the cached persistence decorator.\n\nArgs:\n    persistence_instance: Persistence instance to decorate\n    ttl: Cache time-to-live in seconds"
            },
            {
              "name": "save",
              "line": 1001,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data with cache invalidation.\n\nArgs:\n    data: Data to save\n    \nReturns:\n    str: Operation ID"
            },
            {
              "name": "load",
              "line": 1014,
              "args": [
                "self"
              ],
              "docstring": "Load data with caching.\n\nReturns:\n    Dict[str, Any]: Loaded data"
            },
            {
              "name": "get",
              "line": 1030,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get value with caching.\n\nArgs:\n    key: Key to get\n    default: Default value\n    \nReturns:\n    Any: Value or default"
            },
            {
              "name": "set",
              "line": 1050,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Set value with cache update.\n\nArgs:\n    key: Key to set\n    value: Value to set"
            },
            {
              "name": "delete",
              "line": 1062,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete value with cache invalidation.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if deleted"
            },
            {
              "name": "clear",
              "line": 1077,
              "args": [
                "self"
              ],
              "docstring": "Clear data with cache invalidation."
            },
            {
              "name": "__getattr__",
              "line": 1082,
              "args": [
                "self",
                "name"
              ],
              "docstring": "Delegate all other methods to the underlying instance.\n\nArgs:\n    name: Method name\n    \nReturns:\n    Any: Method result"
            }
          ]
        }
      ],
      "lines_of_code": 892,
      "complexity_score": 111,
      "last_modified": "2025-10-04T21:52:33.133398",
      "checksum": "c0314af0aaaf378dbf315ac2b6a70f3b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/persistence/snapshot.py": {
      "name": ".restructuring_backup/orchestrator/persistence/snapshot.py",
      "path": ".restructuring_backup/orchestrator/persistence/snapshot.py",
      "component_type": "orchestration",
      "description": "Snapshot Management Module for Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py"
      ],
      "exports": [
        "create_snapshot_manager",
        "__init__",
        "to_dict",
        "from_dict",
        "update_integrity_info",
        "__init__",
        "_initialize_storage",
        "_load_registry",
        "_save_registry",
        "create_snapshot",
        "_save_data_to_file",
        "_load_data_from_file",
        "get_snapshot",
        "get_latest_snapshot",
        "get_snapshot_by_tag",
        "list_snapshots",
        "list_versions",
        "list_tags",
        "tag_snapshot",
        "untag_snapshot",
        "delete_snapshot",
        "_enforce_snapshot_limit",
        "create_delta_snapshot",
        "get_delta_snapshot",
        "compare_snapshots",
        "export_snapshot",
        "import_snapshot",
        "cleanup",
        "clear_all",
        "__del__",
        "SnapshotError",
        "VersioningError",
        "SnapshotNotFoundError",
        "SnapshotMetadata",
        "SnapshotManager"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "uuid",
        "shutil",
        "hashlib",
        "logging",
        "tempfile",
        "datetime",
        "pathlib",
        "typing",
        "orchestrator.persistence.core",
        "orchestrator.persistence.delta",
        "numpy",
        "sys",
        "pickle",
        "pickle",
        "pickle",
        "pickle",
        "pickle",
        "pickle",
        "pickle"
      ],
      "functions": [
        {
          "name": "create_snapshot_manager",
          "line": 1072,
          "args": [
            "base_path",
            "storage_backend",
            "delta_strategy",
            "max_snapshots"
          ],
          "docstring": "Create a configured SnapshotManager instance.\n\nArgs:\n    base_path: Base directory for snapshot storage\n    storage_backend: Storage backend to use\n    delta_strategy: Delta compression strategy\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)\n    \nReturns:\n    SnapshotManager: Configured snapshot manager instance",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 61,
          "args": [
            "self",
            "version",
            "tags",
            "description",
            "user_info"
          ],
          "docstring": "Initialize snapshot metadata.\n\nArgs:\n    version: Version identifier (auto-generated if None)\n    tags: List of tags for categorization\n    description: Human-readable description\n    user_info: Additional user-provided metadata",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 94,
          "args": [
            "self"
          ],
          "docstring": "Convert metadata to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary representation of metadata",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 112,
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create metadata object from dictionary representation.\n\nArgs:\n    data: Dictionary representation of metadata\n    \nReturns:\n    SnapshotMetadata: Reconstructed metadata object",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "update_integrity_info",
          "line": 139,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Update integrity information based on the data.\n\nArgs:\n    data: The data to calculate integrity info for",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 177,
          "args": [
            "self",
            "base_path",
            "storage_backend",
            "delta_strategy",
            "max_snapshots"
          ],
          "docstring": "Initialize the snapshot manager.\n\nArgs:\n    base_path: Base directory for snapshot storage\n    storage_backend: Storage backend to use\n    delta_strategy: Delta compression strategy\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)",
          "decorators": []
        },
        {
          "name": "_initialize_storage",
          "line": 216,
          "args": [
            "self"
          ],
          "docstring": "Initialize the storage backend.\n\nCreates necessary directories and loads existing snapshot registry.",
          "decorators": []
        },
        {
          "name": "_load_registry",
          "line": 250,
          "args": [
            "self",
            "registry_data"
          ],
          "docstring": "Load snapshot registry from parsed data.\n\nArgs:\n    registry_data: Parsed registry data",
          "decorators": []
        },
        {
          "name": "_save_registry",
          "line": 276,
          "args": [
            "self"
          ],
          "docstring": "Save the snapshot registry to storage.",
          "decorators": []
        },
        {
          "name": "create_snapshot",
          "line": 306,
          "args": [
            "self",
            "data",
            "tags",
            "description",
            "user_info",
            "version"
          ],
          "docstring": "Create a new snapshot of data.\n\nArgs:\n    data: Data to snapshot\n    tags: List of tags to apply\n    description: Human-readable description\n    user_info: Additional user metadata\n    version: Specific version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    SnapshotError: If snapshot creation fails",
          "decorators": []
        },
        {
          "name": "_save_data_to_file",
          "line": 378,
          "args": [
            "self",
            "data",
            "file_path"
          ],
          "docstring": "Save data to a file with appropriate serialization.\n\nArgs:\n    data: Data to save\n    file_path: Path to save data to\n    \nRaises:\n    SnapshotError: If data cannot be saved",
          "decorators": []
        },
        {
          "name": "_load_data_from_file",
          "line": 421,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Load data from a file with appropriate deserialization.\n\nArgs:\n    file_path: Path to load data from\n    \nReturns:\n    Any: Loaded data\n    \nRaises:\n    SnapshotError: If data cannot be loaded",
          "decorators": []
        },
        {
          "name": "get_snapshot",
          "line": 464,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Retrieve a specific snapshot by version ID.\n\nArgs:\n    version_id: Version ID of the snapshot to retrieve\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "get_latest_snapshot",
          "line": 495,
          "args": [
            "self"
          ],
          "docstring": "Retrieve the most recent snapshot.\n\nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If no snapshots exist",
          "decorators": []
        },
        {
          "name": "get_snapshot_by_tag",
          "line": 515,
          "args": [
            "self",
            "tag",
            "latest"
          ],
          "docstring": "Retrieve a snapshot by tag.\n\nArgs:\n    tag: Tag to search for\n    latest: Whether to get the latest snapshot with the tag\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If no snapshot with the given tag exists",
          "decorators": []
        },
        {
          "name": "list_snapshots",
          "line": 544,
          "args": [
            "self"
          ],
          "docstring": "List all available snapshots.\n\nReturns:\n    List[Dict[str, Any]]: List of snapshot metadata dictionaries",
          "decorators": []
        },
        {
          "name": "list_versions",
          "line": 555,
          "args": [
            "self"
          ],
          "docstring": "List all available version IDs.\n\nReturns:\n    List[str]: List of version IDs",
          "decorators": []
        },
        {
          "name": "list_tags",
          "line": 563,
          "args": [
            "self"
          ],
          "docstring": "List all available tags with counts.\n\nReturns:\n    Dict[str, int]: Dictionary of tag to count of snapshots",
          "decorators": []
        },
        {
          "name": "tag_snapshot",
          "line": 571,
          "args": [
            "self",
            "version_id",
            "tags"
          ],
          "docstring": "Add tags to an existing snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to tag\n    tags: List of tags to add\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "untag_snapshot",
          "line": 608,
          "args": [
            "self",
            "version_id",
            "tags"
          ],
          "docstring": "Remove tags from an existing snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to untag\n    tags: List of tags to remove\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "delete_snapshot",
          "line": 647,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Delete a snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to delete\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "_enforce_snapshot_limit",
          "line": 695,
          "args": [
            "self"
          ],
          "docstring": "Enforce the maximum number of snapshots if configured.",
          "decorators": []
        },
        {
          "name": "create_delta_snapshot",
          "line": 727,
          "args": [
            "self",
            "data",
            "base_version",
            "tags",
            "description",
            "user_info",
            "version"
          ],
          "docstring": "Create a delta snapshot relative to an existing base snapshot.\n\nArgs:\n    data: New data to snapshot\n    base_version: Version ID of base snapshot (latest if None)\n    tags: List of tags to apply\n    description: Human-readable description\n    user_info: Additional user metadata\n    version: Specific version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    SnapshotError: If snapshot creation fails",
          "decorators": []
        },
        {
          "name": "get_delta_snapshot",
          "line": 824,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Retrieve a delta snapshot by version ID.\n\nArgs:\n    version_id: Version ID of the delta snapshot to retrieve\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (reconstructed data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "compare_snapshots",
          "line": 880,
          "args": [
            "self",
            "version1",
            "version2"
          ],
          "docstring": "Compare two snapshots and return differences.\n\nArgs:\n    version1: First snapshot version ID\n    version2: Second snapshot version ID\n    \nReturns:\n    Dict[str, Any]: Differences between snapshots\n    \nRaises:\n    SnapshotNotFoundError: If either snapshot doesn't exist",
          "decorators": []
        },
        {
          "name": "export_snapshot",
          "line": 922,
          "args": [
            "self",
            "version_id",
            "export_path"
          ],
          "docstring": "Export a snapshot to a standalone file.\n\nArgs:\n    version_id: Version ID of the snapshot to export\n    export_path: Path to export the snapshot to\n    \nReturns:\n    str: Path to the exported file\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "import_snapshot",
          "line": 971,
          "args": [
            "self",
            "import_path",
            "new_version"
          ],
          "docstring": "Import a snapshot from an exported file.\n\nArgs:\n    import_path: Path to the exported snapshot file\n    new_version: New version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of imported snapshot\n    \nRaises:\n    SnapshotError: If import fails",
          "decorators": []
        },
        {
          "name": "cleanup",
          "line": 1024,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources used by the snapshot manager.",
          "decorators": []
        },
        {
          "name": "clear_all",
          "line": 1030,
          "args": [
            "self"
          ],
          "docstring": "Delete all snapshots and reset the registry.\n\nUse with caution! This will permanently delete all snapshot data.",
          "decorators": []
        },
        {
          "name": "__del__",
          "line": 1063,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources when object is garbage collected.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SnapshotError",
          "line": 43,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when snapshot operations fail.",
          "methods": []
        },
        {
          "name": "VersioningError",
          "line": 48,
          "bases": [
            "SnapshotError"
          ],
          "docstring": "Exception raised when version-specific operations fail.",
          "methods": []
        },
        {
          "name": "SnapshotNotFoundError",
          "line": 53,
          "bases": [
            "SnapshotError"
          ],
          "docstring": "Exception raised when a requested snapshot cannot be found.",
          "methods": []
        },
        {
          "name": "SnapshotMetadata",
          "line": 58,
          "bases": [],
          "docstring": "Metadata for snapshots including version, timestamps, and user info.",
          "methods": [
            {
              "name": "__init__",
              "line": 61,
              "args": [
                "self",
                "version",
                "tags",
                "description",
                "user_info"
              ],
              "docstring": "Initialize snapshot metadata.\n\nArgs:\n    version: Version identifier (auto-generated if None)\n    tags: List of tags for categorization\n    description: Human-readable description\n    user_info: Additional user-provided metadata"
            },
            {
              "name": "to_dict",
              "line": 94,
              "args": [
                "self"
              ],
              "docstring": "Convert metadata to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary representation of metadata"
            },
            {
              "name": "from_dict",
              "line": 112,
              "args": [
                "cls",
                "data"
              ],
              "docstring": "Create metadata object from dictionary representation.\n\nArgs:\n    data: Dictionary representation of metadata\n    \nReturns:\n    SnapshotMetadata: Reconstructed metadata object"
            },
            {
              "name": "update_integrity_info",
              "line": 139,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Update integrity information based on the data.\n\nArgs:\n    data: The data to calculate integrity info for"
            }
          ]
        },
        {
          "name": "SnapshotManager",
          "line": 170,
          "bases": [],
          "docstring": "Manages data snapshots with versioning, tagging, and lifecycle.\n\nThis class handles the creation, retrieval, and management of data snapshots,\nsupporting operations like versioning, tagging, and lifecycle management.",
          "methods": [
            {
              "name": "__init__",
              "line": 177,
              "args": [
                "self",
                "base_path",
                "storage_backend",
                "delta_strategy",
                "max_snapshots"
              ],
              "docstring": "Initialize the snapshot manager.\n\nArgs:\n    base_path: Base directory for snapshot storage\n    storage_backend: Storage backend to use\n    delta_strategy: Delta compression strategy\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)"
            },
            {
              "name": "_initialize_storage",
              "line": 216,
              "args": [
                "self"
              ],
              "docstring": "Initialize the storage backend.\n\nCreates necessary directories and loads existing snapshot registry."
            },
            {
              "name": "_load_registry",
              "line": 250,
              "args": [
                "self",
                "registry_data"
              ],
              "docstring": "Load snapshot registry from parsed data.\n\nArgs:\n    registry_data: Parsed registry data"
            },
            {
              "name": "_save_registry",
              "line": 276,
              "args": [
                "self"
              ],
              "docstring": "Save the snapshot registry to storage."
            },
            {
              "name": "create_snapshot",
              "line": 306,
              "args": [
                "self",
                "data",
                "tags",
                "description",
                "user_info",
                "version"
              ],
              "docstring": "Create a new snapshot of data.\n\nArgs:\n    data: Data to snapshot\n    tags: List of tags to apply\n    description: Human-readable description\n    user_info: Additional user metadata\n    version: Specific version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    SnapshotError: If snapshot creation fails"
            },
            {
              "name": "_save_data_to_file",
              "line": 378,
              "args": [
                "self",
                "data",
                "file_path"
              ],
              "docstring": "Save data to a file with appropriate serialization.\n\nArgs:\n    data: Data to save\n    file_path: Path to save data to\n    \nRaises:\n    SnapshotError: If data cannot be saved"
            },
            {
              "name": "_load_data_from_file",
              "line": 421,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Load data from a file with appropriate deserialization.\n\nArgs:\n    file_path: Path to load data from\n    \nReturns:\n    Any: Loaded data\n    \nRaises:\n    SnapshotError: If data cannot be loaded"
            },
            {
              "name": "get_snapshot",
              "line": 464,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Retrieve a specific snapshot by version ID.\n\nArgs:\n    version_id: Version ID of the snapshot to retrieve\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "get_latest_snapshot",
              "line": 495,
              "args": [
                "self"
              ],
              "docstring": "Retrieve the most recent snapshot.\n\nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If no snapshots exist"
            },
            {
              "name": "get_snapshot_by_tag",
              "line": 515,
              "args": [
                "self",
                "tag",
                "latest"
              ],
              "docstring": "Retrieve a snapshot by tag.\n\nArgs:\n    tag: Tag to search for\n    latest: Whether to get the latest snapshot with the tag\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If no snapshot with the given tag exists"
            },
            {
              "name": "list_snapshots",
              "line": 544,
              "args": [
                "self"
              ],
              "docstring": "List all available snapshots.\n\nReturns:\n    List[Dict[str, Any]]: List of snapshot metadata dictionaries"
            },
            {
              "name": "list_versions",
              "line": 555,
              "args": [
                "self"
              ],
              "docstring": "List all available version IDs.\n\nReturns:\n    List[str]: List of version IDs"
            },
            {
              "name": "list_tags",
              "line": 563,
              "args": [
                "self"
              ],
              "docstring": "List all available tags with counts.\n\nReturns:\n    Dict[str, int]: Dictionary of tag to count of snapshots"
            },
            {
              "name": "tag_snapshot",
              "line": 571,
              "args": [
                "self",
                "version_id",
                "tags"
              ],
              "docstring": "Add tags to an existing snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to tag\n    tags: List of tags to add\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "untag_snapshot",
              "line": 608,
              "args": [
                "self",
                "version_id",
                "tags"
              ],
              "docstring": "Remove tags from an existing snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to untag\n    tags: List of tags to remove\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "delete_snapshot",
              "line": 647,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Delete a snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to delete\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "_enforce_snapshot_limit",
              "line": 695,
              "args": [
                "self"
              ],
              "docstring": "Enforce the maximum number of snapshots if configured."
            },
            {
              "name": "create_delta_snapshot",
              "line": 727,
              "args": [
                "self",
                "data",
                "base_version",
                "tags",
                "description",
                "user_info",
                "version"
              ],
              "docstring": "Create a delta snapshot relative to an existing base snapshot.\n\nArgs:\n    data: New data to snapshot\n    base_version: Version ID of base snapshot (latest if None)\n    tags: List of tags to apply\n    description: Human-readable description\n    user_info: Additional user metadata\n    version: Specific version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    SnapshotError: If snapshot creation fails"
            },
            {
              "name": "get_delta_snapshot",
              "line": 824,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Retrieve a delta snapshot by version ID.\n\nArgs:\n    version_id: Version ID of the delta snapshot to retrieve\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (reconstructed data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "compare_snapshots",
              "line": 880,
              "args": [
                "self",
                "version1",
                "version2"
              ],
              "docstring": "Compare two snapshots and return differences.\n\nArgs:\n    version1: First snapshot version ID\n    version2: Second snapshot version ID\n    \nReturns:\n    Dict[str, Any]: Differences between snapshots\n    \nRaises:\n    SnapshotNotFoundError: If either snapshot doesn't exist"
            },
            {
              "name": "export_snapshot",
              "line": 922,
              "args": [
                "self",
                "version_id",
                "export_path"
              ],
              "docstring": "Export a snapshot to a standalone file.\n\nArgs:\n    version_id: Version ID of the snapshot to export\n    export_path: Path to export the snapshot to\n    \nReturns:\n    str: Path to the exported file\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "import_snapshot",
              "line": 971,
              "args": [
                "self",
                "import_path",
                "new_version"
              ],
              "docstring": "Import a snapshot from an exported file.\n\nArgs:\n    import_path: Path to the exported snapshot file\n    new_version: New version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of imported snapshot\n    \nRaises:\n    SnapshotError: If import fails"
            },
            {
              "name": "cleanup",
              "line": 1024,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources used by the snapshot manager."
            },
            {
              "name": "clear_all",
              "line": 1030,
              "args": [
                "self"
              ],
              "docstring": "Delete all snapshots and reset the registry.\n\nUse with caution! This will permanently delete all snapshot data."
            },
            {
              "name": "__del__",
              "line": 1063,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources when object is garbage collected."
            }
          ]
        }
      ],
      "lines_of_code": 869,
      "complexity_score": 152,
      "last_modified": "2025-10-04T21:45:27.332280",
      "checksum": "e443896c7ae32d0823924e199f9fcfc4",
      "framework_role": "logging_infrastructure",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/recipe_parser.py": {
      "name": ".restructuring_backup/orchestrator/recipe_parser.py",
      "path": ".restructuring_backup/orchestrator/recipe_parser.py",
      "component_type": "orchestration",
      "description": "Load and parse a YAML recipe file into a Python dictionary.",
      "dependencies": [
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "load_recipe",
        "validate_recipe",
        "parse_step",
        "parse_recipe"
      ],
      "imports": [
        "yaml",
        "os",
        "importlib",
        "typing",
        "orchestrator.context"
      ],
      "functions": [
        {
          "name": "load_recipe",
          "line": 11,
          "args": [
            "file_path"
          ],
          "docstring": "Load and parse a YAML recipe file into a Python dictionary.\n\n:param file_path: Path to the YAML recipe file.\n:return: Parsed content of the recipe.\n:raises FileNotFoundError: If the recipe file does not exist.\n:raises yaml.YAMLError: If the recipe file is not valid YAML.",
          "decorators": []
        },
        {
          "name": "validate_recipe",
          "line": 31,
          "args": [
            "recipe"
          ],
          "docstring": "Validate the structure and required fields of the recipe.\n\n:param recipe: Parsed recipe dictionary.\n:raises ValueError: If the recipe structure is invalid.",
          "decorators": []
        },
        {
          "name": "parse_step",
          "line": 48,
          "args": [
            "step"
          ],
          "docstring": "Parse and validate an individual step in the recipe.\n\n:param step: Step dictionary.\n:return: Parsed step information.\n:raises ValueError: If the step is invalid.",
          "decorators": []
        },
        {
          "name": "parse_recipe",
          "line": 82,
          "args": [
            "recipe"
          ],
          "docstring": "Parse and validate the entire recipe, returning a list of steps.\n\n:param recipe: Parsed recipe dictionary.\n:return: List of parsed steps.\n:raises ValueError: If the recipe is invalid.",
          "decorators": []
        }
      ],
      "classes": [],
      "lines_of_code": 74,
      "complexity_score": 15,
      "last_modified": "2025-10-04T14:13:31.945337",
      "checksum": "85cbb3915db07d8f11823261e5727a84",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/recipes/compute_median.yaml": {
      "name": ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      "path": ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      "component_type": "orchestration",
      "description": "orchestrator/recipes/compute_median.yaml",
      "dependencies": [],
      "exports": [
        "test_meta",
        "steps"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 27,
      "complexity_score": 0,
      "last_modified": "2025-10-03T17:00:28.412473",
      "checksum": "647b26bb6a456a8a44a711b08b1da242",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml": {
      "name": ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      "path": ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      "component_type": "orchestration",
      "description": "Enhanced recipe using new unified framework",
      "dependencies": [],
      "exports": [
        "test_meta",
        "steps"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 16,
      "complexity_score": 0,
      "last_modified": "2025-10-04T15:14:07.449741",
      "checksum": "d6cca7b7789f83becaabce82f12273c2",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/recipes/example_numbers.yaml": {
      "name": ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      "path": ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      "component_type": "orchestration",
      "description": "orchestrator/recipes/example_numbers.yaml",
      "dependencies": [],
      "exports": [
        "test_meta",
        "steps"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 28,
      "complexity_score": 0,
      "last_modified": "2025-10-04T15:14:07.449741",
      "checksum": "a97aeaa9f9b5b1d3f4352a957cdaec18",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml": {
      "name": ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "path": ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "component_type": "orchestration",
      "description": "orchestrator/recipes/example_number.yaml",
      "dependencies": [],
      "exports": [
        "tosca_definitions_version",
        "description",
        "imports",
        "inputs",
        "outputs",
        "tasks"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 71,
      "complexity_score": 0,
      "last_modified": "2025-10-03T08:23:37.177759",
      "checksum": "71ecf8d4972bb7595d084fe822a63885",
      "framework_role": "recipe_system",
      "stability": "stable"
    },
    ".restructuring_backup/orchestrator/runner.py": {
      "name": ".restructuring_backup/orchestrator/runner.py",
      "path": ".restructuring_backup/orchestrator/runner.py",
      "component_type": "orchestration",
      "description": "Enhanced IAF0 Runner System - Version 2.0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "run_recipe",
        "main",
        "success",
        "to_dict",
        "execution_time_seconds",
        "success_rate",
        "overall_success",
        "add_step_result",
        "add_global_error",
        "add_global_warning",
        "to_dict",
        "__init__",
        "run_recipe",
        "cancel_execution",
        "is_execution_cancelled",
        "get_execution_statistics",
        "get_execution_history",
        "_load_recipe",
        "_validate_recipe_structure",
        "_initialize_context",
        "_execute_recipe_steps",
        "_execute_single_step",
        "_attempt_step_execution",
        "_finalize_context",
        "RecipeExecutionStatus",
        "StepExecutionResult",
        "RecipeExecutionResult",
        "EnhancedRecipeRunner"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "yaml",
        "time",
        "importlib",
        "traceback",
        "threading",
        "typing",
        "pathlib",
        "dataclasses",
        "datetime",
        "enum",
        "orchestrator.context.context",
        "scriptlets.framework",
        "src.core.logger",
        "argparse"
      ],
      "functions": [
        {
          "name": "run_recipe",
          "line": 864,
          "args": [
            "recipe_path"
          ],
          "docstring": "Convenience function for recipe execution with enhanced capabilities.\n\nThis function provides a simplified interface to the enhanced recipe runner\nwhile maintaining backward compatibility with existing code.\n\nArgs:\n    recipe_path: Path to YAML recipe file to execute\n    debug: Enable verbose logging and detailed tracing\n    only: Optional list of step names to execute (others skipped)\n    skip: Optional list of step names to skip during execution\n    continue_on_error: Continue execution after step failures\n    step_timeout: Timeout for individual steps in seconds\n    max_retries: Maximum number of retry attempts for failed steps\n    retry_delay: Delay between retry attempts in seconds\n    \nReturns:\n    Context: Final context state with execution results\n    \nRaises:\n    FileNotFoundError: If recipe file doesn't exist\n    yaml.YAMLError: If recipe file is malformed\n    ValueError: If recipe validation fails\n    RuntimeError: If execution fails and continue_on_error is False",
          "decorators": []
        },
        {
          "name": "main",
          "line": 916,
          "args": [],
          "docstring": "Command-line interface for enhanced recipe execution.\n\nProvides comprehensive CLI capabilities for recipe execution including\nfiltering, error handling, retry logic, and detailed result reporting.",
          "decorators": []
        },
        {
          "name": "success",
          "line": 76,
          "args": [
            "self"
          ],
          "docstring": "Check if the step execution was successful.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "to_dict",
          "line": 80,
          "args": [
            "self"
          ],
          "docstring": "Convert step result to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "execution_time_seconds",
          "line": 122,
          "args": [
            "self"
          ],
          "docstring": "Calculate total execution time in seconds.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "success_rate",
          "line": 129,
          "args": [
            "self"
          ],
          "docstring": "Calculate success rate as percentage of completed steps.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "overall_success",
          "line": 136,
          "args": [
            "self"
          ],
          "docstring": "Check if the recipe execution was overall successful.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "add_step_result",
          "line": 142,
          "args": [
            "self",
            "step_result"
          ],
          "docstring": "Add a step result to the recipe result tracking.",
          "decorators": []
        },
        {
          "name": "add_global_error",
          "line": 155,
          "args": [
            "self",
            "error_message"
          ],
          "docstring": "Add a global error message to recipe tracking.",
          "decorators": []
        },
        {
          "name": "add_global_warning",
          "line": 160,
          "args": [
            "self",
            "warning_message"
          ],
          "docstring": "Add a global warning message to recipe tracking.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 165,
          "args": [
            "self"
          ],
          "docstring": "Convert recipe result to dictionary for JSON serialization.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 200,
          "args": [
            "self",
            "default_timeout"
          ],
          "docstring": "Initialize the enhanced recipe runner with configuration.\n\nArgs:\n    default_timeout: Default timeout for step execution (no timeout if None)",
          "decorators": []
        },
        {
          "name": "run_recipe",
          "line": 225,
          "args": [
            "self",
            "recipe_path"
          ],
          "docstring": "Execute a complete recipe with enhanced capabilities and comprehensive monitoring.\n\nThis method provides the main recipe execution interface with advanced\nfeatures including filtering, error handling, and performance tracking.\n\nArgs:\n    recipe_path: Path to the YAML recipe file to execute\n    debug: Enable verbose logging and detailed tracing\n    only: Optional list of step names to execute (others skipped)\n    skip: Optional list of step names to skip during execution\n    continue_on_error: Continue execution after step failures\n    step_timeout: Timeout for individual steps (overrides default)\n    max_retries: Maximum number of retry attempts for failed steps\n    retry_delay: Delay between retry attempts in seconds\n    \nReturns:\n    Context: Final context state with execution results and metadata\n    \nRaises:\n    FileNotFoundError: If recipe file doesn't exist\n    yaml.YAMLError: If recipe file is malformed\n    ValueError: If recipe validation fails\n    RuntimeError: If execution fails and continue_on_error is False",
          "decorators": []
        },
        {
          "name": "cancel_execution",
          "line": 361,
          "args": [
            "self"
          ],
          "docstring": "Request cancellation of the currently running recipe execution.\n\nSets cancellation flags that are checked by long-running steps\nto enable graceful termination of recipe execution.",
          "decorators": []
        },
        {
          "name": "is_execution_cancelled",
          "line": 376,
          "args": [
            "self"
          ],
          "docstring": "Check if execution cancellation has been requested.\n\nReturns:\n    bool: True if cancellation has been requested",
          "decorators": []
        },
        {
          "name": "get_execution_statistics",
          "line": 385,
          "args": [
            "self"
          ],
          "docstring": "Get comprehensive execution statistics and performance metrics.\n\nReturns:\n    Dict[str, Any]: Detailed statistics about runner performance",
          "decorators": []
        },
        {
          "name": "get_execution_history",
          "line": 402,
          "args": [
            "self",
            "limit"
          ],
          "docstring": "Get historical execution results for analysis and monitoring.\n\nArgs:\n    limit: Maximum number of results to return (all if None)\n    \nReturns:\n    List[Dict[str, Any]]: Historical execution results",
          "decorators": []
        },
        {
          "name": "_load_recipe",
          "line": 419,
          "args": [
            "self",
            "recipe_path"
          ],
          "docstring": "Load and parse recipe YAML file with comprehensive error handling.\n\nArgs:\n    recipe_path: Path to recipe file to load\n    \nReturns:\n    Dict[str, Any]: Parsed recipe data\n    \nRaises:\n    yaml.YAMLError: If YAML parsing fails\n    ValueError: If recipe content is invalid",
          "decorators": []
        },
        {
          "name": "_validate_recipe_structure",
          "line": 453,
          "args": [
            "self",
            "recipe_data",
            "recipe_path"
          ],
          "docstring": "Validate recipe structure and extract steps with comprehensive validation.\n\nArgs:\n    recipe_data: Parsed recipe data to validate\n    recipe_path: Path to recipe file for error reporting\n    \nReturns:\n    List[Dict[str, Any]]: Validated and sorted steps\n    \nRaises:\n    ValueError: If recipe structure is invalid",
          "decorators": []
        },
        {
          "name": "_initialize_context",
          "line": 504,
          "args": [
            "self",
            "ctx",
            "recipe_path",
            "recipe_data"
          ],
          "docstring": "Initialize context with recipe metadata and execution information.\n\nArgs:\n    ctx: Context instance to initialize\n    recipe_path: Path to recipe file\n    recipe_data: Parsed recipe data",
          "decorators": []
        },
        {
          "name": "_execute_recipe_steps",
          "line": 529,
          "args": [
            "self",
            "ctx",
            "steps",
            "execution_result",
            "debug",
            "only",
            "skip",
            "continue_on_error",
            "step_timeout",
            "max_retries",
            "retry_delay"
          ],
          "docstring": "Execute all recipe steps with comprehensive monitoring and error handling.\n\nArgs:\n    ctx: Context for step execution\n    steps: List of validated steps to execute\n    execution_result: Result tracking for recipe execution\n    debug: Enable debug logging\n    only: Steps to include (others skipped)\n    skip: Steps to skip\n    continue_on_error: Continue after failures\n    step_timeout: Timeout for individual steps\n    max_retries: Maximum retry attempts\n    retry_delay: Delay between retries\n    \nReturns:\n    int: Number of successfully executed steps",
          "decorators": []
        },
        {
          "name": "_execute_single_step",
          "line": 611,
          "args": [
            "self",
            "ctx",
            "step",
            "step_index",
            "debug",
            "step_timeout",
            "max_retries",
            "retry_delay"
          ],
          "docstring": "Execute a single recipe step with comprehensive error handling and retry logic.\n\nArgs:\n    ctx: Context for step execution\n    step: Step configuration dictionary\n    step_index: Index of step in recipe\n    debug: Enable debug logging\n    step_timeout: Timeout for step execution\n    max_retries: Maximum retry attempts\n    retry_delay: Delay between retries\n    \nReturns:\n    StepExecutionResult: Comprehensive result of step execution",
          "decorators": []
        },
        {
          "name": "_attempt_step_execution",
          "line": 706,
          "args": [
            "self",
            "ctx",
            "step",
            "step_result",
            "debug",
            "step_timeout"
          ],
          "docstring": "Attempt execution of a single step with framework integration.\n\nArgs:\n    ctx: Context for step execution\n    step: Step configuration\n    step_result: Result tracking object\n    debug: Enable debug logging\n    step_timeout: Timeout for execution\n    \nReturns:\n    bool: True if execution was successful, False otherwise",
          "decorators": []
        },
        {
          "name": "_finalize_context",
          "line": 830,
          "args": [
            "self",
            "ctx",
            "execution_result"
          ],
          "docstring": "Finalize context with execution results and comprehensive metadata.\n\nArgs:\n    ctx: Context to finalize\n    execution_result: Execution result to store",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RecipeExecutionStatus",
          "line": 41,
          "bases": [
            "Enum"
          ],
          "docstring": "Enumerated status values for recipe execution states.\nProvides comprehensive tracking of recipe execution lifecycle.",
          "methods": []
        },
        {
          "name": "StepExecutionResult",
          "line": 56,
          "bases": [],
          "docstring": "Comprehensive result container for individual step execution.\nTracks execution outcomes, timing, and metadata for each recipe step.",
          "methods": [
            {
              "name": "success",
              "line": 76,
              "args": [
                "self"
              ],
              "docstring": "Check if the step execution was successful."
            },
            {
              "name": "to_dict",
              "line": 80,
              "args": [
                "self"
              ],
              "docstring": "Convert step result to dictionary for serialization."
            }
          ]
        },
        {
          "name": "RecipeExecutionResult",
          "line": 101,
          "bases": [],
          "docstring": "Comprehensive result container for complete recipe execution.\nProvides detailed information about recipe execution including\nstep results, timing, performance metrics, and final status.",
          "methods": [
            {
              "name": "execution_time_seconds",
              "line": 122,
              "args": [
                "self"
              ],
              "docstring": "Calculate total execution time in seconds."
            },
            {
              "name": "success_rate",
              "line": 129,
              "args": [
                "self"
              ],
              "docstring": "Calculate success rate as percentage of completed steps."
            },
            {
              "name": "overall_success",
              "line": 136,
              "args": [
                "self"
              ],
              "docstring": "Check if the recipe execution was overall successful."
            },
            {
              "name": "add_step_result",
              "line": 142,
              "args": [
                "self",
                "step_result"
              ],
              "docstring": "Add a step result to the recipe result tracking."
            },
            {
              "name": "add_global_error",
              "line": 155,
              "args": [
                "self",
                "error_message"
              ],
              "docstring": "Add a global error message to recipe tracking."
            },
            {
              "name": "add_global_warning",
              "line": 160,
              "args": [
                "self",
                "warning_message"
              ],
              "docstring": "Add a global warning message to recipe tracking."
            },
            {
              "name": "to_dict",
              "line": 165,
              "args": [
                "self"
              ],
              "docstring": "Convert recipe result to dictionary for JSON serialization."
            }
          ]
        },
        {
          "name": "EnhancedRecipeRunner",
          "line": 187,
          "bases": [],
          "docstring": "Enhanced recipe execution engine with comprehensive IAF0 compliance.\n\nThis class provides advanced recipe execution capabilities including:\n- Integration with unified Scriptlet Framework\n- Comprehensive error handling and recovery\n- Performance monitoring and metrics collection\n- Flexible execution control and filtering\n- Thread-safe operations with cancellation support\n- Detailed logging and result reporting",
          "methods": [
            {
              "name": "__init__",
              "line": 200,
              "args": [
                "self",
                "default_timeout"
              ],
              "docstring": "Initialize the enhanced recipe runner with configuration.\n\nArgs:\n    default_timeout: Default timeout for step execution (no timeout if None)"
            },
            {
              "name": "run_recipe",
              "line": 225,
              "args": [
                "self",
                "recipe_path"
              ],
              "docstring": "Execute a complete recipe with enhanced capabilities and comprehensive monitoring.\n\nThis method provides the main recipe execution interface with advanced\nfeatures including filtering, error handling, and performance tracking.\n\nArgs:\n    recipe_path: Path to the YAML recipe file to execute\n    debug: Enable verbose logging and detailed tracing\n    only: Optional list of step names to execute (others skipped)\n    skip: Optional list of step names to skip during execution\n    continue_on_error: Continue execution after step failures\n    step_timeout: Timeout for individual steps (overrides default)\n    max_retries: Maximum number of retry attempts for failed steps\n    retry_delay: Delay between retry attempts in seconds\n    \nReturns:\n    Context: Final context state with execution results and metadata\n    \nRaises:\n    FileNotFoundError: If recipe file doesn't exist\n    yaml.YAMLError: If recipe file is malformed\n    ValueError: If recipe validation fails\n    RuntimeError: If execution fails and continue_on_error is False"
            },
            {
              "name": "cancel_execution",
              "line": 361,
              "args": [
                "self"
              ],
              "docstring": "Request cancellation of the currently running recipe execution.\n\nSets cancellation flags that are checked by long-running steps\nto enable graceful termination of recipe execution."
            },
            {
              "name": "is_execution_cancelled",
              "line": 376,
              "args": [
                "self"
              ],
              "docstring": "Check if execution cancellation has been requested.\n\nReturns:\n    bool: True if cancellation has been requested"
            },
            {
              "name": "get_execution_statistics",
              "line": 385,
              "args": [
                "self"
              ],
              "docstring": "Get comprehensive execution statistics and performance metrics.\n\nReturns:\n    Dict[str, Any]: Detailed statistics about runner performance"
            },
            {
              "name": "get_execution_history",
              "line": 402,
              "args": [
                "self",
                "limit"
              ],
              "docstring": "Get historical execution results for analysis and monitoring.\n\nArgs:\n    limit: Maximum number of results to return (all if None)\n    \nReturns:\n    List[Dict[str, Any]]: Historical execution results"
            },
            {
              "name": "_load_recipe",
              "line": 419,
              "args": [
                "self",
                "recipe_path"
              ],
              "docstring": "Load and parse recipe YAML file with comprehensive error handling.\n\nArgs:\n    recipe_path: Path to recipe file to load\n    \nReturns:\n    Dict[str, Any]: Parsed recipe data\n    \nRaises:\n    yaml.YAMLError: If YAML parsing fails\n    ValueError: If recipe content is invalid"
            },
            {
              "name": "_validate_recipe_structure",
              "line": 453,
              "args": [
                "self",
                "recipe_data",
                "recipe_path"
              ],
              "docstring": "Validate recipe structure and extract steps with comprehensive validation.\n\nArgs:\n    recipe_data: Parsed recipe data to validate\n    recipe_path: Path to recipe file for error reporting\n    \nReturns:\n    List[Dict[str, Any]]: Validated and sorted steps\n    \nRaises:\n    ValueError: If recipe structure is invalid"
            },
            {
              "name": "_initialize_context",
              "line": 504,
              "args": [
                "self",
                "ctx",
                "recipe_path",
                "recipe_data"
              ],
              "docstring": "Initialize context with recipe metadata and execution information.\n\nArgs:\n    ctx: Context instance to initialize\n    recipe_path: Path to recipe file\n    recipe_data: Parsed recipe data"
            },
            {
              "name": "_execute_recipe_steps",
              "line": 529,
              "args": [
                "self",
                "ctx",
                "steps",
                "execution_result",
                "debug",
                "only",
                "skip",
                "continue_on_error",
                "step_timeout",
                "max_retries",
                "retry_delay"
              ],
              "docstring": "Execute all recipe steps with comprehensive monitoring and error handling.\n\nArgs:\n    ctx: Context for step execution\n    steps: List of validated steps to execute\n    execution_result: Result tracking for recipe execution\n    debug: Enable debug logging\n    only: Steps to include (others skipped)\n    skip: Steps to skip\n    continue_on_error: Continue after failures\n    step_timeout: Timeout for individual steps\n    max_retries: Maximum retry attempts\n    retry_delay: Delay between retries\n    \nReturns:\n    int: Number of successfully executed steps"
            },
            {
              "name": "_execute_single_step",
              "line": 611,
              "args": [
                "self",
                "ctx",
                "step",
                "step_index",
                "debug",
                "step_timeout",
                "max_retries",
                "retry_delay"
              ],
              "docstring": "Execute a single recipe step with comprehensive error handling and retry logic.\n\nArgs:\n    ctx: Context for step execution\n    step: Step configuration dictionary\n    step_index: Index of step in recipe\n    debug: Enable debug logging\n    step_timeout: Timeout for step execution\n    max_retries: Maximum retry attempts\n    retry_delay: Delay between retries\n    \nReturns:\n    StepExecutionResult: Comprehensive result of step execution"
            },
            {
              "name": "_attempt_step_execution",
              "line": 706,
              "args": [
                "self",
                "ctx",
                "step",
                "step_result",
                "debug",
                "step_timeout"
              ],
              "docstring": "Attempt execution of a single step with framework integration.\n\nArgs:\n    ctx: Context for step execution\n    step: Step configuration\n    step_result: Result tracking object\n    debug: Enable debug logging\n    step_timeout: Timeout for execution\n    \nReturns:\n    bool: True if execution was successful, False otherwise"
            },
            {
              "name": "_finalize_context",
              "line": 830,
              "args": [
                "self",
                "ctx",
                "execution_result"
              ],
              "docstring": "Finalize context with execution results and comprehensive metadata.\n\nArgs:\n    ctx: Context to finalize\n    execution_result: Execution result to store"
            }
          ]
        }
      ],
      "lines_of_code": 910,
      "complexity_score": 93,
      "last_modified": "2025-10-04T15:14:07.445741",
      "checksum": "d4de2701968a25864777c6e31902b501",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/pyproject.toml": {
      "name": ".restructuring_backup/pyproject.toml",
      "path": ".restructuring_backup/pyproject.toml",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 29,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:17:36.645844",
      "checksum": "86298b12805435de6ba94d7bb62fdab8",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    ".restructuring_backup/requirements.txt": {
      "name": ".restructuring_backup/requirements.txt",
      "path": ".restructuring_backup/requirements.txt",
      "component_type": "utility",
      "description": "requirements.txt",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 33,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.935753",
      "checksum": "76ac0ddc7bbccc6d36fe7fc55760890e",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/scriptlets/__init__.py": {
      "name": ".restructuring_backup/scriptlets/__init__.py",
      "path": ".restructuring_backup/scriptlets/__init__.py",
      "component_type": "scriptlet",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 0,
      "complexity_score": 0,
      "last_modified": "2025-10-03T08:23:37.181759",
      "checksum": "d41d8cd98f00b204e9800998ecf8427e",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    ".restructuring_backup/scriptlets/framework.py": {
      "name": ".restructuring_backup/scriptlets/framework.py",
      "path": ".restructuring_backup/scriptlets/framework.py",
      "component_type": "scriptlet",
      "description": "Unified IAF0 Scriptlet Framework - Consolidated System",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "register_scriptlet",
        "get_scriptlet_class",
        "list_scriptlets",
        "resource_monitor",
        "debug_trace",
        "retry_on_failure",
        "create_compute_scriptlet",
        "create_io_scriptlet",
        "load_scriptlet_from_module",
        "validate_scriptlet_compliance",
        "to_dict",
        "validate_configuration",
        "validate",
        "run",
        "get_category",
        "decorator",
        "decorator",
        "decorator",
        "decorator",
        "__init__",
        "execution_duration",
        "is_executing",
        "get_category",
        "get_capabilities",
        "get_metadata",
        "execute",
        "_execute_hooks",
        "_handle_error",
        "_handle_completion",
        "_extract_result_data",
        "validate",
        "validate_custom",
        "run",
        "check_paradigm",
        "_check_method_signatures",
        "_check_json_compatibility",
        "_check_state_management",
        "__repr__",
        "__init__",
        "validate_custom",
        "__init__",
        "validate_custom",
        "__init__",
        "add_scriptlet",
        "resolve_dependencies",
        "execute_all",
        "wrapper",
        "wrapper",
        "wrapper",
        "visit",
        "ScriptletState",
        "ScriptletCategory",
        "ScriptletResult",
        "ScriptletConfig",
        "ScriptletProtocol",
        "BaseScriptlet",
        "ComputeScriptlet",
        "IOScriptlet",
        "ExecutionContext"
      ],
      "imports": [
        "os",
        "json",
        "copy",
        "time",
        "threading",
        "functools",
        "inspect",
        "importlib",
        "ast",
        "psutil",
        "typing",
        "pathlib",
        "dataclasses",
        "datetime",
        "abc",
        "enum",
        "contextlib",
        "orchestrator.context.context",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "register_scriptlet",
          "line": 225,
          "args": [
            "category"
          ],
          "docstring": "Decorator to register a scriptlet class in the global registry.\n\nEnables dynamic discovery and loading of scriptlets by name.\nProvides category-based organization and filtering capabilities.\n\nArgs:\n    category: Scriptlet category for organization and filtering\n\nReturns:\n    Decorator function for scriptlet class registration\n\nRaises:\n    ValueError: If class doesn't inherit from BaseScriptlet",
          "decorators": []
        },
        {
          "name": "get_scriptlet_class",
          "line": 264,
          "args": [
            "name"
          ],
          "docstring": "Retrieve a scriptlet class from the registry by name.\n\nProvides dynamic loading capability for recipe execution\nand runtime scriptlet discovery.\n\nArgs:\n    name: Name of the scriptlet class to retrieve\n\nReturns:\n    Scriptlet class for instantiation\n\nRaises:\n    KeyError: If scriptlet name is not registered",
          "decorators": []
        },
        {
          "name": "list_scriptlets",
          "line": 286,
          "args": [
            "category"
          ],
          "docstring": "List all registered scriptlet names, optionally filtered by category.\n\nProvides discovery mechanism for available scriptlets\nand debugging capabilities for registry inspection.\n\nArgs:\n    category: Optional category filter for results\n\nReturns:\n    Sorted list of scriptlet names",
          "decorators": []
        },
        {
          "name": "resource_monitor",
          "line": 311,
          "args": [
            "log_metrics"
          ],
          "docstring": "Decorator to monitor resource usage during scriptlet execution.\n\nTracks CPU, memory, and I/O statistics for performance analysis\nand optimization. Integrates with logging system for audit trails.\n\nArgs:\n    log_metrics: Whether to log metrics to logger\n\nReturns:\n    Decorator function for resource monitoring",
          "decorators": []
        },
        {
          "name": "debug_trace",
          "line": 390,
          "args": [
            "capture_vars"
          ],
          "docstring": "Decorator to add comprehensive debug tracing to scriptlet execution.\n\nCaptures function arguments, local variables, context changes,\nand exception details for debugging and development purposes.\n\nArgs:\n    capture_vars: List of variable names to capture during execution\n\nReturns:\n    Decorator function for debug tracing",
          "decorators": []
        },
        {
          "name": "retry_on_failure",
          "line": 457,
          "args": [
            "max_attempts",
            "delay",
            "backoff"
          ],
          "docstring": "Decorator to add retry logic to scriptlet execution.\n\nAutomatically retries failed executions with configurable\ndelay and backoff strategies for resilient operations.\n\nArgs:\n    max_attempts: Maximum number of execution attempts\n    delay: Initial delay between retries in seconds\n    backoff: Multiplier for delay after each failure\n\nReturns:\n    Decorator function for retry logic",
          "decorators": []
        },
        {
          "name": "create_compute_scriptlet",
          "line": 1081,
          "args": [
            "scriptlet_class"
          ],
          "docstring": "Create a compute scriptlet with custom configuration.\n\nArgs:\n    scriptlet_class: Class to instantiate\n    **config_kwargs: Configuration parameters\n\nReturns:\n    Configured compute scriptlet instance",
          "decorators": []
        },
        {
          "name": "create_io_scriptlet",
          "line": 1098,
          "args": [
            "scriptlet_class"
          ],
          "docstring": "Create an I/O scriptlet with custom configuration.\n\nArgs:\n    scriptlet_class: Class to instantiate\n    **config_kwargs: Configuration parameters\n\nReturns:\n    Configured I/O scriptlet instance",
          "decorators": []
        },
        {
          "name": "load_scriptlet_from_module",
          "line": 1257,
          "args": [
            "module_path",
            "class_name"
          ],
          "docstring": "Dynamically load a scriptlet class from a module.\n\nArgs:\n    module_path: Python module path (e.g., 'scriptlets.steps.compute')\n    class_name: Name of the scriptlet class to load\n\nReturns:\n    Loaded scriptlet class\n\nRaises:\n    ImportError: If module or class cannot be loaded\n    ValueError: If loaded class is not a scriptlet",
          "decorators": []
        },
        {
          "name": "validate_scriptlet_compliance",
          "line": 1290,
          "args": [
            "scriptlet_class"
          ],
          "docstring": "Validate that a scriptlet class complies with framework requirements.\n\nArgs:\n    scriptlet_class: Scriptlet class to validate\n\nReturns:\n    List of compliance issues (empty if fully compliant)",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 110,
          "args": [
            "self"
          ],
          "docstring": "Convert result to dictionary for serialization and logging.",
          "decorators": []
        },
        {
          "name": "validate_configuration",
          "line": 177,
          "args": [
            "self"
          ],
          "docstring": "Validate configuration settings and return list of validation errors.",
          "decorators": []
        },
        {
          "name": "validate",
          "line": 205,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Validate scriptlet parameters and context state.",
          "decorators": []
        },
        {
          "name": "run",
          "line": 209,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Execute scriptlet with context and parameters.",
          "decorators": []
        },
        {
          "name": "get_category",
          "line": 213,
          "args": [
            "self"
          ],
          "docstring": "Get scriptlet category for classification.",
          "decorators": []
        },
        {
          "name": "decorator",
          "line": 244,
          "args": [
            "cls"
          ],
          "docstring": "Inner decorator function that performs actual registration.",
          "decorators": []
        },
        {
          "name": "decorator",
          "line": 325,
          "args": [
            "func"
          ],
          "docstring": "Inner decorator that adds resource monitoring to function.",
          "decorators": []
        },
        {
          "name": "decorator",
          "line": 404,
          "args": [
            "func"
          ],
          "docstring": "Inner decorator that adds debug tracing to function.",
          "decorators": []
        },
        {
          "name": "decorator",
          "line": 475,
          "args": [
            "func"
          ],
          "docstring": "Inner decorator that adds retry logic to function.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 543,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize the BaseScriptlet with configuration and setup.\n\nArgs:\n    config: Optional configuration object for scriptlet behavior",
          "decorators": []
        },
        {
          "name": "execution_duration",
          "line": 581,
          "args": [
            "self"
          ],
          "docstring": "Get execution duration if available.\n\nReturns:\n    Execution duration in seconds or None if not available",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "is_executing",
          "line": 595,
          "args": [
            "self"
          ],
          "docstring": "Check if scriptlet is currently executing.\n\nReturns:\n    True if scriptlet is in executing state",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "get_category",
          "line": 604,
          "args": [
            "self"
          ],
          "docstring": "Get the category of this scriptlet.\n\nReturns:\n    Scriptlet category for classification and filtering",
          "decorators": []
        },
        {
          "name": "get_capabilities",
          "line": 613,
          "args": [
            "self"
          ],
          "docstring": "Get list of capabilities supported by this scriptlet.\n\nReturns:\n    List of capability strings for introspection",
          "decorators": []
        },
        {
          "name": "get_metadata",
          "line": 634,
          "args": [
            "self"
          ],
          "docstring": "Get comprehensive metadata about this scriptlet.\n\nReturns:\n    Dictionary containing scriptlet metadata and statistics",
          "decorators": []
        },
        {
          "name": "execute",
          "line": 659,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Execute the scriptlet with comprehensive lifecycle management.\n\nThis method orchestrates the complete scriptlet execution including\nvalidation, monitoring, error handling, and state management.\n\nArgs:\n    context: Context instance for state management\n    params: Parameters for scriptlet execution\n\nReturns:\n    Comprehensive result object with execution details\n\nRaises:\n    ValueError: If validation fails\n    RuntimeError: If execution fails",
          "decorators": [
            "resource_monitor",
            "debug_trace",
            "retry_on_failure"
          ]
        },
        {
          "name": "_execute_hooks",
          "line": 732,
          "args": [
            "self",
            "hooks"
          ],
          "docstring": "Execute lifecycle hooks safely with error handling.\n\nArgs:\n    hooks: List of hook functions to execute\n    *args: Positional arguments to pass to hooks\n    **kwargs: Keyword arguments to pass to hooks",
          "decorators": []
        },
        {
          "name": "_handle_error",
          "line": 748,
          "args": [
            "self",
            "error",
            "context",
            "params"
          ],
          "docstring": "Handle execution errors with custom error handlers.\n\nArgs:\n    error: Exception that occurred during execution\n    context: Context instance for state management\n    params: Parameters that were being processed\n\nReturns:\n    Error result with detailed information",
          "decorators": []
        },
        {
          "name": "_handle_completion",
          "line": 791,
          "args": [
            "self",
            "result"
          ],
          "docstring": "Handle scriptlet completion with cleanup and logging.\n\nArgs:\n    result: Execution result to process",
          "decorators": []
        },
        {
          "name": "_extract_result_data",
          "line": 818,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Extract result data from context and parameters.\n\nOverride this method to customize result data extraction.\n\nArgs:\n    context: Context instance with execution state\n    params: Parameters used during execution\n\nReturns:\n    Dictionary of result data",
          "decorators": []
        },
        {
          "name": "validate",
          "line": 844,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Validate scriptlet parameters and context state.\n\nOverride this method to implement custom validation logic.\n\nArgs:\n    context: Context instance for validation\n    params: Parameters to validate\n\nReturns:\n    True if validation passes, False otherwise",
          "decorators": []
        },
        {
          "name": "validate_custom",
          "line": 878,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Custom validation method for subclasses to override.\n\nArgs:\n    context: Context instance for validation\n    params: Parameters to validate\n\nReturns:\n    True if custom validation passes, False otherwise",
          "decorators": []
        },
        {
          "name": "run",
          "line": 892,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Execute the main scriptlet logic.\n\nThis method must be implemented by all concrete scriptlet classes.\nIt should perform the core functionality and return an exit code.\n\nArgs:\n    context: Context instance for state management\n    params: Parameters for execution\n\nReturns:\n    Exit code (0 for success, non-zero for failure)\n\nRaises:\n    NotImplementedError: If not implemented by subclass",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "check_paradigm",
          "line": 911,
          "args": [
            "self"
          ],
          "docstring": "Check framework paradigm compliance.\n\nVerifies that the scriptlet follows IAF0 framework patterns\nand best practices for proper integration.\n\nReturns:\n    True if compliant with framework paradigms",
          "decorators": []
        },
        {
          "name": "_check_method_signatures",
          "line": 939,
          "args": [
            "self"
          ],
          "docstring": "Check that required methods have correct signatures.",
          "decorators": []
        },
        {
          "name": "_check_json_compatibility",
          "line": 959,
          "args": [
            "self"
          ],
          "docstring": "Check that scriptlet produces JSON-compatible data.",
          "decorators": []
        },
        {
          "name": "_check_state_management",
          "line": 971,
          "args": [
            "self"
          ],
          "docstring": "Check that scriptlet properly manages state.",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 985,
          "args": [
            "self"
          ],
          "docstring": "Provide detailed string representation for debugging.\n\nReturns:\n    Detailed string representation of scriptlet instance",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 1009,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize computational scriptlet with optimized configuration.",
          "decorators": []
        },
        {
          "name": "validate_custom",
          "line": 1024,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Custom validation for computational parameters.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 1045,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize I/O scriptlet with optimized configuration.",
          "decorators": []
        },
        {
          "name": "validate_custom",
          "line": 1061,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Custom validation for I/O parameters.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 1124,
          "args": [
            "self"
          ],
          "docstring": "Initialize execution context with management structures.",
          "decorators": []
        },
        {
          "name": "add_scriptlet",
          "line": 1135,
          "args": [
            "self",
            "name",
            "scriptlet",
            "dependencies"
          ],
          "docstring": "Add a scriptlet to the execution context.\n\nArgs:\n    name: Unique name for the scriptlet\n    scriptlet: Scriptlet instance to add\n    dependencies: List of scriptlet names this depends on",
          "decorators": []
        },
        {
          "name": "resolve_dependencies",
          "line": 1157,
          "args": [
            "self"
          ],
          "docstring": "Resolve scriptlet execution order based on dependencies.\n\nUses topological sorting to determine safe execution order\nthat respects all dependency constraints.\n\nReturns:\n    List of scriptlet names in execution order\n\nRaises:\n    ValueError: If circular dependencies are detected",
          "decorators": []
        },
        {
          "name": "execute_all",
          "line": 1204,
          "args": [
            "self",
            "params"
          ],
          "docstring": "Execute all scriptlets in dependency order.\n\nArgs:\n    params: Optional parameters for each scriptlet by name\n\nReturns:\n    Dictionary of results by scriptlet name",
          "decorators": []
        },
        {
          "name": "wrapper",
          "line": 329,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Wrapper function that performs monitoring around execution.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "wrapper",
          "line": 408,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Wrapper function that performs debug tracing around execution.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "wrapper",
          "line": 479,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Wrapper function that performs retry logic around execution.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "visit",
          "line": 1175,
          "args": [
            "name"
          ],
          "docstring": "Recursive function for topological sort.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ScriptletState",
          "line": 55,
          "bases": [
            "Enum"
          ],
          "docstring": "Enumeration of possible scriptlet execution states.\nProvides type-safe state management throughout scriptlet lifecycle.",
          "methods": []
        },
        {
          "name": "ScriptletCategory",
          "line": 70,
          "bases": [
            "Enum"
          ],
          "docstring": "Categories of scriptlets for organization and capability identification.\nEnables filtering, routing, and optimization based on scriptlet type.",
          "methods": []
        },
        {
          "name": "ScriptletResult",
          "line": 85,
          "bases": [],
          "docstring": "Comprehensive scriptlet execution result with detailed information.\nProvides structured data for monitoring, debugging, and reporting.",
          "methods": [
            {
              "name": "to_dict",
              "line": 110,
              "args": [
                "self"
              ],
              "docstring": "Convert result to dictionary for serialization and logging."
            }
          ]
        },
        {
          "name": "ScriptletConfig",
          "line": 133,
          "bases": [],
          "docstring": "Comprehensive scriptlet configuration container with all runtime settings.\nProvides centralized configuration management for scriptlet behavior.",
          "methods": [
            {
              "name": "validate_configuration",
              "line": 177,
              "args": [
                "self"
              ],
              "docstring": "Validate configuration settings and return list of validation errors."
            }
          ]
        },
        {
          "name": "ScriptletProtocol",
          "line": 199,
          "bases": [
            "Protocol"
          ],
          "docstring": "Protocol defining the contract that all scriptlets must implement.\nProvides type safety for scriptlet operations and registry management.",
          "methods": [
            {
              "name": "validate",
              "line": 205,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Validate scriptlet parameters and context state."
            },
            {
              "name": "run",
              "line": 209,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Execute scriptlet with context and parameters."
            },
            {
              "name": "get_category",
              "line": 213,
              "args": [
                "self"
              ],
              "docstring": "Get scriptlet category for classification."
            }
          ]
        },
        {
          "name": "BaseScriptlet",
          "line": 525,
          "bases": [
            "ABC"
          ],
          "docstring": "Unified base class for all scriptlets in the IAF0 framework.\n\nThis class provides the complete foundation for scriptlet development,\nincluding lifecycle management, validation, execution, monitoring,\nerror handling, and integration with the Context system.\n\nFeatures:\n- Comprehensive parameter validation with custom rules\n- Resource monitoring and performance tracking\n- Retry logic and error handling with custom handlers\n- Event-driven lifecycle with pre/post execution hooks\n- Thread-safe operations and state management\n- Integration with logging and debugging systems\n- Extensible configuration and metadata management",
          "methods": [
            {
              "name": "__init__",
              "line": 543,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize the BaseScriptlet with configuration and setup.\n\nArgs:\n    config: Optional configuration object for scriptlet behavior"
            },
            {
              "name": "execution_duration",
              "line": 581,
              "args": [
                "self"
              ],
              "docstring": "Get execution duration if available.\n\nReturns:\n    Execution duration in seconds or None if not available"
            },
            {
              "name": "is_executing",
              "line": 595,
              "args": [
                "self"
              ],
              "docstring": "Check if scriptlet is currently executing.\n\nReturns:\n    True if scriptlet is in executing state"
            },
            {
              "name": "get_category",
              "line": 604,
              "args": [
                "self"
              ],
              "docstring": "Get the category of this scriptlet.\n\nReturns:\n    Scriptlet category for classification and filtering"
            },
            {
              "name": "get_capabilities",
              "line": 613,
              "args": [
                "self"
              ],
              "docstring": "Get list of capabilities supported by this scriptlet.\n\nReturns:\n    List of capability strings for introspection"
            },
            {
              "name": "get_metadata",
              "line": 634,
              "args": [
                "self"
              ],
              "docstring": "Get comprehensive metadata about this scriptlet.\n\nReturns:\n    Dictionary containing scriptlet metadata and statistics"
            },
            {
              "name": "execute",
              "line": 659,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Execute the scriptlet with comprehensive lifecycle management.\n\nThis method orchestrates the complete scriptlet execution including\nvalidation, monitoring, error handling, and state management.\n\nArgs:\n    context: Context instance for state management\n    params: Parameters for scriptlet execution\n\nReturns:\n    Comprehensive result object with execution details\n\nRaises:\n    ValueError: If validation fails\n    RuntimeError: If execution fails"
            },
            {
              "name": "_execute_hooks",
              "line": 732,
              "args": [
                "self",
                "hooks"
              ],
              "docstring": "Execute lifecycle hooks safely with error handling.\n\nArgs:\n    hooks: List of hook functions to execute\n    *args: Positional arguments to pass to hooks\n    **kwargs: Keyword arguments to pass to hooks"
            },
            {
              "name": "_handle_error",
              "line": 748,
              "args": [
                "self",
                "error",
                "context",
                "params"
              ],
              "docstring": "Handle execution errors with custom error handlers.\n\nArgs:\n    error: Exception that occurred during execution\n    context: Context instance for state management\n    params: Parameters that were being processed\n\nReturns:\n    Error result with detailed information"
            },
            {
              "name": "_handle_completion",
              "line": 791,
              "args": [
                "self",
                "result"
              ],
              "docstring": "Handle scriptlet completion with cleanup and logging.\n\nArgs:\n    result: Execution result to process"
            },
            {
              "name": "_extract_result_data",
              "line": 818,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Extract result data from context and parameters.\n\nOverride this method to customize result data extraction.\n\nArgs:\n    context: Context instance with execution state\n    params: Parameters used during execution\n\nReturns:\n    Dictionary of result data"
            },
            {
              "name": "validate",
              "line": 844,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Validate scriptlet parameters and context state.\n\nOverride this method to implement custom validation logic.\n\nArgs:\n    context: Context instance for validation\n    params: Parameters to validate\n\nReturns:\n    True if validation passes, False otherwise"
            },
            {
              "name": "validate_custom",
              "line": 878,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Custom validation method for subclasses to override.\n\nArgs:\n    context: Context instance for validation\n    params: Parameters to validate\n\nReturns:\n    True if custom validation passes, False otherwise"
            },
            {
              "name": "run",
              "line": 892,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Execute the main scriptlet logic.\n\nThis method must be implemented by all concrete scriptlet classes.\nIt should perform the core functionality and return an exit code.\n\nArgs:\n    context: Context instance for state management\n    params: Parameters for execution\n\nReturns:\n    Exit code (0 for success, non-zero for failure)\n\nRaises:\n    NotImplementedError: If not implemented by subclass"
            },
            {
              "name": "check_paradigm",
              "line": 911,
              "args": [
                "self"
              ],
              "docstring": "Check framework paradigm compliance.\n\nVerifies that the scriptlet follows IAF0 framework patterns\nand best practices for proper integration.\n\nReturns:\n    True if compliant with framework paradigms"
            },
            {
              "name": "_check_method_signatures",
              "line": 939,
              "args": [
                "self"
              ],
              "docstring": "Check that required methods have correct signatures."
            },
            {
              "name": "_check_json_compatibility",
              "line": 959,
              "args": [
                "self"
              ],
              "docstring": "Check that scriptlet produces JSON-compatible data."
            },
            {
              "name": "_check_state_management",
              "line": 971,
              "args": [
                "self"
              ],
              "docstring": "Check that scriptlet properly manages state."
            },
            {
              "name": "__repr__",
              "line": 985,
              "args": [
                "self"
              ],
              "docstring": "Provide detailed string representation for debugging.\n\nReturns:\n    Detailed string representation of scriptlet instance"
            }
          ]
        },
        {
          "name": "ComputeScriptlet",
          "line": 1001,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "Specialized base class for computational scriptlets.\n\nProvides optimizations and patterns specific to computational\noperations, data processing, and mathematical calculations.",
          "methods": [
            {
              "name": "__init__",
              "line": 1009,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize computational scriptlet with optimized configuration."
            },
            {
              "name": "validate_custom",
              "line": 1024,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Custom validation for computational parameters."
            }
          ]
        },
        {
          "name": "IOScriptlet",
          "line": 1037,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "Specialized base class for I/O scriptlets.\n\nProvides optimizations and patterns specific to file operations,\nnetwork I/O, and data transfer operations.",
          "methods": [
            {
              "name": "__init__",
              "line": 1045,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize I/O scriptlet with optimized configuration."
            },
            {
              "name": "validate_custom",
              "line": 1061,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Custom validation for I/O parameters."
            }
          ]
        },
        {
          "name": "ExecutionContext",
          "line": 1116,
          "bases": [],
          "docstring": "Advanced execution context for managing scriptlet dependencies and orchestration.\n\nProvides comprehensive dependency resolution, parallel execution capabilities,\nand advanced scheduling for complex scriptlet workflows.",
          "methods": [
            {
              "name": "__init__",
              "line": 1124,
              "args": [
                "self"
              ],
              "docstring": "Initialize execution context with management structures."
            },
            {
              "name": "add_scriptlet",
              "line": 1135,
              "args": [
                "self",
                "name",
                "scriptlet",
                "dependencies"
              ],
              "docstring": "Add a scriptlet to the execution context.\n\nArgs:\n    name: Unique name for the scriptlet\n    scriptlet: Scriptlet instance to add\n    dependencies: List of scriptlet names this depends on"
            },
            {
              "name": "resolve_dependencies",
              "line": 1157,
              "args": [
                "self"
              ],
              "docstring": "Resolve scriptlet execution order based on dependencies.\n\nUses topological sorting to determine safe execution order\nthat respects all dependency constraints.\n\nReturns:\n    List of scriptlet names in execution order\n\nRaises:\n    ValueError: If circular dependencies are detected"
            },
            {
              "name": "execute_all",
              "line": 1204,
              "args": [
                "self",
                "params"
              ],
              "docstring": "Execute all scriptlets in dependency order.\n\nArgs:\n    params: Optional parameters for each scriptlet by name\n\nReturns:\n    Dictionary of results by scriptlet name"
            }
          ]
        }
      ],
      "lines_of_code": 1078,
      "complexity_score": 144,
      "last_modified": "2025-10-04T14:19:09.599127",
      "checksum": "e6767f4f8b67724ad47e2bbeeefd486a",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/server/enhanced_context_server.py": {
      "name": ".restructuring_backup/server/enhanced_context_server.py",
      "path": ".restructuring_backup/server/enhanced_context_server.py",
      "component_type": "server_infrastructure",
      "description": "Enhanced Context Server for Framework0 - Interactive Multi-Client Support",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "get",
        "set",
        "to_dict",
        "get_history",
        "pop_dirty_keys",
        "__init__",
        "_setup_routes",
        "_setup_websocket_handlers",
        "_write_json_dump",
        "_write_pretty_dump",
        "_write_csv_dump",
        "_write_text_dump",
        "run",
        "get_logger",
        "index",
        "get_context",
        "set_context",
        "get_all_context",
        "get_history",
        "dump_context",
        "list_dumps",
        "download_dump",
        "handle_connect",
        "handle_disconnect",
        "handle_client_register",
        "handle_context_set",
        "__init__",
        "get",
        "set",
        "to_dict",
        "Context",
        "EnhancedContextServer",
        "MemoryBus"
      ],
      "imports": [
        "csv",
        "json",
        "logging",
        "os",
        "datetime",
        "pathlib",
        "typing",
        "flask",
        "flask_socketio",
        "orchestrator.memory_bus",
        "src.core.logger",
        "argparse"
      ],
      "functions": [
        {
          "name": "main",
          "line": 988,
          "args": [],
          "docstring": "Main entry point for running the enhanced context server.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 72,
          "args": [
            "self"
          ],
          "docstring": "Initialize context with empty data and history tracking.",
          "decorators": []
        },
        {
          "name": "get",
          "line": 78,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Retrieve value for a given key from context.\n\nArgs:\n    key: Context key to retrieve value for\n    \nReturns:\n    Value associated with key, or None if key not found",
          "decorators": []
        },
        {
          "name": "set",
          "line": 90,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "Set value for a key in context with change tracking.\n\nArgs:\n    key: Context key to set value for\n    value: New value to store for the key\n    who: Attribution for who made the change",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 114,
          "args": [
            "self"
          ],
          "docstring": "Get current context state as dictionary.\n\nReturns:\n    Complete current context state as dictionary copy",
          "decorators": []
        },
        {
          "name": "get_history",
          "line": 123,
          "args": [
            "self"
          ],
          "docstring": "Get complete change history for context.\n\nReturns:\n    List of all change records with timestamps and attribution",
          "decorators": []
        },
        {
          "name": "pop_dirty_keys",
          "line": 132,
          "args": [
            "self"
          ],
          "docstring": "Get and clear list of keys that have been modified.\n\nReturns:\n    List of keys that were modified since last call to this method",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 156,
          "args": [
            "self",
            "host",
            "port",
            "debug"
          ],
          "docstring": "Initialize the enhanced context server with multi-protocol support.\n\nArgs:\n    host: Server bind address for network accessibility\n    port: Server port for client connections\n    debug: Enable debug mode for verbose logging and error details",
          "decorators": []
        },
        {
          "name": "_setup_routes",
          "line": 198,
          "args": [
            "self"
          ],
          "docstring": "Configure REST API routes for HTTP-based client access.",
          "decorators": []
        },
        {
          "name": "_setup_websocket_handlers",
          "line": 780,
          "args": [
            "self"
          ],
          "docstring": "Configure WebSocket event handlers for real-time client communication.",
          "decorators": []
        },
        {
          "name": "_write_json_dump",
          "line": 874,
          "args": [
            "self",
            "dump_path",
            "dump_info"
          ],
          "docstring": "Write context dump in JSON format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data",
          "decorators": []
        },
        {
          "name": "_write_pretty_dump",
          "line": 885,
          "args": [
            "self",
            "dump_path",
            "dump_info"
          ],
          "docstring": "Write context dump in human-readable pretty format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data",
          "decorators": []
        },
        {
          "name": "_write_csv_dump",
          "line": 922,
          "args": [
            "self",
            "dump_path",
            "dump_info"
          ],
          "docstring": "Write context dump in CSV format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data",
          "decorators": []
        },
        {
          "name": "_write_text_dump",
          "line": 949,
          "args": [
            "self",
            "dump_path",
            "dump_info"
          ],
          "docstring": "Write context dump in plain text format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data",
          "decorators": []
        },
        {
          "name": "run",
          "line": 966,
          "args": [
            "self"
          ],
          "docstring": "Start the enhanced context server with full logging and error handling.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 45,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "index",
          "line": 202,
          "args": [],
          "docstring": "Serve interactive web dashboard for server monitoring and debugging.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "get_context",
          "line": 493,
          "args": [],
          "docstring": "Retrieve context value by key with optional versioning support.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "set_context",
          "line": 516,
          "args": [],
          "docstring": "Set context value with change notification to connected clients.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "get_all_context",
          "line": 557,
          "args": [],
          "docstring": "Retrieve entire context state for dashboard and debugging purposes.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "get_history",
          "line": 578,
          "args": [],
          "docstring": "Retrieve context change history for auditing and debugging.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "dump_context",
          "line": 610,
          "args": [],
          "docstring": "Dump complete context state to file triggered by client request.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "list_dumps",
          "line": 710,
          "args": [],
          "docstring": "List all available context dump files and their metadata.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "download_dump",
          "line": 744,
          "args": [
            "filename"
          ],
          "docstring": "Download a specific context dump file.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "handle_connect",
          "line": 784,
          "args": [],
          "docstring": "Handle new client connection and initialize tracking.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "handle_disconnect",
          "line": 802,
          "args": [],
          "docstring": "Handle client disconnection and cleanup tracking.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "handle_client_register",
          "line": 814,
          "args": [
            "data"
          ],
          "docstring": "Register client type and name for monitoring and debugging.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "handle_context_set",
          "line": 837,
          "args": [
            "data"
          ],
          "docstring": "Handle context value updates from WebSocket clients.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "__init__",
          "line": 29,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 32,
          "args": [
            "self",
            "key"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 35,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 38,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Context",
          "line": 64,
          "bases": [],
          "docstring": "Simple context implementation for storing and tracking data changes.\n\nThis provides basic context management with history tracking and change\nnotifications for the enhanced context server functionality.",
          "methods": [
            {
              "name": "__init__",
              "line": 72,
              "args": [
                "self"
              ],
              "docstring": "Initialize context with empty data and history tracking."
            },
            {
              "name": "get",
              "line": 78,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Retrieve value for a given key from context.\n\nArgs:\n    key: Context key to retrieve value for\n    \nReturns:\n    Value associated with key, or None if key not found"
            },
            {
              "name": "set",
              "line": 90,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": "Set value for a key in context with change tracking.\n\nArgs:\n    key: Context key to set value for\n    value: New value to store for the key\n    who: Attribution for who made the change"
            },
            {
              "name": "to_dict",
              "line": 114,
              "args": [
                "self"
              ],
              "docstring": "Get current context state as dictionary.\n\nReturns:\n    Complete current context state as dictionary copy"
            },
            {
              "name": "get_history",
              "line": 123,
              "args": [
                "self"
              ],
              "docstring": "Get complete change history for context.\n\nReturns:\n    List of all change records with timestamps and attribution"
            },
            {
              "name": "pop_dirty_keys",
              "line": 132,
              "args": [
                "self"
              ],
              "docstring": "Get and clear list of keys that have been modified.\n\nReturns:\n    List of keys that were modified since last call to this method"
            }
          ]
        },
        {
          "name": "EnhancedContextServer",
          "line": 144,
          "bases": [],
          "docstring": "Enhanced context server supporting multiple client types and real-time updates.\n\nFeatures:\n- REST API for HTTP-based access (shell scripts via curl)\n- WebSocket support for real-time updates (Dash apps, Python clients)\n- Interactive web dashboard for debugging and monitoring\n- Cross-platform client support with simple protocols\n- Event broadcasting for state change notifications",
          "methods": [
            {
              "name": "__init__",
              "line": 156,
              "args": [
                "self",
                "host",
                "port",
                "debug"
              ],
              "docstring": "Initialize the enhanced context server with multi-protocol support.\n\nArgs:\n    host: Server bind address for network accessibility\n    port: Server port for client connections\n    debug: Enable debug mode for verbose logging and error details"
            },
            {
              "name": "_setup_routes",
              "line": 198,
              "args": [
                "self"
              ],
              "docstring": "Configure REST API routes for HTTP-based client access."
            },
            {
              "name": "_setup_websocket_handlers",
              "line": 780,
              "args": [
                "self"
              ],
              "docstring": "Configure WebSocket event handlers for real-time client communication."
            },
            {
              "name": "_write_json_dump",
              "line": 874,
              "args": [
                "self",
                "dump_path",
                "dump_info"
              ],
              "docstring": "Write context dump in JSON format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data"
            },
            {
              "name": "_write_pretty_dump",
              "line": 885,
              "args": [
                "self",
                "dump_path",
                "dump_info"
              ],
              "docstring": "Write context dump in human-readable pretty format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data"
            },
            {
              "name": "_write_csv_dump",
              "line": 922,
              "args": [
                "self",
                "dump_path",
                "dump_info"
              ],
              "docstring": "Write context dump in CSV format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data"
            },
            {
              "name": "_write_text_dump",
              "line": 949,
              "args": [
                "self",
                "dump_path",
                "dump_info"
              ],
              "docstring": "Write context dump in plain text format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data"
            },
            {
              "name": "run",
              "line": 966,
              "args": [
                "self"
              ],
              "docstring": "Start the enhanced context server with full logging and error handling."
            }
          ]
        },
        {
          "name": "MemoryBus",
          "line": 28,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 29,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 32,
              "args": [
                "self",
                "key"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 35,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "to_dict",
              "line": 38,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 849,
      "complexity_score": 84,
      "last_modified": "2025-10-04T23:19:13.986420",
      "checksum": "d3eaf0365b24279dd5247a47173d9fa2",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/setup.cfg": {
      "name": ".restructuring_backup/setup.cfg",
      "path": ".restructuring_backup/setup.cfg",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 9,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:17:36.649843",
      "checksum": "b592d1974672031f4894385ddbd21956",
      "framework_role": "general_utility",
      "stability": "stable"
    },
    ".restructuring_backup/src/__init__.py": {
      "name": ".restructuring_backup/src/__init__.py",
      "path": ".restructuring_backup/src/__init__.py",
      "component_type": "utility",
      "description": "src package initialization",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-04T14:13:35.121310",
      "checksum": "05c5c9e1714e37950ab0178204a45590",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    ".restructuring_backup/src/analysis/__init__.py": {
      "name": ".restructuring_backup/src/analysis/__init__.py",
      "path": ".restructuring_backup/src/analysis/__init__.py",
      "component_type": "utility",
      "description": "Analysis Framework Module",
      "dependencies": [
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        "docs/enhanced_analysis_framework_test_report.json",
        "scriptlets/framework.py",
        "src/analysis/enhanced_framework.py",
        "src/analysis/framework.py",
        "tests/test_analysis_framework.py",
        "tests/test_async_load_framework.py",
        "tests/test_enhanced_analysis_framework.py",
        "tests/test_framework0_integration.py",
        "tests/test_scriptlet_framework.py",
        "tools/baseline_framework_analyzer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "src/analysis/components.py",
        "src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/registry.py",
        "src/analysis/registry.py"
      ],
      "exports": [],
      "imports": [
        "framework",
        "components",
        "registry"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 58,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:03:22.522742",
      "checksum": "cd57ead5e8b8c8098b489569ce34cb12",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/src/analysis/components.py": {
      "name": ".restructuring_backup/src/analysis/components.py",
      "path": ".restructuring_backup/src/analysis/components.py",
      "component_type": "utility",
      "description": "Enhanced Analysis Components",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        "docs/enhanced_analysis_framework_test_report.json",
        "scriptlets/framework.py",
        "src/analysis/enhanced_framework.py",
        "src/analysis/framework.py",
        "tests/test_analysis_framework.py",
        "tests/test_async_load_framework.py",
        "tests/test_enhanced_analysis_framework.py",
        "tests/test_framework0_integration.py",
        "tests/test_scriptlet_framework.py",
        "tools/baseline_framework_analyzer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "_analyze_impl",
        "_analyze_sequence",
        "_analyze_numeric_data",
        "_percentile",
        "_analyze_string_data",
        "_analyze_dictionary",
        "_analyze_string",
        "_analyze_other",
        "_assess_data_quality",
        "_assess_sequence_quality",
        "_assess_dictionary_quality",
        "_assess_string_quality",
        "__init__",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "EnhancedSummarizer",
        "StatisticalAnalyzer",
        "PatternAnalyzer",
        "QualityAnalyzer"
      ],
      "imports": [
        "os",
        "statistics",
        "json",
        "typing",
        "datetime",
        "collections",
        "framework",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 54,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize EnhancedSummarizer with configuration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 59,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform enhanced summarization analysis.\n\nArgs:\n    data: Input data for summarization\n    config: Analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive summary information",
          "decorators": []
        },
        {
          "name": "_analyze_sequence",
          "line": 96,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze sequence data (list or tuple).",
          "decorators": []
        },
        {
          "name": "_analyze_numeric_data",
          "line": 138,
          "args": [
            "self",
            "numeric_data"
          ],
          "docstring": "Perform comprehensive numeric data analysis.",
          "decorators": []
        },
        {
          "name": "_percentile",
          "line": 201,
          "args": [
            "self",
            "sorted_data",
            "percentile"
          ],
          "docstring": "Calculate percentile value from sorted data.",
          "decorators": []
        },
        {
          "name": "_analyze_string_data",
          "line": 222,
          "args": [
            "self",
            "string_data"
          ],
          "docstring": "Analyze string data for text characteristics.",
          "decorators": []
        },
        {
          "name": "_analyze_dictionary",
          "line": 254,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze dictionary data structure.",
          "decorators": []
        },
        {
          "name": "_analyze_string",
          "line": 293,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze single string data.",
          "decorators": []
        },
        {
          "name": "_analyze_other",
          "line": 324,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze other data types.",
          "decorators": []
        },
        {
          "name": "_assess_data_quality",
          "line": 343,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Comprehensive data quality assessment.",
          "decorators": []
        },
        {
          "name": "_assess_sequence_quality",
          "line": 368,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Assess quality of sequence data.",
          "decorators": []
        },
        {
          "name": "_assess_dictionary_quality",
          "line": 395,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Assess quality of dictionary data.",
          "decorators": []
        },
        {
          "name": "_assess_string_quality",
          "line": 415,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Assess quality of string data.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 439,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize StatisticalAnalyzer with configuration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 444,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform comprehensive statistical analysis.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 459,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize PatternAnalyzer with configuration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 464,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform pattern detection analysis.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 479,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize QualityAnalyzer with configuration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 484,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform data quality analysis.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedSummarizer",
          "line": 38,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Advanced data summarization analyzer with comprehensive statistics.\n\nProvides detailed summaries of data including descriptive statistics,\ndistribution analysis, and intelligent insights generation.\n\nFeatures:\n    - Descriptive statistics (mean, median, mode, standard deviation)\n    - Distribution analysis (quartiles, percentiles, skewness)\n    - Data type analysis and validation\n    - Missing value detection and reporting\n    - Outlier identification\n    - Correlation analysis for multi-dimensional data",
          "methods": [
            {
              "name": "__init__",
              "line": 54,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize EnhancedSummarizer with configuration."
            },
            {
              "name": "_analyze_impl",
              "line": 59,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform enhanced summarization analysis.\n\nArgs:\n    data: Input data for summarization\n    config: Analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive summary information"
            },
            {
              "name": "_analyze_sequence",
              "line": 96,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze sequence data (list or tuple)."
            },
            {
              "name": "_analyze_numeric_data",
              "line": 138,
              "args": [
                "self",
                "numeric_data"
              ],
              "docstring": "Perform comprehensive numeric data analysis."
            },
            {
              "name": "_percentile",
              "line": 201,
              "args": [
                "self",
                "sorted_data",
                "percentile"
              ],
              "docstring": "Calculate percentile value from sorted data."
            },
            {
              "name": "_analyze_string_data",
              "line": 222,
              "args": [
                "self",
                "string_data"
              ],
              "docstring": "Analyze string data for text characteristics."
            },
            {
              "name": "_analyze_dictionary",
              "line": 254,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze dictionary data structure."
            },
            {
              "name": "_analyze_string",
              "line": 293,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze single string data."
            },
            {
              "name": "_analyze_other",
              "line": 324,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze other data types."
            },
            {
              "name": "_assess_data_quality",
              "line": 343,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Comprehensive data quality assessment."
            },
            {
              "name": "_assess_sequence_quality",
              "line": 368,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Assess quality of sequence data."
            },
            {
              "name": "_assess_dictionary_quality",
              "line": 395,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Assess quality of dictionary data."
            },
            {
              "name": "_assess_string_quality",
              "line": 415,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Assess quality of string data."
            }
          ]
        },
        {
          "name": "StatisticalAnalyzer",
          "line": 431,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Comprehensive statistical analysis for numeric data.\n\nProvides advanced statistical calculations, distribution analysis,\nhypothesis testing, and correlation analysis capabilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 439,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize StatisticalAnalyzer with configuration."
            },
            {
              "name": "_analyze_impl",
              "line": 444,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform comprehensive statistical analysis."
            }
          ]
        },
        {
          "name": "PatternAnalyzer",
          "line": 451,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Pattern detection and trend analysis for data sequences.\n\nIdentifies trends, cycles, anomalies, and recurring patterns\nin time series and sequential data.",
          "methods": [
            {
              "name": "__init__",
              "line": 459,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize PatternAnalyzer with configuration."
            },
            {
              "name": "_analyze_impl",
              "line": 464,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform pattern detection analysis."
            }
          ]
        },
        {
          "name": "QualityAnalyzer",
          "line": 471,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Data quality assessment and validation analyzer.\n\nEvaluates data completeness, consistency, accuracy, and validity\nproviding actionable quality metrics and improvement recommendations.",
          "methods": [
            {
              "name": "__init__",
              "line": 479,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize QualityAnalyzer with configuration."
            },
            {
              "name": "_analyze_impl",
              "line": 484,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform data quality analysis."
            }
          ]
        }
      ],
      "lines_of_code": 389,
      "complexity_score": 56,
      "last_modified": "2025-10-04T16:03:22.522742",
      "checksum": "4e966d0448a8ce65c1be99898aaa78d9",
      "framework_role": "general_utility",
      "stability": "stable"
    },
    ".restructuring_backup/src/analysis/enhanced_components.py": {
      "name": ".restructuring_backup/src/analysis/enhanced_components.py",
      "path": ".restructuring_backup/src/analysis/enhanced_components.py",
      "component_type": "utility",
      "description": "Enhanced Analysis Components with Context Integration",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        "docs/method_index.md",
        "src/analysis/enhanced_framework.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "src/analysis/components.py",
        "src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/registry.py",
        "src/analysis/registry.py"
      ],
      "exports": [
        "__init__",
        "_analyze_impl",
        "_create_enhanced_summary",
        "_store_summary_in_context",
        "_compare_with_history",
        "_calculate_multi_period_trends",
        "_analyze_trends",
        "_generate_context_recommendations",
        "_generate_trend_recommendations",
        "_update_performance_metrics",
        "_track_analysis_trends",
        "__init__",
        "_analyze_impl",
        "_collect_metrics",
        "_analyze_dict_metrics",
        "_analyze_sequence_metrics",
        "_analyze_general_metrics",
        "_collect_context_metrics",
        "_analyze_performance_metrics",
        "_analyze_metric_trends",
        "_calculate_metric_trend",
        "_summarize_metric_trends",
        "_check_alert_conditions",
        "_generate_metrics_recommendations",
        "_store_metrics_in_context",
        "ContextAwareSummarizer",
        "MetricsAnalyzer",
        "RegisteredContextAwareSummarizer",
        "RegisteredMetricsAnalyzer"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "statistics",
        "typing",
        "datetime",
        "collections",
        "src.core.logger",
        "orchestrator.context.context",
        "enhanced_framework",
        "components",
        "registry"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 62,
          "args": [
            "self",
            "name",
            "config",
            "context"
          ],
          "docstring": "Initialize context-aware summarizer with enhanced capabilities.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 87,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform context-aware summarization analysis.\n\nArgs:\n    data: Input data for summarization\n    config: Enhanced analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive summary with context integration",
          "decorators": []
        },
        {
          "name": "_create_enhanced_summary",
          "line": 128,
          "args": [
            "self",
            "base_summary",
            "data",
            "config"
          ],
          "docstring": "Create enhanced summary with context integration.",
          "decorators": []
        },
        {
          "name": "_store_summary_in_context",
          "line": 158,
          "args": [
            "self",
            "summary"
          ],
          "docstring": "Store summary results in context for future reference.",
          "decorators": []
        },
        {
          "name": "_compare_with_history",
          "line": 188,
          "args": [
            "self",
            "current_summary"
          ],
          "docstring": "Compare current summary with historical data.",
          "decorators": []
        },
        {
          "name": "_calculate_multi_period_trends",
          "line": 235,
          "args": [
            "self"
          ],
          "docstring": "Calculate trends across multiple historical periods.",
          "decorators": []
        },
        {
          "name": "_analyze_trends",
          "line": 282,
          "args": [
            "self",
            "summary"
          ],
          "docstring": "Analyze current trends in the data.",
          "decorators": []
        },
        {
          "name": "_generate_context_recommendations",
          "line": 334,
          "args": [
            "self",
            "summary",
            "data"
          ],
          "docstring": "Generate context-aware recommendations for data improvement.",
          "decorators": []
        },
        {
          "name": "_generate_trend_recommendations",
          "line": 395,
          "args": [
            "self",
            "patterns"
          ],
          "docstring": "Generate recommendations based on detected patterns.",
          "decorators": []
        },
        {
          "name": "_update_performance_metrics",
          "line": 416,
          "args": [
            "self",
            "start_time",
            "data_size"
          ],
          "docstring": "Update performance tracking metrics.",
          "decorators": []
        },
        {
          "name": "_track_analysis_trends",
          "line": 438,
          "args": [
            "self",
            "summary"
          ],
          "docstring": "Track analysis trends for long-term monitoring.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 480,
          "args": [
            "self",
            "name",
            "config",
            "context"
          ],
          "docstring": "Initialize metrics analyzer with enhanced capabilities.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 493,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform comprehensive metrics analysis.\n\nArgs:\n    data: Metrics data for analysis (can be various formats)\n    config: Enhanced analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive metrics analysis",
          "decorators": []
        },
        {
          "name": "_collect_metrics",
          "line": 545,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Collect comprehensive metrics from input data.",
          "decorators": []
        },
        {
          "name": "_analyze_dict_metrics",
          "line": 568,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze metrics for dictionary data.",
          "decorators": []
        },
        {
          "name": "_analyze_sequence_metrics",
          "line": 578,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze metrics for sequence data.",
          "decorators": []
        },
        {
          "name": "_analyze_general_metrics",
          "line": 602,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze metrics for general data types.",
          "decorators": []
        },
        {
          "name": "_collect_context_metrics",
          "line": 612,
          "args": [
            "self"
          ],
          "docstring": "Collect metrics from the Context system.",
          "decorators": []
        },
        {
          "name": "_analyze_performance_metrics",
          "line": 647,
          "args": [
            "self",
            "collected_metrics"
          ],
          "docstring": "Analyze performance characteristics of collected metrics.",
          "decorators": []
        },
        {
          "name": "_analyze_metric_trends",
          "line": 691,
          "args": [
            "self"
          ],
          "docstring": "Analyze trends in collected metrics over time.",
          "decorators": []
        },
        {
          "name": "_calculate_metric_trend",
          "line": 716,
          "args": [
            "self",
            "metric_history"
          ],
          "docstring": "Calculate trend for a specific metric.",
          "decorators": []
        },
        {
          "name": "_summarize_metric_trends",
          "line": 772,
          "args": [
            "self",
            "metric_trends"
          ],
          "docstring": "Summarize overall trends across all metrics.",
          "decorators": []
        },
        {
          "name": "_check_alert_conditions",
          "line": 815,
          "args": [
            "self",
            "metrics"
          ],
          "docstring": "Check collected metrics against alert thresholds.",
          "decorators": []
        },
        {
          "name": "_generate_metrics_recommendations",
          "line": 859,
          "args": [
            "self",
            "metrics_result"
          ],
          "docstring": "Generate recommendations based on metrics analysis.",
          "decorators": []
        },
        {
          "name": "_store_metrics_in_context",
          "line": 895,
          "args": [
            "self",
            "metrics_result"
          ],
          "docstring": "Store metrics analysis results in context.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextAwareSummarizer",
          "line": 46,
          "bases": [
            "EnhancedAnalyzerV2"
          ],
          "docstring": "Context-aware data summarizer with advanced tracking and integration.\n\nExtends EnhancedSummarizer with Context system integration, providing\ncomprehensive data summarization with full traceability and advanced\nstatistical analysis capabilities.\n\nFeatures:\n    - Context-integrated statistical analysis\n    - Historical data tracking and comparison\n    - Advanced pattern detection with context awareness\n    - Quality assessment with context-based recommendations\n    - Real-time performance monitoring",
          "methods": [
            {
              "name": "__init__",
              "line": 62,
              "args": [
                "self",
                "name",
                "config",
                "context"
              ],
              "docstring": "Initialize context-aware summarizer with enhanced capabilities."
            },
            {
              "name": "_analyze_impl",
              "line": 87,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform context-aware summarization analysis.\n\nArgs:\n    data: Input data for summarization\n    config: Enhanced analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive summary with context integration"
            },
            {
              "name": "_create_enhanced_summary",
              "line": 128,
              "args": [
                "self",
                "base_summary",
                "data",
                "config"
              ],
              "docstring": "Create enhanced summary with context integration."
            },
            {
              "name": "_store_summary_in_context",
              "line": 158,
              "args": [
                "self",
                "summary"
              ],
              "docstring": "Store summary results in context for future reference."
            },
            {
              "name": "_compare_with_history",
              "line": 188,
              "args": [
                "self",
                "current_summary"
              ],
              "docstring": "Compare current summary with historical data."
            },
            {
              "name": "_calculate_multi_period_trends",
              "line": 235,
              "args": [
                "self"
              ],
              "docstring": "Calculate trends across multiple historical periods."
            },
            {
              "name": "_analyze_trends",
              "line": 282,
              "args": [
                "self",
                "summary"
              ],
              "docstring": "Analyze current trends in the data."
            },
            {
              "name": "_generate_context_recommendations",
              "line": 334,
              "args": [
                "self",
                "summary",
                "data"
              ],
              "docstring": "Generate context-aware recommendations for data improvement."
            },
            {
              "name": "_generate_trend_recommendations",
              "line": 395,
              "args": [
                "self",
                "patterns"
              ],
              "docstring": "Generate recommendations based on detected patterns."
            },
            {
              "name": "_update_performance_metrics",
              "line": 416,
              "args": [
                "self",
                "start_time",
                "data_size"
              ],
              "docstring": "Update performance tracking metrics."
            },
            {
              "name": "_track_analysis_trends",
              "line": 438,
              "args": [
                "self",
                "summary"
              ],
              "docstring": "Track analysis trends for long-term monitoring."
            }
          ]
        },
        {
          "name": "MetricsAnalyzer",
          "line": 465,
          "bases": [
            "EnhancedAnalyzerV2"
          ],
          "docstring": "Comprehensive metrics analyzer with Context integration.\n\nProvides advanced metrics collection, analysis, and monitoring\ncapabilities with full Context system integration.\n\nFeatures:\n    - Real-time performance monitoring\n    - Resource usage tracking\n    - Context-aware metric correlation\n    - Historical trend analysis\n    - Alert generation and notification",
          "methods": [
            {
              "name": "__init__",
              "line": 480,
              "args": [
                "self",
                "name",
                "config",
                "context"
              ],
              "docstring": "Initialize metrics analyzer with enhanced capabilities."
            },
            {
              "name": "_analyze_impl",
              "line": 493,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform comprehensive metrics analysis.\n\nArgs:\n    data: Metrics data for analysis (can be various formats)\n    config: Enhanced analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive metrics analysis"
            },
            {
              "name": "_collect_metrics",
              "line": 545,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Collect comprehensive metrics from input data."
            },
            {
              "name": "_analyze_dict_metrics",
              "line": 568,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze metrics for dictionary data."
            },
            {
              "name": "_analyze_sequence_metrics",
              "line": 578,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze metrics for sequence data."
            },
            {
              "name": "_analyze_general_metrics",
              "line": 602,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze metrics for general data types."
            },
            {
              "name": "_collect_context_metrics",
              "line": 612,
              "args": [
                "self"
              ],
              "docstring": "Collect metrics from the Context system."
            },
            {
              "name": "_analyze_performance_metrics",
              "line": 647,
              "args": [
                "self",
                "collected_metrics"
              ],
              "docstring": "Analyze performance characteristics of collected metrics."
            },
            {
              "name": "_analyze_metric_trends",
              "line": 691,
              "args": [
                "self"
              ],
              "docstring": "Analyze trends in collected metrics over time."
            },
            {
              "name": "_calculate_metric_trend",
              "line": 716,
              "args": [
                "self",
                "metric_history"
              ],
              "docstring": "Calculate trend for a specific metric."
            },
            {
              "name": "_summarize_metric_trends",
              "line": 772,
              "args": [
                "self",
                "metric_trends"
              ],
              "docstring": "Summarize overall trends across all metrics."
            },
            {
              "name": "_check_alert_conditions",
              "line": 815,
              "args": [
                "self",
                "metrics"
              ],
              "docstring": "Check collected metrics against alert thresholds."
            },
            {
              "name": "_generate_metrics_recommendations",
              "line": 859,
              "args": [
                "self",
                "metrics_result"
              ],
              "docstring": "Generate recommendations based on metrics analysis."
            },
            {
              "name": "_store_metrics_in_context",
              "line": 895,
              "args": [
                "self",
                "metrics_result"
              ],
              "docstring": "Store metrics analysis results in context."
            }
          ]
        },
        {
          "name": "RegisteredContextAwareSummarizer",
          "line": 942,
          "bases": [
            "ContextAwareSummarizer"
          ],
          "docstring": "Registered version of ContextAwareSummarizer for automatic discovery.",
          "methods": []
        },
        {
          "name": "RegisteredMetricsAnalyzer",
          "line": 953,
          "bases": [
            "MetricsAnalyzer"
          ],
          "docstring": "Registered version of MetricsAnalyzer for automatic discovery.",
          "methods": []
        }
      ],
      "lines_of_code": 766,
      "complexity_score": 141,
      "last_modified": "2025-10-04T17:23:07.905833",
      "checksum": "294e7df275a883351c97948c40f9ad05",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/src/analysis/enhanced_framework.py": {
      "name": ".restructuring_backup/src/analysis/enhanced_framework.py",
      "path": ".restructuring_backup/src/analysis/enhanced_framework.py",
      "component_type": "utility",
      "description": "Enhanced Analysis Framework with Context Integration",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        "docs/enhanced_analysis_framework_test_report.json",
        "scriptlets/framework.py",
        "src/analysis/enhanced_framework.py",
        "src/analysis/framework.py",
        "tests/test_analysis_framework.py",
        "tests/test_async_load_framework.py",
        "tests/test_enhanced_analysis_framework.py",
        "tests/test_framework0_integration.py",
        "tests/test_scriptlet_framework.py",
        "tools/baseline_framework_analyzer.py",
        ".restructuring_backup/src/analysis/registry.py",
        "src/analysis/registry.py"
      ],
      "exports": [
        "create_enhanced_analyzer",
        "__init__",
        "to_dict",
        "from_dict",
        "add_context_key_created",
        "add_context_key_accessed",
        "add_dependency_resolved",
        "add_dependency_failed",
        "to_dict",
        "__init__",
        "_initialize_context_keys",
        "add_dependency",
        "remove_dependency",
        "_check_dependencies",
        "send_message",
        "receive_messages",
        "share_data",
        "get_shared_data",
        "_execution_context",
        "analyze",
        "_analyze_impl",
        "create_enhanced_pipeline",
        "EnhancedAnalysisError",
        "EnhancedAnalysisConfig",
        "EnhancedAnalysisResult",
        "EnhancedAnalyzerV2",
        "EnhancedAnalysisRegistry"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "threading",
        "traceback",
        "abc",
        "typing",
        "dataclasses",
        "datetime",
        "pathlib",
        "contextlib",
        "src.core.logger",
        "orchestrator.context.context",
        "framework",
        "registry"
      ],
      "functions": [
        {
          "name": "create_enhanced_analyzer",
          "line": 679,
          "args": [
            "analyzer_type",
            "name",
            "config",
            "context"
          ],
          "docstring": "Create enhanced analyzer instance with Context integration.\n\nArgs:\n    analyzer_type: Type of analyzer to create\n    name: Name for analyzer instance\n    config: Enhanced configuration\n    context: Context instance for integration\n    \nReturns:\n    Configured enhanced analyzer instance",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 50,
          "args": [
            "self",
            "message",
            "error_code",
            "context",
            "analyzer_name",
            "execution_context"
          ],
          "docstring": "Initialize enhanced error with Context integration.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 102,
          "args": [
            "self"
          ],
          "docstring": "Convert enhanced configuration to dictionary.",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 128,
          "args": [
            "cls",
            "config_dict"
          ],
          "docstring": "Create enhanced configuration from dictionary.",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "add_context_key_created",
          "line": 187,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Record that a context key was created.",
          "decorators": []
        },
        {
          "name": "add_context_key_accessed",
          "line": 192,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Record that a context key was accessed.",
          "decorators": []
        },
        {
          "name": "add_dependency_resolved",
          "line": 197,
          "args": [
            "self",
            "dependency"
          ],
          "docstring": "Record that a dependency was resolved.",
          "decorators": []
        },
        {
          "name": "add_dependency_failed",
          "line": 202,
          "args": [
            "self",
            "dependency"
          ],
          "docstring": "Record that a dependency failed to resolve.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 207,
          "args": [
            "self"
          ],
          "docstring": "Convert enhanced result to dictionary.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 252,
          "args": [
            "self",
            "name",
            "config",
            "context"
          ],
          "docstring": "Initialize enhanced analyzer with Context integration.\n\nArgs:\n    name: Unique analyzer name\n    config: Enhanced configuration (uses defaults if None)\n    context: Context instance for state management (creates if None)",
          "decorators": []
        },
        {
          "name": "_initialize_context_keys",
          "line": 290,
          "args": [
            "self"
          ],
          "docstring": "Initialize analyzer-specific context keys.",
          "decorators": []
        },
        {
          "name": "add_dependency",
          "line": 302,
          "args": [
            "self",
            "analyzer_name"
          ],
          "docstring": "Add analyzer dependency.",
          "decorators": []
        },
        {
          "name": "remove_dependency",
          "line": 315,
          "args": [
            "self",
            "analyzer_name"
          ],
          "docstring": "Remove analyzer dependency.",
          "decorators": []
        },
        {
          "name": "_check_dependencies",
          "line": 328,
          "args": [
            "self"
          ],
          "docstring": "Check if all dependencies are satisfied.",
          "decorators": []
        },
        {
          "name": "send_message",
          "line": 343,
          "args": [
            "self",
            "target_analyzer",
            "message"
          ],
          "docstring": "Send message to another analyzer.",
          "decorators": []
        },
        {
          "name": "receive_messages",
          "line": 364,
          "args": [
            "self"
          ],
          "docstring": "Receive messages from other analyzers.",
          "decorators": []
        },
        {
          "name": "share_data",
          "line": 392,
          "args": [
            "self",
            "data_key",
            "data"
          ],
          "docstring": "Share data with other analyzers.",
          "decorators": []
        },
        {
          "name": "get_shared_data",
          "line": 409,
          "args": [
            "self",
            "data_key"
          ],
          "docstring": "Get shared data from other analyzers.",
          "decorators": []
        },
        {
          "name": "_execution_context",
          "line": 426,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Context manager for execution tracking and cleanup.",
          "decorators": [
            "contextmanager"
          ]
        },
        {
          "name": "analyze",
          "line": 464,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Enhanced analysis method with Context integration and advanced features.\n\nProvides comprehensive analysis workflow with dependency checking,\nContext integration, performance monitoring, and error recovery.\n\nArgs:\n    data: Input data for analysis\n    config: Enhanced configuration override\n    \nReturns:\n    EnhancedAnalysisResult with comprehensive metadata and tracking",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 579,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Default implementation for enhanced analyzer.\n\nThis provides a basic implementation that can be overridden by subclasses.\nFor testing and base functionality.\n\nArgs:\n    data: Input data for analysis\n    config: Enhanced analysis configuration\n    \nReturns:\n    Basic analysis result",
          "decorators": []
        },
        {
          "name": "create_enhanced_pipeline",
          "line": 617,
          "args": [
            "analyzer_configs",
            "context",
            "pipeline_name"
          ],
          "docstring": "Create enhanced analyzer pipeline with dependency resolution and Context integration.\n\nArgs:\n    analyzer_configs: List of analyzer configuration dictionaries\n    context: Shared context instance (creates if None)\n    pipeline_name: Name for the pipeline\n    \nReturns:\n    List of configured enhanced analyzer instances in execution order",
          "decorators": [
            "staticmethod"
          ]
        }
      ],
      "classes": [
        {
          "name": "EnhancedAnalysisError",
          "line": 42,
          "bases": [
            "AnalysisError"
          ],
          "docstring": "Enhanced analysis error with Context integration and advanced error tracking.\n\nProvides comprehensive error information including context state,\nexecution trace, and recovery suggestions.",
          "methods": [
            {
              "name": "__init__",
              "line": 50,
              "args": [
                "self",
                "message",
                "error_code",
                "context",
                "analyzer_name",
                "execution_context"
              ],
              "docstring": "Initialize enhanced error with Context integration."
            }
          ]
        },
        {
          "name": "EnhancedAnalysisConfig",
          "line": 69,
          "bases": [
            "AnalysisConfig"
          ],
          "docstring": "Enhanced analysis configuration with Context integration and advanced features.\n\nExtends base configuration with Context system integration,\npipeline management, and advanced optimization settings.",
          "methods": [
            {
              "name": "to_dict",
              "line": 102,
              "args": [
                "self"
              ],
              "docstring": "Convert enhanced configuration to dictionary."
            },
            {
              "name": "from_dict",
              "line": 128,
              "args": [
                "cls",
                "config_dict"
              ],
              "docstring": "Create enhanced configuration from dictionary."
            }
          ]
        },
        {
          "name": "EnhancedAnalysisResult",
          "line": 152,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Enhanced analysis result with Context integration and advanced metadata.\n\nExtends base result with Context system integration, dependency tracking,\nand comprehensive execution information.",
          "methods": [
            {
              "name": "add_context_key_created",
              "line": 187,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Record that a context key was created."
            },
            {
              "name": "add_context_key_accessed",
              "line": 192,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Record that a context key was accessed."
            },
            {
              "name": "add_dependency_resolved",
              "line": 197,
              "args": [
                "self",
                "dependency"
              ],
              "docstring": "Record that a dependency was resolved."
            },
            {
              "name": "add_dependency_failed",
              "line": 202,
              "args": [
                "self",
                "dependency"
              ],
              "docstring": "Record that a dependency failed to resolve."
            },
            {
              "name": "to_dict",
              "line": 207,
              "args": [
                "self"
              ],
              "docstring": "Convert enhanced result to dictionary."
            }
          ]
        },
        {
          "name": "EnhancedAnalyzerV2",
          "line": 235,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Enhanced analyzer base class with Context integration and advanced features.\n\nExtends BaseAnalyzerV2 with Context system integration, dependency management,\nadvanced error handling, and inter-analyzer communication capabilities.\n\nFeatures:\n    - Full Context system integration for state management\n    - Advanced dependency tracking and resolution\n    - Inter-analyzer communication and data sharing\n    - Enhanced error handling with recovery mechanisms  \n    - Performance monitoring and resource optimization\n    - Plugin architecture support\n    - Real-time pipeline execution",
          "methods": [
            {
              "name": "__init__",
              "line": 252,
              "args": [
                "self",
                "name",
                "config",
                "context"
              ],
              "docstring": "Initialize enhanced analyzer with Context integration.\n\nArgs:\n    name: Unique analyzer name\n    config: Enhanced configuration (uses defaults if None)\n    context: Context instance for state management (creates if None)"
            },
            {
              "name": "_initialize_context_keys",
              "line": 290,
              "args": [
                "self"
              ],
              "docstring": "Initialize analyzer-specific context keys."
            },
            {
              "name": "add_dependency",
              "line": 302,
              "args": [
                "self",
                "analyzer_name"
              ],
              "docstring": "Add analyzer dependency."
            },
            {
              "name": "remove_dependency",
              "line": 315,
              "args": [
                "self",
                "analyzer_name"
              ],
              "docstring": "Remove analyzer dependency."
            },
            {
              "name": "_check_dependencies",
              "line": 328,
              "args": [
                "self"
              ],
              "docstring": "Check if all dependencies are satisfied."
            },
            {
              "name": "send_message",
              "line": 343,
              "args": [
                "self",
                "target_analyzer",
                "message"
              ],
              "docstring": "Send message to another analyzer."
            },
            {
              "name": "receive_messages",
              "line": 364,
              "args": [
                "self"
              ],
              "docstring": "Receive messages from other analyzers."
            },
            {
              "name": "share_data",
              "line": 392,
              "args": [
                "self",
                "data_key",
                "data"
              ],
              "docstring": "Share data with other analyzers."
            },
            {
              "name": "get_shared_data",
              "line": 409,
              "args": [
                "self",
                "data_key"
              ],
              "docstring": "Get shared data from other analyzers."
            },
            {
              "name": "_execution_context",
              "line": 426,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Context manager for execution tracking and cleanup."
            },
            {
              "name": "analyze",
              "line": 464,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Enhanced analysis method with Context integration and advanced features.\n\nProvides comprehensive analysis workflow with dependency checking,\nContext integration, performance monitoring, and error recovery.\n\nArgs:\n    data: Input data for analysis\n    config: Enhanced configuration override\n    \nReturns:\n    EnhancedAnalysisResult with comprehensive metadata and tracking"
            },
            {
              "name": "_analyze_impl",
              "line": 579,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Default implementation for enhanced analyzer.\n\nThis provides a basic implementation that can be overridden by subclasses.\nFor testing and base functionality.\n\nArgs:\n    data: Input data for analysis\n    config: Enhanced analysis configuration\n    \nReturns:\n    Basic analysis result"
            }
          ]
        },
        {
          "name": "EnhancedAnalysisRegistry",
          "line": 608,
          "bases": [
            "AnalysisRegistry"
          ],
          "docstring": "Enhanced registry with Context integration and advanced features.\n\nExtends base registry with Context system integration, dependency management,\nand advanced analyzer lifecycle management.",
          "methods": [
            {
              "name": "create_enhanced_pipeline",
              "line": 617,
              "args": [
                "analyzer_configs",
                "context",
                "pipeline_name"
              ],
              "docstring": "Create enhanced analyzer pipeline with dependency resolution and Context integration.\n\nArgs:\n    analyzer_configs: List of analyzer configuration dictionaries\n    context: Shared context instance (creates if None)\n    pipeline_name: Name for the pipeline\n    \nReturns:\n    List of configured enhanced analyzer instances in execution order"
            }
          ]
        }
      ],
      "lines_of_code": 599,
      "complexity_score": 82,
      "last_modified": "2025-10-04T17:23:07.905833",
      "checksum": "0b6654efbd8a1fe0119e3e0fa9a4c8d9",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/src/analysis/framework.py": {
      "name": ".restructuring_backup/src/analysis/framework.py",
      "path": ".restructuring_backup/src/analysis/framework.py",
      "component_type": "utility",
      "description": "Core Analysis Framework",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "to_dict",
        "from_dict",
        "add_error",
        "add_warning",
        "add_statistic",
        "add_pattern",
        "to_dict",
        "__init__",
        "add_hook",
        "remove_hook",
        "_run_hooks",
        "_calculate_statistics",
        "_detect_patterns",
        "_assess_quality",
        "get_statistics",
        "_analyze_impl",
        "analyze",
        "AnalysisError",
        "AnalysisConfig",
        "AnalysisResult",
        "BaseAnalyzerV2"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "threading",
        "abc",
        "typing",
        "dataclasses",
        "datetime",
        "pathlib",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 48,
          "args": [
            "self",
            "message",
            "error_code",
            "context"
          ],
          "docstring": "Initialize AnalysisError with enhanced context information.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "Convert configuration to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 104,
          "args": [
            "cls",
            "config_dict"
          ],
          "docstring": "Create configuration from dictionary with validation.",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "add_error",
          "line": 151,
          "args": [
            "self",
            "error"
          ],
          "docstring": "Add error message to result and mark as unsuccessful.",
          "decorators": []
        },
        {
          "name": "add_warning",
          "line": 156,
          "args": [
            "self",
            "warning"
          ],
          "docstring": "Add warning message to result.",
          "decorators": []
        },
        {
          "name": "add_statistic",
          "line": 160,
          "args": [
            "self",
            "name",
            "value"
          ],
          "docstring": "Add statistical measure to result.",
          "decorators": []
        },
        {
          "name": "add_pattern",
          "line": 164,
          "args": [
            "self",
            "pattern_type",
            "confidence",
            "details"
          ],
          "docstring": "Add detected pattern to result.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 175,
          "args": [
            "self"
          ],
          "docstring": "Convert result to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 219,
          "args": [
            "self",
            "name",
            "config"
          ],
          "docstring": "Initialize analyzer with configuration and thread safety.\n\nArgs:\n    name: Unique name for this analyzer instance\n    config: Configuration object, uses defaults if None",
          "decorators": []
        },
        {
          "name": "add_hook",
          "line": 247,
          "args": [
            "self",
            "hook_type",
            "hook_function"
          ],
          "docstring": "Add hook function to specified hook type.",
          "decorators": []
        },
        {
          "name": "remove_hook",
          "line": 256,
          "args": [
            "self",
            "hook_type",
            "hook_function"
          ],
          "docstring": "Remove hook function from specified hook type.",
          "decorators": []
        },
        {
          "name": "_run_hooks",
          "line": 263,
          "args": [
            "self",
            "hook_type"
          ],
          "docstring": "Execute all hooks of specified type with provided arguments.",
          "decorators": []
        },
        {
          "name": "_calculate_statistics",
          "line": 271,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Calculate basic statistical measures for numeric data.",
          "decorators": []
        },
        {
          "name": "_detect_patterns",
          "line": 299,
          "args": [
            "self",
            "data",
            "threshold"
          ],
          "docstring": "Detect patterns in data using configurable threshold.",
          "decorators": []
        },
        {
          "name": "_assess_quality",
          "line": 328,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Assess data quality returning score from 0.0 to 1.0.",
          "decorators": []
        },
        {
          "name": "get_statistics",
          "line": 360,
          "args": [
            "self"
          ],
          "docstring": "Get analyzer performance statistics.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 379,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Abstract method for analyzer-specific implementation.\n\nThis method must be implemented by all concrete analyzer classes\nto provide their specific analysis functionality.\n\nArgs:\n    data: Input data for analysis\n    config: Configuration for analysis operation\n    \nReturns:\n    Analysis result data (type depends on analyzer implementation)",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "analyze",
          "line": 395,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Main analysis method with comprehensive error handling and logging.\n\nProvides standardized analysis workflow with timing, statistics,\npattern detection, quality assessment, and hook execution.\n\nArgs:\n    data: Input data for analysis\n    config: Optional configuration override\n    \nReturns:\n    AnalysisResult containing analysis data and metadata",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AnalysisError",
          "line": 40,
          "bases": [
            "Exception"
          ],
          "docstring": "Custom exception class for analysis-related errors.\n\nProvides enhanced error reporting with context information\nand support for error chaining in complex analysis pipelines.",
          "methods": [
            {
              "name": "__init__",
              "line": 48,
              "args": [
                "self",
                "message",
                "error_code",
                "context"
              ],
              "docstring": "Initialize AnalysisError with enhanced context information."
            }
          ]
        },
        {
          "name": "AnalysisConfig",
          "line": 58,
          "bases": [],
          "docstring": "Configuration class for analysis operations.\n\nProvides centralized configuration management with validation,\nserialization support, and environment-based overrides.",
          "methods": [
            {
              "name": "to_dict",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": "Convert configuration to dictionary for serialization."
            },
            {
              "name": "from_dict",
              "line": 104,
              "args": [
                "cls",
                "config_dict"
              ],
              "docstring": "Create configuration from dictionary with validation."
            }
          ]
        },
        {
          "name": "AnalysisResult",
          "line": 121,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Standardized result structure for all analysis operations.\n\nProvides consistent result format with metadata, timing information,\nstatistical summaries, and comprehensive error handling.",
          "methods": [
            {
              "name": "add_error",
              "line": 151,
              "args": [
                "self",
                "error"
              ],
              "docstring": "Add error message to result and mark as unsuccessful."
            },
            {
              "name": "add_warning",
              "line": 156,
              "args": [
                "self",
                "warning"
              ],
              "docstring": "Add warning message to result."
            },
            {
              "name": "add_statistic",
              "line": 160,
              "args": [
                "self",
                "name",
                "value"
              ],
              "docstring": "Add statistical measure to result."
            },
            {
              "name": "add_pattern",
              "line": 164,
              "args": [
                "self",
                "pattern_type",
                "confidence",
                "details"
              ],
              "docstring": "Add detected pattern to result."
            },
            {
              "name": "to_dict",
              "line": 175,
              "args": [
                "self"
              ],
              "docstring": "Convert result to dictionary for serialization."
            }
          ]
        },
        {
          "name": "BaseAnalyzerV2",
          "line": 201,
          "bases": [
            "ABC"
          ],
          "docstring": "Abstract base class for all analyzers in the consolidated framework.\n\nProvides standardized interface, thread safety, comprehensive logging,\nand built-in statistical analysis capabilities. All analyzers should\ninherit from this class to ensure consistency and compatibility.\n\nFeatures:\n    - Thread-safe operations with RLock\n    - Comprehensive logging with debug support\n    - Hook system for extensible analysis pipelines\n    - Memory usage monitoring\n    - Statistical analysis utilities\n    - Pattern detection capabilities\n    - Data quality assessment",
          "methods": [
            {
              "name": "__init__",
              "line": 219,
              "args": [
                "self",
                "name",
                "config"
              ],
              "docstring": "Initialize analyzer with configuration and thread safety.\n\nArgs:\n    name: Unique name for this analyzer instance\n    config: Configuration object, uses defaults if None"
            },
            {
              "name": "add_hook",
              "line": 247,
              "args": [
                "self",
                "hook_type",
                "hook_function"
              ],
              "docstring": "Add hook function to specified hook type."
            },
            {
              "name": "remove_hook",
              "line": 256,
              "args": [
                "self",
                "hook_type",
                "hook_function"
              ],
              "docstring": "Remove hook function from specified hook type."
            },
            {
              "name": "_run_hooks",
              "line": 263,
              "args": [
                "self",
                "hook_type"
              ],
              "docstring": "Execute all hooks of specified type with provided arguments."
            },
            {
              "name": "_calculate_statistics",
              "line": 271,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Calculate basic statistical measures for numeric data."
            },
            {
              "name": "_detect_patterns",
              "line": 299,
              "args": [
                "self",
                "data",
                "threshold"
              ],
              "docstring": "Detect patterns in data using configurable threshold."
            },
            {
              "name": "_assess_quality",
              "line": 328,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Assess data quality returning score from 0.0 to 1.0."
            },
            {
              "name": "get_statistics",
              "line": 360,
              "args": [
                "self"
              ],
              "docstring": "Get analyzer performance statistics."
            },
            {
              "name": "_analyze_impl",
              "line": 379,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Abstract method for analyzer-specific implementation.\n\nThis method must be implemented by all concrete analyzer classes\nto provide their specific analysis functionality.\n\nArgs:\n    data: Input data for analysis\n    config: Configuration for analysis operation\n    \nReturns:\n    Analysis result data (type depends on analyzer implementation)"
            },
            {
              "name": "analyze",
              "line": 395,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Main analysis method with comprehensive error handling and logging.\n\nProvides standardized analysis workflow with timing, statistics,\npattern detection, quality assessment, and hook execution.\n\nArgs:\n    data: Input data for analysis\n    config: Optional configuration override\n    \nReturns:\n    AnalysisResult containing analysis data and metadata"
            }
          ]
        }
      ],
      "lines_of_code": 382,
      "complexity_score": 55,
      "last_modified": "2025-10-04T16:03:22.522742",
      "checksum": "64b5ff90e1fe735d42aa92dac4942eb6",
      "framework_role": "logging_infrastructure",
      "stability": "stable"
    },
    ".restructuring_backup/src/analysis/registry.py": {
      "name": ".restructuring_backup/src/analysis/registry.py",
      "path": ".restructuring_backup/src/analysis/registry.py",
      "component_type": "utility",
      "description": "Analysis Registry System",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        "docs/enhanced_analysis_framework_test_report.json",
        "scriptlets/framework.py",
        "src/analysis/enhanced_framework.py",
        "src/analysis/framework.py",
        "tests/test_analysis_framework.py",
        "tests/test_async_load_framework.py",
        "tests/test_enhanced_analysis_framework.py",
        "tests/test_framework0_integration.py",
        "tests/test_scriptlet_framework.py",
        "tools/baseline_framework_analyzer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "register_analyzer",
        "get_available_analyzers",
        "discover_analyzers",
        "__init__",
        "create_analyzer",
        "_validate_config",
        "clear_cache",
        "get_cached_analyzers",
        "register",
        "unregister",
        "get_analyzer_info",
        "get_available_analyzers",
        "get_analyzer",
        "create_analyzer_chain",
        "clear_registry",
        "decorator",
        "AnalyzerFactory",
        "AnalysisRegistry"
      ],
      "imports": [
        "os",
        "threading",
        "importlib",
        "typing",
        "datetime",
        "pathlib",
        "framework",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "register_analyzer",
          "line": 334,
          "args": [
            "name",
            "description",
            "version",
            "dependencies",
            "config_requirements"
          ],
          "docstring": "Decorator for registering analyzer classes.\n\nArgs:\n    name: Analyzer name (uses class name if None)\n    description: Analyzer description\n    version: Version string\n    dependencies: List of dependencies\n    config_requirements: Configuration requirements\n    \nReturns:\n    Decorator function for analyzer class registration",
          "decorators": []
        },
        {
          "name": "get_available_analyzers",
          "line": 371,
          "args": [],
          "docstring": "Get simple mapping of available analyzer names to descriptions.\n\nReturns:\n    Dictionary mapping analyzer names to descriptions",
          "decorators": []
        },
        {
          "name": "discover_analyzers",
          "line": 382,
          "args": [
            "package_path"
          ],
          "docstring": "Automatically discover and register analyzers from specified package.\n\nArgs:\n    package_path: Python package path to search for analyzers\n    \nReturns:\n    Number of analyzers discovered and registered",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 51,
          "args": [
            "self"
          ],
          "docstring": "Initialize analyzer factory with thread safety.",
          "decorators": []
        },
        {
          "name": "create_analyzer",
          "line": 59,
          "args": [
            "self",
            "analyzer_name",
            "config",
            "force_new"
          ],
          "docstring": "Create analyzer instance with configuration and caching.\n\nArgs:\n    analyzer_name: Name of analyzer to create\n    config: Configuration for analyzer (uses defaults if None)\n    force_new: Whether to force creation of new instance\n    \nReturns:\n    BaseAnalyzerV2: Configured analyzer instance\n    \nRaises:\n    AnalysisError: If analyzer not found or creation fails",
          "decorators": []
        },
        {
          "name": "_validate_config",
          "line": 119,
          "args": [
            "self",
            "analyzer_name",
            "config",
            "analyzer_info"
          ],
          "docstring": "Validate configuration against analyzer requirements.",
          "decorators": []
        },
        {
          "name": "clear_cache",
          "line": 151,
          "args": [
            "self"
          ],
          "docstring": "Clear instance cache to free memory.",
          "decorators": []
        },
        {
          "name": "get_cached_analyzers",
          "line": 158,
          "args": [
            "self"
          ],
          "docstring": "Get list of cached analyzer names.",
          "decorators": []
        },
        {
          "name": "register",
          "line": 184,
          "args": [
            "analyzer_name",
            "analyzer_class",
            "description",
            "version",
            "dependencies",
            "config_requirements"
          ],
          "docstring": "Register analyzer class in the global registry.\n\nArgs:\n    analyzer_name: Unique name for the analyzer\n    analyzer_class: Analyzer class (must inherit from BaseAnalyzerV2)\n    description: Optional description of analyzer capabilities\n    version: Version string for analyzer\n    dependencies: List of required dependencies\n    config_requirements: Configuration requirements specification",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "unregister",
          "line": 228,
          "args": [
            "analyzer_name"
          ],
          "docstring": "Unregister analyzer from registry.\n\nArgs:\n    analyzer_name: Name of analyzer to remove\n    \nReturns:\n    bool: True if analyzer was removed, False if not found",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "get_analyzer_info",
          "line": 250,
          "args": [
            "analyzer_name"
          ],
          "docstring": "Get detailed information about registered analyzer.\n\nArgs:\n    analyzer_name: Name of analyzer to query\n    \nReturns:\n    Dictionary with analyzer information or None if not found",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "get_available_analyzers",
          "line": 266,
          "args": [],
          "docstring": "Get dictionary of all registered analyzers with their metadata.\n\nReturns:\n    Dictionary mapping analyzer names to their information",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "get_analyzer",
          "line": 280,
          "args": [
            "analyzer_name",
            "config"
          ],
          "docstring": "Get analyzer instance using factory pattern.\n\nArgs:\n    analyzer_name: Name of analyzer to retrieve\n    config: Configuration for analyzer\n    \nReturns:\n    BaseAnalyzerV2: Configured analyzer instance",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "create_analyzer_chain",
          "line": 294,
          "args": [
            "analyzer_names",
            "configs"
          ],
          "docstring": "Create chain of analyzers for pipeline processing.\n\nArgs:\n    analyzer_names: List of analyzer names in execution order\n    configs: Optional list of configurations (must match analyzer count)\n    \nReturns:\n    List of configured analyzer instances",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "clear_registry",
          "line": 323,
          "args": [],
          "docstring": "Clear all registered analyzers (primarily for testing).",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "decorator",
          "line": 352,
          "args": [
            "analyzer_class"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AnalyzerFactory",
          "line": 43,
          "bases": [],
          "docstring": "Factory class for creating analyzer instances with configuration validation.\n\nProvides standardized analyzer instantiation with configuration management,\ndependency resolution, and performance monitoring capabilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 51,
              "args": [
                "self"
              ],
              "docstring": "Initialize analyzer factory with thread safety."
            },
            {
              "name": "create_analyzer",
              "line": 59,
              "args": [
                "self",
                "analyzer_name",
                "config",
                "force_new"
              ],
              "docstring": "Create analyzer instance with configuration and caching.\n\nArgs:\n    analyzer_name: Name of analyzer to create\n    config: Configuration for analyzer (uses defaults if None)\n    force_new: Whether to force creation of new instance\n    \nReturns:\n    BaseAnalyzerV2: Configured analyzer instance\n    \nRaises:\n    AnalysisError: If analyzer not found or creation fails"
            },
            {
              "name": "_validate_config",
              "line": 119,
              "args": [
                "self",
                "analyzer_name",
                "config",
                "analyzer_info"
              ],
              "docstring": "Validate configuration against analyzer requirements."
            },
            {
              "name": "clear_cache",
              "line": 151,
              "args": [
                "self"
              ],
              "docstring": "Clear instance cache to free memory."
            },
            {
              "name": "get_cached_analyzers",
              "line": 158,
              "args": [
                "self"
              ],
              "docstring": "Get list of cached analyzer names."
            }
          ]
        },
        {
          "name": "AnalysisRegistry",
          "line": 168,
          "bases": [],
          "docstring": "Central registry for analyzer discovery, registration, and management.\n\nProvides thread-safe operations for registering analyzers, retrieving\nanalyzer information, and managing analyzer lifecycle.\n\nFeatures:\n    - Thread-safe registration and lookup\n    - Analyzer metadata management\n    - Dependency tracking and resolution\n    - Plugin-style extensions\n    - Performance monitoring",
          "methods": [
            {
              "name": "register",
              "line": 184,
              "args": [
                "analyzer_name",
                "analyzer_class",
                "description",
                "version",
                "dependencies",
                "config_requirements"
              ],
              "docstring": "Register analyzer class in the global registry.\n\nArgs:\n    analyzer_name: Unique name for the analyzer\n    analyzer_class: Analyzer class (must inherit from BaseAnalyzerV2)\n    description: Optional description of analyzer capabilities\n    version: Version string for analyzer\n    dependencies: List of required dependencies\n    config_requirements: Configuration requirements specification"
            },
            {
              "name": "unregister",
              "line": 228,
              "args": [
                "analyzer_name"
              ],
              "docstring": "Unregister analyzer from registry.\n\nArgs:\n    analyzer_name: Name of analyzer to remove\n    \nReturns:\n    bool: True if analyzer was removed, False if not found"
            },
            {
              "name": "get_analyzer_info",
              "line": 250,
              "args": [
                "analyzer_name"
              ],
              "docstring": "Get detailed information about registered analyzer.\n\nArgs:\n    analyzer_name: Name of analyzer to query\n    \nReturns:\n    Dictionary with analyzer information or None if not found"
            },
            {
              "name": "get_available_analyzers",
              "line": 266,
              "args": [],
              "docstring": "Get dictionary of all registered analyzers with their metadata.\n\nReturns:\n    Dictionary mapping analyzer names to their information"
            },
            {
              "name": "get_analyzer",
              "line": 280,
              "args": [
                "analyzer_name",
                "config"
              ],
              "docstring": "Get analyzer instance using factory pattern.\n\nArgs:\n    analyzer_name: Name of analyzer to retrieve\n    config: Configuration for analyzer\n    \nReturns:\n    BaseAnalyzerV2: Configured analyzer instance"
            },
            {
              "name": "create_analyzer_chain",
              "line": 294,
              "args": [
                "analyzer_names",
                "configs"
              ],
              "docstring": "Create chain of analyzers for pipeline processing.\n\nArgs:\n    analyzer_names: List of analyzer names in execution order\n    configs: Optional list of configurations (must match analyzer count)\n    \nReturns:\n    List of configured analyzer instances"
            },
            {
              "name": "clear_registry",
              "line": 323,
              "args": [],
              "docstring": "Clear all registered analyzers (primarily for testing)."
            }
          ]
        }
      ],
      "lines_of_code": 340,
      "complexity_score": 49,
      "last_modified": "2025-10-04T16:03:22.522742",
      "checksum": "d3a8f7dcb302fadef74f16457869504f",
      "framework_role": "logging_infrastructure",
      "stability": "stable"
    },
    ".restructuring_backup/src/context_client.py": {
      "name": ".restructuring_backup/src/context_client.py",
      "path": ".restructuring_backup/src/context_client.py",
      "component_type": "utility",
      "description": "Framework0 Context Server Python Client Library",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "get_context_value",
        "set_context_value",
        "example_sync_usage",
        "__init__",
        "_make_request",
        "get",
        "set",
        "list_all",
        "get_history",
        "get_status",
        "ping",
        "dump_context",
        "list_dumps",
        "download_dump",
        "__init__",
        "_setup_socketio_handlers",
        "on",
        "ContextClientError",
        "ConnectionError",
        "ServerError",
        "TimeoutError",
        "ContextClient",
        "AsyncContextClient"
      ],
      "imports": [
        "asyncio",
        "logging",
        "datetime",
        "typing",
        "urllib.parse",
        "requests",
        "socketio",
        "argparse",
        "aiohttp",
        "aiohttp",
        "aiohttp",
        "aiohttp",
        "aiohttp"
      ],
      "functions": [
        {
          "name": "get_context_value",
          "line": 791,
          "args": [
            "key",
            "host",
            "port"
          ],
          "docstring": "Quick function to get single context value.\n\nArgs:\n    key: Context key to retrieve\n    host: Server host (default: localhost)\n    port: Server port (default: 8080)\n    \nReturns:\n    Value for the key or None if not found",
          "decorators": []
        },
        {
          "name": "set_context_value",
          "line": 807,
          "args": [
            "key",
            "value",
            "host",
            "port",
            "who"
          ],
          "docstring": "Quick function to set single context value.\n\nArgs:\n    key: Context key to set\n    value: Value to assign to key\n    host: Server host (default: localhost)\n    port: Server port (default: 8080)\n    who: Attribution for change (default: quick_client)\n    \nReturns:\n    True if operation was successful",
          "decorators": []
        },
        {
          "name": "example_sync_usage",
          "line": 826,
          "args": [],
          "docstring": "Example demonstrating synchronous client usage.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 56,
          "args": [
            "self",
            "host",
            "port",
            "timeout",
            "who"
          ],
          "docstring": "Initialize synchronous context client.\n\nArgs:\n    host: Context server hostname or IP address\n    port: Context server port number\n    timeout: Default timeout for HTTP requests in seconds\n    who: Attribution identifier for client operations",
          "decorators": []
        },
        {
          "name": "_make_request",
          "line": 93,
          "args": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "docstring": "Make HTTP request to context server with error handling.\n\nArgs:\n    method: HTTP method (GET, POST, PUT, DELETE)\n    endpoint: API endpoint path (e.g., '/ctx', '/ctx/all')\n    data: Optional request body data for POST/PUT requests\n    \nReturns:\n    Parsed JSON response from server\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response\n    TimeoutError: When request exceeds timeout",
          "decorators": []
        },
        {
          "name": "get",
          "line": 167,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Get value for specified key from context.\n\nArgs:\n    key: Context key to retrieve value for\n    \nReturns:\n    Value associated with the key, or None if key not found\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "set",
          "line": 188,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Set key to specified value in context.\n\nArgs:\n    key: Context key to set value for\n    value: Value to assign to the key\n    \nReturns:\n    True if operation was successful\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "list_all",
          "line": 217,
          "args": [
            "self"
          ],
          "docstring": "Get all context keys and values from server.\n\nReturns:\n    Dictionary containing all context data\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "get_history",
          "line": 235,
          "args": [
            "self",
            "key",
            "who"
          ],
          "docstring": "Get context change history with optional filtering.\n\nArgs:\n    key: Optional key filter for history entries\n    who: Optional attribution filter for history entries\n    \nReturns:\n    List of history entries matching the filters\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "get_status",
          "line": 269,
          "args": [
            "self"
          ],
          "docstring": "Get server status and connection information.\n\nReturns:\n    Dictionary containing server status and statistics\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "ping",
          "line": 297,
          "args": [
            "self"
          ],
          "docstring": "Test connection to context server.\n\nReturns:\n    True if server is reachable and responding",
          "decorators": []
        },
        {
          "name": "dump_context",
          "line": 310,
          "args": [
            "self",
            "format_type",
            "filename",
            "include_history"
          ],
          "docstring": "Dump complete context state to file with specified format.\n\nArgs:\n    format_type: Output format - 'json', 'pretty', 'csv', or 'txt'\n    filename: Optional custom filename (auto-generated if not provided)\n    include_history: Whether to include change history in dump\n    \nReturns:\n    Dictionary with dump operation details and file information\n    \nRaises:\n    ValueError: If format_type is invalid\n    ServerError: If dump operation fails on server",
          "decorators": []
        },
        {
          "name": "list_dumps",
          "line": 354,
          "args": [
            "self"
          ],
          "docstring": "List all available context dump files and their metadata.\n\nReturns:\n    Dictionary with dump directory info and list of available files\n    \nRaises:\n    ServerError: If listing dumps fails",
          "decorators": []
        },
        {
          "name": "download_dump",
          "line": 375,
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Download a specific context dump file content.\n\nArgs:\n    filename: Name of dump file to download\n    \nReturns:\n    String content of the dump file\n    \nRaises:\n    FileNotFoundError: If dump file doesn't exist\n    ServerError: If download fails",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 415,
          "args": [
            "self",
            "host",
            "port",
            "who"
          ],
          "docstring": "Initialize asynchronous context client.\n\nArgs:\n    host: Context server hostname or IP address\n    port: Context server port number  \n    who: Attribution identifier for client operations",
          "decorators": []
        },
        {
          "name": "_setup_socketio_handlers",
          "line": 453,
          "args": [
            "self"
          ],
          "docstring": "Configure Socket.IO event handlers for connection lifecycle.",
          "decorators": []
        },
        {
          "name": "on",
          "line": 522,
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "docstring": "Register event handler for specific event type.\n\nArgs:\n    event_type: Type of event to handle (connect, disconnect, context_updated, etc.)\n    handler: Async function to call when event occurs",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextClientError",
          "line": 27,
          "bases": [
            "Exception"
          ],
          "docstring": "Base exception for context client errors.",
          "methods": []
        },
        {
          "name": "ConnectionError",
          "line": 32,
          "bases": [
            "ContextClientError"
          ],
          "docstring": "Raised when connection to context server fails.",
          "methods": []
        },
        {
          "name": "ServerError",
          "line": 37,
          "bases": [
            "ContextClientError"
          ],
          "docstring": "Raised when context server returns an error response.",
          "methods": []
        },
        {
          "name": "TimeoutError",
          "line": 42,
          "bases": [
            "ContextClientError"
          ],
          "docstring": "Raised when operations exceed specified timeout.",
          "methods": []
        },
        {
          "name": "ContextClient",
          "line": 47,
          "bases": [],
          "docstring": "Synchronous context client for HTTP-based operations.\n\nThis client provides blocking operations for getting/setting context values\nand retrieving server information. Suitable for scripts and applications\nthat don't require real-time updates.",
          "methods": [
            {
              "name": "__init__",
              "line": 56,
              "args": [
                "self",
                "host",
                "port",
                "timeout",
                "who"
              ],
              "docstring": "Initialize synchronous context client.\n\nArgs:\n    host: Context server hostname or IP address\n    port: Context server port number\n    timeout: Default timeout for HTTP requests in seconds\n    who: Attribution identifier for client operations"
            },
            {
              "name": "_make_request",
              "line": 93,
              "args": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "docstring": "Make HTTP request to context server with error handling.\n\nArgs:\n    method: HTTP method (GET, POST, PUT, DELETE)\n    endpoint: API endpoint path (e.g., '/ctx', '/ctx/all')\n    data: Optional request body data for POST/PUT requests\n    \nReturns:\n    Parsed JSON response from server\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response\n    TimeoutError: When request exceeds timeout"
            },
            {
              "name": "get",
              "line": 167,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Get value for specified key from context.\n\nArgs:\n    key: Context key to retrieve value for\n    \nReturns:\n    Value associated with the key, or None if key not found\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "set",
              "line": 188,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Set key to specified value in context.\n\nArgs:\n    key: Context key to set value for\n    value: Value to assign to the key\n    \nReturns:\n    True if operation was successful\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "list_all",
              "line": 217,
              "args": [
                "self"
              ],
              "docstring": "Get all context keys and values from server.\n\nReturns:\n    Dictionary containing all context data\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "get_history",
              "line": 235,
              "args": [
                "self",
                "key",
                "who"
              ],
              "docstring": "Get context change history with optional filtering.\n\nArgs:\n    key: Optional key filter for history entries\n    who: Optional attribution filter for history entries\n    \nReturns:\n    List of history entries matching the filters\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "get_status",
              "line": 269,
              "args": [
                "self"
              ],
              "docstring": "Get server status and connection information.\n\nReturns:\n    Dictionary containing server status and statistics\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "ping",
              "line": 297,
              "args": [
                "self"
              ],
              "docstring": "Test connection to context server.\n\nReturns:\n    True if server is reachable and responding"
            },
            {
              "name": "dump_context",
              "line": 310,
              "args": [
                "self",
                "format_type",
                "filename",
                "include_history"
              ],
              "docstring": "Dump complete context state to file with specified format.\n\nArgs:\n    format_type: Output format - 'json', 'pretty', 'csv', or 'txt'\n    filename: Optional custom filename (auto-generated if not provided)\n    include_history: Whether to include change history in dump\n    \nReturns:\n    Dictionary with dump operation details and file information\n    \nRaises:\n    ValueError: If format_type is invalid\n    ServerError: If dump operation fails on server"
            },
            {
              "name": "list_dumps",
              "line": 354,
              "args": [
                "self"
              ],
              "docstring": "List all available context dump files and their metadata.\n\nReturns:\n    Dictionary with dump directory info and list of available files\n    \nRaises:\n    ServerError: If listing dumps fails"
            },
            {
              "name": "download_dump",
              "line": 375,
              "args": [
                "self",
                "filename"
              ],
              "docstring": "Download a specific context dump file content.\n\nArgs:\n    filename: Name of dump file to download\n    \nReturns:\n    String content of the dump file\n    \nRaises:\n    FileNotFoundError: If dump file doesn't exist\n    ServerError: If download fails"
            }
          ]
        },
        {
          "name": "AsyncContextClient",
          "line": 406,
          "bases": [],
          "docstring": "Asynchronous context client with WebSocket support for real-time updates.\n\nThis client provides non-blocking operations and can maintain persistent\nWebSocket connections for receiving real-time context change notifications.\nSuitable for applications requiring live updates and event-driven behavior.",
          "methods": [
            {
              "name": "__init__",
              "line": 415,
              "args": [
                "self",
                "host",
                "port",
                "who"
              ],
              "docstring": "Initialize asynchronous context client.\n\nArgs:\n    host: Context server hostname or IP address\n    port: Context server port number  \n    who: Attribution identifier for client operations"
            },
            {
              "name": "_setup_socketio_handlers",
              "line": 453,
              "args": [
                "self"
              ],
              "docstring": "Configure Socket.IO event handlers for connection lifecycle."
            },
            {
              "name": "on",
              "line": 522,
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "docstring": "Register event handler for specific event type.\n\nArgs:\n    event_type: Type of event to handle (connect, disconnect, context_updated, etc.)\n    handler: Async function to call when event occurs"
            }
          ]
        }
      ],
      "lines_of_code": 731,
      "complexity_score": 72,
      "last_modified": "2025-10-04T23:19:13.986420",
      "checksum": "31f93a4d74815c2ad4f49fd53d352441",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/src/core/__init__.py": {
      "name": ".restructuring_backup/src/core/__init__.py",
      "path": ".restructuring_backup/src/core/__init__.py",
      "component_type": "core_framework",
      "description": "src.core package initialization",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-04T14:13:35.129310",
      "checksum": "4ae11962109b77fcab1e65972dcf03ee",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    ".restructuring_backup/src/core/logger.py": {
      "name": ".restructuring_backup/src/core/logger.py",
      "path": ".restructuring_backup/src/core/logger.py",
      "component_type": "core_framework",
      "description": "Logger module providing structured logging with debug support and cross-platform compatibility.",
      "dependencies": [
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py"
      ],
      "exports": [
        "get_logger",
        "set_global_debug",
        "get_all_logger_stats",
        "debug_enabled",
        "create_module_logger",
        "__init__",
        "__init__",
        "format",
        "__init__",
        "_create_logger",
        "_create_console_handler",
        "_create_file_handler",
        "debug",
        "info",
        "warning",
        "error",
        "critical",
        "log_context_operation",
        "get_logger_stats",
        "LoggerConfig",
        "ContextualFormatter",
        "Framework0Logger"
      ],
      "imports": [
        "logging",
        "os",
        "sys",
        "typing",
        "pathlib",
        "time",
        "threading",
        "datetime"
      ],
      "functions": [
        {
          "name": "get_logger",
          "line": 310,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Factory function to get or create a Framework0Logger instance.\n\nThis function implements the singleton pattern per logger name to ensure\nconsistent logger behavior across the application.\n\nArgs:\n    name: Logger name (typically __name__)\n    debug: Optional debug flag override\n\nReturns:\n    Framework0Logger instance for the specified name",
          "decorators": []
        },
        {
          "name": "set_global_debug",
          "line": 347,
          "args": [
            "enabled"
          ],
          "docstring": "Set debug mode for all existing loggers.\n\nArgs:\n    enabled: Whether to enable debug logging globally",
          "decorators": []
        },
        {
          "name": "get_all_logger_stats",
          "line": 362,
          "args": [],
          "docstring": "Get statistics for all registered loggers.\n\nReturns:\n    Dictionary mapping logger names to their statistics",
          "decorators": []
        },
        {
          "name": "debug_enabled",
          "line": 376,
          "args": [],
          "docstring": "Check if debug logging is enabled globally.",
          "decorators": []
        },
        {
          "name": "create_module_logger",
          "line": 381,
          "args": [
            "module_name"
          ],
          "docstring": "Create a logger for a specific module with standard configuration.\n\nArgs:\n    module_name: Name of the module (typically __name__)\n\nReturns:\n    Configured Framework0Logger instance",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 26,
          "args": [
            "self"
          ],
          "docstring": "Initialize logger configuration with environment-based defaults.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 60,
          "args": [
            "self",
            "fmt",
            "datefmt"
          ],
          "docstring": "Initialize contextual formatter with format strings.\n\nArgs:\n    fmt: Log message format string\n    datefmt: Date format string for timestamps",
          "decorators": []
        },
        {
          "name": "format",
          "line": 71,
          "args": [
            "self",
            "record"
          ],
          "docstring": "Format log record with additional contextual information.\n\nArgs:\n    record: Log record to format\n\nReturns:\n    Formatted log message string",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 108,
          "args": [
            "self",
            "name",
            "debug"
          ],
          "docstring": "Initialize Framework0 logger with name and debug configuration.\n\nArgs:\n    name: Logger name (typically module name)\n    debug: Optional debug flag override",
          "decorators": []
        },
        {
          "name": "_create_logger",
          "line": 131,
          "args": [
            "self"
          ],
          "docstring": "Create and configure the underlying Python logger.\n\nReturns:\n    Configured logging.Logger instance",
          "decorators": []
        },
        {
          "name": "_create_console_handler",
          "line": 162,
          "args": [
            "self"
          ],
          "docstring": "Create console handler with proper formatting.\n\nReturns:\n    Configured console handler",
          "decorators": []
        },
        {
          "name": "_create_file_handler",
          "line": 183,
          "args": [
            "self"
          ],
          "docstring": "Create file handler with proper formatting and directory creation.\n\nReturns:\n    Configured file handler",
          "decorators": []
        },
        {
          "name": "debug",
          "line": 210,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log debug message with proper formatting.\n\nArgs:\n    message: Debug message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "info",
          "line": 222,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log info message with proper formatting.\n\nArgs:\n    message: Info message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "warning",
          "line": 233,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log warning message with proper formatting.\n\nArgs:\n    message: Warning message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "error",
          "line": 244,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log error message with proper formatting.\n\nArgs:\n    message: Error message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "critical",
          "line": 255,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log critical message with proper formatting.\n\nArgs:\n    message: Critical message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "log_context_operation",
          "line": 266,
          "args": [
            "self",
            "operation",
            "key",
            "before",
            "after"
          ],
          "docstring": "Log Context operations for debugging and audit purposes.\n\nArgs:\n    operation: Type of operation (get, set, merge, etc.)\n    key: Context key being operated on\n    before: Previous value (for set operations)\n    after: New value (for set operations)",
          "decorators": []
        },
        {
          "name": "get_logger_stats",
          "line": 286,
          "args": [
            "self"
          ],
          "docstring": "Get logger statistics and configuration information.\n\nReturns:\n    Dictionary containing logger statistics",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LoggerConfig",
          "line": 18,
          "bases": [],
          "docstring": "Configuration class for logger settings with environment variable support.\n\nManages logger configuration including levels, formats, and output destinations\nwith proper defaults and environment variable overrides.",
          "methods": [
            {
              "name": "__init__",
              "line": 26,
              "args": [
                "self"
              ],
              "docstring": "Initialize logger configuration with environment-based defaults."
            }
          ]
        },
        {
          "name": "ContextualFormatter",
          "line": 52,
          "bases": [
            "Formatter"
          ],
          "docstring": "Custom formatter that adds contextual information to log records.\n\nEnhances log entries with additional context like thread information,\nexecution context, and custom metadata for better debugging.",
          "methods": [
            {
              "name": "__init__",
              "line": 60,
              "args": [
                "self",
                "fmt",
                "datefmt"
              ],
              "docstring": "Initialize contextual formatter with format strings.\n\nArgs:\n    fmt: Log message format string\n    datefmt: Date format string for timestamps"
            },
            {
              "name": "format",
              "line": 71,
              "args": [
                "self",
                "record"
              ],
              "docstring": "Format log record with additional contextual information.\n\nArgs:\n    record: Log record to format\n\nReturns:\n    Formatted log message string"
            }
          ]
        },
        {
          "name": "Framework0Logger",
          "line": 100,
          "bases": [],
          "docstring": "Main logger class for Framework0 with advanced features and context awareness.\n\nProvides structured logging with debug control, file output, and integration\nwith the orchestrator system for comprehensive application logging.",
          "methods": [
            {
              "name": "__init__",
              "line": 108,
              "args": [
                "self",
                "name",
                "debug"
              ],
              "docstring": "Initialize Framework0 logger with name and debug configuration.\n\nArgs:\n    name: Logger name (typically module name)\n    debug: Optional debug flag override"
            },
            {
              "name": "_create_logger",
              "line": 131,
              "args": [
                "self"
              ],
              "docstring": "Create and configure the underlying Python logger.\n\nReturns:\n    Configured logging.Logger instance"
            },
            {
              "name": "_create_console_handler",
              "line": 162,
              "args": [
                "self"
              ],
              "docstring": "Create console handler with proper formatting.\n\nReturns:\n    Configured console handler"
            },
            {
              "name": "_create_file_handler",
              "line": 183,
              "args": [
                "self"
              ],
              "docstring": "Create file handler with proper formatting and directory creation.\n\nReturns:\n    Configured file handler"
            },
            {
              "name": "debug",
              "line": 210,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log debug message with proper formatting.\n\nArgs:\n    message: Debug message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "info",
              "line": 222,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log info message with proper formatting.\n\nArgs:\n    message: Info message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "warning",
              "line": 233,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log warning message with proper formatting.\n\nArgs:\n    message: Warning message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "error",
              "line": 244,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log error message with proper formatting.\n\nArgs:\n    message: Error message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "critical",
              "line": 255,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log critical message with proper formatting.\n\nArgs:\n    message: Critical message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "log_context_operation",
              "line": 266,
              "args": [
                "self",
                "operation",
                "key",
                "before",
                "after"
              ],
              "docstring": "Log Context operations for debugging and audit purposes.\n\nArgs:\n    operation: Type of operation (get, set, merge, etc.)\n    key: Context key being operated on\n    before: Previous value (for set operations)\n    after: New value (for set operations)"
            },
            {
              "name": "get_logger_stats",
              "line": 286,
              "args": [
                "self"
              ],
              "docstring": "Get logger statistics and configuration information.\n\nReturns:\n    Dictionary containing logger statistics"
            }
          ]
        }
      ],
      "lines_of_code": 302,
      "complexity_score": 40,
      "last_modified": "2025-10-04T14:13:36.857295",
      "checksum": "1696231ec18659a20487fb892e582e4a",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/src/dash_integration.py": {
      "name": ".restructuring_backup/src/dash_integration.py",
      "path": ".restructuring_backup/src/dash_integration.py",
      "component_type": "utility",
      "description": "Framework0 Context Server Dash Integration",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "src/dash_demo.py",
        "src/dash_integration.py",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "src/dash_demo.py",
        "src/dash_integration.py",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md"
      ],
      "exports": [
        "create_context_component",
        "example_dash_integration",
        "__init__",
        "_setup_layout",
        "_setup_callbacks",
        "_get_disconnected_state",
        "_get_error_state",
        "_build_context_display",
        "_build_context_stats",
        "_build_recent_changes",
        "_build_history_timeline",
        "run",
        "set_context_value",
        "get_context_value",
        "update_refresh_interval",
        "update_dashboard_data",
        "ContextDashError",
        "ContextDashboard"
      ],
      "imports": [
        "json",
        "logging",
        "threading",
        "time",
        "datetime",
        "typing",
        "src.context_client",
        "dash",
        "dash",
        "plotly.graph_objects",
        "plotly.express",
        "pandas",
        "argparse"
      ],
      "functions": [
        {
          "name": "create_context_component",
          "line": 535,
          "args": [
            "component_id",
            "context_key",
            "server_host",
            "server_port",
            "refresh_interval"
          ],
          "docstring": "Create a simple Dash component that displays a context value.\n\nArgs:\n    component_id: Unique ID for the Dash component\n    context_key: Context key to monitor and display\n    server_host: Context server host\n    server_port: Context server port  \n    refresh_interval: Refresh interval in milliseconds\n    \nReturns:\n    Dash HTML component that displays the context value",
          "decorators": []
        },
        {
          "name": "example_dash_integration",
          "line": 570,
          "args": [],
          "docstring": "Example demonstrating Dash integration with context server.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 46,
          "args": [
            "self",
            "server_host",
            "server_port",
            "dash_port",
            "title",
            "who"
          ],
          "docstring": "Initialize context dashboard with server connection.\n\nArgs:\n    server_host: Context server hostname or IP address\n    server_port: Context server port number\n    dash_port: Port for Dash web application\n    title: Dashboard title for web interface\n    who: Attribution identifier for dashboard operations",
          "decorators": []
        },
        {
          "name": "_setup_layout",
          "line": 99,
          "args": [
            "self"
          ],
          "docstring": "Configure the dashboard HTML layout with interactive components.",
          "decorators": []
        },
        {
          "name": "_setup_callbacks",
          "line": 209,
          "args": [
            "self"
          ],
          "docstring": "Configure Dash callbacks for interactive functionality.",
          "decorators": []
        },
        {
          "name": "_get_disconnected_state",
          "line": 339,
          "args": [
            "self"
          ],
          "docstring": "Return dashboard state when disconnected from server.",
          "decorators": []
        },
        {
          "name": "_get_error_state",
          "line": 358,
          "args": [
            "self",
            "error_msg"
          ],
          "docstring": "Return dashboard state when error occurs.",
          "decorators": []
        },
        {
          "name": "_build_context_display",
          "line": 377,
          "args": [
            "self",
            "context_data"
          ],
          "docstring": "Build formatted display of current context data.",
          "decorators": []
        },
        {
          "name": "_build_context_stats",
          "line": 394,
          "args": [
            "self",
            "context_data",
            "status_data"
          ],
          "docstring": "Build statistics display for context data.",
          "decorators": []
        },
        {
          "name": "_build_recent_changes",
          "line": 405,
          "args": [
            "self",
            "history_data"
          ],
          "docstring": "Build display of recent context changes.",
          "decorators": []
        },
        {
          "name": "_build_history_timeline",
          "line": 440,
          "args": [
            "self",
            "history_data"
          ],
          "docstring": "Build timeline visualization of context history.",
          "decorators": []
        },
        {
          "name": "run",
          "line": 507,
          "args": [
            "self",
            "debug",
            "host"
          ],
          "docstring": "Start the Dash dashboard web application.\n\nArgs:\n    debug: Enable Dash debug mode for development\n    host: Host address to bind Dash server to",
          "decorators": []
        },
        {
          "name": "set_context_value",
          "line": 218,
          "args": [
            "n_clicks",
            "key",
            "value"
          ],
          "docstring": "Handle setting context values from the dashboard.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "get_context_value",
          "line": 257,
          "args": [
            "n_clicks",
            "key"
          ],
          "docstring": "Handle getting individual context values from the dashboard.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "update_refresh_interval",
          "line": 288,
          "args": [
            "interval_value"
          ],
          "docstring": "Update the auto-refresh interval based on user selection.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "update_dashboard_data",
          "line": 305,
          "args": [
            "n_intervals",
            "refresh_clicks"
          ],
          "docstring": "Update all dashboard components with latest context data.",
          "decorators": [
            "unknown_decorator"
          ]
        }
      ],
      "classes": [
        {
          "name": "ContextDashError",
          "line": 32,
          "bases": [
            "Exception"
          ],
          "docstring": "Base exception for context Dash integration errors.",
          "methods": []
        },
        {
          "name": "ContextDashboard",
          "line": 37,
          "bases": [],
          "docstring": "Interactive Dash dashboard with real-time context synchronization.\n\nThis class creates a complete Dash web application that can display\ncontext data in real-time, provide interactive controls for setting\nvalues, and visualize context history and statistics.",
          "methods": [
            {
              "name": "__init__",
              "line": 46,
              "args": [
                "self",
                "server_host",
                "server_port",
                "dash_port",
                "title",
                "who"
              ],
              "docstring": "Initialize context dashboard with server connection.\n\nArgs:\n    server_host: Context server hostname or IP address\n    server_port: Context server port number\n    dash_port: Port for Dash web application\n    title: Dashboard title for web interface\n    who: Attribution identifier for dashboard operations"
            },
            {
              "name": "_setup_layout",
              "line": 99,
              "args": [
                "self"
              ],
              "docstring": "Configure the dashboard HTML layout with interactive components."
            },
            {
              "name": "_setup_callbacks",
              "line": 209,
              "args": [
                "self"
              ],
              "docstring": "Configure Dash callbacks for interactive functionality."
            },
            {
              "name": "_get_disconnected_state",
              "line": 339,
              "args": [
                "self"
              ],
              "docstring": "Return dashboard state when disconnected from server."
            },
            {
              "name": "_get_error_state",
              "line": 358,
              "args": [
                "self",
                "error_msg"
              ],
              "docstring": "Return dashboard state when error occurs."
            },
            {
              "name": "_build_context_display",
              "line": 377,
              "args": [
                "self",
                "context_data"
              ],
              "docstring": "Build formatted display of current context data."
            },
            {
              "name": "_build_context_stats",
              "line": 394,
              "args": [
                "self",
                "context_data",
                "status_data"
              ],
              "docstring": "Build statistics display for context data."
            },
            {
              "name": "_build_recent_changes",
              "line": 405,
              "args": [
                "self",
                "history_data"
              ],
              "docstring": "Build display of recent context changes."
            },
            {
              "name": "_build_history_timeline",
              "line": 440,
              "args": [
                "self",
                "history_data"
              ],
              "docstring": "Build timeline visualization of context history."
            },
            {
              "name": "run",
              "line": 507,
              "args": [
                "self",
                "debug",
                "host"
              ],
              "docstring": "Start the Dash dashboard web application.\n\nArgs:\n    debug: Enable Dash debug mode for development\n    host: Host address to bind Dash server to"
            }
          ]
        }
      ],
      "lines_of_code": 526,
      "complexity_score": 45,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "b2d28ec784c2f19805aae0a9e302b969",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/src/visualization/__init__.py": {
      "name": ".restructuring_backup/src/visualization/__init__.py",
      "path": ".restructuring_backup/src/visualization/__init__.py",
      "component_type": "utility",
      "description": "Enhanced Visualization System for Framework0",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "src/visualization/execution_flow.py",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "docs/method_index.md",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/timeline_visualizer.py"
      ],
      "exports": [],
      "imports": [
        "enhanced_visualizer",
        "execution_flow",
        "performance_dashboard",
        "timeline_visualizer"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 14,
      "complexity_score": 0,
      "last_modified": "2025-10-04T18:17:50.503299",
      "checksum": "68e0d1056730c85cf7d0f760700ef1ac",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    ".restructuring_backup/src/visualization/enhanced_visualizer.py": {
      "name": ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "path": ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "component_type": "utility",
      "description": "Enhanced Visualization Framework for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md"
      ],
      "exports": [
        "__post_init__",
        "_get_default_style",
        "__post_init__",
        "_get_default_style",
        "__init__",
        "_detect_capabilities",
        "create_recipe_execution_graph",
        "render_graph",
        "_generate_metadata_html",
        "update_execution_state",
        "get_available_graphs",
        "cleanup_graphs",
        "export_all_graphs",
        "shutdown",
        "_create_graph_impl",
        "_render_impl",
        "_update_impl",
        "_get_graphs_impl",
        "_cleanup_impl",
        "_export_impl",
        "_shutdown_impl",
        "VisualizationFormat",
        "NodeType",
        "EdgeType",
        "VisualizationNode",
        "VisualizationEdge",
        "EnhancedVisualizer"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "tempfile",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "enum",
        "threading",
        "logging",
        "orchestrator.context.context",
        "src.core.logger",
        "graphviz",
        "matplotlib.pyplot",
        "matplotlib.patches",
        "matplotlib.animation",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "plotly.offline",
        "networkx"
      ],
      "functions": [
        {
          "name": "__post_init__",
          "line": 111,
          "args": [
            "self"
          ],
          "docstring": "Initialize node with default styling based on type and status.",
          "decorators": []
        },
        {
          "name": "_get_default_style",
          "line": 116,
          "args": [
            "self"
          ],
          "docstring": "Generate default visual styling based on node type and status.",
          "decorators": []
        },
        {
          "name": "__post_init__",
          "line": 177,
          "args": [
            "self"
          ],
          "docstring": "Initialize edge with default styling based on type.",
          "decorators": []
        },
        {
          "name": "_get_default_style",
          "line": 182,
          "args": [
            "self"
          ],
          "docstring": "Generate default visual styling based on edge type.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 249,
          "args": [
            "self",
            "context",
            "output_directory",
            "enable_interactive",
            "enable_real_time"
          ],
          "docstring": "Initialize enhanced visualization system with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    output_directory: Directory for saving visualization outputs\n    enable_interactive: Whether to enable interactive visualization features\n    enable_real_time: Whether to enable real-time visualization updates",
          "decorators": []
        },
        {
          "name": "_detect_capabilities",
          "line": 300,
          "args": [
            "self"
          ],
          "docstring": "Detect available visualization libraries and log capabilities.",
          "decorators": []
        },
        {
          "name": "create_recipe_execution_graph",
          "line": 322,
          "args": [
            "self",
            "recipe_data",
            "execution_state",
            "layout_algorithm"
          ],
          "docstring": "Create comprehensive visualization graph for recipe execution flow.\n\nArgs:\n    recipe_data: Recipe definition with steps and dependencies\n    execution_state: Optional execution state for status visualization\n    layout_algorithm: Layout algorithm ('hierarchical', 'force', 'circular')\n    \nReturns:\n    str: Graph identifier for further operations",
          "decorators": []
        },
        {
          "name": "render_graph",
          "line": 470,
          "args": [
            "self",
            "graph_id",
            "output_format",
            "filename",
            "include_metadata"
          ],
          "docstring": "Render visualization graph to specified format with comprehensive output options.\n\nArgs:\n    graph_id: Identifier of graph to render\n    output_format: Output format for rendering\n    filename: Optional custom filename for output\n    include_metadata: Whether to include metadata in output\n    \nReturns:\n    str: Path to rendered output file",
          "decorators": []
        },
        {
          "name": "_generate_metadata_html",
          "line": 646,
          "args": [
            "self",
            "graph_data"
          ],
          "docstring": "Generate HTML metadata section for graph information.",
          "decorators": []
        },
        {
          "name": "update_execution_state",
          "line": 680,
          "args": [
            "self",
            "graph_id",
            "step_id",
            "status",
            "metadata"
          ],
          "docstring": "Update execution state for specific step in visualization graph.\n\nArgs:\n    graph_id: Identifier of graph to update\n    step_id: Identifier of step to update\n    status: New status for step\n    metadata: Optional additional metadata for step",
          "decorators": []
        },
        {
          "name": "get_available_graphs",
          "line": 738,
          "args": [
            "self"
          ],
          "docstring": "Get information about all available visualization graphs.\n\nReturns:\n    Dict[str, Dict[str, Any]]: Dictionary of graph information indexed by graph ID",
          "decorators": []
        },
        {
          "name": "cleanup_graphs",
          "line": 775,
          "args": [
            "self",
            "max_age_hours"
          ],
          "docstring": "Clean up old visualization graphs to manage memory usage.\n\nArgs:\n    max_age_hours: Maximum age in hours before graphs are cleaned up\n    \nReturns:\n    int: Number of graphs cleaned up",
          "decorators": []
        },
        {
          "name": "export_all_graphs",
          "line": 824,
          "args": [
            "self",
            "output_format",
            "include_metadata"
          ],
          "docstring": "Export all available graphs to specified format.\n\nArgs:\n    output_format: Format for exporting graphs\n    include_metadata: Whether to include metadata in exports\n    \nReturns:\n    List[str]: List of exported file paths",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 864,
          "args": [
            "self"
          ],
          "docstring": "Shutdown visualization system and clean up resources.",
          "decorators": []
        },
        {
          "name": "_create_graph_impl",
          "line": 339,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_render_impl",
          "line": 489,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_update_impl",
          "line": 696,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_get_graphs_impl",
          "line": 745,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_cleanup_impl",
          "line": 785,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_export_impl",
          "line": 839,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_shutdown_impl",
          "line": 866,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "VisualizationFormat",
          "line": 64,
          "bases": [
            "Enum"
          ],
          "docstring": "Supported visualization output formats for Framework0.",
          "methods": []
        },
        {
          "name": "NodeType",
          "line": 75,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of nodes in execution flow visualizations.",
          "methods": []
        },
        {
          "name": "EdgeType",
          "line": 88,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of edges in execution flow visualizations.",
          "methods": []
        },
        {
          "name": "VisualizationNode",
          "line": 100,
          "bases": [],
          "docstring": "Represents a node in Framework0 visualization graphs.",
          "methods": [
            {
              "name": "__post_init__",
              "line": 111,
              "args": [
                "self"
              ],
              "docstring": "Initialize node with default styling based on type and status."
            },
            {
              "name": "_get_default_style",
              "line": 116,
              "args": [
                "self"
              ],
              "docstring": "Generate default visual styling based on node type and status."
            }
          ]
        },
        {
          "name": "VisualizationEdge",
          "line": 166,
          "bases": [],
          "docstring": "Represents an edge in Framework0 visualization graphs.",
          "methods": [
            {
              "name": "__post_init__",
              "line": 177,
              "args": [
                "self"
              ],
              "docstring": "Initialize edge with default styling based on type."
            },
            {
              "name": "_get_default_style",
              "line": 182,
              "args": [
                "self"
              ],
              "docstring": "Generate default visual styling based on edge type."
            }
          ]
        },
        {
          "name": "EnhancedVisualizer",
          "line": 235,
          "bases": [],
          "docstring": "Enhanced visualization system for Framework0 with comprehensive graph rendering,\nexecution flow tracking, and interactive visualization capabilities.\n\nProvides advanced visualization features including:\n- Recipe execution flow diagrams with step dependencies\n- Performance metrics visualization and trending\n- Interactive web-based dashboards and monitoring\n- Export capabilities to multiple formats (PNG, SVG, HTML, PDF)\n- Real-time visualization updates during execution\n- Integration with Context system for data sharing",
          "methods": [
            {
              "name": "__init__",
              "line": 249,
              "args": [
                "self",
                "context",
                "output_directory",
                "enable_interactive",
                "enable_real_time"
              ],
              "docstring": "Initialize enhanced visualization system with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    output_directory: Directory for saving visualization outputs\n    enable_interactive: Whether to enable interactive visualization features\n    enable_real_time: Whether to enable real-time visualization updates"
            },
            {
              "name": "_detect_capabilities",
              "line": 300,
              "args": [
                "self"
              ],
              "docstring": "Detect available visualization libraries and log capabilities."
            },
            {
              "name": "create_recipe_execution_graph",
              "line": 322,
              "args": [
                "self",
                "recipe_data",
                "execution_state",
                "layout_algorithm"
              ],
              "docstring": "Create comprehensive visualization graph for recipe execution flow.\n\nArgs:\n    recipe_data: Recipe definition with steps and dependencies\n    execution_state: Optional execution state for status visualization\n    layout_algorithm: Layout algorithm ('hierarchical', 'force', 'circular')\n    \nReturns:\n    str: Graph identifier for further operations"
            },
            {
              "name": "render_graph",
              "line": 470,
              "args": [
                "self",
                "graph_id",
                "output_format",
                "filename",
                "include_metadata"
              ],
              "docstring": "Render visualization graph to specified format with comprehensive output options.\n\nArgs:\n    graph_id: Identifier of graph to render\n    output_format: Output format for rendering\n    filename: Optional custom filename for output\n    include_metadata: Whether to include metadata in output\n    \nReturns:\n    str: Path to rendered output file"
            },
            {
              "name": "_generate_metadata_html",
              "line": 646,
              "args": [
                "self",
                "graph_data"
              ],
              "docstring": "Generate HTML metadata section for graph information."
            },
            {
              "name": "update_execution_state",
              "line": 680,
              "args": [
                "self",
                "graph_id",
                "step_id",
                "status",
                "metadata"
              ],
              "docstring": "Update execution state for specific step in visualization graph.\n\nArgs:\n    graph_id: Identifier of graph to update\n    step_id: Identifier of step to update\n    status: New status for step\n    metadata: Optional additional metadata for step"
            },
            {
              "name": "get_available_graphs",
              "line": 738,
              "args": [
                "self"
              ],
              "docstring": "Get information about all available visualization graphs.\n\nReturns:\n    Dict[str, Dict[str, Any]]: Dictionary of graph information indexed by graph ID"
            },
            {
              "name": "cleanup_graphs",
              "line": 775,
              "args": [
                "self",
                "max_age_hours"
              ],
              "docstring": "Clean up old visualization graphs to manage memory usage.\n\nArgs:\n    max_age_hours: Maximum age in hours before graphs are cleaned up\n    \nReturns:\n    int: Number of graphs cleaned up"
            },
            {
              "name": "export_all_graphs",
              "line": 824,
              "args": [
                "self",
                "output_format",
                "include_metadata"
              ],
              "docstring": "Export all available graphs to specified format.\n\nArgs:\n    output_format: Format for exporting graphs\n    include_metadata: Whether to include metadata in exports\n    \nReturns:\n    List[str]: List of exported file paths"
            },
            {
              "name": "shutdown",
              "line": 864,
              "args": [
                "self"
              ],
              "docstring": "Shutdown visualization system and clean up resources."
            }
          ]
        }
      ],
      "lines_of_code": 746,
      "complexity_score": 104,
      "last_modified": "2025-10-04T18:17:50.503299",
      "checksum": "a47eb70bb0683373d77582ca6b9101b0",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/src/visualization/execution_flow.py": {
      "name": ".restructuring_backup/src/visualization/execution_flow.py",
      "path": ".restructuring_backup/src/visualization/execution_flow.py",
      "component_type": "utility",
      "description": "Recipe Execution Flow Visualizer for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md"
      ],
      "exports": [
        "get_duration",
        "is_terminal_status",
        "get_total_duration",
        "get_step_by_id",
        "get_completion_percentage",
        "update_metrics",
        "__init__",
        "start_recipe_execution",
        "update_step_status",
        "_complete_recipe_execution",
        "create_execution_timeline",
        "_create_plotly_timeline",
        "_create_matplotlib_timeline",
        "_create_json_timeline",
        "_build_execution_state",
        "_start_monitoring",
        "_take_performance_snapshot",
        "get_execution_summary",
        "shutdown",
        "_start_execution_impl",
        "_update_step_impl",
        "_create_timeline_impl",
        "monitor_loop",
        "_get_summary_impl",
        "_shutdown_impl",
        "ExecutionStatus",
        "FlowLayout",
        "ExecutionStep",
        "RecipeExecution",
        "ExecutionFlowVisualizer"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "enum",
        "threading",
        "logging",
        "orchestrator.context.context",
        "src.core.logger",
        "enhanced_visualizer",
        "graphviz",
        "matplotlib.pyplot",
        "matplotlib.patches",
        "matplotlib.animation",
        "matplotlib.dates",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "plotly.offline"
      ],
      "functions": [
        {
          "name": "get_duration",
          "line": 116,
          "args": [
            "self"
          ],
          "docstring": "Calculate step execution duration in seconds.",
          "decorators": []
        },
        {
          "name": "is_terminal_status",
          "line": 124,
          "args": [
            "self"
          ],
          "docstring": "Check if step has reached a terminal execution status.",
          "decorators": []
        },
        {
          "name": "get_total_duration",
          "line": 163,
          "args": [
            "self"
          ],
          "docstring": "Calculate total recipe execution duration in seconds.",
          "decorators": []
        },
        {
          "name": "get_step_by_id",
          "line": 171,
          "args": [
            "self",
            "step_id"
          ],
          "docstring": "Find step by identifier.",
          "decorators": []
        },
        {
          "name": "get_completion_percentage",
          "line": 178,
          "args": [
            "self"
          ],
          "docstring": "Calculate recipe completion percentage.",
          "decorators": []
        },
        {
          "name": "update_metrics",
          "line": 184,
          "args": [
            "self"
          ],
          "docstring": "Update aggregate metrics from individual steps.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 211,
          "args": [
            "self",
            "context",
            "base_visualizer",
            "enable_real_time",
            "update_interval"
          ],
          "docstring": "Initialize execution flow visualizer with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    enable_real_time: Whether to enable real-time visualization updates\n    update_interval: Update interval in seconds for real-time monitoring",
          "decorators": []
        },
        {
          "name": "start_recipe_execution",
          "line": 260,
          "args": [
            "self",
            "recipe_data",
            "execution_id"
          ],
          "docstring": "Start tracking new recipe execution with comprehensive monitoring setup.\n\nArgs:\n    recipe_data: Recipe definition with steps and configuration\n    execution_id: Optional custom execution identifier\n    \nReturns:\n    str: Execution identifier for tracking and updates",
          "decorators": []
        },
        {
          "name": "update_step_status",
          "line": 339,
          "args": [
            "self",
            "execution_id",
            "step_id",
            "status",
            "result",
            "error_message",
            "performance_data"
          ],
          "docstring": "Update execution status for specific step with comprehensive tracking.\n\nArgs:\n    execution_id: Identifier of recipe execution\n    step_id: Identifier of step to update\n    status: New execution status for step\n    result: Optional execution result data\n    error_message: Optional error message if step failed\n    performance_data: Optional performance metrics for step",
          "decorators": []
        },
        {
          "name": "_complete_recipe_execution",
          "line": 439,
          "args": [
            "self",
            "execution_id"
          ],
          "docstring": "Complete recipe execution and update final status.",
          "decorators": []
        },
        {
          "name": "create_execution_timeline",
          "line": 469,
          "args": [
            "self",
            "execution_id",
            "output_format",
            "include_performance"
          ],
          "docstring": "Create timeline visualization of recipe execution with step timing.\n\nArgs:\n    execution_id: Identifier of execution to visualize\n    output_format: Output format for timeline visualization\n    include_performance: Whether to include performance metrics\n    \nReturns:\n    str: Path to generated timeline visualization",
          "decorators": []
        },
        {
          "name": "_create_plotly_timeline",
          "line": 519,
          "args": [
            "self",
            "recipe_execution",
            "include_performance"
          ],
          "docstring": "Create interactive Plotly timeline visualization.",
          "decorators": []
        },
        {
          "name": "_create_matplotlib_timeline",
          "line": 612,
          "args": [
            "self",
            "recipe_execution",
            "output_format",
            "include_performance"
          ],
          "docstring": "Create static matplotlib timeline visualization.",
          "decorators": []
        },
        {
          "name": "_create_json_timeline",
          "line": 701,
          "args": [
            "self",
            "recipe_execution",
            "include_performance"
          ],
          "docstring": "Create JSON export of timeline data.",
          "decorators": []
        },
        {
          "name": "_build_execution_state",
          "line": 750,
          "args": [
            "self",
            "recipe_execution"
          ],
          "docstring": "Build execution state dictionary for visualization integration.",
          "decorators": []
        },
        {
          "name": "_start_monitoring",
          "line": 765,
          "args": [
            "self"
          ],
          "docstring": "Start real-time monitoring thread for active executions.",
          "decorators": []
        },
        {
          "name": "_take_performance_snapshot",
          "line": 810,
          "args": [
            "self"
          ],
          "docstring": "Take snapshot of current performance metrics.",
          "decorators": []
        },
        {
          "name": "get_execution_summary",
          "line": 838,
          "args": [
            "self",
            "execution_id"
          ],
          "docstring": "Get comprehensive summary of recipe execution.",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 902,
          "args": [
            "self"
          ],
          "docstring": "Shutdown execution flow visualizer and clean up resources.",
          "decorators": []
        },
        {
          "name": "_start_execution_impl",
          "line": 275,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_update_step_impl",
          "line": 359,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_create_timeline_impl",
          "line": 486,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "monitor_loop",
          "line": 773,
          "args": [],
          "docstring": "Monitoring loop for real-time updates.",
          "decorators": []
        },
        {
          "name": "_get_summary_impl",
          "line": 840,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_shutdown_impl",
          "line": 904,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExecutionStatus",
          "line": 62,
          "bases": [
            "Enum"
          ],
          "docstring": "Execution status types for recipe steps and workflows.",
          "methods": []
        },
        {
          "name": "FlowLayout",
          "line": 75,
          "bases": [
            "Enum"
          ],
          "docstring": "Layout algorithms for execution flow visualization.",
          "methods": []
        },
        {
          "name": "ExecutionStep",
          "line": 86,
          "bases": [],
          "docstring": "Represents a single step in recipe execution with comprehensive tracking.",
          "methods": [
            {
              "name": "get_duration",
              "line": 116,
              "args": [
                "self"
              ],
              "docstring": "Calculate step execution duration in seconds."
            },
            {
              "name": "is_terminal_status",
              "line": 124,
              "args": [
                "self"
              ],
              "docstring": "Check if step has reached a terminal execution status."
            }
          ]
        },
        {
          "name": "RecipeExecution",
          "line": 136,
          "bases": [],
          "docstring": "Represents complete recipe execution with step tracking and performance metrics.",
          "methods": [
            {
              "name": "get_total_duration",
              "line": 163,
              "args": [
                "self"
              ],
              "docstring": "Calculate total recipe execution duration in seconds."
            },
            {
              "name": "get_step_by_id",
              "line": 171,
              "args": [
                "self",
                "step_id"
              ],
              "docstring": "Find step by identifier."
            },
            {
              "name": "get_completion_percentage",
              "line": 178,
              "args": [
                "self"
              ],
              "docstring": "Calculate recipe completion percentage."
            },
            {
              "name": "update_metrics",
              "line": 184,
              "args": [
                "self"
              ],
              "docstring": "Update aggregate metrics from individual steps."
            }
          ]
        },
        {
          "name": "ExecutionFlowVisualizer",
          "line": 197,
          "bases": [],
          "docstring": "Specialized visualizer for recipe execution flows with comprehensive tracking,\nperformance visualization, and real-time monitoring capabilities.\n\nProvides advanced execution visualization features including:\n- Step-by-step execution flow diagrams with dependencies\n- Real-time status updates and progress tracking\n- Performance metrics visualization and trending\n- Timeline views with execution duration analysis\n- Interactive execution monitoring and control\n- Export capabilities for documentation and reporting",
          "methods": [
            {
              "name": "__init__",
              "line": 211,
              "args": [
                "self",
                "context",
                "base_visualizer",
                "enable_real_time",
                "update_interval"
              ],
              "docstring": "Initialize execution flow visualizer with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    enable_real_time: Whether to enable real-time visualization updates\n    update_interval: Update interval in seconds for real-time monitoring"
            },
            {
              "name": "start_recipe_execution",
              "line": 260,
              "args": [
                "self",
                "recipe_data",
                "execution_id"
              ],
              "docstring": "Start tracking new recipe execution with comprehensive monitoring setup.\n\nArgs:\n    recipe_data: Recipe definition with steps and configuration\n    execution_id: Optional custom execution identifier\n    \nReturns:\n    str: Execution identifier for tracking and updates"
            },
            {
              "name": "update_step_status",
              "line": 339,
              "args": [
                "self",
                "execution_id",
                "step_id",
                "status",
                "result",
                "error_message",
                "performance_data"
              ],
              "docstring": "Update execution status for specific step with comprehensive tracking.\n\nArgs:\n    execution_id: Identifier of recipe execution\n    step_id: Identifier of step to update\n    status: New execution status for step\n    result: Optional execution result data\n    error_message: Optional error message if step failed\n    performance_data: Optional performance metrics for step"
            },
            {
              "name": "_complete_recipe_execution",
              "line": 439,
              "args": [
                "self",
                "execution_id"
              ],
              "docstring": "Complete recipe execution and update final status."
            },
            {
              "name": "create_execution_timeline",
              "line": 469,
              "args": [
                "self",
                "execution_id",
                "output_format",
                "include_performance"
              ],
              "docstring": "Create timeline visualization of recipe execution with step timing.\n\nArgs:\n    execution_id: Identifier of execution to visualize\n    output_format: Output format for timeline visualization\n    include_performance: Whether to include performance metrics\n    \nReturns:\n    str: Path to generated timeline visualization"
            },
            {
              "name": "_create_plotly_timeline",
              "line": 519,
              "args": [
                "self",
                "recipe_execution",
                "include_performance"
              ],
              "docstring": "Create interactive Plotly timeline visualization."
            },
            {
              "name": "_create_matplotlib_timeline",
              "line": 612,
              "args": [
                "self",
                "recipe_execution",
                "output_format",
                "include_performance"
              ],
              "docstring": "Create static matplotlib timeline visualization."
            },
            {
              "name": "_create_json_timeline",
              "line": 701,
              "args": [
                "self",
                "recipe_execution",
                "include_performance"
              ],
              "docstring": "Create JSON export of timeline data."
            },
            {
              "name": "_build_execution_state",
              "line": 750,
              "args": [
                "self",
                "recipe_execution"
              ],
              "docstring": "Build execution state dictionary for visualization integration."
            },
            {
              "name": "_start_monitoring",
              "line": 765,
              "args": [
                "self"
              ],
              "docstring": "Start real-time monitoring thread for active executions."
            },
            {
              "name": "_take_performance_snapshot",
              "line": 810,
              "args": [
                "self"
              ],
              "docstring": "Take snapshot of current performance metrics."
            },
            {
              "name": "get_execution_summary",
              "line": 838,
              "args": [
                "self",
                "execution_id"
              ],
              "docstring": "Get comprehensive summary of recipe execution."
            },
            {
              "name": "shutdown",
              "line": 902,
              "args": [
                "self"
              ],
              "docstring": "Shutdown execution flow visualizer and clean up resources."
            }
          ]
        }
      ],
      "lines_of_code": 770,
      "complexity_score": 103,
      "last_modified": "2025-10-04T18:17:50.503299",
      "checksum": "757725a3b36e8ee2ff51ebd96fd26229",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/src/visualization/performance_dashboard.py": {
      "name": ".restructuring_backup/src/visualization/performance_dashboard.py",
      "path": ".restructuring_backup/src/visualization/performance_dashboard.py",
      "component_type": "utility",
      "description": "Performance Dashboard for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "age_seconds",
        "is_active",
        "duration",
        "__init__",
        "_initialize_default_thresholds",
        "add_metric",
        "_check_alert_thresholds",
        "_trigger_alert",
        "_update_aggregated_metrics",
        "create_realtime_dashboard",
        "_get_recent_metric_data",
        "_generate_dashboard_html",
        "_generate_alerts_html",
        "_generate_metrics_summary_html",
        "export_performance_report",
        "_collect_performance_data",
        "_calculate_system_health",
        "_generate_performance_report_html",
        "get_dashboard_status",
        "shutdown",
        "_add_metric_impl",
        "_create_dashboard_impl",
        "_export_report_impl",
        "_get_status_impl",
        "_shutdown_impl",
        "MetricType",
        "ChartType",
        "MetricPoint",
        "PerformanceAlert",
        "PerformanceDashboard"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "statistics",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "enum",
        "threading",
        "logging",
        "collections",
        "orchestrator.context.context",
        "src.core.logger",
        "enhanced_visualizer",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "plotly.offline",
        "matplotlib.pyplot",
        "matplotlib.patches",
        "matplotlib.animation",
        "matplotlib.dates",
        "numpy",
        "numpy"
      ],
      "functions": [
        {
          "name": "age_seconds",
          "line": 100,
          "args": [
            "self"
          ],
          "docstring": "Calculate age of metric point in seconds.",
          "decorators": []
        },
        {
          "name": "is_active",
          "line": 119,
          "args": [
            "self"
          ],
          "docstring": "Check if alert is still active (not resolved).",
          "decorators": []
        },
        {
          "name": "duration",
          "line": 123,
          "args": [
            "self"
          ],
          "docstring": "Calculate alert duration in seconds.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 145,
          "args": [
            "self",
            "context",
            "base_visualizer",
            "update_interval",
            "retention_hours",
            "enable_alerts"
          ],
          "docstring": "Initialize performance dashboard with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    update_interval: Update interval in seconds for real-time monitoring\n    retention_hours: Data retention period in hours\n    enable_alerts: Whether to enable performance alerting",
          "decorators": []
        },
        {
          "name": "_initialize_default_thresholds",
          "line": 211,
          "args": [
            "self"
          ],
          "docstring": "Initialize default alert thresholds for performance monitoring.",
          "decorators": []
        },
        {
          "name": "add_metric",
          "line": 245,
          "args": [
            "self",
            "metric_type",
            "value",
            "source",
            "metadata"
          ],
          "docstring": "Add new performance metric measurement to the dashboard.\n\nArgs:\n    metric_type: Type of performance metric\n    value: Metric measurement value\n    source: Source component or operation that generated metric\n    metadata: Optional additional context information",
          "decorators": []
        },
        {
          "name": "_check_alert_thresholds",
          "line": 297,
          "args": [
            "self",
            "metric_point"
          ],
          "docstring": "Check if metric point violates alert thresholds.",
          "decorators": []
        },
        {
          "name": "_trigger_alert",
          "line": 321,
          "args": [
            "self",
            "metric_point",
            "severity",
            "threshold"
          ],
          "docstring": "Trigger performance alert for threshold violation.",
          "decorators": []
        },
        {
          "name": "_update_aggregated_metrics",
          "line": 366,
          "args": [
            "self",
            "metric_type"
          ],
          "docstring": "Update aggregated statistical metrics for dashboard summaries.",
          "decorators": []
        },
        {
          "name": "create_realtime_dashboard",
          "line": 406,
          "args": [
            "self",
            "metrics_to_include",
            "refresh_interval"
          ],
          "docstring": "Create comprehensive real-time performance dashboard.\n\nArgs:\n    metrics_to_include: List of metric types to include (all if None)\n    refresh_interval: Dashboard refresh interval in seconds\n    \nReturns:\n    str: Path to generated dashboard HTML file",
          "decorators": []
        },
        {
          "name": "_get_recent_metric_data",
          "line": 536,
          "args": [
            "self",
            "metric_type",
            "hours"
          ],
          "docstring": "Get recent metric data points for specified time period.",
          "decorators": []
        },
        {
          "name": "_generate_dashboard_html",
          "line": 553,
          "args": [
            "self",
            "plotly_figure",
            "refresh_interval"
          ],
          "docstring": "Generate complete HTML dashboard with auto-refresh and styling.",
          "decorators": []
        },
        {
          "name": "_generate_alerts_html",
          "line": 813,
          "args": [
            "self"
          ],
          "docstring": "Generate HTML section for active alerts display.",
          "decorators": []
        },
        {
          "name": "_generate_metrics_summary_html",
          "line": 835,
          "args": [
            "self"
          ],
          "docstring": "Generate HTML section for metrics summary cards.",
          "decorators": []
        },
        {
          "name": "export_performance_report",
          "line": 876,
          "args": [
            "self",
            "hours_back",
            "include_charts",
            "output_format"
          ],
          "docstring": "Export comprehensive performance report for specified time period.\n\nArgs:\n    hours_back: Number of hours of data to include in report\n    include_charts: Whether to include visualization charts\n    output_format: Output format for report\n    \nReturns:\n    str: Path to generated performance report",
          "decorators": []
        },
        {
          "name": "_collect_performance_data",
          "line": 928,
          "args": [
            "self",
            "hours_back"
          ],
          "docstring": "Collect comprehensive performance data for report generation.",
          "decorators": []
        },
        {
          "name": "_calculate_system_health",
          "line": 967,
          "args": [
            "self"
          ],
          "docstring": "Calculate overall system health score and status.",
          "decorators": []
        },
        {
          "name": "_generate_performance_report_html",
          "line": 998,
          "args": [
            "self",
            "report_data",
            "include_charts"
          ],
          "docstring": "Generate comprehensive HTML performance report.",
          "decorators": []
        },
        {
          "name": "get_dashboard_status",
          "line": 1060,
          "args": [
            "self"
          ],
          "docstring": "Get comprehensive dashboard status and statistics.",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 1089,
          "args": [
            "self"
          ],
          "docstring": "Shutdown performance dashboard and clean up resources.",
          "decorators": []
        },
        {
          "name": "_add_metric_impl",
          "line": 261,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_create_dashboard_impl",
          "line": 421,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_export_report_impl",
          "line": 893,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_get_status_impl",
          "line": 1062,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_shutdown_impl",
          "line": 1091,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MetricType",
          "line": 61,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of performance metrics tracked by the dashboard.",
          "methods": []
        },
        {
          "name": "ChartType",
          "line": 76,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of charts available in the performance dashboard.",
          "methods": []
        },
        {
          "name": "MetricPoint",
          "line": 91,
          "bases": [],
          "docstring": "Represents a single metric measurement with comprehensive metadata.",
          "methods": [
            {
              "name": "age_seconds",
              "line": 100,
              "args": [
                "self"
              ],
              "docstring": "Calculate age of metric point in seconds."
            }
          ]
        },
        {
          "name": "PerformanceAlert",
          "line": 106,
          "bases": [],
          "docstring": "Represents performance alerts and threshold violations.",
          "methods": [
            {
              "name": "is_active",
              "line": 119,
              "args": [
                "self"
              ],
              "docstring": "Check if alert is still active (not resolved)."
            },
            {
              "name": "duration",
              "line": 123,
              "args": [
                "self"
              ],
              "docstring": "Calculate alert duration in seconds."
            }
          ]
        },
        {
          "name": "PerformanceDashboard",
          "line": 130,
          "bases": [],
          "docstring": "Comprehensive performance monitoring dashboard for Framework0 with real-time\nmetrics visualization, historical analysis, and alerting capabilities.\n\nProvides advanced dashboard features including:\n- Real-time performance metrics collection and visualization\n- Historical trend analysis and statistical summaries\n- Customizable alerting and threshold monitoring\n- Interactive charts and graphs with drill-down capabilities\n- Performance bottleneck identification and analysis\n- Resource utilization monitoring and optimization insights\n- Export capabilities for reporting and documentation",
          "methods": [
            {
              "name": "__init__",
              "line": 145,
              "args": [
                "self",
                "context",
                "base_visualizer",
                "update_interval",
                "retention_hours",
                "enable_alerts"
              ],
              "docstring": "Initialize performance dashboard with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    update_interval: Update interval in seconds for real-time monitoring\n    retention_hours: Data retention period in hours\n    enable_alerts: Whether to enable performance alerting"
            },
            {
              "name": "_initialize_default_thresholds",
              "line": 211,
              "args": [
                "self"
              ],
              "docstring": "Initialize default alert thresholds for performance monitoring."
            },
            {
              "name": "add_metric",
              "line": 245,
              "args": [
                "self",
                "metric_type",
                "value",
                "source",
                "metadata"
              ],
              "docstring": "Add new performance metric measurement to the dashboard.\n\nArgs:\n    metric_type: Type of performance metric\n    value: Metric measurement value\n    source: Source component or operation that generated metric\n    metadata: Optional additional context information"
            },
            {
              "name": "_check_alert_thresholds",
              "line": 297,
              "args": [
                "self",
                "metric_point"
              ],
              "docstring": "Check if metric point violates alert thresholds."
            },
            {
              "name": "_trigger_alert",
              "line": 321,
              "args": [
                "self",
                "metric_point",
                "severity",
                "threshold"
              ],
              "docstring": "Trigger performance alert for threshold violation."
            },
            {
              "name": "_update_aggregated_metrics",
              "line": 366,
              "args": [
                "self",
                "metric_type"
              ],
              "docstring": "Update aggregated statistical metrics for dashboard summaries."
            },
            {
              "name": "create_realtime_dashboard",
              "line": 406,
              "args": [
                "self",
                "metrics_to_include",
                "refresh_interval"
              ],
              "docstring": "Create comprehensive real-time performance dashboard.\n\nArgs:\n    metrics_to_include: List of metric types to include (all if None)\n    refresh_interval: Dashboard refresh interval in seconds\n    \nReturns:\n    str: Path to generated dashboard HTML file"
            },
            {
              "name": "_get_recent_metric_data",
              "line": 536,
              "args": [
                "self",
                "metric_type",
                "hours"
              ],
              "docstring": "Get recent metric data points for specified time period."
            },
            {
              "name": "_generate_dashboard_html",
              "line": 553,
              "args": [
                "self",
                "plotly_figure",
                "refresh_interval"
              ],
              "docstring": "Generate complete HTML dashboard with auto-refresh and styling."
            },
            {
              "name": "_generate_alerts_html",
              "line": 813,
              "args": [
                "self"
              ],
              "docstring": "Generate HTML section for active alerts display."
            },
            {
              "name": "_generate_metrics_summary_html",
              "line": 835,
              "args": [
                "self"
              ],
              "docstring": "Generate HTML section for metrics summary cards."
            },
            {
              "name": "export_performance_report",
              "line": 876,
              "args": [
                "self",
                "hours_back",
                "include_charts",
                "output_format"
              ],
              "docstring": "Export comprehensive performance report for specified time period.\n\nArgs:\n    hours_back: Number of hours of data to include in report\n    include_charts: Whether to include visualization charts\n    output_format: Output format for report\n    \nReturns:\n    str: Path to generated performance report"
            },
            {
              "name": "_collect_performance_data",
              "line": 928,
              "args": [
                "self",
                "hours_back"
              ],
              "docstring": "Collect comprehensive performance data for report generation."
            },
            {
              "name": "_calculate_system_health",
              "line": 967,
              "args": [
                "self"
              ],
              "docstring": "Calculate overall system health score and status."
            },
            {
              "name": "_generate_performance_report_html",
              "line": 998,
              "args": [
                "self",
                "report_data",
                "include_charts"
              ],
              "docstring": "Generate comprehensive HTML performance report."
            },
            {
              "name": "get_dashboard_status",
              "line": 1060,
              "args": [
                "self"
              ],
              "docstring": "Get comprehensive dashboard status and statistics."
            },
            {
              "name": "shutdown",
              "line": 1089,
              "args": [
                "self"
              ],
              "docstring": "Shutdown performance dashboard and clean up resources."
            }
          ]
        }
      ],
      "lines_of_code": 933,
      "complexity_score": 84,
      "last_modified": "2025-10-04T18:17:50.507299",
      "checksum": "a10ad13534828bde29f15b81a925e4d1",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/src/visualization/timeline_visualizer.py": {
      "name": ".restructuring_backup/src/visualization/timeline_visualizer.py",
      "path": ".restructuring_backup/src/visualization/timeline_visualizer.py",
      "component_type": "utility",
      "description": "Timeline and Flow Visualizations for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "get_end_time",
        "overlaps_with",
        "get_duration",
        "__init__",
        "create_gantt_timeline",
        "create_dependency_flow",
        "_group_events_by_field",
        "_get_status_color",
        "_get_color_map",
        "_calculate_layout_positions",
        "_add_flow_edges_to_figure",
        "_add_flow_nodes_to_figure",
        "_add_arrowhead",
        "_generate_enhanced_gantt_html",
        "_generate_enhanced_flow_html",
        "get_timeline_summary",
        "_calculate_event_statistics",
        "_calculate_timeline_span",
        "_calculate_status_distribution",
        "shutdown",
        "_create_gantt_impl",
        "_create_flow_impl",
        "_get_summary_impl",
        "_shutdown_impl",
        "TimelineType",
        "LayoutEngine",
        "TimelineEvent",
        "FlowNode",
        "FlowEdge",
        "TimelineVisualizer"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "math",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "enum",
        "threading",
        "logging",
        "orchestrator.context.context",
        "src.core.logger",
        "enhanced_visualizer",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "plotly.offline",
        "networkx",
        "matplotlib.pyplot",
        "matplotlib.patches",
        "matplotlib.patches",
        "matplotlib.dates",
        "matplotlib.animation",
        "numpy",
        "statistics"
      ],
      "functions": [
        {
          "name": "get_end_time",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Calculate event end time based on start and duration.",
          "decorators": []
        },
        {
          "name": "overlaps_with",
          "line": 121,
          "args": [
            "self",
            "other"
          ],
          "docstring": "Check if this event overlaps with another event.",
          "decorators": []
        },
        {
          "name": "get_duration",
          "line": 154,
          "args": [
            "self"
          ],
          "docstring": "Calculate node execution duration.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 200,
          "args": [
            "self",
            "context",
            "base_visualizer",
            "enable_animation",
            "enable_interactivity"
          ],
          "docstring": "Initialize timeline visualizer with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    enable_animation: Whether to enable animated visualizations\n    enable_interactivity: Whether to enable interactive features",
          "decorators": []
        },
        {
          "name": "create_gantt_timeline",
          "line": 254,
          "args": [
            "self",
            "timeline_id",
            "events",
            "title",
            "group_by"
          ],
          "docstring": "Create interactive Gantt chart timeline visualization.\n\nArgs:\n    timeline_id: Unique identifier for timeline\n    events: List of timeline events to visualize\n    title: Optional title for the timeline\n    group_by: Optional field to group events by\n    \nReturns:\n    str: Path to generated Gantt chart file",
          "decorators": []
        },
        {
          "name": "create_dependency_flow",
          "line": 378,
          "args": [
            "self",
            "flow_id",
            "nodes",
            "edges",
            "layout_engine",
            "title"
          ],
          "docstring": "Create interactive dependency flow diagram visualization.\n\nArgs:\n    flow_id: Unique identifier for flow diagram\n    nodes: List of flow nodes to visualize\n    edges: List of flow edges connecting nodes\n    layout_engine: Layout algorithm for node positioning\n    title: Optional title for the flow diagram\n    \nReturns:\n    str: Path to generated flow diagram file",
          "decorators": []
        },
        {
          "name": "_group_events_by_field",
          "line": 481,
          "args": [
            "self",
            "events",
            "field"
          ],
          "docstring": "Group timeline events by specified field.",
          "decorators": []
        },
        {
          "name": "_get_status_color",
          "line": 508,
          "args": [
            "self",
            "status"
          ],
          "docstring": "Get color for event status.",
          "decorators": []
        },
        {
          "name": "_get_color_map",
          "line": 520,
          "args": [
            "self"
          ],
          "docstring": "Get comprehensive color mapping for statuses.",
          "decorators": []
        },
        {
          "name": "_calculate_layout_positions",
          "line": 532,
          "args": [
            "self",
            "graph",
            "layout_engine"
          ],
          "docstring": "Calculate node positions using specified layout algorithm.",
          "decorators": []
        },
        {
          "name": "_add_flow_edges_to_figure",
          "line": 573,
          "args": [
            "self",
            "fig",
            "edges",
            "positions"
          ],
          "docstring": "Add flow edges to Plotly figure.",
          "decorators": []
        },
        {
          "name": "_add_flow_nodes_to_figure",
          "line": 604,
          "args": [
            "self",
            "fig",
            "nodes",
            "positions"
          ],
          "docstring": "Add flow nodes to Plotly figure.",
          "decorators": []
        },
        {
          "name": "_add_arrowhead",
          "line": 668,
          "args": [
            "self",
            "fig",
            "source_pos",
            "target_pos",
            "color"
          ],
          "docstring": "Add arrowhead to indicate edge direction.",
          "decorators": []
        },
        {
          "name": "_generate_enhanced_gantt_html",
          "line": 724,
          "args": [
            "self",
            "fig",
            "timeline_id",
            "events"
          ],
          "docstring": "Generate enhanced HTML for Gantt chart with additional features.",
          "decorators": []
        },
        {
          "name": "_generate_enhanced_flow_html",
          "line": 954,
          "args": [
            "self",
            "fig",
            "flow_id",
            "nodes",
            "edges"
          ],
          "docstring": "Generate enhanced HTML for flow diagram with additional features.",
          "decorators": []
        },
        {
          "name": "get_timeline_summary",
          "line": 1098,
          "args": [
            "self",
            "timeline_id"
          ],
          "docstring": "Get comprehensive summary of timeline visualization.",
          "decorators": []
        },
        {
          "name": "_calculate_event_statistics",
          "line": 1123,
          "args": [
            "self",
            "events"
          ],
          "docstring": "Calculate statistical metrics for timeline events.",
          "decorators": []
        },
        {
          "name": "_calculate_timeline_span",
          "line": 1147,
          "args": [
            "self",
            "events"
          ],
          "docstring": "Calculate timeline temporal span information.",
          "decorators": []
        },
        {
          "name": "_calculate_status_distribution",
          "line": 1163,
          "args": [
            "self",
            "events"
          ],
          "docstring": "Calculate distribution of event statuses.",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 1171,
          "args": [
            "self"
          ],
          "docstring": "Shutdown timeline visualizer and clean up resources.",
          "decorators": []
        },
        {
          "name": "_create_gantt_impl",
          "line": 273,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_create_flow_impl",
          "line": 399,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_get_summary_impl",
          "line": 1100,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_shutdown_impl",
          "line": 1173,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TimelineType",
          "line": 70,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of timeline visualizations available in Framework0.",
          "methods": []
        },
        {
          "name": "LayoutEngine",
          "line": 82,
          "bases": [
            "Enum"
          ],
          "docstring": "Layout algorithms for flow and dependency visualizations.",
          "methods": []
        },
        {
          "name": "TimelineEvent",
          "line": 94,
          "bases": [],
          "docstring": "Represents a single event in timeline visualizations.",
          "methods": [
            {
              "name": "get_end_time",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Calculate event end time based on start and duration."
            },
            {
              "name": "overlaps_with",
              "line": 121,
              "args": [
                "self",
                "other"
              ],
              "docstring": "Check if this event overlaps with another event."
            }
          ]
        },
        {
          "name": "FlowNode",
          "line": 130,
          "bases": [],
          "docstring": "Represents a node in execution flow visualizations.",
          "methods": [
            {
              "name": "get_duration",
              "line": 154,
              "args": [
                "self"
              ],
              "docstring": "Calculate node execution duration."
            }
          ]
        },
        {
          "name": "FlowEdge",
          "line": 162,
          "bases": [],
          "docstring": "Represents an edge in execution flow visualizations.",
          "methods": []
        },
        {
          "name": "TimelineVisualizer",
          "line": 186,
          "bases": [],
          "docstring": "Advanced timeline and flow visualization system for Framework0 with comprehensive\ninteractive features, dependency analysis, and real-time execution tracking.\n\nProvides sophisticated visualization capabilities including:\n- Interactive Gantt charts with drill-down functionality\n- Dynamic dependency flow diagrams with live updates\n- Multi-track parallel execution timelines\n- Resource utilization visualization over time\n- Event sequence analysis with correlation detection\n- Export capabilities to multiple formats with animation support",
          "methods": [
            {
              "name": "__init__",
              "line": 200,
              "args": [
                "self",
                "context",
                "base_visualizer",
                "enable_animation",
                "enable_interactivity"
              ],
              "docstring": "Initialize timeline visualizer with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    enable_animation: Whether to enable animated visualizations\n    enable_interactivity: Whether to enable interactive features"
            },
            {
              "name": "create_gantt_timeline",
              "line": 254,
              "args": [
                "self",
                "timeline_id",
                "events",
                "title",
                "group_by"
              ],
              "docstring": "Create interactive Gantt chart timeline visualization.\n\nArgs:\n    timeline_id: Unique identifier for timeline\n    events: List of timeline events to visualize\n    title: Optional title for the timeline\n    group_by: Optional field to group events by\n    \nReturns:\n    str: Path to generated Gantt chart file"
            },
            {
              "name": "create_dependency_flow",
              "line": 378,
              "args": [
                "self",
                "flow_id",
                "nodes",
                "edges",
                "layout_engine",
                "title"
              ],
              "docstring": "Create interactive dependency flow diagram visualization.\n\nArgs:\n    flow_id: Unique identifier for flow diagram\n    nodes: List of flow nodes to visualize\n    edges: List of flow edges connecting nodes\n    layout_engine: Layout algorithm for node positioning\n    title: Optional title for the flow diagram\n    \nReturns:\n    str: Path to generated flow diagram file"
            },
            {
              "name": "_group_events_by_field",
              "line": 481,
              "args": [
                "self",
                "events",
                "field"
              ],
              "docstring": "Group timeline events by specified field."
            },
            {
              "name": "_get_status_color",
              "line": 508,
              "args": [
                "self",
                "status"
              ],
              "docstring": "Get color for event status."
            },
            {
              "name": "_get_color_map",
              "line": 520,
              "args": [
                "self"
              ],
              "docstring": "Get comprehensive color mapping for statuses."
            },
            {
              "name": "_calculate_layout_positions",
              "line": 532,
              "args": [
                "self",
                "graph",
                "layout_engine"
              ],
              "docstring": "Calculate node positions using specified layout algorithm."
            },
            {
              "name": "_add_flow_edges_to_figure",
              "line": 573,
              "args": [
                "self",
                "fig",
                "edges",
                "positions"
              ],
              "docstring": "Add flow edges to Plotly figure."
            },
            {
              "name": "_add_flow_nodes_to_figure",
              "line": 604,
              "args": [
                "self",
                "fig",
                "nodes",
                "positions"
              ],
              "docstring": "Add flow nodes to Plotly figure."
            },
            {
              "name": "_add_arrowhead",
              "line": 668,
              "args": [
                "self",
                "fig",
                "source_pos",
                "target_pos",
                "color"
              ],
              "docstring": "Add arrowhead to indicate edge direction."
            },
            {
              "name": "_generate_enhanced_gantt_html",
              "line": 724,
              "args": [
                "self",
                "fig",
                "timeline_id",
                "events"
              ],
              "docstring": "Generate enhanced HTML for Gantt chart with additional features."
            },
            {
              "name": "_generate_enhanced_flow_html",
              "line": 954,
              "args": [
                "self",
                "fig",
                "flow_id",
                "nodes",
                "edges"
              ],
              "docstring": "Generate enhanced HTML for flow diagram with additional features."
            },
            {
              "name": "get_timeline_summary",
              "line": 1098,
              "args": [
                "self",
                "timeline_id"
              ],
              "docstring": "Get comprehensive summary of timeline visualization."
            },
            {
              "name": "_calculate_event_statistics",
              "line": 1123,
              "args": [
                "self",
                "events"
              ],
              "docstring": "Calculate statistical metrics for timeline events."
            },
            {
              "name": "_calculate_timeline_span",
              "line": 1147,
              "args": [
                "self",
                "events"
              ],
              "docstring": "Calculate timeline temporal span information."
            },
            {
              "name": "_calculate_status_distribution",
              "line": 1163,
              "args": [
                "self",
                "events"
              ],
              "docstring": "Calculate distribution of event statuses."
            },
            {
              "name": "shutdown",
              "line": 1171,
              "args": [
                "self"
              ],
              "docstring": "Shutdown timeline visualizer and clean up resources."
            }
          ]
        }
      ],
      "lines_of_code": 1017,
      "complexity_score": 88,
      "last_modified": "2025-10-04T18:17:50.507299",
      "checksum": "f5aef6adb50b81a18bd93816b657f27e",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/start_server.sh": {
      "name": ".restructuring_backup/start_server.sh",
      "path": ".restructuring_backup/start_server.sh",
      "component_type": "shell_script",
      "description": "Framework0 Context Server Startup Script",
      "dependencies": [],
      "exports": [
        "log_info",
        "log_success",
        "log_warning",
        "log_error",
        "log_highlight",
        "show_help",
        "check_dependencies",
        "activate_python_env",
        "get_server_pid",
        "is_server_running",
        "wait_for_server_start",
        "wait_for_server_stop",
        "start_server",
        "stop_server",
        "show_status",
        "restart_server",
        "show_logs",
        "manage_config",
        "install_dependencies",
        "main"
      ],
      "imports": [],
      "functions": [
        {
          "name": "log_info",
          "line": 36,
          "type": "shell_function"
        },
        {
          "name": "log_success",
          "line": 40,
          "type": "shell_function"
        },
        {
          "name": "log_warning",
          "line": 44,
          "type": "shell_function"
        },
        {
          "name": "log_error",
          "line": 48,
          "type": "shell_function"
        },
        {
          "name": "log_highlight",
          "line": 52,
          "type": "shell_function"
        },
        {
          "name": "show_help",
          "line": 57,
          "type": "shell_function"
        },
        {
          "name": "check_dependencies",
          "line": 122,
          "type": "shell_function"
        },
        {
          "name": "activate_python_env",
          "line": 154,
          "type": "shell_function"
        },
        {
          "name": "get_server_pid",
          "line": 169,
          "type": "shell_function"
        },
        {
          "name": "is_server_running",
          "line": 175,
          "type": "shell_function"
        },
        {
          "name": "wait_for_server_start",
          "line": 190,
          "type": "shell_function"
        },
        {
          "name": "wait_for_server_stop",
          "line": 211,
          "type": "shell_function"
        },
        {
          "name": "start_server",
          "line": 232,
          "type": "shell_function"
        },
        {
          "name": "stop_server",
          "line": 325,
          "type": "shell_function"
        },
        {
          "name": "show_status",
          "line": 376,
          "type": "shell_function"
        },
        {
          "name": "restart_server",
          "line": 406,
          "type": "shell_function"
        },
        {
          "name": "show_logs",
          "line": 420,
          "type": "shell_function"
        },
        {
          "name": "manage_config",
          "line": 472,
          "type": "shell_function"
        },
        {
          "name": "install_dependencies",
          "line": 503,
          "type": "shell_function"
        },
        {
          "name": "main",
          "line": 535,
          "type": "shell_function"
        }
      ],
      "classes": [],
      "lines_of_code": 535,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "2fc187fd68e10a98c2bb582f69b6334f",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/test_delta_module.py": {
      "name": ".restructuring_backup/test_delta_module.py",
      "path": ".restructuring_backup/test_delta_module.py",
      "component_type": "utility",
      "description": "Test Runner for Delta Compression Module.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py"
      ],
      "exports": [],
      "imports": [
        "os",
        "sys",
        "pytest"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 15,
      "complexity_score": 1,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "fc00993c218f71dcb7d37ca9d55a6a8c",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    ".restructuring_backup/test_enhanced_analysis_framework.py": {
      "name": ".restructuring_backup/test_enhanced_analysis_framework.py",
      "path": ".restructuring_backup/test_enhanced_analysis_framework.py",
      "component_type": "utility",
      "description": "Enhanced Analysis Framework Test Suite",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md"
      ],
      "exports": [
        "main",
        "__init__",
        "setup_test_environment",
        "test_enhanced_framework_initialization",
        "test_context_integration_validation",
        "test_enhanced_components_functionality",
        "test_inter_analyzer_communication",
        "test_error_handling_recovery",
        "run_comprehensive_test_suite",
        "cleanup_test_environment",
        "save_test_report",
        "EnhancedAnalysisFrameworkTester"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "tempfile",
        "shutil",
        "typing",
        "datetime",
        "src.core.logger",
        "orchestrator.context.context",
        "src.analysis.enhanced_framework",
        "src.analysis.enhanced_components",
        "src.analysis.registry"
      ],
      "functions": [
        {
          "name": "main",
          "line": 699,
          "args": [],
          "docstring": "Main function to run the enhanced analysis framework test suite.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 71,
          "args": [
            "self"
          ],
          "docstring": "Initialize test suite with logging and test environment.",
          "decorators": []
        },
        {
          "name": "setup_test_environment",
          "line": 80,
          "args": [
            "self"
          ],
          "docstring": "Set up test environment with sample data and configurations.",
          "decorators": []
        },
        {
          "name": "test_enhanced_framework_initialization",
          "line": 126,
          "args": [
            "self"
          ],
          "docstring": "Test enhanced framework initialization and basic functionality.",
          "decorators": []
        },
        {
          "name": "test_context_integration_validation",
          "line": 224,
          "args": [
            "self"
          ],
          "docstring": "Test comprehensive Context system integration.",
          "decorators": []
        },
        {
          "name": "test_enhanced_components_functionality",
          "line": 333,
          "args": [
            "self"
          ],
          "docstring": "Test enhanced component functionality and features.",
          "decorators": []
        },
        {
          "name": "test_inter_analyzer_communication",
          "line": 421,
          "args": [
            "self"
          ],
          "docstring": "Test inter-analyzer communication capabilities.",
          "decorators": []
        },
        {
          "name": "test_error_handling_recovery",
          "line": 531,
          "args": [
            "self"
          ],
          "docstring": "Test enhanced error handling and recovery mechanisms.",
          "decorators": []
        },
        {
          "name": "run_comprehensive_test_suite",
          "line": 608,
          "args": [
            "self"
          ],
          "docstring": "Run the complete enhanced analysis framework test suite.",
          "decorators": []
        },
        {
          "name": "cleanup_test_environment",
          "line": 679,
          "args": [
            "self"
          ],
          "docstring": "Clean up test environment and temporary files.",
          "decorators": []
        },
        {
          "name": "save_test_report",
          "line": 688,
          "args": [
            "self",
            "results"
          ],
          "docstring": "Save detailed test report to file.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedAnalysisFrameworkTester",
          "line": 63,
          "bases": [],
          "docstring": "Comprehensive test suite for enhanced analysis framework.\n\nProvides systematic testing of all enhanced features including Context\nintegration, advanced analytics, and framework capabilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 71,
              "args": [
                "self"
              ],
              "docstring": "Initialize test suite with logging and test environment."
            },
            {
              "name": "setup_test_environment",
              "line": 80,
              "args": [
                "self"
              ],
              "docstring": "Set up test environment with sample data and configurations."
            },
            {
              "name": "test_enhanced_framework_initialization",
              "line": 126,
              "args": [
                "self"
              ],
              "docstring": "Test enhanced framework initialization and basic functionality."
            },
            {
              "name": "test_context_integration_validation",
              "line": 224,
              "args": [
                "self"
              ],
              "docstring": "Test comprehensive Context system integration."
            },
            {
              "name": "test_enhanced_components_functionality",
              "line": 333,
              "args": [
                "self"
              ],
              "docstring": "Test enhanced component functionality and features."
            },
            {
              "name": "test_inter_analyzer_communication",
              "line": 421,
              "args": [
                "self"
              ],
              "docstring": "Test inter-analyzer communication capabilities."
            },
            {
              "name": "test_error_handling_recovery",
              "line": 531,
              "args": [
                "self"
              ],
              "docstring": "Test enhanced error handling and recovery mechanisms."
            },
            {
              "name": "run_comprehensive_test_suite",
              "line": 608,
              "args": [
                "self"
              ],
              "docstring": "Run the complete enhanced analysis framework test suite."
            },
            {
              "name": "cleanup_test_environment",
              "line": 679,
              "args": [
                "self"
              ],
              "docstring": "Clean up test environment and temporary files."
            },
            {
              "name": "save_test_report",
              "line": 688,
              "args": [
                "self",
                "results"
              ],
              "docstring": "Save detailed test report to file."
            }
          ]
        }
      ],
      "lines_of_code": 573,
      "complexity_score": 33,
      "last_modified": "2025-10-04T17:23:07.905833",
      "checksum": "b3b8614f36d743184dfcc21bff76546d",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/test_enhanced_memory_bus.py": {
      "name": ".restructuring_backup/test_enhanced_memory_bus.py",
      "path": ".restructuring_backup/test_enhanced_memory_bus.py",
      "component_type": "utility",
      "description": "Comprehensive test suite for Enhanced Memory Bus System.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "run_all_tests",
        "test_metrics_initialization",
        "test_update_operation_stats",
        "test_metrics_serialization",
        "test_event_initialization",
        "test_event_expiration",
        "test_event_serialization",
        "test_json_save_and_load",
        "test_json_delete_key",
        "test_json_backup_and_restore",
        "test_sqlite_save_and_load",
        "test_sqlite_delete_key",
        "test_sqlite_backup_and_restore",
        "test_basic_operations",
        "test_json_serializability_validation",
        "test_context_integration",
        "test_persistence_operations",
        "test_messaging_system",
        "test_backup_and_restore",
        "test_metrics_collection",
        "test_health_check",
        "test_threading_safety",
        "test_factory_functions",
        "test_context_memory_bus_coordination",
        "test_persistence_recovery_scenario",
        "event_handler",
        "worker_thread",
        "TestMemoryBusMetrics",
        "TestMessageEvent",
        "TestJSONPersistenceBackend",
        "TestSQLitePersistenceBackend",
        "TestEnhancedMemoryBus",
        "TestMemoryBusIntegration"
      ],
      "imports": [
        "os",
        "json",
        "tempfile",
        "threading",
        "time",
        "pytest",
        "pathlib",
        "unittest.mock",
        "datetime",
        "orchestrator.enhanced_memory_bus",
        "orchestrator.context.context"
      ],
      "functions": [
        {
          "name": "run_all_tests",
          "line": 653,
          "args": [],
          "docstring": "Run all enhanced memory bus tests.",
          "decorators": []
        },
        {
          "name": "test_metrics_initialization",
          "line": 37,
          "args": [
            "self"
          ],
          "docstring": "Test that metrics initialize with correct default values.",
          "decorators": []
        },
        {
          "name": "test_update_operation_stats",
          "line": 57,
          "args": [
            "self"
          ],
          "docstring": "Test operation statistics update functionality.",
          "decorators": []
        },
        {
          "name": "test_metrics_serialization",
          "line": 83,
          "args": [
            "self"
          ],
          "docstring": "Test metrics to_dict serialization.",
          "decorators": []
        },
        {
          "name": "test_event_initialization",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Test message event initialization with defaults.",
          "decorators": []
        },
        {
          "name": "test_event_expiration",
          "line": 129,
          "args": [
            "self"
          ],
          "docstring": "Test event TTL and expiration logic.",
          "decorators": []
        },
        {
          "name": "test_event_serialization",
          "line": 141,
          "args": [
            "self"
          ],
          "docstring": "Test event serialization and deserialization.",
          "decorators": []
        },
        {
          "name": "test_json_save_and_load",
          "line": 171,
          "args": [
            "self"
          ],
          "docstring": "Test JSON backend save and load functionality.",
          "decorators": []
        },
        {
          "name": "test_json_delete_key",
          "line": 190,
          "args": [
            "self"
          ],
          "docstring": "Test JSON backend key deletion.",
          "decorators": []
        },
        {
          "name": "test_json_backup_and_restore",
          "line": 211,
          "args": [
            "self"
          ],
          "docstring": "Test JSON backend backup and restore functionality.",
          "decorators": []
        },
        {
          "name": "test_sqlite_save_and_load",
          "line": 246,
          "args": [
            "self"
          ],
          "docstring": "Test SQLite backend save and load functionality.",
          "decorators": []
        },
        {
          "name": "test_sqlite_delete_key",
          "line": 265,
          "args": [
            "self"
          ],
          "docstring": "Test SQLite backend key deletion.",
          "decorators": []
        },
        {
          "name": "test_sqlite_backup_and_restore",
          "line": 286,
          "args": [
            "self"
          ],
          "docstring": "Test SQLite backend backup and restore functionality.",
          "decorators": []
        },
        {
          "name": "test_basic_operations",
          "line": 321,
          "args": [
            "self"
          ],
          "docstring": "Test basic get/set/delete operations.",
          "decorators": []
        },
        {
          "name": "test_json_serializability_validation",
          "line": 346,
          "args": [
            "self"
          ],
          "docstring": "Test that only JSON-serializable values can be stored.",
          "decorators": []
        },
        {
          "name": "test_context_integration",
          "line": 361,
          "args": [
            "self"
          ],
          "docstring": "Test integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_persistence_operations",
          "line": 379,
          "args": [
            "self"
          ],
          "docstring": "Test persistence functionality with temporary file.",
          "decorators": []
        },
        {
          "name": "test_messaging_system",
          "line": 406,
          "args": [
            "self"
          ],
          "docstring": "Test event publishing and subscription.",
          "decorators": []
        },
        {
          "name": "test_backup_and_restore",
          "line": 440,
          "args": [
            "self"
          ],
          "docstring": "Test backup and restore functionality.",
          "decorators": []
        },
        {
          "name": "test_metrics_collection",
          "line": 470,
          "args": [
            "self"
          ],
          "docstring": "Test metrics collection and reporting.",
          "decorators": []
        },
        {
          "name": "test_health_check",
          "line": 496,
          "args": [
            "self"
          ],
          "docstring": "Test comprehensive health check functionality.",
          "decorators": []
        },
        {
          "name": "test_threading_safety",
          "line": 525,
          "args": [
            "self"
          ],
          "docstring": "Test thread safety of memory bus operations.",
          "decorators": []
        },
        {
          "name": "test_factory_functions",
          "line": 569,
          "args": [
            "self"
          ],
          "docstring": "Test factory functions for creating memory bus instances.",
          "decorators": []
        },
        {
          "name": "test_context_memory_bus_coordination",
          "line": 593,
          "args": [
            "self"
          ],
          "docstring": "Test coordination between Context and EnhancedMemoryBus.",
          "decorators": []
        },
        {
          "name": "test_persistence_recovery_scenario",
          "line": 616,
          "args": [
            "self"
          ],
          "docstring": "Test realistic persistence and recovery scenario.",
          "decorators": []
        },
        {
          "name": "event_handler",
          "line": 414,
          "args": [
            "event"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "worker_thread",
          "line": 534,
          "args": [
            "thread_id"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestMemoryBusMetrics",
          "line": 34,
          "bases": [],
          "docstring": "Test suite for MemoryBusMetrics class.",
          "methods": [
            {
              "name": "test_metrics_initialization",
              "line": 37,
              "args": [
                "self"
              ],
              "docstring": "Test that metrics initialize with correct default values."
            },
            {
              "name": "test_update_operation_stats",
              "line": 57,
              "args": [
                "self"
              ],
              "docstring": "Test operation statistics update functionality."
            },
            {
              "name": "test_metrics_serialization",
              "line": 83,
              "args": [
                "self"
              ],
              "docstring": "Test metrics to_dict serialization."
            }
          ]
        },
        {
          "name": "TestMessageEvent",
          "line": 112,
          "bases": [],
          "docstring": "Test suite for MessageEvent class.",
          "methods": [
            {
              "name": "test_event_initialization",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Test message event initialization with defaults."
            },
            {
              "name": "test_event_expiration",
              "line": 129,
              "args": [
                "self"
              ],
              "docstring": "Test event TTL and expiration logic."
            },
            {
              "name": "test_event_serialization",
              "line": 141,
              "args": [
                "self"
              ],
              "docstring": "Test event serialization and deserialization."
            }
          ]
        },
        {
          "name": "TestJSONPersistenceBackend",
          "line": 168,
          "bases": [],
          "docstring": "Test suite for JSON persistence backend.",
          "methods": [
            {
              "name": "test_json_save_and_load",
              "line": 171,
              "args": [
                "self"
              ],
              "docstring": "Test JSON backend save and load functionality."
            },
            {
              "name": "test_json_delete_key",
              "line": 190,
              "args": [
                "self"
              ],
              "docstring": "Test JSON backend key deletion."
            },
            {
              "name": "test_json_backup_and_restore",
              "line": 211,
              "args": [
                "self"
              ],
              "docstring": "Test JSON backend backup and restore functionality."
            }
          ]
        },
        {
          "name": "TestSQLitePersistenceBackend",
          "line": 243,
          "bases": [],
          "docstring": "Test suite for SQLite persistence backend.",
          "methods": [
            {
              "name": "test_sqlite_save_and_load",
              "line": 246,
              "args": [
                "self"
              ],
              "docstring": "Test SQLite backend save and load functionality."
            },
            {
              "name": "test_sqlite_delete_key",
              "line": 265,
              "args": [
                "self"
              ],
              "docstring": "Test SQLite backend key deletion."
            },
            {
              "name": "test_sqlite_backup_and_restore",
              "line": 286,
              "args": [
                "self"
              ],
              "docstring": "Test SQLite backend backup and restore functionality."
            }
          ]
        },
        {
          "name": "TestEnhancedMemoryBus",
          "line": 318,
          "bases": [],
          "docstring": "Test suite for EnhancedMemoryBus class.",
          "methods": [
            {
              "name": "test_basic_operations",
              "line": 321,
              "args": [
                "self"
              ],
              "docstring": "Test basic get/set/delete operations."
            },
            {
              "name": "test_json_serializability_validation",
              "line": 346,
              "args": [
                "self"
              ],
              "docstring": "Test that only JSON-serializable values can be stored."
            },
            {
              "name": "test_context_integration",
              "line": 361,
              "args": [
                "self"
              ],
              "docstring": "Test integration with Context system."
            },
            {
              "name": "test_persistence_operations",
              "line": 379,
              "args": [
                "self"
              ],
              "docstring": "Test persistence functionality with temporary file."
            },
            {
              "name": "test_messaging_system",
              "line": 406,
              "args": [
                "self"
              ],
              "docstring": "Test event publishing and subscription."
            },
            {
              "name": "test_backup_and_restore",
              "line": 440,
              "args": [
                "self"
              ],
              "docstring": "Test backup and restore functionality."
            },
            {
              "name": "test_metrics_collection",
              "line": 470,
              "args": [
                "self"
              ],
              "docstring": "Test metrics collection and reporting."
            },
            {
              "name": "test_health_check",
              "line": 496,
              "args": [
                "self"
              ],
              "docstring": "Test comprehensive health check functionality."
            },
            {
              "name": "test_threading_safety",
              "line": 525,
              "args": [
                "self"
              ],
              "docstring": "Test thread safety of memory bus operations."
            },
            {
              "name": "test_factory_functions",
              "line": 569,
              "args": [
                "self"
              ],
              "docstring": "Test factory functions for creating memory bus instances."
            }
          ]
        },
        {
          "name": "TestMemoryBusIntegration",
          "line": 590,
          "bases": [],
          "docstring": "Integration tests for memory bus with other Framework0 components.",
          "methods": [
            {
              "name": "test_context_memory_bus_coordination",
              "line": 593,
              "args": [
                "self"
              ],
              "docstring": "Test coordination between Context and EnhancedMemoryBus."
            },
            {
              "name": "test_persistence_recovery_scenario",
              "line": 616,
              "args": [
                "self"
              ],
              "docstring": "Test realistic persistence and recovery scenario."
            }
          ]
        }
      ],
      "lines_of_code": 544,
      "complexity_score": 64,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "084ba563397b5974776d356850a539cd",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/test_enhanced_recipe_parser.py": {
      "name": ".restructuring_backup/test_enhanced_recipe_parser.py",
      "path": ".restructuring_backup/test_enhanced_recipe_parser.py",
      "component_type": "utility",
      "description": "Test Suite for Enhanced Recipe Parser with Context Integration.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "run_all_tests",
        "setUp",
        "test_validate_required_fields_success",
        "test_validate_missing_steps",
        "test_validate_invalid_steps_type",
        "test_validate_step_structure_success",
        "test_validate_step_missing_fields",
        "test_validate_dependency_graph_success",
        "test_validate_missing_dependency",
        "test_validate_circular_dependency",
        "test_validate_duplicate_step_names",
        "test_custom_validator",
        "setUp",
        "tearDown",
        "_create_temp_file",
        "test_detect_format_yaml",
        "test_detect_format_yml",
        "test_detect_format_json",
        "test_detect_format_unsupported",
        "test_load_yaml_file",
        "test_load_json_file",
        "test_load_nonexistent_file",
        "test_load_invalid_yaml",
        "test_load_invalid_json",
        "test_parse_recipe_success",
        "test_parse_recipe_validation_errors",
        "test_parse_recipe_caching",
        "test_context_integration",
        "test_validation_summary",
        "setUp",
        "tearDown",
        "_create_temp_file",
        "test_parse_recipe_file_function",
        "test_validate_recipe_data_function",
        "custom_validator",
        "TestRecipeValidator",
        "TestEnhancedRecipeParser",
        "TestConvenienceFunctions"
      ],
      "imports": [
        "json",
        "os",
        "tempfile",
        "unittest",
        "datetime",
        "pathlib",
        "typing",
        "unittest.mock",
        "yaml",
        "orchestrator.enhanced_recipe_parser",
        "orchestrator.context.context",
        "shutil",
        "shutil"
      ],
      "functions": [
        {
          "name": "run_all_tests",
          "line": 547,
          "args": [],
          "docstring": "Run all Enhanced Recipe Parser tests and return success status.\n\n:return: True if all tests pass, False otherwise",
          "decorators": []
        },
        {
          "name": "setUp",
          "line": 36,
          "args": [
            "self"
          ],
          "docstring": "Set up test fixtures.",
          "decorators": []
        },
        {
          "name": "test_validate_required_fields_success",
          "line": 41,
          "args": [
            "self"
          ],
          "docstring": "Test validation with all required fields present.",
          "decorators": []
        },
        {
          "name": "test_validate_missing_steps",
          "line": 60,
          "args": [
            "self"
          ],
          "docstring": "Test validation with missing steps field.",
          "decorators": []
        },
        {
          "name": "test_validate_invalid_steps_type",
          "line": 71,
          "args": [
            "self"
          ],
          "docstring": "Test validation with invalid steps field type.",
          "decorators": []
        },
        {
          "name": "test_validate_step_structure_success",
          "line": 82,
          "args": [
            "self"
          ],
          "docstring": "Test step structure validation with valid steps.",
          "decorators": []
        },
        {
          "name": "test_validate_step_missing_fields",
          "line": 106,
          "args": [
            "self"
          ],
          "docstring": "Test step validation with missing required fields.",
          "decorators": []
        },
        {
          "name": "test_validate_dependency_graph_success",
          "line": 124,
          "args": [
            "self"
          ],
          "docstring": "Test dependency validation with valid dependency graph.",
          "decorators": []
        },
        {
          "name": "test_validate_missing_dependency",
          "line": 149,
          "args": [
            "self"
          ],
          "docstring": "Test dependency validation with missing dependency.",
          "decorators": []
        },
        {
          "name": "test_validate_circular_dependency",
          "line": 169,
          "args": [
            "self"
          ],
          "docstring": "Test dependency validation with circular dependency.",
          "decorators": []
        },
        {
          "name": "test_validate_duplicate_step_names",
          "line": 195,
          "args": [
            "self"
          ],
          "docstring": "Test validation with duplicate step names.",
          "decorators": []
        },
        {
          "name": "test_custom_validator",
          "line": 219,
          "args": [
            "self"
          ],
          "docstring": "Test adding and using custom validation rules.",
          "decorators": []
        },
        {
          "name": "setUp",
          "line": 246,
          "args": [
            "self"
          ],
          "docstring": "Set up test fixtures.",
          "decorators": []
        },
        {
          "name": "tearDown",
          "line": 252,
          "args": [
            "self"
          ],
          "docstring": "Clean up test fixtures.",
          "decorators": []
        },
        {
          "name": "_create_temp_file",
          "line": 257,
          "args": [
            "self",
            "content",
            "filename"
          ],
          "docstring": "Create temporary file with given content.",
          "decorators": []
        },
        {
          "name": "test_detect_format_yaml",
          "line": 264,
          "args": [
            "self"
          ],
          "docstring": "Test format detection for YAML files.",
          "decorators": []
        },
        {
          "name": "test_detect_format_yml",
          "line": 270,
          "args": [
            "self"
          ],
          "docstring": "Test format detection for YML files.",
          "decorators": []
        },
        {
          "name": "test_detect_format_json",
          "line": 276,
          "args": [
            "self"
          ],
          "docstring": "Test format detection for JSON files.",
          "decorators": []
        },
        {
          "name": "test_detect_format_unsupported",
          "line": 282,
          "args": [
            "self"
          ],
          "docstring": "Test format detection with unsupported file type.",
          "decorators": []
        },
        {
          "name": "test_load_yaml_file",
          "line": 289,
          "args": [
            "self"
          ],
          "docstring": "Test loading YAML recipe file.",
          "decorators": []
        },
        {
          "name": "test_load_json_file",
          "line": 309,
          "args": [
            "self"
          ],
          "docstring": "Test loading JSON recipe file.",
          "decorators": []
        },
        {
          "name": "test_load_nonexistent_file",
          "line": 332,
          "args": [
            "self"
          ],
          "docstring": "Test loading nonexistent file raises appropriate error.",
          "decorators": []
        },
        {
          "name": "test_load_invalid_yaml",
          "line": 337,
          "args": [
            "self"
          ],
          "docstring": "Test loading invalid YAML content raises appropriate error.",
          "decorators": []
        },
        {
          "name": "test_load_invalid_json",
          "line": 346,
          "args": [
            "self"
          ],
          "docstring": "Test loading invalid JSON content raises appropriate error.",
          "decorators": []
        },
        {
          "name": "test_parse_recipe_success",
          "line": 355,
          "args": [
            "self"
          ],
          "docstring": "Test successful recipe parsing with all components.",
          "decorators": []
        },
        {
          "name": "test_parse_recipe_validation_errors",
          "line": 394,
          "args": [
            "self"
          ],
          "docstring": "Test recipe parsing with validation errors.",
          "decorators": []
        },
        {
          "name": "test_parse_recipe_caching",
          "line": 412,
          "args": [
            "self"
          ],
          "docstring": "Test recipe parsing caching functionality.",
          "decorators": []
        },
        {
          "name": "test_context_integration",
          "line": 434,
          "args": [
            "self"
          ],
          "docstring": "Test Context system integration.",
          "decorators": []
        },
        {
          "name": "test_validation_summary",
          "line": 460,
          "args": [
            "self"
          ],
          "docstring": "Test validation summary generation.",
          "decorators": []
        },
        {
          "name": "setUp",
          "line": 486,
          "args": [
            "self"
          ],
          "docstring": "Set up test fixtures.",
          "decorators": []
        },
        {
          "name": "tearDown",
          "line": 491,
          "args": [
            "self"
          ],
          "docstring": "Clean up test fixtures.",
          "decorators": []
        },
        {
          "name": "_create_temp_file",
          "line": 496,
          "args": [
            "self",
            "content",
            "filename"
          ],
          "docstring": "Create temporary file with given content.",
          "decorators": []
        },
        {
          "name": "test_parse_recipe_file_function",
          "line": 503,
          "args": [
            "self"
          ],
          "docstring": "Test parse_recipe_file convenience function.",
          "decorators": []
        },
        {
          "name": "test_validate_recipe_data_function",
          "line": 526,
          "args": [
            "self"
          ],
          "docstring": "Test validate_recipe_data convenience function.",
          "decorators": []
        },
        {
          "name": "custom_validator",
          "line": 221,
          "args": [
            "recipe_data"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestRecipeValidator",
          "line": 33,
          "bases": [
            "TestCase"
          ],
          "docstring": "Test cases for RecipeValidator class.",
          "methods": [
            {
              "name": "setUp",
              "line": 36,
              "args": [
                "self"
              ],
              "docstring": "Set up test fixtures."
            },
            {
              "name": "test_validate_required_fields_success",
              "line": 41,
              "args": [
                "self"
              ],
              "docstring": "Test validation with all required fields present."
            },
            {
              "name": "test_validate_missing_steps",
              "line": 60,
              "args": [
                "self"
              ],
              "docstring": "Test validation with missing steps field."
            },
            {
              "name": "test_validate_invalid_steps_type",
              "line": 71,
              "args": [
                "self"
              ],
              "docstring": "Test validation with invalid steps field type."
            },
            {
              "name": "test_validate_step_structure_success",
              "line": 82,
              "args": [
                "self"
              ],
              "docstring": "Test step structure validation with valid steps."
            },
            {
              "name": "test_validate_step_missing_fields",
              "line": 106,
              "args": [
                "self"
              ],
              "docstring": "Test step validation with missing required fields."
            },
            {
              "name": "test_validate_dependency_graph_success",
              "line": 124,
              "args": [
                "self"
              ],
              "docstring": "Test dependency validation with valid dependency graph."
            },
            {
              "name": "test_validate_missing_dependency",
              "line": 149,
              "args": [
                "self"
              ],
              "docstring": "Test dependency validation with missing dependency."
            },
            {
              "name": "test_validate_circular_dependency",
              "line": 169,
              "args": [
                "self"
              ],
              "docstring": "Test dependency validation with circular dependency."
            },
            {
              "name": "test_validate_duplicate_step_names",
              "line": 195,
              "args": [
                "self"
              ],
              "docstring": "Test validation with duplicate step names."
            },
            {
              "name": "test_custom_validator",
              "line": 219,
              "args": [
                "self"
              ],
              "docstring": "Test adding and using custom validation rules."
            }
          ]
        },
        {
          "name": "TestEnhancedRecipeParser",
          "line": 243,
          "bases": [
            "TestCase"
          ],
          "docstring": "Test cases for EnhancedRecipeParser class.",
          "methods": [
            {
              "name": "setUp",
              "line": 246,
              "args": [
                "self"
              ],
              "docstring": "Set up test fixtures."
            },
            {
              "name": "tearDown",
              "line": 252,
              "args": [
                "self"
              ],
              "docstring": "Clean up test fixtures."
            },
            {
              "name": "_create_temp_file",
              "line": 257,
              "args": [
                "self",
                "content",
                "filename"
              ],
              "docstring": "Create temporary file with given content."
            },
            {
              "name": "test_detect_format_yaml",
              "line": 264,
              "args": [
                "self"
              ],
              "docstring": "Test format detection for YAML files."
            },
            {
              "name": "test_detect_format_yml",
              "line": 270,
              "args": [
                "self"
              ],
              "docstring": "Test format detection for YML files."
            },
            {
              "name": "test_detect_format_json",
              "line": 276,
              "args": [
                "self"
              ],
              "docstring": "Test format detection for JSON files."
            },
            {
              "name": "test_detect_format_unsupported",
              "line": 282,
              "args": [
                "self"
              ],
              "docstring": "Test format detection with unsupported file type."
            },
            {
              "name": "test_load_yaml_file",
              "line": 289,
              "args": [
                "self"
              ],
              "docstring": "Test loading YAML recipe file."
            },
            {
              "name": "test_load_json_file",
              "line": 309,
              "args": [
                "self"
              ],
              "docstring": "Test loading JSON recipe file."
            },
            {
              "name": "test_load_nonexistent_file",
              "line": 332,
              "args": [
                "self"
              ],
              "docstring": "Test loading nonexistent file raises appropriate error."
            },
            {
              "name": "test_load_invalid_yaml",
              "line": 337,
              "args": [
                "self"
              ],
              "docstring": "Test loading invalid YAML content raises appropriate error."
            },
            {
              "name": "test_load_invalid_json",
              "line": 346,
              "args": [
                "self"
              ],
              "docstring": "Test loading invalid JSON content raises appropriate error."
            },
            {
              "name": "test_parse_recipe_success",
              "line": 355,
              "args": [
                "self"
              ],
              "docstring": "Test successful recipe parsing with all components."
            },
            {
              "name": "test_parse_recipe_validation_errors",
              "line": 394,
              "args": [
                "self"
              ],
              "docstring": "Test recipe parsing with validation errors."
            },
            {
              "name": "test_parse_recipe_caching",
              "line": 412,
              "args": [
                "self"
              ],
              "docstring": "Test recipe parsing caching functionality."
            },
            {
              "name": "test_context_integration",
              "line": 434,
              "args": [
                "self"
              ],
              "docstring": "Test Context system integration."
            },
            {
              "name": "test_validation_summary",
              "line": 460,
              "args": [
                "self"
              ],
              "docstring": "Test validation summary generation."
            }
          ]
        },
        {
          "name": "TestConvenienceFunctions",
          "line": 483,
          "bases": [
            "TestCase"
          ],
          "docstring": "Test cases for convenience functions.",
          "methods": [
            {
              "name": "setUp",
              "line": 486,
              "args": [
                "self"
              ],
              "docstring": "Set up test fixtures."
            },
            {
              "name": "tearDown",
              "line": 491,
              "args": [
                "self"
              ],
              "docstring": "Clean up test fixtures."
            },
            {
              "name": "_create_temp_file",
              "line": 496,
              "args": [
                "self",
                "content",
                "filename"
              ],
              "docstring": "Create temporary file with given content."
            },
            {
              "name": "test_parse_recipe_file_function",
              "line": 503,
              "args": [
                "self"
              ],
              "docstring": "Test parse_recipe_file convenience function."
            },
            {
              "name": "test_validate_recipe_data_function",
              "line": 526,
              "args": [
                "self"
              ],
              "docstring": "Test validate_recipe_data convenience function."
            }
          ]
        }
      ],
      "lines_of_code": 483,
      "complexity_score": 50,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "d76497190d5e3190541aca74c0cc700f",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/test_execution_report.md": {
      "name": ".restructuring_backup/test_execution_report.md",
      "path": ".restructuring_backup/test_execution_report.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Test Execution Report",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Test Execution Report",
        "Generated: 2025-10-04",
        "🎯 Test Suite Summary",
        "✅ **Test Categories Validated**",
        "📊 Test Execution Results",
        "**1. Simple Validation Tests**",
        "**2. Core Functionality Tests**",
        "**3. Framework Integration Test**",
        "🧪 Test Coverage Analysis",
        "**Context Operations**: ✅ Comprehensive",
        "**File Dumping**: ✅ Multi-Format Support",
        "**Server Configuration**: ✅ Flexible Setup",
        "**Error Handling**: ✅ Robust",
        "🛠️ Dependencies Validated",
        "**Core Dependencies**: ✅ Installed and Working",
        "**Development Tools**: ✅ Configured",
        "🚀 Integration Validation",
        "**Framework0 Components Working**:",
        "**Client Integration Ready**:",
        "📋 Test Summary Stats",
        "🎯 Production Readiness Assessment",
        "**✅ Ready for Production**:",
        "**🚧 Areas for Enhancement** (Optional):",
        "🏆 Conclusion"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 126,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "224f52540c83f9b1b4c9ba373a159d08",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/test_framework0_integration.py": {
      "name": ".restructuring_backup/test_framework0_integration.py",
      "path": ".restructuring_backup/test_framework0_integration.py",
      "component_type": "utility",
      "description": "Framework0 Integration Test Suite - Complete System Validation.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md"
      ],
      "exports": [
        "run_integration_tests",
        "setUp",
        "tearDown",
        "_create_test_recipe",
        "_create_test_files",
        "test_context_system_integration",
        "test_memory_bus_context_integration",
        "test_recipe_parser_context_integration",
        "test_analysis_framework_integration",
        "test_workspace_cleaner_integration",
        "test_cross_component_data_flow",
        "test_framework_persistence_and_recovery",
        "test_framework_performance_metrics",
        "test_framework_error_handling",
        "__init__",
        "TestFramework0Integration",
        "NonSerializable"
      ],
      "imports": [
        "json",
        "os",
        "tempfile",
        "time",
        "unittest",
        "datetime",
        "pathlib",
        "typing",
        "unittest.mock",
        "orchestrator.context.context",
        "orchestrator.enhanced_memory_bus",
        "orchestrator.enhanced_recipe_parser",
        "src.analysis.enhanced_framework",
        "tools.workspace_cleaner_v2",
        "shutil",
        "src.analysis.registry"
      ],
      "functions": [
        {
          "name": "run_integration_tests",
          "line": 379,
          "args": [],
          "docstring": "Run all Framework0 integration tests and return success status.\n\n:return: True if all tests pass, False otherwise",
          "decorators": []
        },
        {
          "name": "setUp",
          "line": 35,
          "args": [
            "self"
          ],
          "docstring": "Set up comprehensive test environment.",
          "decorators": []
        },
        {
          "name": "tearDown",
          "line": 55,
          "args": [
            "self"
          ],
          "docstring": "Clean up test environment.",
          "decorators": []
        },
        {
          "name": "_create_test_recipe",
          "line": 64,
          "args": [
            "self"
          ],
          "docstring": "Create test recipe file for integration testing.",
          "decorators": []
        },
        {
          "name": "_create_test_files",
          "line": 100,
          "args": [
            "self"
          ],
          "docstring": "Create test files for workspace cleaning.",
          "decorators": []
        },
        {
          "name": "test_context_system_integration",
          "line": 126,
          "args": [
            "self"
          ],
          "docstring": "Test Context system integration across all components.",
          "decorators": []
        },
        {
          "name": "test_memory_bus_context_integration",
          "line": 156,
          "args": [
            "self"
          ],
          "docstring": "Test Enhanced Memory Bus integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_recipe_parser_context_integration",
          "line": 184,
          "args": [
            "self"
          ],
          "docstring": "Test Enhanced Recipe Parser integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_analysis_framework_integration",
          "line": 206,
          "args": [
            "self"
          ],
          "docstring": "Test Enhanced Analysis Framework integration with Context.",
          "decorators": []
        },
        {
          "name": "test_workspace_cleaner_integration",
          "line": 229,
          "args": [
            "self"
          ],
          "docstring": "Test WorkspaceCleanerV2 integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_cross_component_data_flow",
          "line": 259,
          "args": [
            "self"
          ],
          "docstring": "Test data flow between all Framework0 components.",
          "decorators": []
        },
        {
          "name": "test_framework_persistence_and_recovery",
          "line": 297,
          "args": [
            "self"
          ],
          "docstring": "Test Framework0 persistence and recovery capabilities.",
          "decorators": []
        },
        {
          "name": "test_framework_performance_metrics",
          "line": 325,
          "args": [
            "self"
          ],
          "docstring": "Test Framework0 performance monitoring and metrics.",
          "decorators": []
        },
        {
          "name": "test_framework_error_handling",
          "line": 350,
          "args": [
            "self"
          ],
          "docstring": "Test Framework0 error handling and resilience.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 366,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestFramework0Integration",
          "line": 32,
          "bases": [
            "TestCase"
          ],
          "docstring": "Comprehensive integration tests for Framework0 system.",
          "methods": [
            {
              "name": "setUp",
              "line": 35,
              "args": [
                "self"
              ],
              "docstring": "Set up comprehensive test environment."
            },
            {
              "name": "tearDown",
              "line": 55,
              "args": [
                "self"
              ],
              "docstring": "Clean up test environment."
            },
            {
              "name": "_create_test_recipe",
              "line": 64,
              "args": [
                "self"
              ],
              "docstring": "Create test recipe file for integration testing."
            },
            {
              "name": "_create_test_files",
              "line": 100,
              "args": [
                "self"
              ],
              "docstring": "Create test files for workspace cleaning."
            },
            {
              "name": "test_context_system_integration",
              "line": 126,
              "args": [
                "self"
              ],
              "docstring": "Test Context system integration across all components."
            },
            {
              "name": "test_memory_bus_context_integration",
              "line": 156,
              "args": [
                "self"
              ],
              "docstring": "Test Enhanced Memory Bus integration with Context system."
            },
            {
              "name": "test_recipe_parser_context_integration",
              "line": 184,
              "args": [
                "self"
              ],
              "docstring": "Test Enhanced Recipe Parser integration with Context system."
            },
            {
              "name": "test_analysis_framework_integration",
              "line": 206,
              "args": [
                "self"
              ],
              "docstring": "Test Enhanced Analysis Framework integration with Context."
            },
            {
              "name": "test_workspace_cleaner_integration",
              "line": 229,
              "args": [
                "self"
              ],
              "docstring": "Test WorkspaceCleanerV2 integration with Context system."
            },
            {
              "name": "test_cross_component_data_flow",
              "line": 259,
              "args": [
                "self"
              ],
              "docstring": "Test data flow between all Framework0 components."
            },
            {
              "name": "test_framework_persistence_and_recovery",
              "line": 297,
              "args": [
                "self"
              ],
              "docstring": "Test Framework0 persistence and recovery capabilities."
            },
            {
              "name": "test_framework_performance_metrics",
              "line": 325,
              "args": [
                "self"
              ],
              "docstring": "Test Framework0 performance monitoring and metrics."
            },
            {
              "name": "test_framework_error_handling",
              "line": 350,
              "args": [
                "self"
              ],
              "docstring": "Test Framework0 error handling and resilience."
            }
          ]
        },
        {
          "name": "NonSerializable",
          "line": 365,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 366,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 346,
      "complexity_score": 29,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "6a3059bb04e469663dd5a12fc3cffe7c",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/test_visualization_system.py": {
      "name": ".restructuring_backup/test_visualization_system.py",
      "path": ".restructuring_backup/test_visualization_system.py",
      "component_type": "utility",
      "description": "Comprehensive Visualization System Test for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "orchestrator/dependency_graph.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "orchestrator/dependency_graph.py"
      ],
      "exports": [
        "create_sample_recipe_data",
        "create_sample_execution_timeline",
        "create_sample_flow_graph",
        "simulate_performance_metrics",
        "test_enhanced_visualizer",
        "test_execution_flow_visualizer",
        "test_performance_dashboard",
        "test_timeline_visualizer",
        "main"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "random",
        "datetime",
        "pathlib",
        "typing",
        "orchestrator.context.context",
        "src.core.logger",
        "src.visualization",
        "src.visualization.enhanced_visualizer",
        "src.visualization.execution_flow",
        "src.visualization.performance_dashboard",
        "src.visualization.timeline_visualizer",
        "random",
        "math",
        "random",
        "traceback"
      ],
      "functions": [
        {
          "name": "create_sample_recipe_data",
          "line": 37,
          "args": [],
          "docstring": "Create comprehensive sample recipe data for visualization testing.",
          "decorators": []
        },
        {
          "name": "create_sample_execution_timeline",
          "line": 179,
          "args": [],
          "docstring": "Create sample timeline events for visualization testing.",
          "decorators": []
        },
        {
          "name": "create_sample_flow_graph",
          "line": 259,
          "args": [],
          "docstring": "Create sample flow nodes and edges for dependency visualization.",
          "decorators": []
        },
        {
          "name": "simulate_performance_metrics",
          "line": 387,
          "args": [
            "dashboard",
            "duration_minutes"
          ],
          "docstring": "Simulate realistic performance metrics for dashboard testing.",
          "decorators": []
        },
        {
          "name": "test_enhanced_visualizer",
          "line": 475,
          "args": [],
          "docstring": "Test the Enhanced Visualizer with recipe execution graphs.",
          "decorators": []
        },
        {
          "name": "test_execution_flow_visualizer",
          "line": 544,
          "args": [],
          "docstring": "Test the Execution Flow Visualizer with timeline creation.",
          "decorators": []
        },
        {
          "name": "test_performance_dashboard",
          "line": 631,
          "args": [],
          "docstring": "Test the Performance Dashboard with real-time metrics.",
          "decorators": []
        },
        {
          "name": "test_timeline_visualizer",
          "line": 685,
          "args": [],
          "docstring": "Test the Timeline Visualizer with Gantt charts and flow diagrams.",
          "decorators": []
        },
        {
          "name": "main",
          "line": 737,
          "args": [],
          "docstring": "Run comprehensive visualization system tests.",
          "decorators": []
        }
      ],
      "classes": [],
      "lines_of_code": 706,
      "complexity_score": 26,
      "last_modified": "2025-10-04T18:17:50.507299",
      "checksum": "6dda0b24dd53b21b794eeeebc456b71b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/test_workspace_cleaner_v2.py": {
      "name": ".restructuring_backup/test_workspace_cleaner_v2.py",
      "path": ".restructuring_backup/test_workspace_cleaner_v2.py",
      "component_type": "utility",
      "description": "Comprehensive Test Suite for WorkspaceCleanerV2",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "_create_test_files",
        "run_test",
        "test_cleaner_initialization",
        "test_add_standard_rules",
        "test_configuration_save_load",
        "test_dry_run_execution",
        "test_context_integration",
        "test_error_handling",
        "test_backup_system",
        "run_all_tests",
        "cleanup",
        "WorkspaceCleanerTester"
      ],
      "imports": [
        "os",
        "sys",
        "tempfile",
        "shutil",
        "json",
        "time",
        "pathlib",
        "typing",
        "tools.workspace_cleaner_v2",
        "orchestrator.context.context",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "main",
          "line": 578,
          "args": [],
          "docstring": "Main function to execute comprehensive WorkspaceCleanerV2 testing.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 45,
          "args": [
            "self"
          ],
          "docstring": "Initialize test environment with temporary workspace.",
          "decorators": []
        },
        {
          "name": "_create_test_files",
          "line": 58,
          "args": [
            "self"
          ],
          "docstring": "Create comprehensive test file structure for validation.",
          "decorators": []
        },
        {
          "name": "run_test",
          "line": 143,
          "args": [
            "self",
            "test_name",
            "test_func"
          ],
          "docstring": "Execute individual test with error handling and result tracking.\n\nArgs:\n    test_name: Human-readable name of the test\n    test_func: Function to execute for the test\n    \nReturns:\n    bool: True if test passed, False if failed",
          "decorators": []
        },
        {
          "name": "test_cleaner_initialization",
          "line": 174,
          "args": [
            "self"
          ],
          "docstring": "Test WorkspaceCleanerV2 initialization and basic functionality.",
          "decorators": []
        },
        {
          "name": "test_add_standard_rules",
          "line": 198,
          "args": [
            "self"
          ],
          "docstring": "Test adding and validating standard cleanup rules.",
          "decorators": []
        },
        {
          "name": "test_configuration_save_load",
          "line": 234,
          "args": [
            "self"
          ],
          "docstring": "Test JSON configuration system for saving and loading rules.",
          "decorators": []
        },
        {
          "name": "test_dry_run_execution",
          "line": 305,
          "args": [
            "self"
          ],
          "docstring": "Test dry-run mode execution without making actual changes.",
          "decorators": []
        },
        {
          "name": "test_context_integration",
          "line": 346,
          "args": [
            "self"
          ],
          "docstring": "Test comprehensive Context system integration and state tracking.",
          "decorators": []
        },
        {
          "name": "test_error_handling",
          "line": 414,
          "args": [
            "self"
          ],
          "docstring": "Test comprehensive error handling and recovery mechanisms.",
          "decorators": []
        },
        {
          "name": "test_backup_system",
          "line": 478,
          "args": [
            "self"
          ],
          "docstring": "Test backup creation and management system.",
          "decorators": []
        },
        {
          "name": "run_all_tests",
          "line": 509,
          "args": [
            "self"
          ],
          "docstring": "Execute complete test suite and return comprehensive results.\n\nReturns:\n    Dict[str, Any]: Complete test results and statistics",
          "decorators": []
        },
        {
          "name": "cleanup",
          "line": 568,
          "args": [
            "self"
          ],
          "docstring": "Clean up test environment and temporary files.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceCleanerTester",
          "line": 36,
          "bases": [],
          "docstring": "Comprehensive test suite for WorkspaceCleanerV2 functionality.\n\nThis class provides systematic testing of all cleaner features including\ninitialization, rule management, configuration system, execution, and\nintegration with the Framework0 Context system.",
          "methods": [
            {
              "name": "__init__",
              "line": 45,
              "args": [
                "self"
              ],
              "docstring": "Initialize test environment with temporary workspace."
            },
            {
              "name": "_create_test_files",
              "line": 58,
              "args": [
                "self"
              ],
              "docstring": "Create comprehensive test file structure for validation."
            },
            {
              "name": "run_test",
              "line": 143,
              "args": [
                "self",
                "test_name",
                "test_func"
              ],
              "docstring": "Execute individual test with error handling and result tracking.\n\nArgs:\n    test_name: Human-readable name of the test\n    test_func: Function to execute for the test\n    \nReturns:\n    bool: True if test passed, False if failed"
            },
            {
              "name": "test_cleaner_initialization",
              "line": 174,
              "args": [
                "self"
              ],
              "docstring": "Test WorkspaceCleanerV2 initialization and basic functionality."
            },
            {
              "name": "test_add_standard_rules",
              "line": 198,
              "args": [
                "self"
              ],
              "docstring": "Test adding and validating standard cleanup rules."
            },
            {
              "name": "test_configuration_save_load",
              "line": 234,
              "args": [
                "self"
              ],
              "docstring": "Test JSON configuration system for saving and loading rules."
            },
            {
              "name": "test_dry_run_execution",
              "line": 305,
              "args": [
                "self"
              ],
              "docstring": "Test dry-run mode execution without making actual changes."
            },
            {
              "name": "test_context_integration",
              "line": 346,
              "args": [
                "self"
              ],
              "docstring": "Test comprehensive Context system integration and state tracking."
            },
            {
              "name": "test_error_handling",
              "line": 414,
              "args": [
                "self"
              ],
              "docstring": "Test comprehensive error handling and recovery mechanisms."
            },
            {
              "name": "test_backup_system",
              "line": 478,
              "args": [
                "self"
              ],
              "docstring": "Test backup creation and management system."
            },
            {
              "name": "run_all_tests",
              "line": 509,
              "args": [
                "self"
              ],
              "docstring": "Execute complete test suite and return comprehensive results.\n\nReturns:\n    Dict[str, Any]: Complete test results and statistics"
            },
            {
              "name": "cleanup",
              "line": 568,
              "args": [
                "self"
              ],
              "docstring": "Clean up test environment and temporary files."
            }
          ]
        }
      ],
      "lines_of_code": 480,
      "complexity_score": 44,
      "last_modified": "2025-10-04T17:23:07.901833",
      "checksum": "b327d8751e5d042ca2a77a015e400772",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_analysis_framework.py": {
      "name": ".restructuring_backup/tests/test_analysis_framework.py",
      "path": ".restructuring_backup/tests/test_analysis_framework.py",
      "component_type": "test",
      "description": "Comprehensive Test Suite for Analysis Framework",
      "dependencies": [
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md"
      ],
      "exports": [
        "test_default_config_creation",
        "test_config_with_custom_values",
        "test_config_to_dict_conversion",
        "test_config_from_dict_creation",
        "test_config_from_dict_with_invalid_keys",
        "test_basic_result_creation",
        "test_result_error_handling",
        "test_result_warning_handling",
        "test_result_statistics_management",
        "test_result_pattern_management",
        "test_result_to_dict_conversion",
        "__init__",
        "_analyze_impl",
        "__init__",
        "set_registry_name",
        "_analyze_impl",
        "test_analyzer_initialization",
        "test_analyzer_with_default_config",
        "test_basic_analysis_execution",
        "test_analysis_with_statistics_calculation",
        "test_pattern_detection",
        "test_quality_assessment",
        "test_hook_system",
        "test_error_handling",
        "test_analyzer_statistics_tracking",
        "test_summarizer_initialization",
        "test_list_data_summarization",
        "test_numeric_data_analysis",
        "test_string_data_analysis",
        "test_dictionary_data_analysis",
        "test_quality_assessment",
        "test_empty_data_handling",
        "setup_method",
        "teardown_method",
        "test_analyzer_registration",
        "test_analyzer_retrieval",
        "test_analyzer_unregistration",
        "test_analyzer_chain_creation",
        "test_register_analyzer_decorator",
        "test_registry_error_handling",
        "test_concurrent_analysis",
        "test_concurrent_registry_operations",
        "test_analysis_with_context_system",
        "test_analysis_with_scriptlet_framework",
        "pre_analysis_hook",
        "post_analysis_hook",
        "worker_analysis",
        "register_worker",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "_analyze_impl",
        "TestAnalysisConfig",
        "TestAnalysisResult",
        "MockAnalyzer",
        "NamedMockAnalyzer",
        "TestBaseAnalyzerV2",
        "TestEnhancedSummarizer",
        "TestAnalysisRegistry",
        "TestThreadSafety",
        "TestIntegration",
        "FailingAnalyzer",
        "RetrievalTestAnalyzer",
        "Chain1Analyzer",
        "Chain2Analyzer",
        "DecoratedAnalyzer"
      ],
      "imports": [
        "pytest",
        "threading",
        "time",
        "json",
        "typing",
        "unittest.mock",
        "datetime",
        "src.analysis.framework",
        "src.analysis.components",
        "src.analysis.registry"
      ],
      "functions": [
        {
          "name": "test_default_config_creation",
          "line": 48,
          "args": [
            "self"
          ],
          "docstring": "Test creation of AnalysisConfig with default values.",
          "decorators": []
        },
        {
          "name": "test_config_with_custom_values",
          "line": 65,
          "args": [
            "self"
          ],
          "docstring": "Test AnalysisConfig with custom values.",
          "decorators": []
        },
        {
          "name": "test_config_to_dict_conversion",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "Test conversion of AnalysisConfig to dictionary.",
          "decorators": []
        },
        {
          "name": "test_config_from_dict_creation",
          "line": 98,
          "args": [
            "self"
          ],
          "docstring": "Test creation of AnalysisConfig from dictionary.",
          "decorators": []
        },
        {
          "name": "test_config_from_dict_with_invalid_keys",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Test AnalysisConfig creation from dict with invalid keys.",
          "decorators": []
        },
        {
          "name": "test_basic_result_creation",
          "line": 134,
          "args": [
            "self"
          ],
          "docstring": "Test creation of basic AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_error_handling",
          "line": 155,
          "args": [
            "self"
          ],
          "docstring": "Test error handling in AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_warning_handling",
          "line": 167,
          "args": [
            "self"
          ],
          "docstring": "Test warning handling in AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_statistics_management",
          "line": 181,
          "args": [
            "self"
          ],
          "docstring": "Test statistics management in AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_pattern_management",
          "line": 194,
          "args": [
            "self"
          ],
          "docstring": "Test pattern management in AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_to_dict_conversion",
          "line": 209,
          "args": [
            "self"
          ],
          "docstring": "Test AnalysisResult conversion to dictionary.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 240,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize mock analyzer.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 245,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Mock implementation that records calls.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 267,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize named mock analyzer.",
          "decorators": []
        },
        {
          "name": "set_registry_name",
          "line": 275,
          "args": [
            "cls",
            "name"
          ],
          "docstring": "Set the name to use when creating instances from registry.",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "_analyze_impl",
          "line": 279,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Mock implementation that records calls.",
          "decorators": []
        },
        {
          "name": "test_analyzer_initialization",
          "line": 299,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer initialization with configuration.",
          "decorators": []
        },
        {
          "name": "test_analyzer_with_default_config",
          "line": 313,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer initialization with default configuration.",
          "decorators": []
        },
        {
          "name": "test_basic_analysis_execution",
          "line": 322,
          "args": [
            "self"
          ],
          "docstring": "Test basic analysis execution.",
          "decorators": []
        },
        {
          "name": "test_analysis_with_statistics_calculation",
          "line": 338,
          "args": [
            "self"
          ],
          "docstring": "Test analysis with automatic statistics calculation.",
          "decorators": []
        },
        {
          "name": "test_pattern_detection",
          "line": 356,
          "args": [
            "self"
          ],
          "docstring": "Test automatic pattern detection.",
          "decorators": []
        },
        {
          "name": "test_quality_assessment",
          "line": 370,
          "args": [
            "self"
          ],
          "docstring": "Test data quality assessment.",
          "decorators": []
        },
        {
          "name": "test_hook_system",
          "line": 384,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer hook system.",
          "decorators": []
        },
        {
          "name": "test_error_handling",
          "line": 412,
          "args": [
            "self"
          ],
          "docstring": "Test error handling in analysis.",
          "decorators": []
        },
        {
          "name": "test_analyzer_statistics_tracking",
          "line": 429,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer performance statistics tracking.",
          "decorators": []
        },
        {
          "name": "test_summarizer_initialization",
          "line": 452,
          "args": [
            "self"
          ],
          "docstring": "Test EnhancedSummarizer initialization.",
          "decorators": []
        },
        {
          "name": "test_list_data_summarization",
          "line": 460,
          "args": [
            "self"
          ],
          "docstring": "Test summarization of list data.",
          "decorators": []
        },
        {
          "name": "test_numeric_data_analysis",
          "line": 480,
          "args": [
            "self"
          ],
          "docstring": "Test numeric data analysis capabilities.",
          "decorators": []
        },
        {
          "name": "test_string_data_analysis",
          "line": 500,
          "args": [
            "self"
          ],
          "docstring": "Test string data analysis capabilities.",
          "decorators": []
        },
        {
          "name": "test_dictionary_data_analysis",
          "line": 516,
          "args": [
            "self"
          ],
          "docstring": "Test dictionary data analysis capabilities.",
          "decorators": []
        },
        {
          "name": "test_quality_assessment",
          "line": 538,
          "args": [
            "self"
          ],
          "docstring": "Test data quality assessment in summarizer.",
          "decorators": []
        },
        {
          "name": "test_empty_data_handling",
          "line": 556,
          "args": [
            "self"
          ],
          "docstring": "Test handling of empty data.",
          "decorators": []
        },
        {
          "name": "setup_method",
          "line": 576,
          "args": [
            "self"
          ],
          "docstring": "Setup for each test method.",
          "decorators": []
        },
        {
          "name": "teardown_method",
          "line": 581,
          "args": [
            "self"
          ],
          "docstring": "Cleanup after each test method.",
          "decorators": []
        },
        {
          "name": "test_analyzer_registration",
          "line": 586,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer registration in registry.",
          "decorators": []
        },
        {
          "name": "test_analyzer_retrieval",
          "line": 606,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer instance retrieval from registry.",
          "decorators": []
        },
        {
          "name": "test_analyzer_unregistration",
          "line": 625,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer removal from registry.",
          "decorators": []
        },
        {
          "name": "test_analyzer_chain_creation",
          "line": 635,
          "args": [
            "self"
          ],
          "docstring": "Test creation of analyzer chains.",
          "decorators": []
        },
        {
          "name": "test_register_analyzer_decorator",
          "line": 664,
          "args": [
            "self"
          ],
          "docstring": "Test @register_analyzer decorator.",
          "decorators": []
        },
        {
          "name": "test_registry_error_handling",
          "line": 681,
          "args": [
            "self"
          ],
          "docstring": "Test error handling in registry operations.",
          "decorators": []
        },
        {
          "name": "test_concurrent_analysis",
          "line": 695,
          "args": [
            "self"
          ],
          "docstring": "Test concurrent analysis execution.",
          "decorators": []
        },
        {
          "name": "test_concurrent_registry_operations",
          "line": 731,
          "args": [
            "self"
          ],
          "docstring": "Test concurrent registry operations.",
          "decorators": []
        },
        {
          "name": "test_analysis_with_context_system",
          "line": 764,
          "args": [
            "self"
          ],
          "docstring": "Test analysis framework integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_analysis_with_scriptlet_framework",
          "line": 770,
          "args": [
            "self"
          ],
          "docstring": "Test analysis framework integration with Scriptlet framework.",
          "decorators": []
        },
        {
          "name": "pre_analysis_hook",
          "line": 389,
          "args": [
            "data",
            "config"
          ],
          "docstring": "Test pre-analysis hook.",
          "decorators": []
        },
        {
          "name": "post_analysis_hook",
          "line": 393,
          "args": [
            "result"
          ],
          "docstring": "Test post-analysis hook.",
          "decorators": []
        },
        {
          "name": "worker_analysis",
          "line": 701,
          "args": [
            "worker_id"
          ],
          "docstring": "Worker function for concurrent analysis.",
          "decorators": []
        },
        {
          "name": "register_worker",
          "line": 736,
          "args": [
            "worker_id"
          ],
          "docstring": "Worker function for concurrent registration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 416,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 610,
          "args": [
            "self",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 612,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 639,
          "args": [
            "self",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 641,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 645,
          "args": [
            "self",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 647,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 669,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestAnalysisConfig",
          "line": 45,
          "bases": [],
          "docstring": "Test suite for AnalysisConfig class.",
          "methods": [
            {
              "name": "test_default_config_creation",
              "line": 48,
              "args": [
                "self"
              ],
              "docstring": "Test creation of AnalysisConfig with default values."
            },
            {
              "name": "test_config_with_custom_values",
              "line": 65,
              "args": [
                "self"
              ],
              "docstring": "Test AnalysisConfig with custom values."
            },
            {
              "name": "test_config_to_dict_conversion",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": "Test conversion of AnalysisConfig to dictionary."
            },
            {
              "name": "test_config_from_dict_creation",
              "line": 98,
              "args": [
                "self"
              ],
              "docstring": "Test creation of AnalysisConfig from dictionary."
            },
            {
              "name": "test_config_from_dict_with_invalid_keys",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Test AnalysisConfig creation from dict with invalid keys."
            }
          ]
        },
        {
          "name": "TestAnalysisResult",
          "line": 131,
          "bases": [],
          "docstring": "Test suite for AnalysisResult class.",
          "methods": [
            {
              "name": "test_basic_result_creation",
              "line": 134,
              "args": [
                "self"
              ],
              "docstring": "Test creation of basic AnalysisResult."
            },
            {
              "name": "test_result_error_handling",
              "line": 155,
              "args": [
                "self"
              ],
              "docstring": "Test error handling in AnalysisResult."
            },
            {
              "name": "test_result_warning_handling",
              "line": 167,
              "args": [
                "self"
              ],
              "docstring": "Test warning handling in AnalysisResult."
            },
            {
              "name": "test_result_statistics_management",
              "line": 181,
              "args": [
                "self"
              ],
              "docstring": "Test statistics management in AnalysisResult."
            },
            {
              "name": "test_result_pattern_management",
              "line": 194,
              "args": [
                "self"
              ],
              "docstring": "Test pattern management in AnalysisResult."
            },
            {
              "name": "test_result_to_dict_conversion",
              "line": 209,
              "args": [
                "self"
              ],
              "docstring": "Test AnalysisResult conversion to dictionary."
            }
          ]
        },
        {
          "name": "MockAnalyzer",
          "line": 237,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Mock analyzer for testing BaseAnalyzerV2 functionality.",
          "methods": [
            {
              "name": "__init__",
              "line": 240,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize mock analyzer."
            },
            {
              "name": "_analyze_impl",
              "line": 245,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Mock implementation that records calls."
            }
          ]
        },
        {
          "name": "NamedMockAnalyzer",
          "line": 262,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Mock analyzer that accepts name in constructor for registry testing.",
          "methods": [
            {
              "name": "__init__",
              "line": 267,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize named mock analyzer."
            },
            {
              "name": "set_registry_name",
              "line": 275,
              "args": [
                "cls",
                "name"
              ],
              "docstring": "Set the name to use when creating instances from registry."
            },
            {
              "name": "_analyze_impl",
              "line": 279,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Mock implementation that records calls."
            }
          ]
        },
        {
          "name": "TestBaseAnalyzerV2",
          "line": 296,
          "bases": [],
          "docstring": "Test suite for BaseAnalyzerV2 abstract base class.",
          "methods": [
            {
              "name": "test_analyzer_initialization",
              "line": 299,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer initialization with configuration."
            },
            {
              "name": "test_analyzer_with_default_config",
              "line": 313,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer initialization with default configuration."
            },
            {
              "name": "test_basic_analysis_execution",
              "line": 322,
              "args": [
                "self"
              ],
              "docstring": "Test basic analysis execution."
            },
            {
              "name": "test_analysis_with_statistics_calculation",
              "line": 338,
              "args": [
                "self"
              ],
              "docstring": "Test analysis with automatic statistics calculation."
            },
            {
              "name": "test_pattern_detection",
              "line": 356,
              "args": [
                "self"
              ],
              "docstring": "Test automatic pattern detection."
            },
            {
              "name": "test_quality_assessment",
              "line": 370,
              "args": [
                "self"
              ],
              "docstring": "Test data quality assessment."
            },
            {
              "name": "test_hook_system",
              "line": 384,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer hook system."
            },
            {
              "name": "test_error_handling",
              "line": 412,
              "args": [
                "self"
              ],
              "docstring": "Test error handling in analysis."
            },
            {
              "name": "test_analyzer_statistics_tracking",
              "line": 429,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer performance statistics tracking."
            }
          ]
        },
        {
          "name": "TestEnhancedSummarizer",
          "line": 449,
          "bases": [],
          "docstring": "Test suite for EnhancedSummarizer analyzer.",
          "methods": [
            {
              "name": "test_summarizer_initialization",
              "line": 452,
              "args": [
                "self"
              ],
              "docstring": "Test EnhancedSummarizer initialization."
            },
            {
              "name": "test_list_data_summarization",
              "line": 460,
              "args": [
                "self"
              ],
              "docstring": "Test summarization of list data."
            },
            {
              "name": "test_numeric_data_analysis",
              "line": 480,
              "args": [
                "self"
              ],
              "docstring": "Test numeric data analysis capabilities."
            },
            {
              "name": "test_string_data_analysis",
              "line": 500,
              "args": [
                "self"
              ],
              "docstring": "Test string data analysis capabilities."
            },
            {
              "name": "test_dictionary_data_analysis",
              "line": 516,
              "args": [
                "self"
              ],
              "docstring": "Test dictionary data analysis capabilities."
            },
            {
              "name": "test_quality_assessment",
              "line": 538,
              "args": [
                "self"
              ],
              "docstring": "Test data quality assessment in summarizer."
            },
            {
              "name": "test_empty_data_handling",
              "line": 556,
              "args": [
                "self"
              ],
              "docstring": "Test handling of empty data."
            }
          ]
        },
        {
          "name": "TestAnalysisRegistry",
          "line": 573,
          "bases": [],
          "docstring": "Test suite for AnalysisRegistry system.",
          "methods": [
            {
              "name": "setup_method",
              "line": 576,
              "args": [
                "self"
              ],
              "docstring": "Setup for each test method."
            },
            {
              "name": "teardown_method",
              "line": 581,
              "args": [
                "self"
              ],
              "docstring": "Cleanup after each test method."
            },
            {
              "name": "test_analyzer_registration",
              "line": 586,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer registration in registry."
            },
            {
              "name": "test_analyzer_retrieval",
              "line": 606,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer instance retrieval from registry."
            },
            {
              "name": "test_analyzer_unregistration",
              "line": 625,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer removal from registry."
            },
            {
              "name": "test_analyzer_chain_creation",
              "line": 635,
              "args": [
                "self"
              ],
              "docstring": "Test creation of analyzer chains."
            },
            {
              "name": "test_register_analyzer_decorator",
              "line": 664,
              "args": [
                "self"
              ],
              "docstring": "Test @register_analyzer decorator."
            },
            {
              "name": "test_registry_error_handling",
              "line": 681,
              "args": [
                "self"
              ],
              "docstring": "Test error handling in registry operations."
            }
          ]
        },
        {
          "name": "TestThreadSafety",
          "line": 692,
          "bases": [],
          "docstring": "Test suite for thread safety of analysis framework.",
          "methods": [
            {
              "name": "test_concurrent_analysis",
              "line": 695,
              "args": [
                "self"
              ],
              "docstring": "Test concurrent analysis execution."
            },
            {
              "name": "test_concurrent_registry_operations",
              "line": 731,
              "args": [
                "self"
              ],
              "docstring": "Test concurrent registry operations."
            }
          ]
        },
        {
          "name": "TestIntegration",
          "line": 761,
          "bases": [],
          "docstring": "Integration tests with other framework components.",
          "methods": [
            {
              "name": "test_analysis_with_context_system",
              "line": 764,
              "args": [
                "self"
              ],
              "docstring": "Test analysis framework integration with Context system."
            },
            {
              "name": "test_analysis_with_scriptlet_framework",
              "line": 770,
              "args": [
                "self"
              ],
              "docstring": "Test analysis framework integration with Scriptlet framework."
            }
          ]
        },
        {
          "name": "FailingAnalyzer",
          "line": 415,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "_analyze_impl",
              "line": 416,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "RetrievalTestAnalyzer",
          "line": 609,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 610,
              "args": [
                "self",
                "config"
              ],
              "docstring": ""
            },
            {
              "name": "_analyze_impl",
              "line": 612,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "Chain1Analyzer",
          "line": 638,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 639,
              "args": [
                "self",
                "config"
              ],
              "docstring": ""
            },
            {
              "name": "_analyze_impl",
              "line": 641,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "Chain2Analyzer",
          "line": 644,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 645,
              "args": [
                "self",
                "config"
              ],
              "docstring": ""
            },
            {
              "name": "_analyze_impl",
              "line": 647,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "DecoratedAnalyzer",
          "line": 668,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "_analyze_impl",
              "line": 669,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 629,
      "complexity_score": 99,
      "last_modified": "2025-10-04T16:03:22.522742",
      "checksum": "79eab736d45fe53dc9a3f757e8dee278",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_async_integration.py": {
      "name": ".restructuring_backup/tests/test_async_integration.py",
      "path": ".restructuring_backup/tests/test_async_integration.py",
      "component_type": "test",
      "description": "WebSocket Async Performance Integration Tests for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/memory_bus.py",
        "orchestrator/persistence/core.py",
        "orchestrator/persistence/enhanced.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "temp_output_directory",
        "test_async_testing_module_integration",
        "test_performance_monitoring_with_async_load",
        "test_async_load_test_configuration_matrix",
        "test_async_performance_validation_criteria",
        "test_async_error_handling_and_resilience",
        "test_async_performance_comprehensive_validation",
        "get_logger",
        "validate_metric",
        "TestAsyncPerformanceIntegration"
      ],
      "imports": [
        "asyncio",
        "time",
        "json",
        "pathlib",
        "typing",
        "pytest",
        "tests.test_websocket_performance",
        "tests.test_realtime_performance",
        "tests.test_async_load_framework",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "temp_output_directory",
          "line": 48,
          "args": [
            "self",
            "tmp_path"
          ],
          "docstring": "Create temporary directory for test outputs.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_async_testing_module_integration",
          "line": 54,
          "args": [
            "self"
          ],
          "docstring": "Test that all async testing modules can be imported and initialized.",
          "decorators": []
        },
        {
          "name": "test_performance_monitoring_with_async_load",
          "line": 76,
          "args": [
            "self",
            "temp_output_directory"
          ],
          "docstring": "Test real-time performance monitoring during async load testing.",
          "decorators": []
        },
        {
          "name": "test_async_load_test_configuration_matrix",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Test various async load test configurations.",
          "decorators": []
        },
        {
          "name": "test_async_performance_validation_criteria",
          "line": 240,
          "args": [
            "self"
          ],
          "docstring": "Test async performance validation criteria and thresholds.",
          "decorators": []
        },
        {
          "name": "test_async_error_handling_and_resilience",
          "line": 299,
          "args": [
            "self"
          ],
          "docstring": "Test error handling and resilience in async performance testing.",
          "decorators": []
        },
        {
          "name": "test_async_performance_comprehensive_validation",
          "line": 340,
          "args": [
            "self",
            "temp_output_directory"
          ],
          "docstring": "Comprehensive validation test for all async performance capabilities.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 31,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "validate_metric",
          "line": 262,
          "args": [
            "value",
            "metric_name"
          ],
          "docstring": "Validate metric against criteria.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestAsyncPerformanceIntegration",
          "line": 44,
          "bases": [],
          "docstring": "Integration tests for all async performance testing capabilities.",
          "methods": [
            {
              "name": "temp_output_directory",
              "line": 48,
              "args": [
                "self",
                "tmp_path"
              ],
              "docstring": "Create temporary directory for test outputs."
            },
            {
              "name": "test_async_testing_module_integration",
              "line": 54,
              "args": [
                "self"
              ],
              "docstring": "Test that all async testing modules can be imported and initialized."
            },
            {
              "name": "test_performance_monitoring_with_async_load",
              "line": 76,
              "args": [
                "self",
                "temp_output_directory"
              ],
              "docstring": "Test real-time performance monitoring during async load testing."
            },
            {
              "name": "test_async_load_test_configuration_matrix",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Test various async load test configurations."
            },
            {
              "name": "test_async_performance_validation_criteria",
              "line": 240,
              "args": [
                "self"
              ],
              "docstring": "Test async performance validation criteria and thresholds."
            },
            {
              "name": "test_async_error_handling_and_resilience",
              "line": 299,
              "args": [
                "self"
              ],
              "docstring": "Test error handling and resilience in async performance testing."
            },
            {
              "name": "test_async_performance_comprehensive_validation",
              "line": 340,
              "args": [
                "self",
                "temp_output_directory"
              ],
              "docstring": "Comprehensive validation test for all async performance capabilities."
            }
          ]
        }
      ],
      "lines_of_code": 470,
      "complexity_score": 50,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "e8eb00dba9bbff10af87a08c121b5610",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_async_load_framework.py": {
      "name": ".restructuring_backup/tests/test_async_load_framework.py",
      "path": ".restructuring_backup/tests/test_async_load_framework.py",
      "component_type": "test",
      "description": "Async Load Testing Framework for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "__init__",
        "generate_async_load_report",
        "test_async_load_config_creation",
        "test_websocket_pool_management",
        "test_async_load_tester_initialization",
        "test_load_test_result_structure",
        "test_load_report_generation",
        "get_logger",
        "AsyncLoadTestConfig",
        "AsyncLoadTestResult",
        "AsyncWebSocketPool",
        "AsyncLoadTester",
        "TestAsyncLoadTestFramework"
      ],
      "imports": [
        "asyncio",
        "time",
        "json",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "statistics",
        "websockets",
        "aiohttp",
        "src.core.logger",
        "pytest",
        "logging"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 89,
          "args": [
            "self",
            "server_url",
            "pool_size"
          ],
          "docstring": "Initialize WebSocket connection pool.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 183,
          "args": [
            "self",
            "server_host",
            "server_port"
          ],
          "docstring": "Initialize async load tester.",
          "decorators": []
        },
        {
          "name": "generate_async_load_report",
          "line": 528,
          "args": [
            "self",
            "results"
          ],
          "docstring": "Generate comprehensive async load testing report.",
          "decorators": []
        },
        {
          "name": "test_async_load_config_creation",
          "line": 638,
          "args": [
            "self"
          ],
          "docstring": "Test async load test configuration creation.",
          "decorators": []
        },
        {
          "name": "test_websocket_pool_management",
          "line": 664,
          "args": [
            "self"
          ],
          "docstring": "Test WebSocket connection pool management.",
          "decorators": []
        },
        {
          "name": "test_async_load_tester_initialization",
          "line": 681,
          "args": [
            "self"
          ],
          "docstring": "Test async load tester initialization.",
          "decorators": []
        },
        {
          "name": "test_load_test_result_structure",
          "line": 699,
          "args": [
            "self"
          ],
          "docstring": "Test load test result data structure.",
          "decorators": []
        },
        {
          "name": "test_load_report_generation",
          "line": 737,
          "args": [
            "self"
          ],
          "docstring": "Test async load test report generation.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 34,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AsyncLoadTestConfig",
          "line": 48,
          "bases": [],
          "docstring": "Configuration for async load testing scenarios.",
          "methods": []
        },
        {
          "name": "AsyncLoadTestResult",
          "line": 65,
          "bases": [],
          "docstring": "Results from async load testing execution.",
          "methods": []
        },
        {
          "name": "AsyncWebSocketPool",
          "line": 86,
          "bases": [],
          "docstring": "Connection pool for managing WebSocket connections.",
          "methods": [
            {
              "name": "__init__",
              "line": 89,
              "args": [
                "self",
                "server_url",
                "pool_size"
              ],
              "docstring": "Initialize WebSocket connection pool."
            }
          ]
        },
        {
          "name": "AsyncLoadTester",
          "line": 180,
          "bases": [],
          "docstring": "Async load testing framework for comprehensive performance validation.",
          "methods": [
            {
              "name": "__init__",
              "line": 183,
              "args": [
                "self",
                "server_host",
                "server_port"
              ],
              "docstring": "Initialize async load tester."
            },
            {
              "name": "generate_async_load_report",
              "line": 528,
              "args": [
                "self",
                "results"
              ],
              "docstring": "Generate comprehensive async load testing report."
            }
          ]
        },
        {
          "name": "TestAsyncLoadTestFramework",
          "line": 635,
          "bases": [],
          "docstring": "Test class for async load testing functionality.",
          "methods": [
            {
              "name": "test_async_load_config_creation",
              "line": 638,
              "args": [
                "self"
              ],
              "docstring": "Test async load test configuration creation."
            },
            {
              "name": "test_websocket_pool_management",
              "line": 664,
              "args": [
                "self"
              ],
              "docstring": "Test WebSocket connection pool management."
            },
            {
              "name": "test_async_load_tester_initialization",
              "line": 681,
              "args": [
                "self"
              ],
              "docstring": "Test async load tester initialization."
            },
            {
              "name": "test_load_test_result_structure",
              "line": 699,
              "args": [
                "self"
              ],
              "docstring": "Test load test result data structure."
            },
            {
              "name": "test_load_report_generation",
              "line": 737,
              "args": [
                "self"
              ],
              "docstring": "Test async load test report generation."
            }
          ]
        }
      ],
      "lines_of_code": 742,
      "complexity_score": 72,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "dc82b323be3af54b939d28c432a66774",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_basic_performance.py": {
      "name": ".restructuring_backup/tests/test_basic_performance.py",
      "path": ".restructuring_backup/tests/test_basic_performance.py",
      "component_type": "test",
      "description": "Basic Performance Testing for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "test_basic_performance",
        "test_file_operations_performance",
        "test_memory_usage_estimation",
        "__init__",
        "measure_execution_time",
        "simulate_concurrent_operations",
        "analyze_performance_results",
        "simple_computation",
        "mock_operation",
        "write_operation",
        "read_operation",
        "file_operation",
        "get_logger",
        "worker",
        "BasicPerformanceTest"
      ],
      "imports": [
        "time",
        "os",
        "threading",
        "pathlib",
        "src.core.logger",
        "sys",
        "logging",
        "json",
        "json",
        "json",
        "tempfile",
        "gc",
        "gc"
      ],
      "functions": [
        {
          "name": "test_basic_performance",
          "line": 137,
          "args": [],
          "docstring": "Test basic performance measurement capabilities.",
          "decorators": []
        },
        {
          "name": "test_file_operations_performance",
          "line": 186,
          "args": [],
          "docstring": "Test file operations performance.",
          "decorators": []
        },
        {
          "name": "test_memory_usage_estimation",
          "line": 256,
          "args": [],
          "docstring": "Test memory usage estimation.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 37,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "measure_execution_time",
          "line": 40,
          "args": [
            "self",
            "func"
          ],
          "docstring": "Measure execution time of a function.",
          "decorators": []
        },
        {
          "name": "simulate_concurrent_operations",
          "line": 49,
          "args": [
            "self",
            "operation_func",
            "num_threads",
            "ops_per_thread"
          ],
          "docstring": "Simulate concurrent operations without requiring a server.",
          "decorators": []
        },
        {
          "name": "analyze_performance_results",
          "line": 94,
          "args": [
            "self",
            "results"
          ],
          "docstring": "Analyze performance test results.",
          "decorators": []
        },
        {
          "name": "simple_computation",
          "line": 145,
          "args": [],
          "docstring": "Simple computation for testing.",
          "decorators": []
        },
        {
          "name": "mock_operation",
          "line": 159,
          "args": [],
          "docstring": "Mock operation for concurrent testing.",
          "decorators": []
        },
        {
          "name": "write_operation",
          "line": 198,
          "args": [],
          "docstring": "Test file write operation.",
          "decorators": []
        },
        {
          "name": "read_operation",
          "line": 210,
          "args": [],
          "docstring": "Test file read operation.",
          "decorators": []
        },
        {
          "name": "file_operation",
          "line": 222,
          "args": [],
          "docstring": "Concurrent file operation.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 21,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "worker",
          "line": 56,
          "args": [],
          "docstring": "Worker thread function.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BasicPerformanceTest",
          "line": 34,
          "bases": [],
          "docstring": "Basic performance testing utilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 37,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "measure_execution_time",
              "line": 40,
              "args": [
                "self",
                "func"
              ],
              "docstring": "Measure execution time of a function."
            },
            {
              "name": "simulate_concurrent_operations",
              "line": 49,
              "args": [
                "self",
                "operation_func",
                "num_threads",
                "ops_per_thread"
              ],
              "docstring": "Simulate concurrent operations without requiring a server."
            },
            {
              "name": "analyze_performance_results",
              "line": 94,
              "args": [
                "self",
                "results"
              ],
              "docstring": "Analyze performance test results."
            }
          ]
        }
      ],
      "lines_of_code": 244,
      "complexity_score": 37,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "a39dd90f38f44a609fc3b28e28e7821e",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_core_functionality.py": {
      "name": ".restructuring_backup/tests/test_core_functionality.py",
      "path": ".restructuring_backup/tests/test_core_functionality.py",
      "component_type": "test",
      "description": "Core functionality tests for Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "temp_directory",
        "mock_context",
        "test_server",
        "__init__",
        "set",
        "get",
        "delete",
        "to_dict",
        "get_history",
        "__init__",
        "dump_context",
        "test_context_set_get",
        "test_context_delete",
        "test_context_to_dict",
        "test_context_history",
        "test_json_dump",
        "test_csv_dump",
        "test_txt_dump",
        "test_pretty_dump",
        "test_server_initialization",
        "test_dump_directory_creation",
        "MockContext",
        "MockEnhancedContextServer",
        "TestContextOperations",
        "TestFileDumping",
        "TestServerConfiguration"
      ],
      "imports": [
        "json",
        "pytest",
        "tempfile",
        "pathlib",
        "typing"
      ],
      "functions": [
        {
          "name": "temp_directory",
          "line": 152,
          "args": [],
          "docstring": "Fixture providing a temporary directory for testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "mock_context",
          "line": 159,
          "args": [],
          "docstring": "Fixture providing a mock context with test data.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_server",
          "line": 170,
          "args": [
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Fixture providing a test server instance.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "__init__",
          "line": 18,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 22,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "Set a key-value pair in the context.",
          "decorators": []
        },
        {
          "name": "get",
          "line": 37,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Get a value from the context.",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 41,
          "args": [
            "self",
            "key",
            "who"
          ],
          "docstring": "Delete a key from the context.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 57,
          "args": [
            "self"
          ],
          "docstring": "Convert context to dictionary.",
          "decorators": []
        },
        {
          "name": "get_history",
          "line": 61,
          "args": [
            "self"
          ],
          "docstring": "Get the change history.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 69,
          "args": [
            "self",
            "host",
            "port",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "dump_context",
          "line": 77,
          "args": [
            "self",
            "format_type",
            "filename",
            "include_history",
            "who"
          ],
          "docstring": "Mock dump context functionality.",
          "decorators": []
        },
        {
          "name": "test_context_set_get",
          "line": 181,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test basic context set and get operations.",
          "decorators": []
        },
        {
          "name": "test_context_delete",
          "line": 192,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test context delete operations.",
          "decorators": []
        },
        {
          "name": "test_context_to_dict",
          "line": 203,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test context dictionary conversion.",
          "decorators": []
        },
        {
          "name": "test_context_history",
          "line": 214,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test context change history tracking.",
          "decorators": []
        },
        {
          "name": "test_json_dump",
          "line": 240,
          "args": [
            "self",
            "test_server"
          ],
          "docstring": "Test JSON format dumping.",
          "decorators": []
        },
        {
          "name": "test_csv_dump",
          "line": 267,
          "args": [
            "self",
            "test_server"
          ],
          "docstring": "Test CSV format dumping.",
          "decorators": []
        },
        {
          "name": "test_txt_dump",
          "line": 291,
          "args": [
            "self",
            "test_server"
          ],
          "docstring": "Test TXT format dumping.",
          "decorators": []
        },
        {
          "name": "test_pretty_dump",
          "line": 315,
          "args": [
            "self",
            "test_server"
          ],
          "docstring": "Test Pretty format dumping.",
          "decorators": []
        },
        {
          "name": "test_server_initialization",
          "line": 343,
          "args": [
            "self"
          ],
          "docstring": "Test server initialization with different configurations.",
          "decorators": []
        },
        {
          "name": "test_dump_directory_creation",
          "line": 357,
          "args": [
            "self",
            "temp_directory"
          ],
          "docstring": "Test dump directory setup.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MockContext",
          "line": 15,
          "bases": [],
          "docstring": "Mock Context class for testing.",
          "methods": [
            {
              "name": "__init__",
              "line": 18,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 22,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": "Set a key-value pair in the context."
            },
            {
              "name": "get",
              "line": 37,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Get a value from the context."
            },
            {
              "name": "delete",
              "line": 41,
              "args": [
                "self",
                "key",
                "who"
              ],
              "docstring": "Delete a key from the context."
            },
            {
              "name": "to_dict",
              "line": 57,
              "args": [
                "self"
              ],
              "docstring": "Convert context to dictionary."
            },
            {
              "name": "get_history",
              "line": 61,
              "args": [
                "self"
              ],
              "docstring": "Get the change history."
            }
          ]
        },
        {
          "name": "MockEnhancedContextServer",
          "line": 66,
          "bases": [],
          "docstring": "Mock Enhanced Context Server for testing.",
          "methods": [
            {
              "name": "__init__",
              "line": 69,
              "args": [
                "self",
                "host",
                "port",
                "debug"
              ],
              "docstring": ""
            },
            {
              "name": "dump_context",
              "line": 77,
              "args": [
                "self",
                "format_type",
                "filename",
                "include_history",
                "who"
              ],
              "docstring": "Mock dump context functionality."
            }
          ]
        },
        {
          "name": "TestContextOperations",
          "line": 178,
          "bases": [],
          "docstring": "Test suite for basic context operations.",
          "methods": [
            {
              "name": "test_context_set_get",
              "line": 181,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test basic context set and get operations."
            },
            {
              "name": "test_context_delete",
              "line": 192,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test context delete operations."
            },
            {
              "name": "test_context_to_dict",
              "line": 203,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test context dictionary conversion."
            },
            {
              "name": "test_context_history",
              "line": 214,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test context change history tracking."
            }
          ]
        },
        {
          "name": "TestFileDumping",
          "line": 237,
          "bases": [],
          "docstring": "Test suite for file dumping functionality.",
          "methods": [
            {
              "name": "test_json_dump",
              "line": 240,
              "args": [
                "self",
                "test_server"
              ],
              "docstring": "Test JSON format dumping."
            },
            {
              "name": "test_csv_dump",
              "line": 267,
              "args": [
                "self",
                "test_server"
              ],
              "docstring": "Test CSV format dumping."
            },
            {
              "name": "test_txt_dump",
              "line": 291,
              "args": [
                "self",
                "test_server"
              ],
              "docstring": "Test TXT format dumping."
            },
            {
              "name": "test_pretty_dump",
              "line": 315,
              "args": [
                "self",
                "test_server"
              ],
              "docstring": "Test Pretty format dumping."
            }
          ]
        },
        {
          "name": "TestServerConfiguration",
          "line": 340,
          "bases": [],
          "docstring": "Test suite for server configuration and initialization.",
          "methods": [
            {
              "name": "test_server_initialization",
              "line": 343,
              "args": [
                "self"
              ],
              "docstring": "Test server initialization with different configurations."
            },
            {
              "name": "test_dump_directory_creation",
              "line": 357,
              "args": [
                "self",
                "temp_directory"
              ],
              "docstring": "Test dump directory setup."
            }
          ]
        }
      ],
      "lines_of_code": 302,
      "complexity_score": 49,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "53f5e655593cd17ee2972a8d66b84396",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_delta_compression.py": {
      "name": ".restructuring_backup/tests/test_delta_compression.py",
      "path": ".restructuring_backup/tests/test_delta_compression.py",
      "component_type": "test",
      "description": "Comprehensive test suite for Delta Compression Module.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py"
      ],
      "exports": [
        "test_delta_compression_error",
        "test_initialization",
        "test_full_initialization",
        "test_repr",
        "test_to_dict_and_from_dict",
        "compressor",
        "test_states",
        "test_init_with_parameters",
        "test_calculate_delta_dict",
        "test_dict_delta_with_unchanged",
        "test_apply_delta",
        "test_create_delta_record",
        "test_empty_delta_record",
        "test_merge_deltas",
        "test_empty_merge",
        "test_serialize_deserialize",
        "chain",
        "test_states",
        "test_initial_state",
        "test_add_state",
        "test_get_state_at_index",
        "test_rebaseline",
        "test_optimization_with_rebase",
        "test_clear_chain",
        "test_extract_keys_from_delta",
        "TestDeltaRecord",
        "TestDeltaCompressor",
        "TestDeltaChain",
        "TestUtilityFunctions"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "tempfile",
        "pytest",
        "typing",
        "unittest",
        "orchestrator.persistence.delta",
        "orchestrator.persistence.core"
      ],
      "functions": [
        {
          "name": "test_delta_compression_error",
          "line": 456,
          "args": [],
          "docstring": "Test that DeltaCompressionError can be properly raised and caught.",
          "decorators": []
        },
        {
          "name": "test_initialization",
          "line": 38,
          "args": [
            "self"
          ],
          "docstring": "Test initialization of delta record.",
          "decorators": []
        },
        {
          "name": "test_full_initialization",
          "line": 55,
          "args": [
            "self"
          ],
          "docstring": "Test initialization with all parameters.",
          "decorators": []
        },
        {
          "name": "test_repr",
          "line": 75,
          "args": [
            "self"
          ],
          "docstring": "Test string representation.",
          "decorators": []
        },
        {
          "name": "test_to_dict_and_from_dict",
          "line": 87,
          "args": [
            "self"
          ],
          "docstring": "Test conversion to and from dictionary.",
          "decorators": []
        },
        {
          "name": "compressor",
          "line": 120,
          "args": [
            "self"
          ],
          "docstring": "Create a compressor with default settings.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_states",
          "line": 125,
          "args": [
            "self"
          ],
          "docstring": "Create sample test states.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_init_with_parameters",
          "line": 144,
          "args": [
            "self"
          ],
          "docstring": "Test initialization with custom parameters.",
          "decorators": []
        },
        {
          "name": "test_calculate_delta_dict",
          "line": 156,
          "args": [
            "self",
            "compressor",
            "test_states"
          ],
          "docstring": "Test dictionary delta calculation.",
          "decorators": []
        },
        {
          "name": "test_dict_delta_with_unchanged",
          "line": 183,
          "args": [
            "self",
            "test_states"
          ],
          "docstring": "Test dictionary delta with unchanged values included.",
          "decorators": []
        },
        {
          "name": "test_apply_delta",
          "line": 201,
          "args": [
            "self",
            "compressor",
            "test_states"
          ],
          "docstring": "Test applying delta to recreate state.",
          "decorators": []
        },
        {
          "name": "test_create_delta_record",
          "line": 214,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test creating a delta record.",
          "decorators": []
        },
        {
          "name": "test_empty_delta_record",
          "line": 228,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test creating an empty delta record.",
          "decorators": []
        },
        {
          "name": "test_merge_deltas",
          "line": 236,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test merging multiple deltas.",
          "decorators": []
        },
        {
          "name": "test_empty_merge",
          "line": 267,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test merging empty list of deltas.",
          "decorators": []
        },
        {
          "name": "test_serialize_deserialize",
          "line": 272,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test serializing and deserializing delta records.",
          "decorators": []
        },
        {
          "name": "chain",
          "line": 298,
          "args": [
            "self"
          ],
          "docstring": "Create delta chain with small max chain length for testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_states",
          "line": 303,
          "args": [
            "self"
          ],
          "docstring": "Create sample states for testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_initial_state",
          "line": 310,
          "args": [
            "self",
            "chain"
          ],
          "docstring": "Test initial state of delta chain.",
          "decorators": []
        },
        {
          "name": "test_add_state",
          "line": 318,
          "args": [
            "self",
            "chain",
            "test_states"
          ],
          "docstring": "Test adding a state to the chain.",
          "decorators": []
        },
        {
          "name": "test_get_state_at_index",
          "line": 337,
          "args": [
            "self",
            "chain",
            "test_states"
          ],
          "docstring": "Test retrieving state at specific index.",
          "decorators": []
        },
        {
          "name": "test_rebaseline",
          "line": 366,
          "args": [
            "self",
            "chain",
            "test_states"
          ],
          "docstring": "Test rebaselining the chain.",
          "decorators": []
        },
        {
          "name": "test_optimization_with_rebase",
          "line": 395,
          "args": [
            "self"
          ],
          "docstring": "Test chain optimization with rebaseline enabled.",
          "decorators": []
        },
        {
          "name": "test_clear_chain",
          "line": 413,
          "args": [
            "self",
            "chain",
            "test_states"
          ],
          "docstring": "Test clearing the chain.",
          "decorators": []
        },
        {
          "name": "test_extract_keys_from_delta",
          "line": 436,
          "args": [
            "self"
          ],
          "docstring": "Test extracting keys from delta record.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestDeltaRecord",
          "line": 35,
          "bases": [],
          "docstring": "Test cases for DeltaRecord class.",
          "methods": [
            {
              "name": "test_initialization",
              "line": 38,
              "args": [
                "self"
              ],
              "docstring": "Test initialization of delta record."
            },
            {
              "name": "test_full_initialization",
              "line": 55,
              "args": [
                "self"
              ],
              "docstring": "Test initialization with all parameters."
            },
            {
              "name": "test_repr",
              "line": 75,
              "args": [
                "self"
              ],
              "docstring": "Test string representation."
            },
            {
              "name": "test_to_dict_and_from_dict",
              "line": 87,
              "args": [
                "self"
              ],
              "docstring": "Test conversion to and from dictionary."
            }
          ]
        },
        {
          "name": "TestDeltaCompressor",
          "line": 116,
          "bases": [],
          "docstring": "Test cases for DeltaCompressor class.",
          "methods": [
            {
              "name": "compressor",
              "line": 120,
              "args": [
                "self"
              ],
              "docstring": "Create a compressor with default settings."
            },
            {
              "name": "test_states",
              "line": 125,
              "args": [
                "self"
              ],
              "docstring": "Create sample test states."
            },
            {
              "name": "test_init_with_parameters",
              "line": 144,
              "args": [
                "self"
              ],
              "docstring": "Test initialization with custom parameters."
            },
            {
              "name": "test_calculate_delta_dict",
              "line": 156,
              "args": [
                "self",
                "compressor",
                "test_states"
              ],
              "docstring": "Test dictionary delta calculation."
            },
            {
              "name": "test_dict_delta_with_unchanged",
              "line": 183,
              "args": [
                "self",
                "test_states"
              ],
              "docstring": "Test dictionary delta with unchanged values included."
            },
            {
              "name": "test_apply_delta",
              "line": 201,
              "args": [
                "self",
                "compressor",
                "test_states"
              ],
              "docstring": "Test applying delta to recreate state."
            },
            {
              "name": "test_create_delta_record",
              "line": 214,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test creating a delta record."
            },
            {
              "name": "test_empty_delta_record",
              "line": 228,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test creating an empty delta record."
            },
            {
              "name": "test_merge_deltas",
              "line": 236,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test merging multiple deltas."
            },
            {
              "name": "test_empty_merge",
              "line": 267,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test merging empty list of deltas."
            },
            {
              "name": "test_serialize_deserialize",
              "line": 272,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test serializing and deserializing delta records."
            }
          ]
        },
        {
          "name": "TestDeltaChain",
          "line": 294,
          "bases": [],
          "docstring": "Test cases for DeltaChain class.",
          "methods": [
            {
              "name": "chain",
              "line": 298,
              "args": [
                "self"
              ],
              "docstring": "Create delta chain with small max chain length for testing."
            },
            {
              "name": "test_states",
              "line": 303,
              "args": [
                "self"
              ],
              "docstring": "Create sample states for testing."
            },
            {
              "name": "test_initial_state",
              "line": 310,
              "args": [
                "self",
                "chain"
              ],
              "docstring": "Test initial state of delta chain."
            },
            {
              "name": "test_add_state",
              "line": 318,
              "args": [
                "self",
                "chain",
                "test_states"
              ],
              "docstring": "Test adding a state to the chain."
            },
            {
              "name": "test_get_state_at_index",
              "line": 337,
              "args": [
                "self",
                "chain",
                "test_states"
              ],
              "docstring": "Test retrieving state at specific index."
            },
            {
              "name": "test_rebaseline",
              "line": 366,
              "args": [
                "self",
                "chain",
                "test_states"
              ],
              "docstring": "Test rebaselining the chain."
            },
            {
              "name": "test_optimization_with_rebase",
              "line": 395,
              "args": [
                "self"
              ],
              "docstring": "Test chain optimization with rebaseline enabled."
            },
            {
              "name": "test_clear_chain",
              "line": 413,
              "args": [
                "self",
                "chain",
                "test_states"
              ],
              "docstring": "Test clearing the chain."
            }
          ]
        },
        {
          "name": "TestUtilityFunctions",
          "line": 433,
          "bases": [],
          "docstring": "Test cases for utility functions.",
          "methods": [
            {
              "name": "test_extract_keys_from_delta",
              "line": 436,
              "args": [
                "self"
              ],
              "docstring": "Test extracting keys from delta record."
            }
          ]
        }
      ],
      "lines_of_code": 370,
      "complexity_score": 36,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "8586bd0794924b1da82227b99278f22d",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_enhanced_context_server.py": {
      "name": ".restructuring_backup/tests/test_enhanced_context_server.py",
      "path": ".restructuring_backup/tests/test_enhanced_context_server.py",
      "component_type": "test",
      "description": "Comprehensive test suite for Enhanced Context Server functionality.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "temp_directory",
        "mock_context",
        "test_server_config",
        "test_server_initialization",
        "test_rest_api_post_context_endpoint",
        "test_rest_api_list_all_endpoint",
        "test_rest_api_history_endpoint",
        "test_websocket_connection_management",
        "test_websocket_context_updates",
        "test_file_dump_json_format",
        "test_file_dump_pretty_format",
        "test_file_dump_csv_format",
        "test_file_dump_txt_format",
        "test_file_dump_list_endpoint",
        "test_file_dump_download_endpoint",
        "test_file_dump_error_handling",
        "running_server",
        "test_sync_client_basic_operations",
        "test_sync_client_dump_operations",
        "test_client_error_handling",
        "test_shell_script_basic_commands",
        "test_shell_script_dump_commands",
        "test_shell_script_error_handling",
        "get_logger",
        "__init__",
        "__init__",
        "set",
        "get",
        "to_dict",
        "TestEnhancedContextServer",
        "TestPythonClientLibraries",
        "TestShellScriptIntegration",
        "EnhancedContextServer",
        "Context"
      ],
      "imports": [
        "os",
        "json",
        "tempfile",
        "asyncio",
        "pytest",
        "requests",
        "socketio",
        "pathlib",
        "typing",
        "unittest.mock",
        "threading",
        "time",
        "server.enhanced_context_server",
        "src.core.logger",
        "sys",
        "logging",
        "threading",
        "src.context_client",
        "src.context_client",
        "unittest.mock",
        "src.context_client",
        "unittest.mock",
        "unittest.mock",
        "src.context_client",
        "unittest.mock",
        "unittest.mock",
        "src.context_client",
        "unittest.mock",
        "unittest.mock",
        "subprocess",
        "unittest.mock",
        "subprocess",
        "unittest.mock",
        "subprocess",
        "csv",
        "unittest.mock",
        "requests"
      ],
      "functions": [
        {
          "name": "temp_directory",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "Create temporary directory for test file operations.\n\nYields:\n    Path: Temporary directory path for safe file testing",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "mock_context",
          "line": 100,
          "args": [
            "self"
          ],
          "docstring": "Create mock Context instance with test data for server testing.\n\nReturns:\n    Context: Pre-populated context instance for consistent testing",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_server_config",
          "line": 137,
          "args": [
            "self"
          ],
          "docstring": "Generate test server configuration with safe defaults.\n\nReturns:\n    Dict[str, Any]: Server configuration dictionary for testing",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_server_initialization",
          "line": 153,
          "args": [
            "self",
            "test_server_config",
            "temp_directory"
          ],
          "docstring": "Test Enhanced Context Server initialization with various configurations.\n\nArgs:\n    test_server_config: Server configuration for testing\n    temp_directory: Temporary directory for file operations",
          "decorators": []
        },
        {
          "name": "test_rest_api_post_context_endpoint",
          "line": 173,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test REST API POST /ctx endpoint for setting context values with validation.\n\nArgs:\n    mock_context: Pre-populated context for testing baseline state",
          "decorators": []
        },
        {
          "name": "test_rest_api_list_all_endpoint",
          "line": 277,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test REST API GET /ctx/all endpoint for retrieving complete context state.\n\nArgs:\n    mock_context: Pre-populated context with known test data",
          "decorators": []
        },
        {
          "name": "test_rest_api_history_endpoint",
          "line": 320,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test REST API GET /ctx/history endpoint for retrieving change history.\n\nArgs:\n    mock_context: Context instance with change history",
          "decorators": []
        },
        {
          "name": "test_websocket_connection_management",
          "line": 386,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test WebSocket connection establishment, client tracking, and disconnection handling.\n\nArgs:\n    mock_context: Context instance for WebSocket testing",
          "decorators": []
        },
        {
          "name": "test_websocket_context_updates",
          "line": 455,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test WebSocket-based context updates and real-time broadcasting functionality.\n\nArgs:\n    mock_context: Context instance for update testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_json_format",
          "line": 522,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test context dumping in JSON format with complete validation.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_pretty_format",
          "line": 611,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test context dumping in human-readable pretty format.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_csv_format",
          "line": 674,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test context dumping in CSV format for spreadsheet compatibility.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_txt_format",
          "line": 742,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test context dumping in plain text format for simple parsing.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_list_endpoint",
          "line": 812,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test dump file listing functionality and metadata retrieval.\n\nArgs:\n    mock_context: Context instance for creating test dumps\n    temp_directory: Temporary directory with test dump files",
          "decorators": []
        },
        {
          "name": "test_file_dump_download_endpoint",
          "line": 900,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test dump file download functionality with different formats.\n\nArgs:\n    mock_context: Context instance for creating test dump\n    temp_directory: Temporary directory for test files",
          "decorators": []
        },
        {
          "name": "test_file_dump_error_handling",
          "line": 998,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test error handling in dump functionality with invalid requests.\n\nArgs:\n    mock_context: Context instance for testing\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "running_server",
          "line": 1066,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Fixture providing a running server instance for client testing.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for server files\n    \nYields:\n    tuple: (server_instance, host, port) for client connections",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_sync_client_basic_operations",
          "line": 1098,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test synchronous Python client basic operations (get, set, delete).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "test_sync_client_dump_operations",
          "line": 1166,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test synchronous client dump operations (dump, list, download).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "test_client_error_handling",
          "line": 1419,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test client library error handling for various failure scenarios.\n\nArgs:\n    mock_context: Context instance for testing",
          "decorators": []
        },
        {
          "name": "test_shell_script_basic_commands",
          "line": 1487,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test basic shell script commands (get, set, list, status).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "test_shell_script_dump_commands",
          "line": 1563,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test shell script dump commands and file operations.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "test_shell_script_error_handling",
          "line": 1638,
          "args": [
            "self"
          ],
          "docstring": "Test shell script error handling for various failure scenarios.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 62,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 37,
          "args": [
            "self",
            "host",
            "port",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 43,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 46,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 49,
          "args": [
            "self",
            "key"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 52,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestEnhancedContextServer",
          "line": 71,
          "bases": [],
          "docstring": "Comprehensive test suite for Enhanced Context Server functionality.\n\nThis test class covers all aspects of the Enhanced Context Server including:\n- Server initialization and configuration validation\n- REST API endpoint functionality and error handling\n- WebSocket connection management and real-time updates\n- File dumping capabilities with multiple format support\n- Cross-client integration scenarios and compatibility\n- Performance characteristics under various load conditions\n- Security and access control mechanisms",
          "methods": [
            {
              "name": "temp_directory",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": "Create temporary directory for test file operations.\n\nYields:\n    Path: Temporary directory path for safe file testing"
            },
            {
              "name": "mock_context",
              "line": 100,
              "args": [
                "self"
              ],
              "docstring": "Create mock Context instance with test data for server testing.\n\nReturns:\n    Context: Pre-populated context instance for consistent testing"
            },
            {
              "name": "test_server_config",
              "line": 137,
              "args": [
                "self"
              ],
              "docstring": "Generate test server configuration with safe defaults.\n\nReturns:\n    Dict[str, Any]: Server configuration dictionary for testing"
            },
            {
              "name": "test_server_initialization",
              "line": 153,
              "args": [
                "self",
                "test_server_config",
                "temp_directory"
              ],
              "docstring": "Test Enhanced Context Server initialization with various configurations.\n\nArgs:\n    test_server_config: Server configuration for testing\n    temp_directory: Temporary directory for file operations"
            },
            {
              "name": "test_rest_api_post_context_endpoint",
              "line": 173,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test REST API POST /ctx endpoint for setting context values with validation.\n\nArgs:\n    mock_context: Pre-populated context for testing baseline state"
            },
            {
              "name": "test_rest_api_list_all_endpoint",
              "line": 277,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test REST API GET /ctx/all endpoint for retrieving complete context state.\n\nArgs:\n    mock_context: Pre-populated context with known test data"
            },
            {
              "name": "test_rest_api_history_endpoint",
              "line": 320,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test REST API GET /ctx/history endpoint for retrieving change history.\n\nArgs:\n    mock_context: Context instance with change history"
            },
            {
              "name": "test_websocket_connection_management",
              "line": 386,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test WebSocket connection establishment, client tracking, and disconnection handling.\n\nArgs:\n    mock_context: Context instance for WebSocket testing"
            },
            {
              "name": "test_websocket_context_updates",
              "line": 455,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test WebSocket-based context updates and real-time broadcasting functionality.\n\nArgs:\n    mock_context: Context instance for update testing"
            },
            {
              "name": "test_file_dump_json_format",
              "line": 522,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test context dumping in JSON format with complete validation.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing"
            },
            {
              "name": "test_file_dump_pretty_format",
              "line": 611,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test context dumping in human-readable pretty format.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing"
            },
            {
              "name": "test_file_dump_csv_format",
              "line": 674,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test context dumping in CSV format for spreadsheet compatibility.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing"
            },
            {
              "name": "test_file_dump_txt_format",
              "line": 742,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test context dumping in plain text format for simple parsing.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing"
            },
            {
              "name": "test_file_dump_list_endpoint",
              "line": 812,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test dump file listing functionality and metadata retrieval.\n\nArgs:\n    mock_context: Context instance for creating test dumps\n    temp_directory: Temporary directory with test dump files"
            },
            {
              "name": "test_file_dump_download_endpoint",
              "line": 900,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test dump file download functionality with different formats.\n\nArgs:\n    mock_context: Context instance for creating test dump\n    temp_directory: Temporary directory for test files"
            },
            {
              "name": "test_file_dump_error_handling",
              "line": 998,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test error handling in dump functionality with invalid requests.\n\nArgs:\n    mock_context: Context instance for testing\n    temp_directory: Temporary directory for testing"
            }
          ]
        },
        {
          "name": "TestPythonClientLibraries",
          "line": 1059,
          "bases": [],
          "docstring": "Test suite for Python synchronous and asynchronous client libraries.\nValidates client functionality, error handling, and integration patterns.",
          "methods": [
            {
              "name": "running_server",
              "line": 1066,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Fixture providing a running server instance for client testing.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for server files\n    \nYields:\n    tuple: (server_instance, host, port) for client connections"
            },
            {
              "name": "test_sync_client_basic_operations",
              "line": 1098,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test synchronous Python client basic operations (get, set, delete).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing"
            },
            {
              "name": "test_sync_client_dump_operations",
              "line": 1166,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test synchronous client dump operations (dump, list, download).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing"
            },
            {
              "name": "test_client_error_handling",
              "line": 1419,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test client library error handling for various failure scenarios.\n\nArgs:\n    mock_context: Context instance for testing"
            }
          ]
        },
        {
          "name": "TestShellScriptIntegration",
          "line": 1481,
          "bases": [],
          "docstring": "Test suite for shell script client integration and command execution.\nValidates shell client functionality and command-line interface.",
          "methods": [
            {
              "name": "test_shell_script_basic_commands",
              "line": 1487,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test basic shell script commands (get, set, list, status).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing"
            },
            {
              "name": "test_shell_script_dump_commands",
              "line": 1563,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test shell script dump commands and file operations.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing"
            },
            {
              "name": "test_shell_script_error_handling",
              "line": 1638,
              "args": [
                "self"
              ],
              "docstring": "Test shell script error handling for various failure scenarios."
            }
          ]
        },
        {
          "name": "EnhancedContextServer",
          "line": 36,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 37,
              "args": [
                "self",
                "host",
                "port",
                "debug"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "Context",
          "line": 42,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 43,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 46,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 49,
              "args": [
                "self",
                "key"
              ],
              "docstring": ""
            },
            {
              "name": "to_dict",
              "line": 52,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 1338,
      "complexity_score": 94,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "b6f01a8849723f74ad854f9c0f17dfc1",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_enhanced_persistence.py": {
      "name": ".restructuring_backup/tests/test_enhanced_persistence.py",
      "path": ".restructuring_backup/tests/test_enhanced_persistence.py",
      "component_type": "test",
      "description": "Test case for the Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py"
      ],
      "exports": [
        "setUp",
        "tearDown",
        "test_basic_persistence",
        "test_key_operations",
        "test_snapshots",
        "test_delta_snapshots",
        "test_snapshot_comparison",
        "test_import_export",
        "test_metrics",
        "test_factory_function",
        "TestEnhancedPersistence"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "tempfile",
        "unittest",
        "typing",
        "orchestrator.persistence.core",
        "orchestrator.persistence.delta",
        "orchestrator.persistence.snapshot",
        "orchestrator.persistence.cache",
        "orchestrator.persistence.enhanced",
        "shutil"
      ],
      "functions": [
        {
          "name": "setUp",
          "line": 28,
          "args": [
            "self"
          ],
          "docstring": "Set up test environment before each test.",
          "decorators": []
        },
        {
          "name": "tearDown",
          "line": 65,
          "args": [
            "self"
          ],
          "docstring": "Clean up after each test.",
          "decorators": []
        },
        {
          "name": "test_basic_persistence",
          "line": 74,
          "args": [
            "self"
          ],
          "docstring": "Test basic save and load operations.",
          "decorators": []
        },
        {
          "name": "test_key_operations",
          "line": 85,
          "args": [
            "self"
          ],
          "docstring": "Test individual key operations (get, set, delete).",
          "decorators": []
        },
        {
          "name": "test_snapshots",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Test snapshot creation and restoration.",
          "decorators": []
        },
        {
          "name": "test_delta_snapshots",
          "line": 152,
          "args": [
            "self"
          ],
          "docstring": "Test delta snapshot creation and restoration.",
          "decorators": []
        },
        {
          "name": "test_snapshot_comparison",
          "line": 180,
          "args": [
            "self"
          ],
          "docstring": "Test snapshot comparison functionality.",
          "decorators": []
        },
        {
          "name": "test_import_export",
          "line": 210,
          "args": [
            "self"
          ],
          "docstring": "Test import and export functionality.",
          "decorators": []
        },
        {
          "name": "test_metrics",
          "line": 228,
          "args": [
            "self"
          ],
          "docstring": "Test metrics collection and reporting.",
          "decorators": []
        },
        {
          "name": "test_factory_function",
          "line": 244,
          "args": [
            "self"
          ],
          "docstring": "Test the persistence factory function.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestEnhancedPersistence",
          "line": 25,
          "bases": [
            "TestCase"
          ],
          "docstring": "Test case for Enhanced Persistence functionality.",
          "methods": [
            {
              "name": "setUp",
              "line": 28,
              "args": [
                "self"
              ],
              "docstring": "Set up test environment before each test."
            },
            {
              "name": "tearDown",
              "line": 65,
              "args": [
                "self"
              ],
              "docstring": "Clean up after each test."
            },
            {
              "name": "test_basic_persistence",
              "line": 74,
              "args": [
                "self"
              ],
              "docstring": "Test basic save and load operations."
            },
            {
              "name": "test_key_operations",
              "line": 85,
              "args": [
                "self"
              ],
              "docstring": "Test individual key operations (get, set, delete)."
            },
            {
              "name": "test_snapshots",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Test snapshot creation and restoration."
            },
            {
              "name": "test_delta_snapshots",
              "line": 152,
              "args": [
                "self"
              ],
              "docstring": "Test delta snapshot creation and restoration."
            },
            {
              "name": "test_snapshot_comparison",
              "line": 180,
              "args": [
                "self"
              ],
              "docstring": "Test snapshot comparison functionality."
            },
            {
              "name": "test_import_export",
              "line": 210,
              "args": [
                "self"
              ],
              "docstring": "Test import and export functionality."
            },
            {
              "name": "test_metrics",
              "line": 228,
              "args": [
                "self"
              ],
              "docstring": "Test metrics collection and reporting."
            },
            {
              "name": "test_factory_function",
              "line": 244,
              "args": [
                "self"
              ],
              "docstring": "Test the persistence factory function."
            }
          ]
        }
      ],
      "lines_of_code": 206,
      "complexity_score": 13,
      "last_modified": "2025-10-04T21:58:29.010985",
      "checksum": "c19a930e8b3b1def9f9398d948d40a2f",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_integration.py": {
      "name": ".restructuring_backup/tests/test_integration.py",
      "path": ".restructuring_backup/tests/test_integration.py",
      "component_type": "test",
      "description": "Integration and End-to-End Testing for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "test_server_instance",
        "test_basic_server_functionality",
        "test_shell_client_integration",
        "test_python_client_integration",
        "test_file_dump_integration",
        "test_complete_workflow_scenario",
        "test_error_handling_integration",
        "test_concurrent_access_integration",
        "get_logger",
        "worker_thread",
        "TestIntegrationWorkflows"
      ],
      "imports": [
        "os",
        "time",
        "subprocess",
        "pytest",
        "requests",
        "pathlib",
        "src.core.logger",
        "logging",
        "threading",
        "queue",
        "sys",
        "src.context_client"
      ],
      "functions": [
        {
          "name": "test_server_instance",
          "line": 41,
          "args": [
            "self"
          ],
          "docstring": "Start a real server instance for integration testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_basic_server_functionality",
          "line": 107,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test basic server functionality with real HTTP requests.",
          "decorators": []
        },
        {
          "name": "test_shell_client_integration",
          "line": 146,
          "args": [
            "self"
          ],
          "docstring": "Test shell script client integration with real server.",
          "decorators": []
        },
        {
          "name": "test_python_client_integration",
          "line": 195,
          "args": [
            "self"
          ],
          "docstring": "Test Python client library integration.",
          "decorators": []
        },
        {
          "name": "test_file_dump_integration",
          "line": 228,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test file dumping integration with real server.",
          "decorators": []
        },
        {
          "name": "test_complete_workflow_scenario",
          "line": 277,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test a complete realistic workflow scenario.",
          "decorators": []
        },
        {
          "name": "test_error_handling_integration",
          "line": 371,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test error handling in realistic scenarios.",
          "decorators": []
        },
        {
          "name": "test_concurrent_access_integration",
          "line": 411,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test concurrent access scenarios with real server.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 24,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "worker_thread",
          "line": 427,
          "args": [
            "thread_id"
          ],
          "docstring": "Worker function for concurrent operations.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestIntegrationWorkflows",
          "line": 37,
          "bases": [],
          "docstring": "Integration tests for complete Framework0 workflows.",
          "methods": [
            {
              "name": "test_server_instance",
              "line": 41,
              "args": [
                "self"
              ],
              "docstring": "Start a real server instance for integration testing."
            },
            {
              "name": "test_basic_server_functionality",
              "line": 107,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test basic server functionality with real HTTP requests."
            },
            {
              "name": "test_shell_client_integration",
              "line": 146,
              "args": [
                "self"
              ],
              "docstring": "Test shell script client integration with real server."
            },
            {
              "name": "test_python_client_integration",
              "line": 195,
              "args": [
                "self"
              ],
              "docstring": "Test Python client library integration."
            },
            {
              "name": "test_file_dump_integration",
              "line": 228,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test file dumping integration with real server."
            },
            {
              "name": "test_complete_workflow_scenario",
              "line": 277,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test a complete realistic workflow scenario."
            },
            {
              "name": "test_error_handling_integration",
              "line": 371,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test error handling in realistic scenarios."
            },
            {
              "name": "test_concurrent_access_integration",
              "line": 411,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test concurrent access scenarios with real server."
            }
          ]
        }
      ],
      "lines_of_code": 407,
      "complexity_score": 34,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "ea0b3b249657c0f38dc30b4d3f4a797a",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_performance_load.py": {
      "name": ".restructuring_backup/tests/test_performance_load.py",
      "path": ".restructuring_backup/tests/test_performance_load.py",
      "component_type": "test",
      "description": "Performance and Load Testing Suite for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "generate_performance_report",
        "__post_init__",
        "success_rate",
        "avg_response_time_ms",
        "p95_response_time_ms",
        "p99_response_time_ms",
        "__init__",
        "_monitor_resources",
        "_make_request",
        "run_concurrent_load_test",
        "performance_runner",
        "temp_dump_directory",
        "test_concurrent_context_reads",
        "test_concurrent_context_writes",
        "test_mixed_read_write_workload",
        "test_file_dump_performance",
        "test_memory_usage_under_load",
        "test_response_time_percentiles",
        "get_logger",
        "read_request_generator",
        "write_request_generator",
        "mixed_request_generator",
        "dump_request_generator",
        "memory_stress_generator",
        "percentile_test_generator",
        "PerformanceMetrics",
        "PerformanceTestRunner",
        "TestPerformanceAndLoad"
      ],
      "imports": [
        "os",
        "time",
        "asyncio",
        "threading",
        "statistics",
        "psutil",
        "pytest",
        "requests",
        "json",
        "pathlib",
        "typing",
        "concurrent.futures",
        "datetime",
        "dataclasses",
        "tempfile",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "generate_performance_report",
          "line": 665,
          "args": [
            "test_results",
            "output_file"
          ],
          "docstring": "Generate comprehensive performance test report.\n\nArgs:\n    test_results: List of performance metrics from various tests\n    output_file: Optional file path to save the report\n    \nReturns:\n    String containing the formatted performance report",
          "decorators": []
        },
        {
          "name": "__post_init__",
          "line": 75,
          "args": [
            "self"
          ],
          "docstring": "Calculate derived metrics after initialization.",
          "decorators": []
        },
        {
          "name": "success_rate",
          "line": 82,
          "args": [
            "self"
          ],
          "docstring": "Calculate success rate as percentage.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "avg_response_time_ms",
          "line": 89,
          "args": [
            "self"
          ],
          "docstring": "Calculate average response time in milliseconds.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "p95_response_time_ms",
          "line": 96,
          "args": [
            "self"
          ],
          "docstring": "Calculate 95th percentile response time in milliseconds.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "p99_response_time_ms",
          "line": 103,
          "args": [
            "self"
          ],
          "docstring": "Calculate 99th percentile response time in milliseconds.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__init__",
          "line": 118,
          "args": [
            "self",
            "server_host",
            "server_port",
            "debug"
          ],
          "docstring": "Initialize performance test runner with server configuration.\n\nArgs:\n    server_host: Host address of the context server to test\n    server_port: Port number of the context server to test\n    debug: Enable debug logging for detailed test tracing",
          "decorators": []
        },
        {
          "name": "_monitor_resources",
          "line": 148,
          "args": [
            "self",
            "duration_seconds"
          ],
          "docstring": "Monitor system resources during performance testing.\n\nArgs:\n    duration_seconds: Duration to monitor resources",
          "decorators": []
        },
        {
          "name": "_make_request",
          "line": 174,
          "args": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "docstring": "Make a single HTTP request and measure response time.\n\nArgs:\n    method: HTTP method (GET, POST, DELETE, etc.)\n    endpoint: API endpoint to call (relative to base URL)\n    data: Optional JSON data for POST requests\n    \nReturns:\n    Tuple of (success_flag, response_time_ms)",
          "decorators": []
        },
        {
          "name": "run_concurrent_load_test",
          "line": 215,
          "args": [
            "self",
            "operation_type",
            "num_clients",
            "operations_per_client",
            "request_generator"
          ],
          "docstring": "Run concurrent load test with multiple simulated clients.\n\nArgs:\n    operation_type: Type of operation being tested (for metrics)\n    num_clients: Number of concurrent clients to simulate\n    operations_per_client: Number of operations each client performs\n    request_generator: Function that generates (method, endpoint, data) tuples\n    \nReturns:\n    PerformanceMetrics object with detailed test results",
          "decorators": []
        },
        {
          "name": "performance_runner",
          "line": 319,
          "args": [
            "self"
          ],
          "docstring": "Fixture providing configured performance test runner.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "temp_dump_directory",
          "line": 329,
          "args": [
            "self"
          ],
          "docstring": "Fixture providing temporary directory for dump testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_concurrent_context_reads",
          "line": 334,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test concurrent context read operations under load.\n\nArgs:\n    performance_runner: Configured performance test runner",
          "decorators": []
        },
        {
          "name": "test_concurrent_context_writes",
          "line": 377,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test concurrent context write operations under load.\n\nArgs:\n    performance_runner: Configured performance test runner",
          "decorators": []
        },
        {
          "name": "test_mixed_read_write_workload",
          "line": 427,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test mixed read/write workload simulating realistic usage patterns.\n\nArgs:\n    performance_runner: Configured performance test runner",
          "decorators": []
        },
        {
          "name": "test_file_dump_performance",
          "line": 489,
          "args": [
            "self",
            "performance_runner",
            "temp_dump_directory"
          ],
          "docstring": "Test file dumping performance under concurrent load.\n\nArgs:\n    performance_runner: Configured performance test runner\n    temp_dump_directory: Temporary directory for dump files",
          "decorators": []
        },
        {
          "name": "test_memory_usage_under_load",
          "line": 553,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test memory usage behavior under sustained load.\n\nArgs:\n    performance_runner: Configured performance test runner  ",
          "decorators": []
        },
        {
          "name": "test_response_time_percentiles",
          "line": 611,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test response time percentiles to ensure consistent performance.\n\nArgs:\n    performance_runner: Configured performance test runner",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 35,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Fallback logger when core logger unavailable.",
          "decorators": []
        },
        {
          "name": "read_request_generator",
          "line": 348,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate GET requests for context reading.",
          "decorators": []
        },
        {
          "name": "write_request_generator",
          "line": 391,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate POST requests for context writing.",
          "decorators": []
        },
        {
          "name": "mixed_request_generator",
          "line": 441,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate mixed read/write requests (80% reads, 20% writes).",
          "decorators": []
        },
        {
          "name": "dump_request_generator",
          "line": 523,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate context dump requests with various formats.",
          "decorators": []
        },
        {
          "name": "memory_stress_generator",
          "line": 567,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate requests designed to test memory usage.",
          "decorators": []
        },
        {
          "name": "percentile_test_generator",
          "line": 625,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate varied requests for percentile analysis.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PerformanceMetrics",
          "line": 50,
          "bases": [],
          "docstring": "Structure for storing performance test metrics and results.\n\nAttributes:\n    operation_type: Type of operation being measured (get/set/dump/etc)\n    total_operations: Total number of operations performed\n    duration_seconds: Total time taken for all operations\n    success_count: Number of successful operations\n    error_count: Number of failed operations\n    response_times: List of individual response times in milliseconds\n    throughput_ops_sec: Operations per second (calculated)\n    memory_usage_mb: Peak memory usage during test in MB\n    cpu_usage_percent: Average CPU usage during test",
          "methods": [
            {
              "name": "__post_init__",
              "line": 75,
              "args": [
                "self"
              ],
              "docstring": "Calculate derived metrics after initialization."
            },
            {
              "name": "success_rate",
              "line": 82,
              "args": [
                "self"
              ],
              "docstring": "Calculate success rate as percentage."
            },
            {
              "name": "avg_response_time_ms",
              "line": 89,
              "args": [
                "self"
              ],
              "docstring": "Calculate average response time in milliseconds."
            },
            {
              "name": "p95_response_time_ms",
              "line": 96,
              "args": [
                "self"
              ],
              "docstring": "Calculate 95th percentile response time in milliseconds."
            },
            {
              "name": "p99_response_time_ms",
              "line": 103,
              "args": [
                "self"
              ],
              "docstring": "Calculate 99th percentile response time in milliseconds."
            }
          ]
        },
        {
          "name": "PerformanceTestRunner",
          "line": 110,
          "bases": [],
          "docstring": "Advanced performance test runner for comprehensive load testing.\n\nProvides methods for concurrent client simulation, memory monitoring,\nand detailed performance metric collection and analysis.",
          "methods": [
            {
              "name": "__init__",
              "line": 118,
              "args": [
                "self",
                "server_host",
                "server_port",
                "debug"
              ],
              "docstring": "Initialize performance test runner with server configuration.\n\nArgs:\n    server_host: Host address of the context server to test\n    server_port: Port number of the context server to test\n    debug: Enable debug logging for detailed test tracing"
            },
            {
              "name": "_monitor_resources",
              "line": 148,
              "args": [
                "self",
                "duration_seconds"
              ],
              "docstring": "Monitor system resources during performance testing.\n\nArgs:\n    duration_seconds: Duration to monitor resources"
            },
            {
              "name": "_make_request",
              "line": 174,
              "args": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "docstring": "Make a single HTTP request and measure response time.\n\nArgs:\n    method: HTTP method (GET, POST, DELETE, etc.)\n    endpoint: API endpoint to call (relative to base URL)\n    data: Optional JSON data for POST requests\n    \nReturns:\n    Tuple of (success_flag, response_time_ms)"
            },
            {
              "name": "run_concurrent_load_test",
              "line": 215,
              "args": [
                "self",
                "operation_type",
                "num_clients",
                "operations_per_client",
                "request_generator"
              ],
              "docstring": "Run concurrent load test with multiple simulated clients.\n\nArgs:\n    operation_type: Type of operation being tested (for metrics)\n    num_clients: Number of concurrent clients to simulate\n    operations_per_client: Number of operations each client performs\n    request_generator: Function that generates (method, endpoint, data) tuples\n    \nReturns:\n    PerformanceMetrics object with detailed test results"
            }
          ]
        },
        {
          "name": "TestPerformanceAndLoad",
          "line": 310,
          "bases": [],
          "docstring": "Comprehensive performance and load testing suite.\n\nTests various scenarios including concurrent access, memory usage,\nresponse times, and system limits under production-like loads.",
          "methods": [
            {
              "name": "performance_runner",
              "line": 319,
              "args": [
                "self"
              ],
              "docstring": "Fixture providing configured performance test runner."
            },
            {
              "name": "temp_dump_directory",
              "line": 329,
              "args": [
                "self"
              ],
              "docstring": "Fixture providing temporary directory for dump testing."
            },
            {
              "name": "test_concurrent_context_reads",
              "line": 334,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test concurrent context read operations under load.\n\nArgs:\n    performance_runner: Configured performance test runner"
            },
            {
              "name": "test_concurrent_context_writes",
              "line": 377,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test concurrent context write operations under load.\n\nArgs:\n    performance_runner: Configured performance test runner"
            },
            {
              "name": "test_mixed_read_write_workload",
              "line": 427,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test mixed read/write workload simulating realistic usage patterns.\n\nArgs:\n    performance_runner: Configured performance test runner"
            },
            {
              "name": "test_file_dump_performance",
              "line": 489,
              "args": [
                "self",
                "performance_runner",
                "temp_dump_directory"
              ],
              "docstring": "Test file dumping performance under concurrent load.\n\nArgs:\n    performance_runner: Configured performance test runner\n    temp_dump_directory: Temporary directory for dump files"
            },
            {
              "name": "test_memory_usage_under_load",
              "line": 553,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test memory usage behavior under sustained load.\n\nArgs:\n    performance_runner: Configured performance test runner  "
            },
            {
              "name": "test_response_time_percentiles",
              "line": 611,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test response time percentiles to ensure consistent performance.\n\nArgs:\n    performance_runner: Configured performance test runner"
            }
          ]
        }
      ],
      "lines_of_code": 633,
      "complexity_score": 64,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "cbc68a46f2f6282ce28ed50ee459f94b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_realtime_performance.py": {
      "name": ".restructuring_backup/tests/test_realtime_performance.py",
      "path": ".restructuring_backup/tests/test_realtime_performance.py",
      "component_type": "test",
      "description": "Real-time Performance Monitoring for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "_default_thresholds",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_loop",
        "_collect_performance_snapshot",
        "_get_simulated_connections",
        "_get_simulated_response_time",
        "_get_simulated_error_rate",
        "_get_simulated_context_size",
        "_get_simulated_websocket_count",
        "_check_performance_thresholds",
        "_log_performance_summary",
        "get_current_performance",
        "get_performance_history",
        "get_pending_alerts",
        "acknowledge_alert",
        "set_threshold",
        "generate_performance_report",
        "_calculate_trend",
        "export_performance_data",
        "test_performance_monitor_initialization",
        "test_performance_snapshot_collection",
        "test_performance_monitoring_lifecycle",
        "test_performance_alerting",
        "test_performance_reporting",
        "test_performance_data_export",
        "get_logger",
        "calculate_stats",
        "PerformanceSnapshot",
        "PerformanceAlert",
        "RealTimePerformanceMonitor",
        "TestRealTimePerformanceMonitoring"
      ],
      "imports": [
        "time",
        "json",
        "threading",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "queue",
        "src.core.logger",
        "logging",
        "random",
        "random",
        "random",
        "random",
        "random",
        "psutil",
        "csv"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 70,
          "args": [
            "self",
            "monitoring_interval"
          ],
          "docstring": "Initialize real-time performance monitor.",
          "decorators": []
        },
        {
          "name": "_default_thresholds",
          "line": 81,
          "args": [
            "self"
          ],
          "docstring": "Define default performance thresholds for alerting.",
          "decorators": []
        },
        {
          "name": "start_monitoring",
          "line": 92,
          "args": [
            "self"
          ],
          "docstring": "Start real-time performance monitoring.",
          "decorators": []
        },
        {
          "name": "stop_monitoring",
          "line": 112,
          "args": [
            "self"
          ],
          "docstring": "Stop real-time performance monitoring.",
          "decorators": []
        },
        {
          "name": "_monitoring_loop",
          "line": 125,
          "args": [
            "self"
          ],
          "docstring": "Main monitoring loop for collecting performance snapshots.",
          "decorators": []
        },
        {
          "name": "_collect_performance_snapshot",
          "line": 156,
          "args": [
            "self"
          ],
          "docstring": "Collect current performance metrics snapshot.",
          "decorators": []
        },
        {
          "name": "_get_simulated_connections",
          "line": 204,
          "args": [
            "self"
          ],
          "docstring": "Get simulated connection count (replace with real server state).",
          "decorators": []
        },
        {
          "name": "_get_simulated_response_time",
          "line": 212,
          "args": [
            "self"
          ],
          "docstring": "Get simulated response time (replace with real metrics).",
          "decorators": []
        },
        {
          "name": "_get_simulated_error_rate",
          "line": 220,
          "args": [
            "self"
          ],
          "docstring": "Get simulated error rate (replace with real metrics).",
          "decorators": []
        },
        {
          "name": "_get_simulated_context_size",
          "line": 228,
          "args": [
            "self"
          ],
          "docstring": "Get simulated context size (replace with real server state).",
          "decorators": []
        },
        {
          "name": "_get_simulated_websocket_count",
          "line": 236,
          "args": [
            "self"
          ],
          "docstring": "Get simulated WebSocket connection count.",
          "decorators": []
        },
        {
          "name": "_check_performance_thresholds",
          "line": 242,
          "args": [
            "self",
            "snapshot"
          ],
          "docstring": "Check performance metrics against thresholds and generate alerts.",
          "decorators": []
        },
        {
          "name": "_log_performance_summary",
          "line": 303,
          "args": [
            "self"
          ],
          "docstring": "Log periodic performance summary.",
          "decorators": []
        },
        {
          "name": "get_current_performance",
          "line": 322,
          "args": [
            "self"
          ],
          "docstring": "Get the most recent performance snapshot.",
          "decorators": []
        },
        {
          "name": "get_performance_history",
          "line": 328,
          "args": [
            "self",
            "minutes"
          ],
          "docstring": "Get performance history for specified time period.",
          "decorators": []
        },
        {
          "name": "get_pending_alerts",
          "line": 336,
          "args": [
            "self"
          ],
          "docstring": "Get all pending performance alerts.",
          "decorators": []
        },
        {
          "name": "acknowledge_alert",
          "line": 346,
          "args": [
            "self",
            "alert_id"
          ],
          "docstring": "Acknowledge a performance alert.",
          "decorators": []
        },
        {
          "name": "set_threshold",
          "line": 351,
          "args": [
            "self",
            "metric_name",
            "threshold_type",
            "value"
          ],
          "docstring": "Set custom performance threshold.",
          "decorators": []
        },
        {
          "name": "generate_performance_report",
          "line": 361,
          "args": [
            "self",
            "hours"
          ],
          "docstring": "Generate comprehensive performance report for specified time period.",
          "decorators": []
        },
        {
          "name": "_calculate_trend",
          "line": 423,
          "args": [
            "self",
            "values"
          ],
          "docstring": "Calculate performance trend (increasing/decreasing/stable).",
          "decorators": []
        },
        {
          "name": "export_performance_data",
          "line": 444,
          "args": [
            "self",
            "filepath",
            "format_type"
          ],
          "docstring": "Export performance data to file.",
          "decorators": []
        },
        {
          "name": "test_performance_monitor_initialization",
          "line": 482,
          "args": [
            "self"
          ],
          "docstring": "Test performance monitor initialization and configuration.",
          "decorators": []
        },
        {
          "name": "test_performance_snapshot_collection",
          "line": 502,
          "args": [
            "self"
          ],
          "docstring": "Test performance snapshot data collection.",
          "decorators": []
        },
        {
          "name": "test_performance_monitoring_lifecycle",
          "line": 523,
          "args": [
            "self"
          ],
          "docstring": "Test performance monitoring start/stop lifecycle.",
          "decorators": []
        },
        {
          "name": "test_performance_alerting",
          "line": 552,
          "args": [
            "self"
          ],
          "docstring": "Test performance threshold alerting system.",
          "decorators": []
        },
        {
          "name": "test_performance_reporting",
          "line": 595,
          "args": [
            "self"
          ],
          "docstring": "Test performance report generation.",
          "decorators": []
        },
        {
          "name": "test_performance_data_export",
          "line": 638,
          "args": [
            "self",
            "tmp_path"
          ],
          "docstring": "Test performance data export functionality.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 26,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "calculate_stats",
          "line": 379,
          "args": [
            "values"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PerformanceSnapshot",
          "line": 40,
          "bases": [],
          "docstring": "Real-time performance snapshot data.",
          "methods": []
        },
        {
          "name": "PerformanceAlert",
          "line": 54,
          "bases": [],
          "docstring": "Performance alert data structure.",
          "methods": []
        },
        {
          "name": "RealTimePerformanceMonitor",
          "line": 67,
          "bases": [],
          "docstring": "Real-time performance monitoring system.",
          "methods": [
            {
              "name": "__init__",
              "line": 70,
              "args": [
                "self",
                "monitoring_interval"
              ],
              "docstring": "Initialize real-time performance monitor."
            },
            {
              "name": "_default_thresholds",
              "line": 81,
              "args": [
                "self"
              ],
              "docstring": "Define default performance thresholds for alerting."
            },
            {
              "name": "start_monitoring",
              "line": 92,
              "args": [
                "self"
              ],
              "docstring": "Start real-time performance monitoring."
            },
            {
              "name": "stop_monitoring",
              "line": 112,
              "args": [
                "self"
              ],
              "docstring": "Stop real-time performance monitoring."
            },
            {
              "name": "_monitoring_loop",
              "line": 125,
              "args": [
                "self"
              ],
              "docstring": "Main monitoring loop for collecting performance snapshots."
            },
            {
              "name": "_collect_performance_snapshot",
              "line": 156,
              "args": [
                "self"
              ],
              "docstring": "Collect current performance metrics snapshot."
            },
            {
              "name": "_get_simulated_connections",
              "line": 204,
              "args": [
                "self"
              ],
              "docstring": "Get simulated connection count (replace with real server state)."
            },
            {
              "name": "_get_simulated_response_time",
              "line": 212,
              "args": [
                "self"
              ],
              "docstring": "Get simulated response time (replace with real metrics)."
            },
            {
              "name": "_get_simulated_error_rate",
              "line": 220,
              "args": [
                "self"
              ],
              "docstring": "Get simulated error rate (replace with real metrics)."
            },
            {
              "name": "_get_simulated_context_size",
              "line": 228,
              "args": [
                "self"
              ],
              "docstring": "Get simulated context size (replace with real server state)."
            },
            {
              "name": "_get_simulated_websocket_count",
              "line": 236,
              "args": [
                "self"
              ],
              "docstring": "Get simulated WebSocket connection count."
            },
            {
              "name": "_check_performance_thresholds",
              "line": 242,
              "args": [
                "self",
                "snapshot"
              ],
              "docstring": "Check performance metrics against thresholds and generate alerts."
            },
            {
              "name": "_log_performance_summary",
              "line": 303,
              "args": [
                "self"
              ],
              "docstring": "Log periodic performance summary."
            },
            {
              "name": "get_current_performance",
              "line": 322,
              "args": [
                "self"
              ],
              "docstring": "Get the most recent performance snapshot."
            },
            {
              "name": "get_performance_history",
              "line": 328,
              "args": [
                "self",
                "minutes"
              ],
              "docstring": "Get performance history for specified time period."
            },
            {
              "name": "get_pending_alerts",
              "line": 336,
              "args": [
                "self"
              ],
              "docstring": "Get all pending performance alerts."
            },
            {
              "name": "acknowledge_alert",
              "line": 346,
              "args": [
                "self",
                "alert_id"
              ],
              "docstring": "Acknowledge a performance alert."
            },
            {
              "name": "set_threshold",
              "line": 351,
              "args": [
                "self",
                "metric_name",
                "threshold_type",
                "value"
              ],
              "docstring": "Set custom performance threshold."
            },
            {
              "name": "generate_performance_report",
              "line": 361,
              "args": [
                "self",
                "hours"
              ],
              "docstring": "Generate comprehensive performance report for specified time period."
            },
            {
              "name": "_calculate_trend",
              "line": 423,
              "args": [
                "self",
                "values"
              ],
              "docstring": "Calculate performance trend (increasing/decreasing/stable)."
            },
            {
              "name": "export_performance_data",
              "line": 444,
              "args": [
                "self",
                "filepath",
                "format_type"
              ],
              "docstring": "Export performance data to file."
            }
          ]
        },
        {
          "name": "TestRealTimePerformanceMonitoring",
          "line": 479,
          "bases": [],
          "docstring": "Test class for real-time performance monitoring functionality.",
          "methods": [
            {
              "name": "test_performance_monitor_initialization",
              "line": 482,
              "args": [
                "self"
              ],
              "docstring": "Test performance monitor initialization and configuration."
            },
            {
              "name": "test_performance_snapshot_collection",
              "line": 502,
              "args": [
                "self"
              ],
              "docstring": "Test performance snapshot data collection."
            },
            {
              "name": "test_performance_monitoring_lifecycle",
              "line": 523,
              "args": [
                "self"
              ],
              "docstring": "Test performance monitoring start/stop lifecycle."
            },
            {
              "name": "test_performance_alerting",
              "line": 552,
              "args": [
                "self"
              ],
              "docstring": "Test performance threshold alerting system."
            },
            {
              "name": "test_performance_reporting",
              "line": 595,
              "args": [
                "self"
              ],
              "docstring": "Test performance report generation."
            },
            {
              "name": "test_performance_data_export",
              "line": 638,
              "args": [
                "self",
                "tmp_path"
              ],
              "docstring": "Test performance data export functionality."
            }
          ]
        }
      ],
      "lines_of_code": 591,
      "complexity_score": 80,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "c818f77dd512630feb97e94e481c0e32",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_scriptlet_framework.py": {
      "name": ".restructuring_backup/tests/test_scriptlet_framework.py",
      "path": ".restructuring_backup/tests/test_scriptlet_framework.py",
      "component_type": "test",
      "description": "Comprehensive test suite for the unified IAF0 Scriptlet Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "test_default_configuration",
        "test_configuration_validation",
        "test_result_creation",
        "test_result_serialization",
        "setup_method",
        "test_scriptlet_registration",
        "test_registry_listing",
        "test_registry_error_handling",
        "test_scriptlet_initialization",
        "test_scriptlet_execution_lifecycle",
        "test_scriptlet_validation",
        "test_scriptlet_error_handling",
        "test_scriptlet_thread_safety",
        "test_compute_scriptlet",
        "test_io_scriptlet",
        "test_execution_context_basic",
        "test_dependency_resolution_error",
        "test_resource_monitor_decorator",
        "test_debug_trace_decorator",
        "test_retry_decorator",
        "test_scriptlet_compliance_validation",
        "test_factory_functions",
        "test_complete_workflow_integration",
        "worker_thread",
        "test_function",
        "test_function",
        "failing_function",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "__init__",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "TestScriptletConfig",
        "TestScriptletResult",
        "TestScriptletRegistry",
        "TestBaseScriptlet",
        "TestSpecializedScriptlets",
        "TestExecutionContext",
        "TestDecorators",
        "TestUtilityFunctions",
        "TestIntegration",
        "TestComputeScriptlet",
        "ComputeTest",
        "IOTest",
        "TestScriptlet",
        "TestScriptlet",
        "TestScriptlet",
        "FailingScriptlet",
        "ThreadTestScriptlet",
        "TestComputeScriptlet",
        "TestIOScriptlet",
        "ScriptletA",
        "ScriptletB",
        "TestScriptlet",
        "CompliantScriptlet",
        "NonCompliantScriptlet",
        "TestComputeScriptlet",
        "TestIOScriptlet",
        "DataLoaderScriptlet",
        "ProcessorScriptlet",
        "OutputScriptlet",
        "InvalidClass"
      ],
      "imports": [
        "os",
        "json",
        "time",
        "threading",
        "pytest",
        "unittest.mock",
        "typing",
        "scriptlets.framework",
        "orchestrator.context.context"
      ],
      "functions": [
        {
          "name": "test_default_configuration",
          "line": 43,
          "args": [
            "self"
          ],
          "docstring": "Test that default configuration is valid and complete.",
          "decorators": []
        },
        {
          "name": "test_configuration_validation",
          "line": 57,
          "args": [
            "self"
          ],
          "docstring": "Test configuration validation catches invalid settings.",
          "decorators": []
        },
        {
          "name": "test_result_creation",
          "line": 89,
          "args": [
            "self"
          ],
          "docstring": "Test ScriptletResult creation and serialization.",
          "decorators": []
        },
        {
          "name": "test_result_serialization",
          "line": 106,
          "args": [
            "self"
          ],
          "docstring": "Test ScriptletResult to_dict serialization.",
          "decorators": []
        },
        {
          "name": "setup_method",
          "line": 135,
          "args": [
            "self"
          ],
          "docstring": "Set up test environment before each test.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_registration",
          "line": 140,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet registration and retrieval.",
          "decorators": []
        },
        {
          "name": "test_registry_listing",
          "line": 158,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet listing and filtering.",
          "decorators": []
        },
        {
          "name": "test_registry_error_handling",
          "line": 183,
          "args": [
            "self"
          ],
          "docstring": "Test registry error handling for invalid operations.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_initialization",
          "line": 200,
          "args": [
            "self"
          ],
          "docstring": "Test BaseScriptlet initialization and configuration.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_execution_lifecycle",
          "line": 218,
          "args": [
            "self"
          ],
          "docstring": "Test complete scriptlet execution lifecycle.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_validation",
          "line": 244,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet parameter validation.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_error_handling",
          "line": 273,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet error handling and recovery.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_thread_safety",
          "line": 291,
          "args": [
            "self"
          ],
          "docstring": "Test thread-safe scriptlet execution.",
          "decorators": []
        },
        {
          "name": "test_compute_scriptlet",
          "line": 336,
          "args": [
            "self"
          ],
          "docstring": "Test ComputeScriptlet specialization.",
          "decorators": []
        },
        {
          "name": "test_io_scriptlet",
          "line": 362,
          "args": [
            "self"
          ],
          "docstring": "Test IOScriptlet specialization.",
          "decorators": []
        },
        {
          "name": "test_execution_context_basic",
          "line": 394,
          "args": [
            "self"
          ],
          "docstring": "Test basic ExecutionContext operations.",
          "decorators": []
        },
        {
          "name": "test_dependency_resolution_error",
          "line": 430,
          "args": [
            "self"
          ],
          "docstring": "Test dependency resolution error handling.",
          "decorators": []
        },
        {
          "name": "test_resource_monitor_decorator",
          "line": 450,
          "args": [
            "self"
          ],
          "docstring": "Test resource monitoring decorator.",
          "decorators": []
        },
        {
          "name": "test_debug_trace_decorator",
          "line": 475,
          "args": [
            "self"
          ],
          "docstring": "Test debug tracing decorator.",
          "decorators": []
        },
        {
          "name": "test_retry_decorator",
          "line": 495,
          "args": [
            "self"
          ],
          "docstring": "Test retry decorator functionality.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_compliance_validation",
          "line": 523,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet compliance validation.",
          "decorators": []
        },
        {
          "name": "test_factory_functions",
          "line": 546,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet factory functions.",
          "decorators": []
        },
        {
          "name": "test_complete_workflow_integration",
          "line": 583,
          "args": [
            "self"
          ],
          "docstring": "Test complete workflow with multiple scriptlets.",
          "decorators": []
        },
        {
          "name": "worker_thread",
          "line": 308,
          "args": [
            "thread_id"
          ],
          "docstring": "Worker function for thread testing.",
          "decorators": []
        },
        {
          "name": "test_function",
          "line": 454,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Test function for resource monitoring.",
          "decorators": [
            "resource_monitor"
          ]
        },
        {
          "name": "test_function",
          "line": 479,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Test function for debug tracing.",
          "decorators": [
            "debug_trace"
          ]
        },
        {
          "name": "failing_function",
          "line": 500,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Function that fails first two times.",
          "decorators": [
            "retry_on_failure"
          ]
        },
        {
          "name": "run",
          "line": 147,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 163,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 168,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 207,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 222,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 253,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 277,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 295,
          "args": [
            "self",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 299,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 340,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 366,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 400,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 405,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 435,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 528,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 535,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 551,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 567,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 589,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 597,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 610,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestScriptletConfig",
          "line": 40,
          "bases": [],
          "docstring": "Test suite for ScriptletConfig functionality.",
          "methods": [
            {
              "name": "test_default_configuration",
              "line": 43,
              "args": [
                "self"
              ],
              "docstring": "Test that default configuration is valid and complete."
            },
            {
              "name": "test_configuration_validation",
              "line": 57,
              "args": [
                "self"
              ],
              "docstring": "Test configuration validation catches invalid settings."
            }
          ]
        },
        {
          "name": "TestScriptletResult",
          "line": 86,
          "bases": [],
          "docstring": "Test suite for ScriptletResult functionality.",
          "methods": [
            {
              "name": "test_result_creation",
              "line": 89,
              "args": [
                "self"
              ],
              "docstring": "Test ScriptletResult creation and serialization."
            },
            {
              "name": "test_result_serialization",
              "line": 106,
              "args": [
                "self"
              ],
              "docstring": "Test ScriptletResult to_dict serialization."
            }
          ]
        },
        {
          "name": "TestScriptletRegistry",
          "line": 132,
          "bases": [],
          "docstring": "Test suite for scriptlet registry functionality.",
          "methods": [
            {
              "name": "setup_method",
              "line": 135,
              "args": [
                "self"
              ],
              "docstring": "Set up test environment before each test."
            },
            {
              "name": "test_scriptlet_registration",
              "line": 140,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet registration and retrieval."
            },
            {
              "name": "test_registry_listing",
              "line": 158,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet listing and filtering."
            },
            {
              "name": "test_registry_error_handling",
              "line": 183,
              "args": [
                "self"
              ],
              "docstring": "Test registry error handling for invalid operations."
            }
          ]
        },
        {
          "name": "TestBaseScriptlet",
          "line": 197,
          "bases": [],
          "docstring": "Test suite for BaseScriptlet functionality.",
          "methods": [
            {
              "name": "test_scriptlet_initialization",
              "line": 200,
              "args": [
                "self"
              ],
              "docstring": "Test BaseScriptlet initialization and configuration."
            },
            {
              "name": "test_scriptlet_execution_lifecycle",
              "line": 218,
              "args": [
                "self"
              ],
              "docstring": "Test complete scriptlet execution lifecycle."
            },
            {
              "name": "test_scriptlet_validation",
              "line": 244,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet parameter validation."
            },
            {
              "name": "test_scriptlet_error_handling",
              "line": 273,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet error handling and recovery."
            },
            {
              "name": "test_scriptlet_thread_safety",
              "line": 291,
              "args": [
                "self"
              ],
              "docstring": "Test thread-safe scriptlet execution."
            }
          ]
        },
        {
          "name": "TestSpecializedScriptlets",
          "line": 333,
          "bases": [],
          "docstring": "Test suite for specialized scriptlet classes.",
          "methods": [
            {
              "name": "test_compute_scriptlet",
              "line": 336,
              "args": [
                "self"
              ],
              "docstring": "Test ComputeScriptlet specialization."
            },
            {
              "name": "test_io_scriptlet",
              "line": 362,
              "args": [
                "self"
              ],
              "docstring": "Test IOScriptlet specialization."
            }
          ]
        },
        {
          "name": "TestExecutionContext",
          "line": 391,
          "bases": [],
          "docstring": "Test suite for ExecutionContext functionality.",
          "methods": [
            {
              "name": "test_execution_context_basic",
              "line": 394,
              "args": [
                "self"
              ],
              "docstring": "Test basic ExecutionContext operations."
            },
            {
              "name": "test_dependency_resolution_error",
              "line": 430,
              "args": [
                "self"
              ],
              "docstring": "Test dependency resolution error handling."
            }
          ]
        },
        {
          "name": "TestDecorators",
          "line": 447,
          "bases": [],
          "docstring": "Test suite for decorator functionality.",
          "methods": [
            {
              "name": "test_resource_monitor_decorator",
              "line": 450,
              "args": [
                "self"
              ],
              "docstring": "Test resource monitoring decorator."
            },
            {
              "name": "test_debug_trace_decorator",
              "line": 475,
              "args": [
                "self"
              ],
              "docstring": "Test debug tracing decorator."
            },
            {
              "name": "test_retry_decorator",
              "line": 495,
              "args": [
                "self"
              ],
              "docstring": "Test retry decorator functionality."
            }
          ]
        },
        {
          "name": "TestUtilityFunctions",
          "line": 520,
          "bases": [],
          "docstring": "Test suite for utility functions.",
          "methods": [
            {
              "name": "test_scriptlet_compliance_validation",
              "line": 523,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet compliance validation."
            },
            {
              "name": "test_factory_functions",
              "line": 546,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet factory functions."
            }
          ]
        },
        {
          "name": "TestIntegration",
          "line": 580,
          "bases": [],
          "docstring": "Integration tests for complete framework functionality.",
          "methods": [
            {
              "name": "test_complete_workflow_integration",
              "line": 583,
              "args": [
                "self"
              ],
              "docstring": "Test complete workflow with multiple scriptlets."
            }
          ]
        },
        {
          "name": "TestComputeScriptlet",
          "line": 144,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "Test scriptlet for registration testing.",
          "methods": [
            {
              "name": "run",
              "line": 147,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ComputeTest",
          "line": 162,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 163,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "IOTest",
          "line": 167,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 168,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestScriptlet",
          "line": 206,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 207,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestScriptlet",
          "line": 221,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 222,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestScriptlet",
          "line": 252,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 253,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "FailingScriptlet",
          "line": 276,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 277,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ThreadTestScriptlet",
          "line": 294,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 295,
              "args": [
                "self",
                "config"
              ],
              "docstring": ""
            },
            {
              "name": "run",
              "line": 299,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestComputeScriptlet",
          "line": 339,
          "bases": [
            "ComputeScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 340,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestIOScriptlet",
          "line": 365,
          "bases": [
            "IOScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 366,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ScriptletA",
          "line": 399,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 400,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ScriptletB",
          "line": 404,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 405,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestScriptlet",
          "line": 434,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 435,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "CompliantScriptlet",
          "line": 527,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 528,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "NonCompliantScriptlet",
          "line": 534,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 535,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestComputeScriptlet",
          "line": 550,
          "bases": [
            "ComputeScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 551,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestIOScriptlet",
          "line": 566,
          "bases": [
            "IOScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 567,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "DataLoaderScriptlet",
          "line": 588,
          "bases": [
            "IOScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 589,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ProcessorScriptlet",
          "line": 596,
          "bases": [
            "ComputeScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 597,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "OutputScriptlet",
          "line": 609,
          "bases": [
            "IOScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 610,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "InvalidClass",
          "line": 193,
          "bases": [],
          "docstring": "",
          "methods": []
        }
      ],
      "lines_of_code": 530,
      "complexity_score": 118,
      "last_modified": "2025-10-04T14:19:09.599127",
      "checksum": "b6002038d4c06cef5189912df2b05266",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_simple_validation.py": {
      "name": ".restructuring_backup/tests/test_simple_validation.py",
      "path": ".restructuring_backup/tests/test_simple_validation.py",
      "component_type": "test",
      "description": "Simple validation test to ensure test infrastructure works correctly.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "test_basic_functionality",
        "test_json_operations",
        "test_path_operations",
        "test_mock_context"
      ],
      "imports": [
        "pytest",
        "json",
        "pathlib"
      ],
      "functions": [
        {
          "name": "test_basic_functionality",
          "line": 11,
          "args": [],
          "docstring": "Basic test to validate pytest framework is working.",
          "decorators": []
        },
        {
          "name": "test_json_operations",
          "line": 16,
          "args": [],
          "docstring": "Test JSON serialization operations.",
          "decorators": []
        },
        {
          "name": "test_path_operations",
          "line": 24,
          "args": [],
          "docstring": "Test Path operations for cross-platform compatibility.",
          "decorators": []
        },
        {
          "name": "test_mock_context",
          "line": 30,
          "args": [],
          "docstring": "Test mock context creation.",
          "decorators": []
        }
      ],
      "classes": [],
      "lines_of_code": 33,
      "complexity_score": 5,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "63af92571ebb319d0024482c6cb854fc",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    ".restructuring_backup/tests/test_websocket_performance.py": {
      "name": ".restructuring_backup/tests/test_websocket_performance.py",
      "path": ".restructuring_backup/tests/test_websocket_performance.py",
      "component_type": "test",
      "description": "WebSocket Performance Testing for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "generate_websocket_performance_report",
        "websocket_tester",
        "temp_report_directory",
        "get_logger",
        "WebSocketMetrics",
        "WebSocketTestResult",
        "AsyncWebSocketTester",
        "TestWebSocketPerformance"
      ],
      "imports": [
        "asyncio",
        "time",
        "json",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "pytest",
        "websockets",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 79,
          "args": [
            "self",
            "server_host",
            "server_port"
          ],
          "docstring": "Initialize async WebSocket tester with server configuration.",
          "decorators": []
        },
        {
          "name": "generate_websocket_performance_report",
          "line": 538,
          "args": [
            "self",
            "test_results"
          ],
          "docstring": "Generate comprehensive WebSocket performance report.",
          "decorators": []
        },
        {
          "name": "websocket_tester",
          "line": 642,
          "args": [
            "self"
          ],
          "docstring": "Create WebSocket tester instance for testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "temp_report_directory",
          "line": 647,
          "args": [
            "self",
            "tmp_path"
          ],
          "docstring": "Create temporary directory for test reports.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "get_logger",
          "line": 31,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Fallback logger implementation.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WebSocketMetrics",
          "line": 46,
          "bases": [],
          "docstring": "Data class for storing WebSocket performance metrics.",
          "methods": []
        },
        {
          "name": "WebSocketTestResult",
          "line": 61,
          "bases": [],
          "docstring": "Data class for storing WebSocket test execution results.",
          "methods": []
        },
        {
          "name": "AsyncWebSocketTester",
          "line": 76,
          "bases": [],
          "docstring": "Async WebSocket testing framework for performance validation.",
          "methods": [
            {
              "name": "__init__",
              "line": 79,
              "args": [
                "self",
                "server_host",
                "server_port"
              ],
              "docstring": "Initialize async WebSocket tester with server configuration."
            },
            {
              "name": "generate_websocket_performance_report",
              "line": 538,
              "args": [
                "self",
                "test_results"
              ],
              "docstring": "Generate comprehensive WebSocket performance report."
            }
          ]
        },
        {
          "name": "TestWebSocketPerformance",
          "line": 638,
          "bases": [],
          "docstring": "Test class for WebSocket performance validation with async support.",
          "methods": [
            {
              "name": "websocket_tester",
              "line": 642,
              "args": [
                "self"
              ],
              "docstring": "Create WebSocket tester instance for testing."
            },
            {
              "name": "temp_report_directory",
              "line": 647,
              "args": [
                "self",
                "tmp_path"
              ],
              "docstring": "Create temporary directory for test reports."
            }
          ]
        }
      ],
      "lines_of_code": 789,
      "complexity_score": 53,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "b94b4c964e0d7b58f5e557a91572d402",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tools/baseline_documentation_updater.py": {
      "name": ".restructuring_backup/tools/baseline_documentation_updater.py",
      "path": ".restructuring_backup/tools/baseline_documentation_updater.py",
      "component_type": "development_tool",
      "description": "Baseline Documentation Updater for Framework0 Workspace",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
        ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
        ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
        ".restructuring_backup/README.md",
        ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/configs/server_config.py",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/delta_compression.md",
        ".restructuring_backup/docs/deployment_guide.md",
        ".restructuring_backup/docs/getting_started.md",
        ".restructuring_backup/docs/integration_patterns.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/docs/troubleshooting.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/examples/README.md",
        ".restructuring_backup/examples/basic_usage.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/examples/integration_demo.py",
        ".restructuring_backup/examples/shell_demo.sh",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/orchestrator/__init__.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/__init__.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/orchestrator/recipe_parser.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/orchestrator/runner.py",
        ".restructuring_backup/pyproject.toml",
        ".restructuring_backup/requirements.txt",
        ".restructuring_backup/scriptlets/__init__.py",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/setup.cfg",
        ".restructuring_backup/src/__init__.py",
        ".restructuring_backup/src/analysis/__init__.py",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/src/analysis/registry.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/core/__init__.py",
        ".restructuring_backup/src/core/logger.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/__init__.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/start_server.sh",
        ".restructuring_backup/test_delta_module.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        ".restructuring_backup/test_enhanced_recipe_parser.py",
        ".restructuring_backup/test_execution_report.md",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/test_visualization_system.py",
        ".restructuring_backup/test_workspace_cleaner_v2.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_integration.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_basic_performance.py",
        ".restructuring_backup/tests/test_core_functionality.py",
        ".restructuring_backup/tests/test_delta_compression.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        ".restructuring_backup/tests/test_integration.py",
        ".restructuring_backup/tests/test_performance_load.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tests/test_simple_validation.py",
        ".restructuring_backup/tests/test_websocket_performance.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        ".restructuring_backup/tools/context.sh",
        ".restructuring_backup/tools/documentation_updater.py",
        ".restructuring_backup/tools/phased_restructurer.py",
        ".restructuring_backup/tools/workspace_cleaner.py",
        ".restructuring_backup/tools/workspace_cleaner_clean.py",
        ".restructuring_backup/tools/workspace_cleaner_v2.py",
        ".restructuring_backup/tools/workspace_restructurer.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/delta_compression.md",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "docs/test_execution_report.md",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/enhanced_recipe_parser.py",
        "orchestrator/persistence/core.py",
        "orchestrator/recipe_parser.py",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        "requirements.txt",
        "src/analysis/registry.py",
        "src/core/__init__.py",
        "src/core/logger.py",
        "tests/test_core_functionality.py",
        "tests/test_delta_compression.py",
        "tests/test_enhanced_recipe_parser.py",
        "tests/test_realtime_performance.py",
        "tools/phased_restructurer.py",
        "tools/post_restructure_validator.py",
        "tools/workspace_restructurer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "_detect_framework_version",
        "update_readme_baseline_framework",
        "_generate_consolidated_readme",
        "_generate_readme_header",
        "_generate_readme_overview",
        "_generate_readme_status",
        "_generate_readme_architecture",
        "_generate_readme_features",
        "_generate_readme_getting_started",
        "_generate_readme_documentation_links",
        "_generate_readme_contributing",
        "_generate_readme_footer",
        "save_updated_documentation",
        "DocumentationSection",
        "BaselineDocumentationStructure",
        "BaselineDocumentationUpdater"
      ],
      "imports": [
        "os",
        "json",
        "re",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "main",
          "line": 529,
          "args": [],
          "docstring": "Main function to execute baseline documentation updates.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 69,
          "args": [
            "self",
            "workspace_root"
          ],
          "docstring": "Initialize baseline documentation updater with workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory",
          "decorators": []
        },
        {
          "name": "_detect_framework_version",
          "line": 97,
          "args": [
            "self"
          ],
          "docstring": "Detect current framework version from project configuration files.\n\nReturns:\n    str: Framework version string or default baseline version",
          "decorators": []
        },
        {
          "name": "update_readme_baseline_framework",
          "line": 137,
          "args": [
            "self"
          ],
          "docstring": "Update README.md to reflect current baseline framework status.\n\nReturns:\n    str: Updated README.md content",
          "decorators": []
        },
        {
          "name": "_generate_consolidated_readme",
          "line": 174,
          "args": [
            "self",
            "baseline_data"
          ],
          "docstring": "Generate consolidated README content with baseline framework information.\n\nArgs:\n    baseline_data: Baseline framework analysis data\n    \nReturns:\n    str: Complete consolidated README content",
          "decorators": []
        },
        {
          "name": "_generate_readme_header",
          "line": 212,
          "args": [
            "self",
            "version"
          ],
          "docstring": "Generate README header section with baseline framework branding.",
          "decorators": []
        },
        {
          "name": "_generate_readme_overview",
          "line": 222,
          "args": [
            "self"
          ],
          "docstring": "Generate framework overview section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_status",
          "line": 237,
          "args": [
            "self",
            "total_components",
            "component_types",
            "total_loc",
            "avg_complexity",
            "architecture_layers"
          ],
          "docstring": "Generate current baseline framework status section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_architecture",
          "line": 293,
          "args": [
            "self",
            "baseline_data"
          ],
          "docstring": "Generate architecture section with framework structure.",
          "decorators": []
        },
        {
          "name": "_generate_readme_features",
          "line": 340,
          "args": [
            "self"
          ],
          "docstring": "Generate key features section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_getting_started",
          "line": 374,
          "args": [
            "self"
          ],
          "docstring": "Generate getting started section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_documentation_links",
          "line": 433,
          "args": [
            "self"
          ],
          "docstring": "Generate documentation links section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_contributing",
          "line": 458,
          "args": [
            "self"
          ],
          "docstring": "Generate contributing section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_footer",
          "line": 494,
          "args": [
            "self"
          ],
          "docstring": "Generate README footer section.",
          "decorators": []
        },
        {
          "name": "save_updated_documentation",
          "line": 509,
          "args": [
            "self"
          ],
          "docstring": "Save all updated documentation files to workspace.\n\nReturns:\n    Dict[str, str]: Map of updated files to their new content",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DocumentationSection",
          "line": 34,
          "bases": [],
          "docstring": "Data class representing a documentation section with metadata and content.",
          "methods": []
        },
        {
          "name": "BaselineDocumentationStructure",
          "line": 50,
          "bases": [],
          "docstring": "Complete baseline documentation structure with all sections and metadata.",
          "methods": []
        },
        {
          "name": "BaselineDocumentationUpdater",
          "line": 64,
          "bases": [],
          "docstring": "Comprehensive documentation updater for Framework0 baseline framework.",
          "methods": [
            {
              "name": "__init__",
              "line": 69,
              "args": [
                "self",
                "workspace_root"
              ],
              "docstring": "Initialize baseline documentation updater with workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory"
            },
            {
              "name": "_detect_framework_version",
              "line": 97,
              "args": [
                "self"
              ],
              "docstring": "Detect current framework version from project configuration files.\n\nReturns:\n    str: Framework version string or default baseline version"
            },
            {
              "name": "update_readme_baseline_framework",
              "line": 137,
              "args": [
                "self"
              ],
              "docstring": "Update README.md to reflect current baseline framework status.\n\nReturns:\n    str: Updated README.md content"
            },
            {
              "name": "_generate_consolidated_readme",
              "line": 174,
              "args": [
                "self",
                "baseline_data"
              ],
              "docstring": "Generate consolidated README content with baseline framework information.\n\nArgs:\n    baseline_data: Baseline framework analysis data\n    \nReturns:\n    str: Complete consolidated README content"
            },
            {
              "name": "_generate_readme_header",
              "line": 212,
              "args": [
                "self",
                "version"
              ],
              "docstring": "Generate README header section with baseline framework branding."
            },
            {
              "name": "_generate_readme_overview",
              "line": 222,
              "args": [
                "self"
              ],
              "docstring": "Generate framework overview section."
            },
            {
              "name": "_generate_readme_status",
              "line": 237,
              "args": [
                "self",
                "total_components",
                "component_types",
                "total_loc",
                "avg_complexity",
                "architecture_layers"
              ],
              "docstring": "Generate current baseline framework status section."
            },
            {
              "name": "_generate_readme_architecture",
              "line": 293,
              "args": [
                "self",
                "baseline_data"
              ],
              "docstring": "Generate architecture section with framework structure."
            },
            {
              "name": "_generate_readme_features",
              "line": 340,
              "args": [
                "self"
              ],
              "docstring": "Generate key features section."
            },
            {
              "name": "_generate_readme_getting_started",
              "line": 374,
              "args": [
                "self"
              ],
              "docstring": "Generate getting started section."
            },
            {
              "name": "_generate_readme_documentation_links",
              "line": 433,
              "args": [
                "self"
              ],
              "docstring": "Generate documentation links section."
            },
            {
              "name": "_generate_readme_contributing",
              "line": 458,
              "args": [
                "self"
              ],
              "docstring": "Generate contributing section."
            },
            {
              "name": "_generate_readme_footer",
              "line": 494,
              "args": [
                "self"
              ],
              "docstring": "Generate README footer section."
            },
            {
              "name": "save_updated_documentation",
              "line": 509,
              "args": [
                "self"
              ],
              "docstring": "Save all updated documentation files to workspace.\n\nReturns:\n    Dict[str, str]: Map of updated files to their new content"
            }
          ]
        }
      ],
      "lines_of_code": 455,
      "complexity_score": 42,
      "last_modified": "2025-10-05T00:38:11.105652",
      "checksum": "cab9bae93d5d29eff5886cd3dfe4f830",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tools/baseline_framework_analyzer.py": {
      "name": ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "path": ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "component_type": "development_tool",
      "description": "Baseline Framework Analyzer for Framework0 Workspace",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
        ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
        ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
        ".restructuring_backup/README.md",
        ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/configs/server_config.py",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/delta_compression.md",
        ".restructuring_backup/docs/deployment_guide.md",
        ".restructuring_backup/docs/getting_started.md",
        ".restructuring_backup/docs/integration_patterns.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/docs/troubleshooting.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/examples/README.md",
        ".restructuring_backup/examples/basic_usage.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/examples/integration_demo.py",
        ".restructuring_backup/examples/shell_demo.sh",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/orchestrator/__init__.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/__init__.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/orchestrator/recipe_parser.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/orchestrator/runner.py",
        ".restructuring_backup/pyproject.toml",
        ".restructuring_backup/requirements.txt",
        ".restructuring_backup/scriptlets/__init__.py",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/setup.cfg",
        ".restructuring_backup/src/__init__.py",
        ".restructuring_backup/src/analysis/__init__.py",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/src/analysis/registry.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/core/__init__.py",
        ".restructuring_backup/src/core/logger.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/__init__.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/start_server.sh",
        ".restructuring_backup/test_delta_module.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        ".restructuring_backup/test_enhanced_recipe_parser.py",
        ".restructuring_backup/test_execution_report.md",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/test_visualization_system.py",
        ".restructuring_backup/test_workspace_cleaner_v2.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_integration.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_basic_performance.py",
        ".restructuring_backup/tests/test_core_functionality.py",
        ".restructuring_backup/tests/test_delta_compression.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        ".restructuring_backup/tests/test_integration.py",
        ".restructuring_backup/tests/test_performance_load.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tests/test_simple_validation.py",
        ".restructuring_backup/tests/test_websocket_performance.py",
        ".restructuring_backup/tools/baseline_documentation_updater.py",
        ".restructuring_backup/tools/context.sh",
        ".restructuring_backup/tools/documentation_updater.py",
        ".restructuring_backup/tools/phased_restructurer.py",
        ".restructuring_backup/tools/workspace_cleaner.py",
        ".restructuring_backup/tools/workspace_cleaner_clean.py",
        ".restructuring_backup/tools/workspace_cleaner_v2.py",
        ".restructuring_backup/tools/workspace_restructurer.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/delta_compression.md",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "docs/test_execution_report.md",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/enhanced_recipe_parser.py",
        "orchestrator/persistence/core.py",
        "orchestrator/recipe_parser.py",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        "requirements.txt",
        "src/analysis/registry.py",
        "src/core/__init__.py",
        "src/core/logger.py",
        "tests/test_core_functionality.py",
        "tests/test_delta_compression.py",
        "tests/test_enhanced_recipe_parser.py",
        "tests/test_realtime_performance.py",
        "tools/phased_restructurer.py",
        "tools/post_restructure_validator.py",
        "tools/workspace_restructurer.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "_detect_framework_version",
        "analyze_workspace",
        "_discover_framework_files",
        "_analyze_component",
        "_classify_component_type",
        "_extract_component_description",
        "_determine_framework_role",
        "_analyze_python_component",
        "_analyze_yaml_component",
        "_analyze_shell_component",
        "_analyze_markdown_component",
        "_get_decorator_name",
        "_get_base_name",
        "_calculate_python_complexity",
        "_build_architecture_layers",
        "_analyze_dependencies",
        "_identify_patterns_and_extensions",
        "_generate_analysis_metrics",
        "save_baseline_documentation",
        "BaselineComponent",
        "BaselineFramework",
        "BaselineFrameworkAnalyzer"
      ],
      "imports": [
        "os",
        "ast",
        "json",
        "yaml",
        "re",
        "sys",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "subprocess",
        "hashlib",
        "src.core.logger",
        "logging",
        "tomli"
      ],
      "functions": [
        {
          "name": "main",
          "line": 795,
          "args": [],
          "docstring": "Main function to execute baseline framework analysis and documentation.\n\nThis function orchestrates the complete baseline analysis process,\ngenerates comprehensive documentation, and saves results for future use.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 94,
          "args": [
            "self",
            "workspace_root"
          ],
          "docstring": "Initialize baseline framework analyzer with workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory",
          "decorators": []
        },
        {
          "name": "_detect_framework_version",
          "line": 136,
          "args": [
            "self"
          ],
          "docstring": "Detect current framework version from multiple sources.\n\nReturns:\n    str: Framework version string or default if not found",
          "decorators": []
        },
        {
          "name": "analyze_workspace",
          "line": 185,
          "args": [
            "self"
          ],
          "docstring": "Perform comprehensive workspace analysis to establish baseline framework.\n\nReturns:\n    BaselineFramework: Complete baseline framework structure",
          "decorators": []
        },
        {
          "name": "_discover_framework_files",
          "line": 227,
          "args": [
            "self"
          ],
          "docstring": "Discover all framework-relevant files in the workspace.\n\nReturns:\n    List[Path]: List of paths to framework files",
          "decorators": []
        },
        {
          "name": "_analyze_component",
          "line": 278,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Analyze individual component file and extract metadata.\n\nArgs:\n    file_path: Path to component file for analysis\n    \nReturns:\n    Optional[BaselineComponent]: Component analysis result or None if failed",
          "decorators": []
        },
        {
          "name": "_classify_component_type",
          "line": 329,
          "args": [
            "self",
            "file_path",
            "content"
          ],
          "docstring": "Classify component type based on path and content analysis.\n\nArgs:\n    file_path: Path to component file\n    content: File content for analysis\n    \nReturns:\n    str: Component type classification",
          "decorators": []
        },
        {
          "name": "_extract_component_description",
          "line": 368,
          "args": [
            "self",
            "content"
          ],
          "docstring": "Extract component description from file content.\n\nArgs:\n    content: File content to analyze\n    \nReturns:\n    str: Extracted description or default message",
          "decorators": []
        },
        {
          "name": "_determine_framework_role",
          "line": 401,
          "args": [
            "self",
            "file_path",
            "content"
          ],
          "docstring": "Determine the specific role of component within Framework0.\n\nArgs:\n    file_path: Path to component file\n    content: File content for analysis\n    \nReturns:\n    str: Framework role classification",
          "decorators": []
        },
        {
          "name": "_analyze_python_component",
          "line": 444,
          "args": [
            "self",
            "component",
            "content"
          ],
          "docstring": "Perform detailed analysis of Python component.\n\nArgs:\n    component: Component to analyze and update\n    content: Python source code content",
          "decorators": []
        },
        {
          "name": "_analyze_yaml_component",
          "line": 510,
          "args": [
            "self",
            "component",
            "content"
          ],
          "docstring": "Analyze YAML configuration component.\n\nArgs:\n    component: Component to analyze and update\n    content: YAML content",
          "decorators": []
        },
        {
          "name": "_analyze_shell_component",
          "line": 525,
          "args": [
            "self",
            "component",
            "content"
          ],
          "docstring": "Analyze shell script component.\n\nArgs:\n    component: Component to analyze and update\n    content: Shell script content",
          "decorators": []
        },
        {
          "name": "_analyze_markdown_component",
          "line": 546,
          "args": [
            "self",
            "component",
            "content"
          ],
          "docstring": "Analyze markdown documentation component.\n\nArgs:\n    component: Component to analyze and update\n    content: Markdown content",
          "decorators": []
        },
        {
          "name": "_get_decorator_name",
          "line": 562,
          "args": [
            "self",
            "decorator"
          ],
          "docstring": "Extract decorator name from AST node.\n\nArgs:\n    decorator: AST decorator node\n    \nReturns:\n    str: Decorator name",
          "decorators": []
        },
        {
          "name": "_get_base_name",
          "line": 581,
          "args": [
            "self",
            "base"
          ],
          "docstring": "Extract base class name from AST node.\n\nArgs:\n    base: AST base class node\n    \nReturns:\n    str: Base class name",
          "decorators": []
        },
        {
          "name": "_calculate_python_complexity",
          "line": 597,
          "args": [
            "self",
            "tree"
          ],
          "docstring": "Calculate complexity score for Python code.\n\nArgs:\n    tree: Python AST tree\n    \nReturns:\n    int: Complexity score",
          "decorators": []
        },
        {
          "name": "_build_architecture_layers",
          "line": 622,
          "args": [
            "self"
          ],
          "docstring": "Build architectural layer organization from components.",
          "decorators": []
        },
        {
          "name": "_analyze_dependencies",
          "line": 633,
          "args": [
            "self"
          ],
          "docstring": "Analyze component dependencies and build dependency graph.",
          "decorators": []
        },
        {
          "name": "_identify_patterns_and_extensions",
          "line": 650,
          "args": [
            "self"
          ],
          "docstring": "Identify framework patterns and extension points.",
          "decorators": []
        },
        {
          "name": "_generate_analysis_metrics",
          "line": 685,
          "args": [
            "self"
          ],
          "docstring": "Generate comprehensive analysis metrics.",
          "decorators": []
        },
        {
          "name": "save_baseline_documentation",
          "line": 738,
          "args": [
            "self",
            "output_path"
          ],
          "docstring": "Save comprehensive baseline framework documentation.\n\nArgs:\n    output_path: Optional custom output path\n    \nReturns:\n    Path: Path to saved documentation file",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BaselineComponent",
          "line": 39,
          "bases": [],
          "docstring": "Data class representing a baseline framework component with metadata.\n\nThis class encapsulates all information about a framework component\nincluding its location, purpose, dependencies, and analysis metrics.",
          "methods": []
        },
        {
          "name": "BaselineFramework",
          "line": 64,
          "bases": [],
          "docstring": "Complete baseline framework structure with all components and metadata.\n\nThis class represents the entire Framework0 baseline including all\ncomponents, their relationships, and comprehensive analysis results.",
          "methods": []
        },
        {
          "name": "BaselineFrameworkAnalyzer",
          "line": 85,
          "bases": [],
          "docstring": "Comprehensive analyzer for establishing Framework0 baseline documentation.\n\nThis class performs deep analysis of the workspace structure, components,\nand relationships to create authoritative baseline documentation that\nserves as the foundation for all framework operations and extensions.",
          "methods": [
            {
              "name": "__init__",
              "line": 94,
              "args": [
                "self",
                "workspace_root"
              ],
              "docstring": "Initialize baseline framework analyzer with workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory"
            },
            {
              "name": "_detect_framework_version",
              "line": 136,
              "args": [
                "self"
              ],
              "docstring": "Detect current framework version from multiple sources.\n\nReturns:\n    str: Framework version string or default if not found"
            },
            {
              "name": "analyze_workspace",
              "line": 185,
              "args": [
                "self"
              ],
              "docstring": "Perform comprehensive workspace analysis to establish baseline framework.\n\nReturns:\n    BaselineFramework: Complete baseline framework structure"
            },
            {
              "name": "_discover_framework_files",
              "line": 227,
              "args": [
                "self"
              ],
              "docstring": "Discover all framework-relevant files in the workspace.\n\nReturns:\n    List[Path]: List of paths to framework files"
            },
            {
              "name": "_analyze_component",
              "line": 278,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Analyze individual component file and extract metadata.\n\nArgs:\n    file_path: Path to component file for analysis\n    \nReturns:\n    Optional[BaselineComponent]: Component analysis result or None if failed"
            },
            {
              "name": "_classify_component_type",
              "line": 329,
              "args": [
                "self",
                "file_path",
                "content"
              ],
              "docstring": "Classify component type based on path and content analysis.\n\nArgs:\n    file_path: Path to component file\n    content: File content for analysis\n    \nReturns:\n    str: Component type classification"
            },
            {
              "name": "_extract_component_description",
              "line": 368,
              "args": [
                "self",
                "content"
              ],
              "docstring": "Extract component description from file content.\n\nArgs:\n    content: File content to analyze\n    \nReturns:\n    str: Extracted description or default message"
            },
            {
              "name": "_determine_framework_role",
              "line": 401,
              "args": [
                "self",
                "file_path",
                "content"
              ],
              "docstring": "Determine the specific role of component within Framework0.\n\nArgs:\n    file_path: Path to component file\n    content: File content for analysis\n    \nReturns:\n    str: Framework role classification"
            },
            {
              "name": "_analyze_python_component",
              "line": 444,
              "args": [
                "self",
                "component",
                "content"
              ],
              "docstring": "Perform detailed analysis of Python component.\n\nArgs:\n    component: Component to analyze and update\n    content: Python source code content"
            },
            {
              "name": "_analyze_yaml_component",
              "line": 510,
              "args": [
                "self",
                "component",
                "content"
              ],
              "docstring": "Analyze YAML configuration component.\n\nArgs:\n    component: Component to analyze and update\n    content: YAML content"
            },
            {
              "name": "_analyze_shell_component",
              "line": 525,
              "args": [
                "self",
                "component",
                "content"
              ],
              "docstring": "Analyze shell script component.\n\nArgs:\n    component: Component to analyze and update\n    content: Shell script content"
            },
            {
              "name": "_analyze_markdown_component",
              "line": 546,
              "args": [
                "self",
                "component",
                "content"
              ],
              "docstring": "Analyze markdown documentation component.\n\nArgs:\n    component: Component to analyze and update\n    content: Markdown content"
            },
            {
              "name": "_get_decorator_name",
              "line": 562,
              "args": [
                "self",
                "decorator"
              ],
              "docstring": "Extract decorator name from AST node.\n\nArgs:\n    decorator: AST decorator node\n    \nReturns:\n    str: Decorator name"
            },
            {
              "name": "_get_base_name",
              "line": 581,
              "args": [
                "self",
                "base"
              ],
              "docstring": "Extract base class name from AST node.\n\nArgs:\n    base: AST base class node\n    \nReturns:\n    str: Base class name"
            },
            {
              "name": "_calculate_python_complexity",
              "line": 597,
              "args": [
                "self",
                "tree"
              ],
              "docstring": "Calculate complexity score for Python code.\n\nArgs:\n    tree: Python AST tree\n    \nReturns:\n    int: Complexity score"
            },
            {
              "name": "_build_architecture_layers",
              "line": 622,
              "args": [
                "self"
              ],
              "docstring": "Build architectural layer organization from components."
            },
            {
              "name": "_analyze_dependencies",
              "line": 633,
              "args": [
                "self"
              ],
              "docstring": "Analyze component dependencies and build dependency graph."
            },
            {
              "name": "_identify_patterns_and_extensions",
              "line": 650,
              "args": [
                "self"
              ],
              "docstring": "Identify framework patterns and extension points."
            },
            {
              "name": "_generate_analysis_metrics",
              "line": 685,
              "args": [
                "self"
              ],
              "docstring": "Generate comprehensive analysis metrics."
            },
            {
              "name": "save_baseline_documentation",
              "line": 738,
              "args": [
                "self",
                "output_path"
              ],
              "docstring": "Save comprehensive baseline framework documentation.\n\nArgs:\n    output_path: Optional custom output path\n    \nReturns:\n    Path: Path to saved documentation file"
            }
          ]
        }
      ],
      "lines_of_code": 703,
      "complexity_score": 136,
      "last_modified": "2025-10-05T00:34:20.983492",
      "checksum": "4bc2a0444606406eea77e0cc5e80cce3",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/tools/context.sh": {
      "name": ".restructuring_backup/tools/context.sh",
      "path": ".restructuring_backup/tools/context.sh",
      "component_type": "development_tool",
      "description": "Context Server Shell Client - Cross-Platform Context Management",
      "dependencies": [],
      "exports": [
        "print_help",
        "log",
        "check_dependencies",
        "validate_server_connection",
        "parse_json_value",
        "format_output",
        "make_request",
        "cmd_get",
        "cmd_set",
        "cmd_list",
        "cmd_history",
        "cmd_status",
        "cmd_monitor",
        "cmd_clear",
        "main"
      ],
      "imports": [],
      "functions": [
        {
          "name": "print_help",
          "line": 37,
          "type": "shell_function"
        },
        {
          "name": "log",
          "line": 112,
          "type": "shell_function"
        },
        {
          "name": "check_dependencies",
          "line": 139,
          "type": "shell_function"
        },
        {
          "name": "validate_server_connection",
          "line": 163,
          "type": "shell_function"
        },
        {
          "name": "parse_json_value",
          "line": 178,
          "type": "shell_function"
        },
        {
          "name": "format_output",
          "line": 201,
          "type": "shell_function"
        },
        {
          "name": "make_request",
          "line": 238,
          "type": "shell_function"
        },
        {
          "name": "cmd_get",
          "line": 288,
          "type": "shell_function"
        },
        {
          "name": "cmd_set",
          "line": 310,
          "type": "shell_function"
        },
        {
          "name": "cmd_list",
          "line": 353,
          "type": "shell_function"
        },
        {
          "name": "cmd_history",
          "line": 379,
          "type": "shell_function"
        },
        {
          "name": "cmd_status",
          "line": 393,
          "type": "shell_function"
        },
        {
          "name": "cmd_monitor",
          "line": 431,
          "type": "shell_function"
        },
        {
          "name": "cmd_clear",
          "line": 469,
          "type": "shell_function"
        },
        {
          "name": "main",
          "line": 485,
          "type": "shell_function"
        }
      ],
      "classes": [],
      "lines_of_code": 516,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:19:13.986420",
      "checksum": "3809320a77d960e7e84f968a05d18067",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tools/documentation_updater.py": {
      "name": ".restructuring_backup/tools/documentation_updater.py",
      "path": ".restructuring_backup/tools/documentation_updater.py",
      "component_type": "development_tool",
      "description": "Documentation Updater for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
        ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
        ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
        ".restructuring_backup/README.md",
        ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/configs/server_config.py",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/delta_compression.md",
        ".restructuring_backup/docs/deployment_guide.md",
        ".restructuring_backup/docs/getting_started.md",
        ".restructuring_backup/docs/integration_patterns.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/docs/troubleshooting.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/examples/README.md",
        ".restructuring_backup/examples/basic_usage.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/examples/integration_demo.py",
        ".restructuring_backup/examples/shell_demo.sh",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/orchestrator/__init__.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/__init__.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/orchestrator/recipe_parser.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/orchestrator/runner.py",
        ".restructuring_backup/pyproject.toml",
        ".restructuring_backup/requirements.txt",
        ".restructuring_backup/scriptlets/__init__.py",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/setup.cfg",
        ".restructuring_backup/src/__init__.py",
        ".restructuring_backup/src/analysis/__init__.py",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/src/analysis/registry.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/core/__init__.py",
        ".restructuring_backup/src/core/logger.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/__init__.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/start_server.sh",
        ".restructuring_backup/test_delta_module.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        ".restructuring_backup/test_enhanced_recipe_parser.py",
        ".restructuring_backup/test_execution_report.md",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/test_visualization_system.py",
        ".restructuring_backup/test_workspace_cleaner_v2.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_integration.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_basic_performance.py",
        ".restructuring_backup/tests/test_core_functionality.py",
        ".restructuring_backup/tests/test_delta_compression.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        ".restructuring_backup/tests/test_integration.py",
        ".restructuring_backup/tests/test_performance_load.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tests/test_simple_validation.py",
        ".restructuring_backup/tests/test_websocket_performance.py",
        ".restructuring_backup/tools/baseline_documentation_updater.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        ".restructuring_backup/tools/context.sh",
        ".restructuring_backup/tools/phased_restructurer.py",
        ".restructuring_backup/tools/workspace_cleaner.py",
        ".restructuring_backup/tools/workspace_cleaner_clean.py",
        ".restructuring_backup/tools/workspace_cleaner_v2.py",
        ".restructuring_backup/tools/workspace_restructurer.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/delta_compression.md",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "docs/test_execution_report.md",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/enhanced_recipe_parser.py",
        "orchestrator/persistence/core.py",
        "orchestrator/recipe_parser.py",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        "requirements.txt",
        "src/analysis/registry.py",
        "src/core/__init__.py",
        "src/core/logger.py",
        "tests/test_core_functionality.py",
        "tests/test_delta_compression.py",
        "tests/test_enhanced_recipe_parser.py",
        "tests/test_realtime_performance.py",
        "tools/phased_restructurer.py",
        "tools/post_restructure_validator.py",
        "tools/workspace_restructurer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "scan_python_modules",
        "_extract_module_info",
        "_extract_class_info",
        "_extract_function_info",
        "_extract_import_info",
        "generate_api_reference",
        "_generate_module_documentation",
        "_generate_class_documentation",
        "_generate_function_documentation",
        "generate_method_index",
        "_build_signature",
        "generate_deployment_guide",
        "generate_integration_patterns",
        "generate_troubleshooting_guide",
        "update_all_documentation",
        "get_logger",
        "DocumentationGenerator"
      ],
      "imports": [
        "os",
        "json",
        "ast",
        "inspect",
        "importlib.util",
        "pathlib",
        "typing",
        "datetime",
        "re",
        "src.core.logger",
        "sys",
        "logging"
      ],
      "functions": [
        {
          "name": "main",
          "line": 1001,
          "args": [],
          "docstring": "Main entry point for documentation updater.\nHandles command-line execution and error reporting.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 49,
          "args": [
            "self",
            "project_root",
            "debug"
          ],
          "docstring": "Initialize documentation generator with project configuration.\n\nArgs:\n    project_root: Root directory of the project to document\n    debug: Enable debug logging for detailed operation traces",
          "decorators": []
        },
        {
          "name": "scan_python_modules",
          "line": 76,
          "args": [
            "self"
          ],
          "docstring": "Scan all Python modules in the project for documentation extraction.\n\nReturns:\n    Dictionary mapping module paths to extracted documentation data",
          "decorators": []
        },
        {
          "name": "_extract_module_info",
          "line": 114,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Extract documentation information from a single Python module.\n\nArgs:\n    file_path: Path to the Python file to analyze\n    \nReturns:\n    Dictionary containing module documentation data or None on error",
          "decorators": []
        },
        {
          "name": "_extract_class_info",
          "line": 162,
          "args": [
            "self",
            "node"
          ],
          "docstring": "Extract documentation information from a class definition.\n\nArgs:\n    node: AST node representing a class definition\n    \nReturns:\n    Dictionary containing class documentation data",
          "decorators": []
        },
        {
          "name": "_extract_function_info",
          "line": 203,
          "args": [
            "self",
            "node",
            "is_method"
          ],
          "docstring": "Extract documentation information from a function definition.\n\nArgs:\n    node: AST node representing a function definition\n    is_method: Whether this function is a class method\n    \nReturns:\n    Dictionary containing function documentation data",
          "decorators": []
        },
        {
          "name": "_extract_import_info",
          "line": 257,
          "args": [
            "self",
            "node"
          ],
          "docstring": "Extract import information from import statements.\n\nArgs:\n    node: AST node representing an import statement\n    \nReturns:\n    List of import information dictionaries",
          "decorators": []
        },
        {
          "name": "generate_api_reference",
          "line": 292,
          "args": [
            "self",
            "modules"
          ],
          "docstring": "Generate comprehensive API reference documentation.\n\nArgs:\n    modules: Dictionary of extracted module information\n    \nReturns:\n    Markdown-formatted API reference documentation",
          "decorators": []
        },
        {
          "name": "_generate_module_documentation",
          "line": 328,
          "args": [
            "self",
            "doc",
            "module_path",
            "module_info"
          ],
          "docstring": "Generate documentation for a single module.\n\nArgs:\n    doc: List to append documentation lines to\n    module_path: Path to the module being documented\n    module_info: Extracted module information dictionary",
          "decorators": []
        },
        {
          "name": "_generate_class_documentation",
          "line": 363,
          "args": [
            "self",
            "doc",
            "class_info"
          ],
          "docstring": "Generate documentation for a single class.\n\nArgs:\n    doc: List to append documentation lines to\n    class_info: Extracted class information dictionary",
          "decorators": []
        },
        {
          "name": "_generate_function_documentation",
          "line": 397,
          "args": [
            "self",
            "doc",
            "func_info",
            "is_class_method"
          ],
          "docstring": "Generate documentation for a single function or method.\n\nArgs:\n    doc: List to append documentation lines to\n    func_info: Extracted function information dictionary\n    is_class_method: Whether this function is a class method",
          "decorators": []
        },
        {
          "name": "generate_method_index",
          "line": 439,
          "args": [
            "self",
            "modules"
          ],
          "docstring": "Generate alphabetical index of all methods and functions.\n\nArgs:\n    modules: Dictionary of extracted module information\n    \nReturns:\n    Markdown-formatted method index documentation",
          "decorators": []
        },
        {
          "name": "_build_signature",
          "line": 515,
          "args": [
            "self",
            "func_info"
          ],
          "docstring": "Build function signature string from function information.\n\nArgs:\n    func_info: Function information dictionary\n    \nReturns:\n    String representation of function signature",
          "decorators": []
        },
        {
          "name": "generate_deployment_guide",
          "line": 545,
          "args": [
            "self"
          ],
          "docstring": "Generate deployment and configuration guide.\n\nReturns:\n    Markdown-formatted deployment guide documentation",
          "decorators": []
        },
        {
          "name": "generate_integration_patterns",
          "line": 631,
          "args": [
            "self"
          ],
          "docstring": "Generate client integration examples and patterns.\n\nReturns:\n    Markdown-formatted integration patterns documentation",
          "decorators": []
        },
        {
          "name": "generate_troubleshooting_guide",
          "line": 778,
          "args": [
            "self"
          ],
          "docstring": "Generate troubleshooting and FAQ guide.\n\nReturns:\n    Markdown-formatted troubleshooting guide",
          "decorators": []
        },
        {
          "name": "update_all_documentation",
          "line": 936,
          "args": [
            "self"
          ],
          "docstring": "Generate and update all documentation files.\n\nReturns:\n    Dictionary mapping documentation types to their file paths",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 26,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Fallback logger when core logger unavailable.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DocumentationGenerator",
          "line": 41,
          "bases": [],
          "docstring": "Advanced documentation generator for Framework0 projects.\n\nAutomatically extracts docstrings, type hints, and method signatures\nto create comprehensive API documentation and usage guides.",
          "methods": [
            {
              "name": "__init__",
              "line": 49,
              "args": [
                "self",
                "project_root",
                "debug"
              ],
              "docstring": "Initialize documentation generator with project configuration.\n\nArgs:\n    project_root: Root directory of the project to document\n    debug: Enable debug logging for detailed operation traces"
            },
            {
              "name": "scan_python_modules",
              "line": 76,
              "args": [
                "self"
              ],
              "docstring": "Scan all Python modules in the project for documentation extraction.\n\nReturns:\n    Dictionary mapping module paths to extracted documentation data"
            },
            {
              "name": "_extract_module_info",
              "line": 114,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Extract documentation information from a single Python module.\n\nArgs:\n    file_path: Path to the Python file to analyze\n    \nReturns:\n    Dictionary containing module documentation data or None on error"
            },
            {
              "name": "_extract_class_info",
              "line": 162,
              "args": [
                "self",
                "node"
              ],
              "docstring": "Extract documentation information from a class definition.\n\nArgs:\n    node: AST node representing a class definition\n    \nReturns:\n    Dictionary containing class documentation data"
            },
            {
              "name": "_extract_function_info",
              "line": 203,
              "args": [
                "self",
                "node",
                "is_method"
              ],
              "docstring": "Extract documentation information from a function definition.\n\nArgs:\n    node: AST node representing a function definition\n    is_method: Whether this function is a class method\n    \nReturns:\n    Dictionary containing function documentation data"
            },
            {
              "name": "_extract_import_info",
              "line": 257,
              "args": [
                "self",
                "node"
              ],
              "docstring": "Extract import information from import statements.\n\nArgs:\n    node: AST node representing an import statement\n    \nReturns:\n    List of import information dictionaries"
            },
            {
              "name": "generate_api_reference",
              "line": 292,
              "args": [
                "self",
                "modules"
              ],
              "docstring": "Generate comprehensive API reference documentation.\n\nArgs:\n    modules: Dictionary of extracted module information\n    \nReturns:\n    Markdown-formatted API reference documentation"
            },
            {
              "name": "_generate_module_documentation",
              "line": 328,
              "args": [
                "self",
                "doc",
                "module_path",
                "module_info"
              ],
              "docstring": "Generate documentation for a single module.\n\nArgs:\n    doc: List to append documentation lines to\n    module_path: Path to the module being documented\n    module_info: Extracted module information dictionary"
            },
            {
              "name": "_generate_class_documentation",
              "line": 363,
              "args": [
                "self",
                "doc",
                "class_info"
              ],
              "docstring": "Generate documentation for a single class.\n\nArgs:\n    doc: List to append documentation lines to\n    class_info: Extracted class information dictionary"
            },
            {
              "name": "_generate_function_documentation",
              "line": 397,
              "args": [
                "self",
                "doc",
                "func_info",
                "is_class_method"
              ],
              "docstring": "Generate documentation for a single function or method.\n\nArgs:\n    doc: List to append documentation lines to\n    func_info: Extracted function information dictionary\n    is_class_method: Whether this function is a class method"
            },
            {
              "name": "generate_method_index",
              "line": 439,
              "args": [
                "self",
                "modules"
              ],
              "docstring": "Generate alphabetical index of all methods and functions.\n\nArgs:\n    modules: Dictionary of extracted module information\n    \nReturns:\n    Markdown-formatted method index documentation"
            },
            {
              "name": "_build_signature",
              "line": 515,
              "args": [
                "self",
                "func_info"
              ],
              "docstring": "Build function signature string from function information.\n\nArgs:\n    func_info: Function information dictionary\n    \nReturns:\n    String representation of function signature"
            },
            {
              "name": "generate_deployment_guide",
              "line": 545,
              "args": [
                "self"
              ],
              "docstring": "Generate deployment and configuration guide.\n\nReturns:\n    Markdown-formatted deployment guide documentation"
            },
            {
              "name": "generate_integration_patterns",
              "line": 631,
              "args": [
                "self"
              ],
              "docstring": "Generate client integration examples and patterns.\n\nReturns:\n    Markdown-formatted integration patterns documentation"
            },
            {
              "name": "generate_troubleshooting_guide",
              "line": 778,
              "args": [
                "self"
              ],
              "docstring": "Generate troubleshooting and FAQ guide.\n\nReturns:\n    Markdown-formatted troubleshooting guide"
            },
            {
              "name": "update_all_documentation",
              "line": 936,
              "args": [
                "self"
              ],
              "docstring": "Generate and update all documentation files.\n\nReturns:\n    Dictionary mapping documentation types to their file paths"
            }
          ]
        }
      ],
      "lines_of_code": 874,
      "complexity_score": 95,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "05c26519e54ae7bc2e715a701e9d0d36",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tools/phased_restructurer.py": {
      "name": ".restructuring_backup/tools/phased_restructurer.py",
      "path": ".restructuring_backup/tools/phased_restructurer.py",
      "component_type": "development_tool",
      "description": "Framework0 Phased Workspace Restructurer",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "load_restructuring_plan",
        "get_current_status",
        "_save_status",
        "get_phase_operations",
        "execute_phase",
        "_execute_operation",
        "_create_backup",
        "_backup_git_state",
        "_create_directory",
        "_create_file",
        "_move_file",
        "_validate_operation",
        "show_status",
        "PhasedRestructurer"
      ],
      "imports": [
        "json",
        "shutil",
        "sys",
        "pathlib",
        "typing",
        "datetime",
        "core.logger",
        "argparse"
      ],
      "functions": [
        {
          "name": "main",
          "line": 488,
          "args": [],
          "docstring": "Main function for phased workspace restructuring execution.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 34,
          "args": [
            "self",
            "workspace_root"
          ],
          "docstring": "Initialize the phased restructurer.\n\nArgs:\n    workspace_root: Absolute path to workspace root directory",
          "decorators": []
        },
        {
          "name": "load_restructuring_plan",
          "line": 84,
          "args": [
            "self"
          ],
          "docstring": "Load the restructuring plan from file.\n\nReturns:\n    Optional[Dict[str, Any]]: Restructuring plan data or None if not found",
          "decorators": []
        },
        {
          "name": "get_current_status",
          "line": 104,
          "args": [
            "self"
          ],
          "docstring": "Get current restructuring status.\n\nReturns:\n    Dict[str, Any]: Current status information",
          "decorators": []
        },
        {
          "name": "_save_status",
          "line": 132,
          "args": [
            "self",
            "status"
          ],
          "docstring": "Save current restructuring status.\n\nArgs:\n    status: Status information to save",
          "decorators": []
        },
        {
          "name": "get_phase_operations",
          "line": 149,
          "args": [
            "self",
            "plan",
            "phase_number"
          ],
          "docstring": "Get operations for a specific phase.\n\nArgs:\n    plan: Complete restructuring plan\n    phase_number: Phase number (1-4)\n\nReturns:\n    List[Dict[str, Any]]: Operations for the specified phase",
          "decorators": []
        },
        {
          "name": "execute_phase",
          "line": 173,
          "args": [
            "self",
            "phase_number",
            "plan"
          ],
          "docstring": "Execute a specific phase of the restructuring plan.\n\nArgs:\n    phase_number: Phase number to execute (1-4)\n    plan: Complete restructuring plan\n\nReturns:\n    bool: True if phase executed successfully, False otherwise",
          "decorators": []
        },
        {
          "name": "_execute_operation",
          "line": 242,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Execute a single restructuring operation.\n\nArgs:\n    operation: Operation definition with type and parameters\n\nReturns:\n    bool: True if operation succeeded, False otherwise",
          "decorators": []
        },
        {
          "name": "_create_backup",
          "line": 275,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Create comprehensive backup of workspace.\n\nArgs:\n    operation: Backup operation parameters\n\nReturns:\n    bool: True if backup created successfully",
          "decorators": []
        },
        {
          "name": "_backup_git_state",
          "line": 322,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Backup current git state.\n\nArgs:\n    operation: Git backup operation parameters\n\nReturns:\n    bool: True if git state backed up successfully",
          "decorators": []
        },
        {
          "name": "_create_directory",
          "line": 351,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Create a directory.\n\nArgs:\n    operation: Directory creation operation parameters\n\nReturns:\n    bool: True if directory created successfully",
          "decorators": []
        },
        {
          "name": "_create_file",
          "line": 378,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Create a file with specified content.\n\nArgs:\n    operation: File creation operation parameters\n\nReturns:\n    bool: True if file created successfully",
          "decorators": []
        },
        {
          "name": "_move_file",
          "line": 413,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Move a file to new location.\n\nArgs:\n    operation: File move operation parameters\n\nReturns:\n    bool: True if file moved successfully",
          "decorators": []
        },
        {
          "name": "_validate_operation",
          "line": 452,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Validate restructuring operation.\n\nArgs:\n    operation: Validation operation parameters\n\nReturns:\n    bool: True if validation passed",
          "decorators": []
        },
        {
          "name": "show_status",
          "line": 466,
          "args": [
            "self"
          ],
          "docstring": "Display current restructuring status.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PhasedRestructurer",
          "line": 26,
          "bases": [],
          "docstring": "Phased workspace restructurer with user approval at each step.\n\nProvides safe, incremental restructuring of workspace to match Framework0\nbaseline layout with comprehensive validation and rollback capabilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 34,
              "args": [
                "self",
                "workspace_root"
              ],
              "docstring": "Initialize the phased restructurer.\n\nArgs:\n    workspace_root: Absolute path to workspace root directory"
            },
            {
              "name": "load_restructuring_plan",
              "line": 84,
              "args": [
                "self"
              ],
              "docstring": "Load the restructuring plan from file.\n\nReturns:\n    Optional[Dict[str, Any]]: Restructuring plan data or None if not found"
            },
            {
              "name": "get_current_status",
              "line": 104,
              "args": [
                "self"
              ],
              "docstring": "Get current restructuring status.\n\nReturns:\n    Dict[str, Any]: Current status information"
            },
            {
              "name": "_save_status",
              "line": 132,
              "args": [
                "self",
                "status"
              ],
              "docstring": "Save current restructuring status.\n\nArgs:\n    status: Status information to save"
            },
            {
              "name": "get_phase_operations",
              "line": 149,
              "args": [
                "self",
                "plan",
                "phase_number"
              ],
              "docstring": "Get operations for a specific phase.\n\nArgs:\n    plan: Complete restructuring plan\n    phase_number: Phase number (1-4)\n\nReturns:\n    List[Dict[str, Any]]: Operations for the specified phase"
            },
            {
              "name": "execute_phase",
              "line": 173,
              "args": [
                "self",
                "phase_number",
                "plan"
              ],
              "docstring": "Execute a specific phase of the restructuring plan.\n\nArgs:\n    phase_number: Phase number to execute (1-4)\n    plan: Complete restructuring plan\n\nReturns:\n    bool: True if phase executed successfully, False otherwise"
            },
            {
              "name": "_execute_operation",
              "line": 242,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Execute a single restructuring operation.\n\nArgs:\n    operation: Operation definition with type and parameters\n\nReturns:\n    bool: True if operation succeeded, False otherwise"
            },
            {
              "name": "_create_backup",
              "line": 275,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Create comprehensive backup of workspace.\n\nArgs:\n    operation: Backup operation parameters\n\nReturns:\n    bool: True if backup created successfully"
            },
            {
              "name": "_backup_git_state",
              "line": 322,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Backup current git state.\n\nArgs:\n    operation: Git backup operation parameters\n\nReturns:\n    bool: True if git state backed up successfully"
            },
            {
              "name": "_create_directory",
              "line": 351,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Create a directory.\n\nArgs:\n    operation: Directory creation operation parameters\n\nReturns:\n    bool: True if directory created successfully"
            },
            {
              "name": "_create_file",
              "line": 378,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Create a file with specified content.\n\nArgs:\n    operation: File creation operation parameters\n\nReturns:\n    bool: True if file created successfully"
            },
            {
              "name": "_move_file",
              "line": 413,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Move a file to new location.\n\nArgs:\n    operation: File move operation parameters\n\nReturns:\n    bool: True if file moved successfully"
            },
            {
              "name": "_validate_operation",
              "line": 452,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Validate restructuring operation.\n\nArgs:\n    operation: Validation operation parameters\n\nReturns:\n    bool: True if validation passed"
            },
            {
              "name": "show_status",
              "line": 466,
              "args": [
                "self"
              ],
              "docstring": "Display current restructuring status."
            }
          ]
        }
      ],
      "lines_of_code": 500,
      "complexity_score": 73,
      "last_modified": "2025-10-05T00:49:02.120737",
      "checksum": "2e4294d55e74254168f04f78707c7399",
      "framework_role": "general_utility",
      "stability": "stable"
    },
    ".restructuring_backup/tools/workspace_cleaner.py": {
      "name": ".restructuring_backup/tools/workspace_cleaner.py",
      "path": ".restructuring_backup/tools/workspace_cleaner.py",
      "component_type": "development_tool",
      "description": "Enhanced Workspace Cleaner for Framework0 Production System",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1216,
      "complexity_score": 0,
      "last_modified": "2025-10-04T17:05:04.032278",
      "checksum": "e985a97ad2bf2d378aba24593c044242",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/tools/workspace_cleaner_clean.py": {
      "name": ".restructuring_backup/tools/workspace_cleaner_clean.py",
      "path": ".restructuring_backup/tools/workspace_cleaner_clean.py",
      "component_type": "development_tool",
      "description": "Workspace Cleaner - IAF0 Framework Cleanup Tool",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "main",
        "__init__",
        "run_cleanup",
        "_create_backup",
        "_remove_obsolete_files",
        "_create_fresh_directories",
        "_verify_consolidated_components",
        "_create_essential_configs",
        "_generate_fresh_documentation",
        "_verify_baseline_integrity",
        "_generate_cleanup_report",
        "WorkspaceCleaner"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "shutil",
        "pathlib",
        "datetime",
        "typing"
      ],
      "functions": [
        {
          "name": "main",
          "line": 682,
          "args": [],
          "docstring": "Main entry point for workspace cleaner.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 27,
          "args": [
            "self",
            "workspace_path"
          ],
          "docstring": "Initialize cleaner with workspace path.",
          "decorators": []
        },
        {
          "name": "run_cleanup",
          "line": 93,
          "args": [
            "self"
          ],
          "docstring": "Execute complete workspace cleanup process.",
          "decorators": []
        },
        {
          "name": "_create_backup",
          "line": 141,
          "args": [
            "self"
          ],
          "docstring": "Create backup of files that will be removed.",
          "decorators": []
        },
        {
          "name": "_remove_obsolete_files",
          "line": 177,
          "args": [
            "self"
          ],
          "docstring": "Remove obsolete files and directories.",
          "decorators": []
        },
        {
          "name": "_create_fresh_directories",
          "line": 215,
          "args": [
            "self"
          ],
          "docstring": "Create fresh baseline directory structure.",
          "decorators": []
        },
        {
          "name": "_verify_consolidated_components",
          "line": 244,
          "args": [
            "self"
          ],
          "docstring": "Verify that all consolidated components are properly in place.",
          "decorators": []
        },
        {
          "name": "_create_essential_configs",
          "line": 275,
          "args": [
            "self"
          ],
          "docstring": "Create essential configuration files for fresh baseline.",
          "decorators": []
        },
        {
          "name": "_generate_fresh_documentation",
          "line": 390,
          "args": [
            "self"
          ],
          "docstring": "Generate fresh documentation for baseline framework.",
          "decorators": []
        },
        {
          "name": "_verify_baseline_integrity",
          "line": 585,
          "args": [
            "self"
          ],
          "docstring": "Verify the integrity of the fresh baseline.",
          "decorators": []
        },
        {
          "name": "_generate_cleanup_report",
          "line": 648,
          "args": [
            "self",
            "integrity_results"
          ],
          "docstring": "Generate comprehensive cleanup report.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceCleaner",
          "line": 24,
          "bases": [],
          "docstring": "Comprehensive workspace cleanup and baseline creation tool.",
          "methods": [
            {
              "name": "__init__",
              "line": 27,
              "args": [
                "self",
                "workspace_path"
              ],
              "docstring": "Initialize cleaner with workspace path."
            },
            {
              "name": "run_cleanup",
              "line": 93,
              "args": [
                "self"
              ],
              "docstring": "Execute complete workspace cleanup process."
            },
            {
              "name": "_create_backup",
              "line": 141,
              "args": [
                "self"
              ],
              "docstring": "Create backup of files that will be removed."
            },
            {
              "name": "_remove_obsolete_files",
              "line": 177,
              "args": [
                "self"
              ],
              "docstring": "Remove obsolete files and directories."
            },
            {
              "name": "_create_fresh_directories",
              "line": 215,
              "args": [
                "self"
              ],
              "docstring": "Create fresh baseline directory structure."
            },
            {
              "name": "_verify_consolidated_components",
              "line": 244,
              "args": [
                "self"
              ],
              "docstring": "Verify that all consolidated components are properly in place."
            },
            {
              "name": "_create_essential_configs",
              "line": 275,
              "args": [
                "self"
              ],
              "docstring": "Create essential configuration files for fresh baseline."
            },
            {
              "name": "_generate_fresh_documentation",
              "line": 390,
              "args": [
                "self"
              ],
              "docstring": "Generate fresh documentation for baseline framework."
            },
            {
              "name": "_verify_baseline_integrity",
              "line": 585,
              "args": [
                "self"
              ],
              "docstring": "Verify the integrity of the fresh baseline."
            },
            {
              "name": "_generate_cleanup_report",
              "line": 648,
              "args": [
                "self",
                "integrity_results"
              ],
              "docstring": "Generate comprehensive cleanup report."
            }
          ]
        }
      ],
      "lines_of_code": 579,
      "complexity_score": 46,
      "last_modified": "2025-10-04T16:23:42.067528",
      "checksum": "9b9dd3e3616c5bd2f28d3044b0b5eb2f",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    ".restructuring_backup/tools/workspace_cleaner_v2.py": {
      "name": ".restructuring_backup/tools/workspace_cleaner_v2.py",
      "path": ".restructuring_backup/tools/workspace_cleaner_v2.py",
      "component_type": "development_tool",
      "description": "Enhanced Workspace Cleaner for Framework0 Production System",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml"
      ],
      "exports": [
        "main",
        "__init__",
        "add_cleanup_rule",
        "add_standard_rules",
        "save_configuration",
        "load_configuration",
        "execute_cleanup",
        "_create_backup",
        "_execute_single_rule",
        "_update_rule_metrics",
        "generate_report",
        "_add_rule_impl",
        "_add_standard_impl",
        "_save_config_impl",
        "_load_config_impl",
        "_execute_cleanup_impl",
        "CleanupRule",
        "CleanupResult",
        "WorkspaceCleanerV2"
      ],
      "imports": [
        "os",
        "sys",
        "shutil",
        "json",
        "time",
        "glob",
        "argparse",
        "subprocess",
        "typing",
        "pathlib",
        "dataclasses",
        "datetime",
        "threading",
        "collections",
        "orchestrator.context.context",
        "src.core.logger",
        "yaml"
      ],
      "functions": [
        {
          "name": "main",
          "line": 983,
          "args": [],
          "docstring": "Command-line interface for WorkspaceCleanerV2.\n\nProvides comprehensive CLI for workspace cleaning with configuration management.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 126,
          "args": [
            "self",
            "workspace_path"
          ],
          "docstring": "Initialize enhanced workspace cleaner with comprehensive configuration.\n\nArgs:\n    workspace_path: Root path of workspace to clean\n    context: Optional Context instance for state management\n    enable_backups: Whether to create backups before destructive operations\n    backup_directory: Custom backup directory (defaults to .cleanup_backups)\n    max_backup_age_days: Maximum age of backups before cleanup\n    enable_metrics: Whether to collect performance and operation metrics\n\nRaises:\n    ValueError: If workspace_path does not exist or is not accessible\n    PermissionError: If insufficient permissions for workspace operations",
          "decorators": []
        },
        {
          "name": "add_cleanup_rule",
          "line": 196,
          "args": [
            "self",
            "rule"
          ],
          "docstring": "Add a custom cleanup rule to the cleaner configuration.\n\nArgs:\n    rule: CleanupRule instance defining the cleaning behavior\n\nRaises:\n    ValueError: If rule name conflicts with existing rule\n    TypeError: If rule is not a CleanupRule instance",
          "decorators": []
        },
        {
          "name": "add_standard_rules",
          "line": 247,
          "args": [
            "self"
          ],
          "docstring": "Add comprehensive standard cleanup rules for Framework0 workspace.\n\nThis method configures the most common cleanup rules that are safe\nand beneficial for typical Framework0 workspace maintenance.",
          "decorators": []
        },
        {
          "name": "save_configuration",
          "line": 364,
          "args": [
            "self",
            "config_path"
          ],
          "docstring": "Save current cleanup rules and settings to JSON/YAML configuration file.\n\nArgs:\n    config_path: Optional path for config file (defaults to workspace/.cleanup_config.json)\n    \nRaises:\n    PermissionError: If unable to write to configuration file\n    ValueError: If configuration data is invalid",
          "decorators": []
        },
        {
          "name": "load_configuration",
          "line": 440,
          "args": [
            "self",
            "config_path"
          ],
          "docstring": "Load cleanup rules and settings from JSON/YAML configuration file.\n\nArgs:\n    config_path: Optional path to config file (defaults to workspace/.cleanup_config.json)\n    \nRaises:\n    FileNotFoundError: If configuration file does not exist\n    ValueError: If configuration format is invalid or unsupported\n    PermissionError: If unable to read configuration file",
          "decorators": []
        },
        {
          "name": "execute_cleanup",
          "line": 546,
          "args": [
            "self"
          ],
          "docstring": "Execute configured cleanup rules with comprehensive safety and monitoring.\n\nArgs:\n    dry_run: Whether to perform actual cleanup or just simulate\n    rules_filter: Optional list of rule names to execute (None = all enabled rules)\n    skip_confirmation: Whether to skip user confirmation for destructive operations\n    enable_progress: Whether to display progress information during execution\n\nReturns:\n    List[CleanupResult]: Detailed results for each executed cleanup rule\n\nExample:\n    >>> cleaner = WorkspaceCleanerV2(\"/path/to/workspace\")\n    >>> cleaner.add_standard_rules()\n    >>> results = cleaner.execute_cleanup(dry_run=False, skip_confirmation=True)",
          "decorators": []
        },
        {
          "name": "_create_backup",
          "line": 683,
          "args": [
            "self"
          ],
          "docstring": "Create backup of workspace before destructive operations.\n\nReturns:\n    Path: Path to created backup directory\n    \nRaises:\n    OSError: If backup creation fails",
          "decorators": []
        },
        {
          "name": "_execute_single_rule",
          "line": 743,
          "args": [
            "self",
            "rule",
            "dry_run",
            "skip_confirmation"
          ],
          "docstring": "Execute a single cleanup rule with comprehensive error handling and metrics.\n\nArgs:\n    rule: CleanupRule to execute\n    dry_run: Whether to perform actual cleanup or simulation\n    skip_confirmation: Whether to skip user confirmation prompts\n    \nReturns:\n    CleanupResult: Detailed results of rule execution",
          "decorators": []
        },
        {
          "name": "_update_rule_metrics",
          "line": 867,
          "args": [
            "self",
            "rule_name",
            "result",
            "execution_time",
            "success"
          ],
          "docstring": "Update performance metrics for a specific cleanup rule.\n\nArgs:\n    rule_name: Name of the rule that was executed\n    result: CleanupResult containing execution details\n    execution_time: Time taken to execute the rule\n    success: Whether the rule executed successfully",
          "decorators": []
        },
        {
          "name": "generate_report",
          "line": 900,
          "args": [
            "self",
            "results",
            "output_path"
          ],
          "docstring": "Generate comprehensive cleanup report with detailed analysis and metrics.\n\nArgs:\n    results: List of CleanupResult from cleanup execution\n    output_path: Optional path to save report (defaults to workspace/cleanup_report.json)\n    \nReturns:\n    Dict[str, Any]: Comprehensive report data structure",
          "decorators": []
        },
        {
          "name": "_add_rule_impl",
          "line": 207,
          "args": [],
          "docstring": "Internal implementation with thread safety and validation.",
          "decorators": []
        },
        {
          "name": "_add_standard_impl",
          "line": 254,
          "args": [],
          "docstring": "Internal implementation of standard rule addition.",
          "decorators": []
        },
        {
          "name": "_save_config_impl",
          "line": 375,
          "args": [],
          "docstring": "Internal implementation of configuration saving.",
          "decorators": []
        },
        {
          "name": "_load_config_impl",
          "line": 452,
          "args": [],
          "docstring": "Internal implementation of configuration loading.",
          "decorators": []
        },
        {
          "name": "_execute_cleanup_impl",
          "line": 571,
          "args": [],
          "docstring": "Internal implementation of cleanup execution with comprehensive tracking.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CleanupRule",
          "line": 54,
          "bases": [],
          "docstring": "Structured cleanup rule definition for flexible cleaning configuration.\n\nThis class defines individual cleanup rules that specify what to clean,\nhow to clean it, and what conditions must be met for safe execution.",
          "methods": []
        },
        {
          "name": "CleanupResult",
          "line": 75,
          "bases": [],
          "docstring": "Comprehensive cleanup operation result with detailed metrics and reporting.\n\nThis class captures all aspects of a cleanup operation for analysis,\nreporting, and audit trail generation.",
          "methods": []
        },
        {
          "name": "WorkspaceCleanerV2",
          "line": 92,
          "bases": [],
          "docstring": "Enhanced workspace cleaner with comprehensive Framework0 integration.\n\nThis class provides advanced workspace cleaning capabilities that integrate\nseamlessly with the consolidated Framework0 architecture. It uses the unified\nContext system for state management, enhanced logging for traceability, and\nfollows strict safety protocols to prevent data loss.\n\nThe cleaner operates on a rule-based system that allows fine-grained control\nover what gets cleaned, when it gets cleaned, and how the cleaning is performed.\nAll operations are logged and can be tracked through the Context system.\n\nKey Features:\n- Rule-based cleaning with flexible configuration and custom validation\n- Context integration for state tracking and distributed coordination\n- Comprehensive safety checks with backup creation and rollback capabilities\n- Performance monitoring and optimization with detailed analytics\n- Cross-platform compatibility with proper path handling and permissions\n- Extensible architecture supporting custom cleaning plugins and rules\n- Comprehensive error handling with graceful degradation and recovery\n- JSON/YAML configuration system for rule persistence and sharing\n\nThread Safety:\nAll operations are thread-safe when used with Context thread safety enabled.\nThe cleaner can be safely used in concurrent environments and distributed systems.\n\nExample Usage:\n    >>> cleaner = WorkspaceCleanerV2(workspace_path=\"/path/to/workspace\")\n    >>> cleaner.add_standard_rules()\n    >>> results = cleaner.execute_cleanup(dry_run=False)\n    >>> cleaner.generate_report(results)",
          "methods": [
            {
              "name": "__init__",
              "line": 126,
              "args": [
                "self",
                "workspace_path"
              ],
              "docstring": "Initialize enhanced workspace cleaner with comprehensive configuration.\n\nArgs:\n    workspace_path: Root path of workspace to clean\n    context: Optional Context instance for state management\n    enable_backups: Whether to create backups before destructive operations\n    backup_directory: Custom backup directory (defaults to .cleanup_backups)\n    max_backup_age_days: Maximum age of backups before cleanup\n    enable_metrics: Whether to collect performance and operation metrics\n\nRaises:\n    ValueError: If workspace_path does not exist or is not accessible\n    PermissionError: If insufficient permissions for workspace operations"
            },
            {
              "name": "add_cleanup_rule",
              "line": 196,
              "args": [
                "self",
                "rule"
              ],
              "docstring": "Add a custom cleanup rule to the cleaner configuration.\n\nArgs:\n    rule: CleanupRule instance defining the cleaning behavior\n\nRaises:\n    ValueError: If rule name conflicts with existing rule\n    TypeError: If rule is not a CleanupRule instance"
            },
            {
              "name": "add_standard_rules",
              "line": 247,
              "args": [
                "self"
              ],
              "docstring": "Add comprehensive standard cleanup rules for Framework0 workspace.\n\nThis method configures the most common cleanup rules that are safe\nand beneficial for typical Framework0 workspace maintenance."
            },
            {
              "name": "save_configuration",
              "line": 364,
              "args": [
                "self",
                "config_path"
              ],
              "docstring": "Save current cleanup rules and settings to JSON/YAML configuration file.\n\nArgs:\n    config_path: Optional path for config file (defaults to workspace/.cleanup_config.json)\n    \nRaises:\n    PermissionError: If unable to write to configuration file\n    ValueError: If configuration data is invalid"
            },
            {
              "name": "load_configuration",
              "line": 440,
              "args": [
                "self",
                "config_path"
              ],
              "docstring": "Load cleanup rules and settings from JSON/YAML configuration file.\n\nArgs:\n    config_path: Optional path to config file (defaults to workspace/.cleanup_config.json)\n    \nRaises:\n    FileNotFoundError: If configuration file does not exist\n    ValueError: If configuration format is invalid or unsupported\n    PermissionError: If unable to read configuration file"
            },
            {
              "name": "execute_cleanup",
              "line": 546,
              "args": [
                "self"
              ],
              "docstring": "Execute configured cleanup rules with comprehensive safety and monitoring.\n\nArgs:\n    dry_run: Whether to perform actual cleanup or just simulate\n    rules_filter: Optional list of rule names to execute (None = all enabled rules)\n    skip_confirmation: Whether to skip user confirmation for destructive operations\n    enable_progress: Whether to display progress information during execution\n\nReturns:\n    List[CleanupResult]: Detailed results for each executed cleanup rule\n\nExample:\n    >>> cleaner = WorkspaceCleanerV2(\"/path/to/workspace\")\n    >>> cleaner.add_standard_rules()\n    >>> results = cleaner.execute_cleanup(dry_run=False, skip_confirmation=True)"
            },
            {
              "name": "_create_backup",
              "line": 683,
              "args": [
                "self"
              ],
              "docstring": "Create backup of workspace before destructive operations.\n\nReturns:\n    Path: Path to created backup directory\n    \nRaises:\n    OSError: If backup creation fails"
            },
            {
              "name": "_execute_single_rule",
              "line": 743,
              "args": [
                "self",
                "rule",
                "dry_run",
                "skip_confirmation"
              ],
              "docstring": "Execute a single cleanup rule with comprehensive error handling and metrics.\n\nArgs:\n    rule: CleanupRule to execute\n    dry_run: Whether to perform actual cleanup or simulation\n    skip_confirmation: Whether to skip user confirmation prompts\n    \nReturns:\n    CleanupResult: Detailed results of rule execution"
            },
            {
              "name": "_update_rule_metrics",
              "line": 867,
              "args": [
                "self",
                "rule_name",
                "result",
                "execution_time",
                "success"
              ],
              "docstring": "Update performance metrics for a specific cleanup rule.\n\nArgs:\n    rule_name: Name of the rule that was executed\n    result: CleanupResult containing execution details\n    execution_time: Time taken to execute the rule\n    success: Whether the rule executed successfully"
            },
            {
              "name": "generate_report",
              "line": 900,
              "args": [
                "self",
                "results",
                "output_path"
              ],
              "docstring": "Generate comprehensive cleanup report with detailed analysis and metrics.\n\nArgs:\n    results: List of CleanupResult from cleanup execution\n    output_path: Optional path to save report (defaults to workspace/cleanup_report.json)\n    \nReturns:\n    Dict[str, Any]: Comprehensive report data structure"
            }
          ]
        }
      ],
      "lines_of_code": 954,
      "complexity_score": 107,
      "last_modified": "2025-10-04T17:23:07.901833",
      "checksum": "6c9d9b57777782d1fce8868e00122508",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/tools/workspace_restructurer.py": {
      "name": ".restructuring_backup/tools/workspace_restructurer.py",
      "path": ".restructuring_backup/tools/workspace_restructurer.py",
      "component_type": "development_tool",
      "description": "Workspace Restructurer for Framework0 Baseline Compliance",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "analyze_current_structure",
        "_analyze_compliance",
        "_determine_correct_location",
        "_get_relocation_reason",
        "_check_package_structure",
        "_calculate_compliance_score",
        "_generate_compliance_recommendations",
        "generate_restructuring_plan",
        "_generate_validation_checks",
        "_generate_rollback_plan",
        "save_restructuring_plan",
        "RestructureOperation",
        "RestructuringPlan",
        "WorkspaceRestructurer"
      ],
      "imports": [
        "os",
        "json",
        "shutil",
        "subprocess",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "main",
          "line": 614,
          "args": [],
          "docstring": "Main function to analyze workspace and generate restructuring plan.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 69,
          "args": [
            "self",
            "workspace_root"
          ],
          "docstring": "Initialize workspace restructurer with current workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory",
          "decorators": []
        },
        {
          "name": "analyze_current_structure",
          "line": 154,
          "args": [
            "self"
          ],
          "docstring": "Analyze current workspace structure and identify all files/directories.\n\nReturns:\n    Dict[str, Any]: Complete analysis of current workspace structure",
          "decorators": []
        },
        {
          "name": "_analyze_compliance",
          "line": 233,
          "args": [
            "self",
            "files",
            "directories"
          ],
          "docstring": "Analyze current structure compliance with Framework0 baseline layout.\n\nArgs:\n    files: List of file information dictionaries\n    directories: List of directory information dictionaries\n    \nReturns:\n    Dict[str, Any]: Compliance analysis results",
          "decorators": []
        },
        {
          "name": "_determine_correct_location",
          "line": 289,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Determine the correct location for a file based on Framework0 guidelines.\n\nArgs:\n    file_path: Current file path to analyze\n    \nReturns:\n    Optional[str]: Correct directory location or None if no relocation needed",
          "decorators": []
        },
        {
          "name": "_get_relocation_reason",
          "line": 328,
          "args": [
            "self",
            "current_path",
            "correct_location"
          ],
          "docstring": "Generate human-readable reason for file relocation.\n\nArgs:\n    current_path: Current file location\n    correct_location: Target location for file\n    \nReturns:\n    str: Human-readable relocation reason",
          "decorators": []
        },
        {
          "name": "_check_package_structure",
          "line": 354,
          "args": [
            "self"
          ],
          "docstring": "Check Python package structure compliance with Framework0 guidelines.\n\nReturns:\n    Dict[str, Any]: Package structure compliance analysis",
          "decorators": []
        },
        {
          "name": "_calculate_compliance_score",
          "line": 383,
          "args": [
            "self",
            "missing_dirs",
            "extra_dirs",
            "misplaced_files"
          ],
          "docstring": "Calculate overall compliance score as percentage.\n\nArgs:\n    missing_dirs: Set of missing directories\n    extra_dirs: Set of extra directories\n    misplaced_files: List of misplaced files\n    \nReturns:\n    float: Compliance score as percentage (0-100)",
          "decorators": []
        },
        {
          "name": "_generate_compliance_recommendations",
          "line": 407,
          "args": [
            "self",
            "missing_dirs",
            "extra_dirs",
            "misplaced_files"
          ],
          "docstring": "Generate actionable compliance recommendations.\n\nArgs:\n    missing_dirs: Set of missing directories\n    extra_dirs: Set of extra directories  \n    misplaced_files: List of misplaced files\n    \nReturns:\n    List[str]: List of actionable recommendations",
          "decorators": []
        },
        {
          "name": "generate_restructuring_plan",
          "line": 435,
          "args": [
            "self",
            "structure_analysis"
          ],
          "docstring": "Generate comprehensive restructuring plan based on structure analysis.\n\nArgs:\n    structure_analysis: Current workspace structure analysis\n    \nReturns:\n    RestructuringPlan: Complete restructuring plan with all operations",
          "decorators": []
        },
        {
          "name": "_generate_validation_checks",
          "line": 511,
          "args": [
            "self",
            "operations"
          ],
          "docstring": "Generate post-restructuring validation checks.\n\nArgs:\n    operations: List of restructuring operations\n    \nReturns:\n    List[str]: List of validation check descriptions",
          "decorators": []
        },
        {
          "name": "_generate_rollback_plan",
          "line": 540,
          "args": [
            "self",
            "operations"
          ],
          "docstring": "Generate rollback plan for failed restructuring.\n\nArgs:\n    operations: List of restructuring operations\n    \nReturns:\n    List[str]: List of rollback procedure steps",
          "decorators": []
        },
        {
          "name": "save_restructuring_plan",
          "line": 567,
          "args": [
            "self",
            "output_path"
          ],
          "docstring": "Save comprehensive restructuring plan to file for review.\n\nArgs:\n    output_path: Optional custom output path for plan file\n    \nReturns:\n    Path: Path to saved restructuring plan file",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RestructureOperation",
          "line": 34,
          "bases": [],
          "docstring": "Data class representing a single workspace restructuring operation.",
          "methods": []
        },
        {
          "name": "RestructuringPlan",
          "line": 50,
          "bases": [],
          "docstring": "Complete workspace restructuring plan with all operations and metadata.",
          "methods": []
        },
        {
          "name": "WorkspaceRestructurer",
          "line": 64,
          "bases": [],
          "docstring": "Comprehensive workspace restructurer for Framework0 baseline compliance.",
          "methods": [
            {
              "name": "__init__",
              "line": 69,
              "args": [
                "self",
                "workspace_root"
              ],
              "docstring": "Initialize workspace restructurer with current workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory"
            },
            {
              "name": "analyze_current_structure",
              "line": 154,
              "args": [
                "self"
              ],
              "docstring": "Analyze current workspace structure and identify all files/directories.\n\nReturns:\n    Dict[str, Any]: Complete analysis of current workspace structure"
            },
            {
              "name": "_analyze_compliance",
              "line": 233,
              "args": [
                "self",
                "files",
                "directories"
              ],
              "docstring": "Analyze current structure compliance with Framework0 baseline layout.\n\nArgs:\n    files: List of file information dictionaries\n    directories: List of directory information dictionaries\n    \nReturns:\n    Dict[str, Any]: Compliance analysis results"
            },
            {
              "name": "_determine_correct_location",
              "line": 289,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Determine the correct location for a file based on Framework0 guidelines.\n\nArgs:\n    file_path: Current file path to analyze\n    \nReturns:\n    Optional[str]: Correct directory location or None if no relocation needed"
            },
            {
              "name": "_get_relocation_reason",
              "line": 328,
              "args": [
                "self",
                "current_path",
                "correct_location"
              ],
              "docstring": "Generate human-readable reason for file relocation.\n\nArgs:\n    current_path: Current file location\n    correct_location: Target location for file\n    \nReturns:\n    str: Human-readable relocation reason"
            },
            {
              "name": "_check_package_structure",
              "line": 354,
              "args": [
                "self"
              ],
              "docstring": "Check Python package structure compliance with Framework0 guidelines.\n\nReturns:\n    Dict[str, Any]: Package structure compliance analysis"
            },
            {
              "name": "_calculate_compliance_score",
              "line": 383,
              "args": [
                "self",
                "missing_dirs",
                "extra_dirs",
                "misplaced_files"
              ],
              "docstring": "Calculate overall compliance score as percentage.\n\nArgs:\n    missing_dirs: Set of missing directories\n    extra_dirs: Set of extra directories\n    misplaced_files: List of misplaced files\n    \nReturns:\n    float: Compliance score as percentage (0-100)"
            },
            {
              "name": "_generate_compliance_recommendations",
              "line": 407,
              "args": [
                "self",
                "missing_dirs",
                "extra_dirs",
                "misplaced_files"
              ],
              "docstring": "Generate actionable compliance recommendations.\n\nArgs:\n    missing_dirs: Set of missing directories\n    extra_dirs: Set of extra directories  \n    misplaced_files: List of misplaced files\n    \nReturns:\n    List[str]: List of actionable recommendations"
            },
            {
              "name": "generate_restructuring_plan",
              "line": 435,
              "args": [
                "self",
                "structure_analysis"
              ],
              "docstring": "Generate comprehensive restructuring plan based on structure analysis.\n\nArgs:\n    structure_analysis: Current workspace structure analysis\n    \nReturns:\n    RestructuringPlan: Complete restructuring plan with all operations"
            },
            {
              "name": "_generate_validation_checks",
              "line": 511,
              "args": [
                "self",
                "operations"
              ],
              "docstring": "Generate post-restructuring validation checks.\n\nArgs:\n    operations: List of restructuring operations\n    \nReturns:\n    List[str]: List of validation check descriptions"
            },
            {
              "name": "_generate_rollback_plan",
              "line": 540,
              "args": [
                "self",
                "operations"
              ],
              "docstring": "Generate rollback plan for failed restructuring.\n\nArgs:\n    operations: List of restructuring operations\n    \nReturns:\n    List[str]: List of rollback procedure steps"
            },
            {
              "name": "save_restructuring_plan",
              "line": 567,
              "args": [
                "self",
                "output_path"
              ],
              "docstring": "Save comprehensive restructuring plan to file for review.\n\nArgs:\n    output_path: Optional custom output path for plan file\n    \nReturns:\n    Path: Path to saved restructuring plan file"
            }
          ]
        }
      ],
      "lines_of_code": 557,
      "complexity_score": 60,
      "last_modified": "2025-10-05T00:44:34.322725",
      "checksum": "33b7d643921445b81c69cd87d8311a35",
      "framework_role": "state_management",
      "stability": "stable"
    },
    ".restructuring_backup/workspace_cleaner_test_report.json": {
      "name": ".restructuring_backup/workspace_cleaner_test_report.json",
      "path": ".restructuring_backup/workspace_cleaner_test_report.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 51,
      "complexity_score": 0,
      "last_modified": "2025-10-04T17:09:22.562760",
      "checksum": "9bea070aefa5985c25922b2a76a2db57",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "README.md": {
      "name": "README.md",
      "path": "README.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Baseline Framework Documentation",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Baseline Framework Documentation",
        "🚀 Framework Overview",
        "📊 Current Baseline Framework Status",
        "Framework Metrics Summary",
        "Framework Component Breakdown",
        "Key Framework Capabilities",
        "🏗️ Framework Architecture",
        "Current Framework Structure",
        "Architecture Principles",
        "✨ Key Features",
        "🎯 Recipe-Based Automation",
        "🔄 Distributed Context Management",
        "🧩 Modular Scriptlet Architecture",
        "📊 Performance Testing & Monitoring",
        "🤖 AI-Powered Analysis",
        "🚀 Quick Start",
        "Prerequisites",
        "Installation",
        "Basic Usage",
        "Next Steps",
        "📚 Documentation",
        "Core Documentation",
        "User Documentation",
        "Developer Documentation",
        "Technical Analysis",
        "🤝 Contributing",
        "Development Principles",
        "Getting Involved",
        "Development Workflow",
        "Set up development environment",
        "Run baseline analysis",
        "Run compliance checks",
        "Update documentation",
        "📄 License"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 204,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:37:17.846071",
      "checksum": "5bdabb940a24cd66459fa0b56c841578",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "WORKSPACE_RESTRUCTURING_PLAN.json": {
      "name": "WORKSPACE_RESTRUCTURING_PLAN.json",
      "path": "WORKSPACE_RESTRUCTURING_PLAN.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1396,
      "complexity_score": 0,
      "last_modified": "2025-10-05T01:08:42.052311",
      "checksum": "831a14b5065b9b7c4464ed1ab7e98bdf",
      "framework_role": "entry_point",
      "stability": "stable"
    },
    "analysis/__init__.py": {
      "name": "analysis/__init__.py",
      "path": "analysis/__init__.py",
      "component_type": "utility",
      "description": "Framework0 package initializer",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:50:45.703975",
      "checksum": "6f3997601d8c1c43c83608fe7ff049fe",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "cli/__init__.py": {
      "name": "cli/__init__.py",
      "path": "cli/__init__.py",
      "component_type": "command_line_interface",
      "description": "Framework0 package initializer",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:50:45.703975",
      "checksum": "6f3997601d8c1c43c83608fe7ff049fe",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "docker-compose.yml": {
      "name": "docker-compose.yml",
      "path": "docker-compose.yml",
      "component_type": "configuration",
      "description": "Framework0 Context Server Docker Compose Configuration",
      "dependencies": [],
      "exports": [
        "version",
        "services",
        "volumes",
        "networks"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 184,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "cb501302f24ce6d141cb0b0cb57da2ab",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/PERFORMANCE_TESTING_COMPLETION.md": {
      "name": "docs/PERFORMANCE_TESTING_COMPLETION.md",
      "path": "docs/PERFORMANCE_TESTING_COMPLETION.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Performance Testing Completion",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Performance Testing Completion",
        "🎉 PERFORMANCE TESTING SUCCESSFULLY IMPLEMENTED",
        "✅ What Was Delivered",
        "1. Basic Performance Testing Suite",
        "2. Integration Testing Framework",
        "3. Performance Validation Results",
        "Core System Tests",
        "Performance Tests",
        "Total System Health: 13/13 PASSING (100%)",
        "📊 Performance Metrics Achieved",
        "Response Time Performance",
        "Concurrency Testing",
        "Production Readiness Validation",
        "🚀 Production Deployment Status",
        "📋 Files Created/Modified",
        "New Performance Testing Files",
        "Testing Commands Available",
        "Run all performance tests",
        "Run integration tests",
        "Run complete test suite",
        "Run performance tests directly",
        "🎯 Performance Testing Capabilities Delivered",
        "📈 Next Steps for Production"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 89,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "2af8acd15c02584a4b7c7ae220379dd6",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/PERFORMANCE_TESTING_REPORT.md": {
      "name": "docs/PERFORMANCE_TESTING_REPORT.md",
      "path": "docs/PERFORMANCE_TESTING_REPORT.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Performance Testing Report",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Performance Testing Report",
        "Executive Summary",
        "Performance Testing Implementation",
        "1. Basic Performance Testing Suite",
        "2. Integration Testing Suite",
        "3. Performance Test Categories",
        "A. Execution Performance",
        "B. Concurrent Access Testing",
        "C. File I/O Performance",
        "D. Memory Usage Analysis",
        "Production Readiness Assessment",
        "✅ Performance Criteria Met",
        "✅ Testing Infrastructure",
        "✅ Production Features Validated",
        "Performance Testing Results Summary",
        "Core Functionality Tests",
        "Performance Tests",
        "Integration Tests",
        "Recommendations for Production Deployment",
        "1. Performance Monitoring",
        "2. Load Testing",
        "3. Infrastructure Considerations",
        "4. Performance Optimization Opportunities",
        "Conclusion"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 124,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "8c04ee8ab2d8935ef0343602ffc15961",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/PROJECT_COMPLETION_REPORT.md": {
      "name": "docs/PROJECT_COMPLETION_REPORT.md",
      "path": "docs/PROJECT_COMPLETION_REPORT.md",
      "component_type": "documentation",
      "description": "🎉 Framework0 Enhanced Context Server - Project Completion Report",
      "dependencies": [],
      "exports": [
        "🎉 Framework0 Enhanced Context Server - Project Completion Report",
        "📅 **Project Summary**",
        "🏆 **All Components Successfully Delivered**",
        "✅ **1. Enhanced Context Server**",
        "✅ **2. Shell Script Utilities**",
        "✅ **3. Python Client Library**",
        "✅ **4. Dash Integration**",
        "✅ **5. Configuration & Deployment**",
        "✅ **6. Working Examples**",
        "✅ **7. File Dumping Support**",
        "✅ **8. Comprehensive Test Suite**",
        "✅ **9. Complete Documentation**",
        "📊 **Technical Specifications**",
        "**Architecture**",
        "**Key Features Implemented**",
        "**Performance & Reliability**",
        "🚀 **Deployment Ready**",
        "**Quick Start Commands**",
        "1. Environment Setup",
        "2. Start Server",
        "3. Test Client Operations",
        "4. Launch Dashboard",
        "**Production Deployment**",
        "Docker Deployment",
        "Or Manual Production",
        "📈 **Project Metrics**",
        "🎯 **Quality Assurance**",
        "**Code Quality**",
        "**Testing & Validation**",
        "**Documentation Quality**",
        "🌟 **Project Highlights**",
        "**Innovation & Features**",
        "**Technical Excellence**",
        "🎉 **Final Status: COMPLETE & PRODUCTION READY**"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 166,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "a35cd63243eb3b4dedb449825a87d624",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md": {
      "name": "docs/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      "path": "docs/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      "component_type": "documentation",
      "description": "WebSocket Async Performance Testing - COMPLETION REPORT",
      "dependencies": [],
      "exports": [
        "WebSocket Async Performance Testing - COMPLETION REPORT",
        "🎉 WEBSOCKET ASYNC PERFORMANCE TESTING SUCCESSFULLY IMPLEMENTED",
        "✅ What Was Delivered",
        "1. WebSocket Async Performance Testing Suite",
        "2. Real-time Performance Monitoring System",
        "3. Async Load Testing Framework",
        "4. Integration and Comprehensive Validation",
        "📊 Performance Capabilities Achieved",
        "WebSocket Performance Testing",
        "WebSocket Test Results",
        "Real-time Performance Monitoring",
        "Monitoring Capabilities",
        "Async Load Testing",
        "Load Testing Results",
        "🚀 Technical Implementation Highlights",
        "1. Advanced Async/Await Architecture",
        "2. Production-Grade Performance Monitoring",
        "3. Comprehensive WebSocket Testing",
        "4. Integration and Validation Framework",
        "📋 Files Created/Enhanced",
        "New WebSocket Async Testing Files",
        "Testing Commands Available",
        "WebSocket Performance Testing",
        "Real-time Performance Monitoring Tests",
        "Async Load Testing Framework",
        "Comprehensive Integration Testing",
        "Complete Async Performance Demonstration",
        "🎯 WebSocket Async Testing Capabilities Delivered",
        "📈 Production Readiness Assessment",
        "✅ WebSocket Async Performance Validated",
        "✅ Real-time Monitoring Operational",
        "✅ Async Load Testing Framework Ready",
        "📊 Performance Test Results Summary",
        "WebSocket Performance Tests",
        "Real-time Monitoring Tests",
        "Async Load Testing Results",
        "Integration Testing Results",
        "🎯 Next Steps for Production",
        "🔧 Advanced Capabilities"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 204,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "922cea8f99b2421881b8ff34882a2230",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/WORKSPACE_RESTRUCTURING_PLAN.json": {
      "name": "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "path": "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1396,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:51:59.863431",
      "checksum": "8128a554298ff0f5dcda32bf40ac4960",
      "framework_role": "entry_point",
      "stability": "stable"
    },
    "docs/__init__.py": {
      "name": "docs/__init__.py",
      "path": "docs/__init__.py",
      "component_type": "utility",
      "description": "Framework0 package initializer",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:50:45.703975",
      "checksum": "6f3997601d8c1c43c83608fe7ff049fe",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "docs/api_reference.md": {
      "name": "docs/api_reference.md",
      "path": "docs/api_reference.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - API Reference",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - API Reference",
        "Overview",
        "Table of Contents",
        "orchestrator.context..ipynb_checkpoints.context-checkpoint",
        "Classes",
        "Context",
        "__init__",
        "set",
        "get",
        "to_dict",
        "get_history",
        "_validate_json_serializable",
        "clear",
        "keys",
        "__repr__",
        "orchestrator.context..ipynb_checkpoints.memory_bus-checkpoint",
        "Classes",
        "MemoryBus",
        "__init__",
        "set",
        "get",
        "clear",
        "keys",
        "_validate_json_serializable",
        "__repr__",
        "orchestrator.context.context",
        "Classes",
        "ContextHistoryEntry",
        "to_dict",
        "ContextMetrics",
        "update_operation_count",
        "Context",
        "__init__",
        "get",
        "set",
        "to_dict",
        "to_json",
        "from_json",
        "get_history",
        "pop_dirty_keys",
        "keys",
        "register_callback",
        "get_metrics",
        "clear_history",
        "merge_from",
        "_execute_callbacks",
        "_estimate_memory_usage",
        "__repr__",
        "orchestrator.context.db_adapter",
        "Classes",
        "DBAdapter",
        "__init__",
        "_init_db",
        "save_context",
        "load_context",
        "get_versions",
        "clear",
        "__repr__",
        "FileAdapter",
        "__init__",
        "save_context",
        "load_context",
        "list_files",
        "delete_file",
        "__repr__",
        "orchestrator.context.memory_bus",
        "Classes",
        "MemoryBus",
        "__init__",
        "set",
        "get",
        "clear",
        "keys",
        "_validate_json_serializable",
        "__repr__",
        "orchestrator.context.persistence",
        "Classes",
        "Persistence",
        "__init__",
        "flush",
        "check_and_flush",
        "load_from_disk",
        "load_from_db",
        "_flush_to_disk",
        "_flush_to_db",
        "_compute_diff",
        "__repr__",
        "orchestrator.context.version_control",
        "Classes",
        "VersionControl",
        "__init__",
        "commit",
        "rollback",
        "get_versions",
        "_generate_version_id",
        "__repr__",
        "orchestrator.context_client",
        "Classes",
        "ContextClientError",
        "ConnectionError",
        "ServerError",
        "TimeoutError",
        "ContextClient",
        "__init__",
        "_make_request",
        "get",
        "set",
        "list_all",
        "get_history",
        "get_status",
        "ping",
        "dump_context",
        "list_dumps",
        "download_dump",
        "AsyncContextClient",
        "__init__",
        "_setup_socketio_handlers",
        "on",
        "orchestrator.dependency_graph",
        "Classes",
        "DependencyGraph",
        "__init__",
        "add_task",
        "get_task_order",
        "get_task_dependencies",
        "get_task_dependents",
        "remove_task",
        "visualize",
        "orchestrator.enhanced_context_server",
        "Classes",
        "Context",
        "__init__",
        "get",
        "set",
        "to_dict",
        "get_history",
        "pop_dirty_keys",
        "EnhancedContextServer",
        "__init__",
        "_setup_routes",
        "_setup_websocket_handlers",
        "_write_json_dump",
        "_write_pretty_dump",
        "_write_csv_dump",
        "_write_text_dump",
        "run",
        "MemoryBus",
        "__init__",
        "get",
        "set",
        "to_dict",
        "orchestrator.enhanced_memory_bus",
        "Classes",
        "MemoryBusMetrics",
        "update_operation_stats",
        "to_dict",
        "PersistenceBackend",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "JSONPersistenceBackend",
        "__init__",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "SQLitePersistenceBackend",
        "__init__",
        "_init_database",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "MessageEvent",
        "is_expired",
        "to_dict",
        "from_dict",
        "EnhancedMemoryBus",
        "__init__",
        "_load_from_persistence",
        "_start_background_tasks",
        "_auto_persist_worker",
        "_message_cleanup_worker",
        "get",
        "set",
        "delete",
        "keys",
        "clear",
        "persist",
        "backup",
        "restore",
        "subscribe",
        "unsubscribe",
        "publish",
        "_publish_event",
        "get_metrics",
        "health_check",
        "shutdown",
        "__enter__",
        "__exit__",
        "orchestrator.enhanced_recipe_parser",
        "Classes",
        "RecipeFormat",
        "ValidationSeverity",
        "ValidationMessage",
        "__str__",
        "RecipeMetadata",
        "StepInfo",
        "__post_init__",
        "ParsedRecipe",
        "is_valid",
        "error_count",
        "warning_count",
        "RecipeValidator",
        "__init__",
        "_setup_default_validators",
        "add_validator",
        "validate",
        "_validate_required_fields",
        "_validate_step_structure",
        "_validate_dependency_graph",
        "_validate_module_imports",
        "_validate_step_indices",
        "EnhancedRecipeParser",
        "__init__",
        "detect_format",
        "load_file",
        "_compute_content_hash",
        "_extract_metadata",
        "_parse_steps",
        "parse_recipe",
        "get_validation_summary",
        "clear_cache",
        "add_validator",
        "orchestrator.memory_bus",
        "Classes",
        "MemoryBusClient",
        "__init__",
        "fetch_snapshot",
        "push_patch",
        "sync",
        "MemoryBusServer",
        "__init__",
        "get_snapshot",
        "apply_patch",
        "handle_snapshot_request",
        "handle_patch_request",
        "orchestrator.persistence",
        "Classes",
        "PersistenceManager",
        "__init__",
        "start_background_flush",
        "stop_background_flush",
        "flush",
        "load_latest",
        "orchestrator.persistence.cache",
        "Classes",
        "CacheError",
        "CacheFullError",
        "CacheEntryNotFoundError",
        "CacheEntry",
        "__init__",
        "_estimate_size",
        "access",
        "is_expired",
        "get_age",
        "get_idle_time",
        "to_dict",
        "from_dict",
        "EvictionPolicy",
        "all_policies",
        "Cache",
        "__init__",
        "_with_lock",
        "set",
        "_set",
        "__set",
        "get",
        "_get",
        "__get",
        "contains",
        "_contains",
        "__contains",
        "delete",
        "_delete",
        "__delete",
        "clear",
        "_clear",
        "__clear",
        "get_stats",
        "_get_stats",
        "__get_stats",
        "get_keys",
        "_get_keys",
        "__get_keys",
        "get_entry_metadata",
        "_get_entry_metadata",
        "__get_entry_metadata",
        "_clean_expired_entries",
        "_evict_entries",
        "_evict_memory",
        "_select_eviction_candidate",
        "PersistentCache",
        "__init__",
        "_schedule_auto_persist",
        "persist",
        "_persist",
        "__persist",
        "_load_cache",
        "clear",
        "_clear_and_remove",
        "__clear_and_remove",
        "__del__",
        "TieredCache",
        "__init__",
        "set",
        "_set",
        "__set",
        "get",
        "_get",
        "__get",
        "contains",
        "_contains",
        "__contains",
        "delete",
        "_delete",
        "__delete",
        "clear",
        "_clear",
        "__clear",
        "get_stats",
        "_get_stats",
        "__get_stats",
        "get_keys",
        "_get_keys",
        "__get_keys",
        "CacheDecorator",
        "__init__",
        "_default_key_func",
        "__call__",
        "orchestrator.persistence.core",
        "Classes",
        "StorageBackend",
        "CacheStrategy",
        "DeltaStrategy",
        "PersistenceError",
        "DataIntegrityError",
        "ThreadSafeContextWrapper",
        "__init__",
        "__enter__",
        "__exit__",
        "PersistenceMetrics",
        "__init__",
        "start_operation",
        "end_operation",
        "update_save",
        "update_load",
        "update_operation_time",
        "increment_errors",
        "increment_cache_hits",
        "increment_cache_misses",
        "get_average_save_time",
        "get_average_load_time",
        "get_cache_hit_ratio",
        "to_dict",
        "reset",
        "PersistenceBase",
        "save",
        "load",
        "get",
        "set",
        "delete",
        "clear",
        "get_metrics",
        "orchestrator.persistence.delta",
        "Classes",
        "DeltaCompressionError",
        "DeltaRecord",
        "__init__",
        "__repr__",
        "to_dict",
        "from_dict",
        "DeltaCompressor",
        "__init__",
        "calculate_delta",
        "_dict_delta",
        "_binary_delta",
        "apply_delta",
        "create_delta_record",
        "merge_deltas",
        "get_compression_stats",
        "serialize_delta",
        "deserialize_delta",
        "DeltaChain",
        "__init__",
        "add_delta",
        "add_state",
        "get_state_at_index",
        "get_current_state",
        "get_delta_at_index",
        "clear_chain",
        "rebaseline",
        "_optimize_chain",
        "get_chain_metrics",
        "orchestrator.persistence.enhanced",
        "Classes",
        "EnhancedPersistenceError",
        "EnhancedPersistenceV2",
        "__init__",
        "_with_lock",
        "_schedule_auto_snapshot",
        "_has_changes_since_last_snapshot",
        "_load_current_state",
        "save",
        "_save",
        "load",
        "_load",
        "get",
        "_get",
        "set",
        "_set",
        "delete",
        "_delete",
        "clear",
        "_clear",
        "create_snapshot",
        "_create_snapshot",
        "create_delta_snapshot",
        "_create_delta_snapshot",
        "restore_snapshot",
        "_restore_snapshot",
        "restore_snapshot_by_tag",
        "_restore_snapshot_by_tag",
        "list_snapshots",
        "get_snapshot_data",
        "compare_snapshots",
        "get_metrics",
        "export_data",
        "_export_data",
        "import_data",
        "_import_data",
        "cleanup",
        "__del__",
        "CachedPersistenceDecorator",
        "__init__",
        "save",
        "load",
        "get",
        "set",
        "delete",
        "clear",
        "__getattr__",
        "orchestrator.persistence.snapshot",
        "Classes",
        "SnapshotError",
        "VersioningError",
        "SnapshotNotFoundError",
        "SnapshotMetadata",
        "__init__",
        "to_dict",
        "from_dict",
        "update_integrity_info",
        "SnapshotManager",
        "__init__",
        "_initialize_storage",
        "_load_registry",
        "_save_registry",
        "create_snapshot",
        "_save_data_to_file",
        "_load_data_from_file",
        "get_snapshot",
        "get_latest_snapshot",
        "get_snapshot_by_tag",
        "list_snapshots",
        "list_versions",
        "list_tags",
        "tag_snapshot",
        "untag_snapshot",
        "delete_snapshot",
        "_enforce_snapshot_limit",
        "create_delta_snapshot",
        "get_delta_snapshot",
        "compare_snapshots",
        "export_snapshot",
        "import_snapshot",
        "cleanup",
        "clear_all",
        "__del__",
        "orchestrator.recipe_parser",
        "orchestrator.runner",
        "Classes",
        "RecipeExecutionStatus",
        "StepExecutionResult",
        "success",
        "to_dict",
        "RecipeExecutionResult",
        "execution_time_seconds",
        "success_rate",
        "overall_success",
        "add_step_result",
        "add_global_error",
        "add_global_warning",
        "to_dict",
        "EnhancedRecipeRunner",
        "__init__",
        "run_recipe",
        "cancel_execution",
        "is_execution_cancelled",
        "get_execution_statistics",
        "get_execution_history",
        "_load_recipe",
        "_validate_recipe_structure",
        "_initialize_context",
        "_execute_recipe_steps",
        "_execute_single_step",
        "_attempt_step_execution",
        "_finalize_context",
        "scriptlets.framework",
        "Classes",
        "ScriptletState",
        "ScriptletCategory",
        "ScriptletResult",
        "to_dict",
        "ScriptletConfig",
        "validate_configuration",
        "ScriptletProtocol",
        "validate",
        "run",
        "get_category",
        "BaseScriptlet",
        "__init__",
        "execution_duration",
        "is_executing",
        "get_category",
        "get_capabilities",
        "get_metadata",
        "execute",
        "_execute_hooks",
        "_handle_error",
        "_handle_completion",
        "_extract_result_data",
        "validate",
        "validate_custom",
        "run",
        "check_paradigm",
        "_check_method_signatures",
        "_check_json_compatibility",
        "_check_state_management",
        "__repr__",
        "ComputeScriptlet",
        "__init__",
        "validate_custom",
        "IOScriptlet",
        "__init__",
        "validate_custom",
        "ExecutionContext",
        "__init__",
        "add_scriptlet",
        "resolve_dependencies",
        "execute_all",
        "server.server_config",
        "Classes",
        "ContextServerConfig",
        "__init__",
        "_load_default_config",
        "_load_config_file",
        "_load_environment_config",
        "_deep_merge",
        "_set_nested_value",
        "get",
        "set",
        "validate",
        "save",
        "to_dict",
        "ServerManager",
        "__init__",
        "_signal_handler",
        "start",
        "stop",
        "restart",
        "is_running",
        "get_status",
        "src.analysis.components",
        "Classes",
        "EnhancedSummarizer",
        "__init__",
        "_analyze_impl",
        "_analyze_sequence",
        "_analyze_numeric_data",
        "_percentile",
        "_analyze_string_data",
        "_analyze_dictionary",
        "_analyze_string",
        "_analyze_other",
        "_assess_data_quality",
        "_assess_sequence_quality",
        "_assess_dictionary_quality",
        "_assess_string_quality",
        "StatisticalAnalyzer",
        "__init__",
        "_analyze_impl",
        "PatternAnalyzer",
        "__init__",
        "_analyze_impl",
        "QualityAnalyzer",
        "__init__",
        "_analyze_impl",
        "src.analysis.enhanced_components",
        "Classes",
        "ContextAwareSummarizer",
        "__init__",
        "_analyze_impl",
        "_create_enhanced_summary",
        "_store_summary_in_context",
        "_compare_with_history",
        "_calculate_multi_period_trends",
        "_analyze_trends",
        "_generate_context_recommendations",
        "_generate_trend_recommendations",
        "_update_performance_metrics",
        "_track_analysis_trends",
        "MetricsAnalyzer",
        "__init__",
        "_analyze_impl",
        "_collect_metrics",
        "_analyze_dict_metrics",
        "_analyze_sequence_metrics",
        "_analyze_general_metrics",
        "_collect_context_metrics",
        "_analyze_performance_metrics",
        "_analyze_metric_trends",
        "_calculate_metric_trend",
        "_summarize_metric_trends",
        "_check_alert_conditions",
        "_generate_metrics_recommendations",
        "_store_metrics_in_context",
        "RegisteredContextAwareSummarizer",
        "RegisteredMetricsAnalyzer",
        "src.analysis.enhanced_framework",
        "Classes",
        "EnhancedAnalysisError",
        "__init__",
        "EnhancedAnalysisConfig",
        "to_dict",
        "from_dict",
        "EnhancedAnalysisResult",
        "add_context_key_created",
        "add_context_key_accessed",
        "add_dependency_resolved",
        "add_dependency_failed",
        "to_dict",
        "EnhancedAnalyzerV2",
        "__init__",
        "_initialize_context_keys",
        "add_dependency",
        "remove_dependency",
        "_check_dependencies",
        "send_message",
        "receive_messages",
        "share_data",
        "get_shared_data",
        "_execution_context",
        "analyze",
        "_analyze_impl",
        "EnhancedAnalysisRegistry",
        "create_enhanced_pipeline",
        "src.analysis.framework",
        "Classes",
        "AnalysisError",
        "__init__",
        "AnalysisConfig",
        "to_dict",
        "from_dict",
        "AnalysisResult",
        "add_error",
        "add_warning",
        "add_statistic",
        "add_pattern",
        "to_dict",
        "BaseAnalyzerV2",
        "__init__",
        "add_hook",
        "remove_hook",
        "_run_hooks",
        "_calculate_statistics",
        "_detect_patterns",
        "_assess_quality",
        "get_statistics",
        "_analyze_impl",
        "analyze",
        "src.analysis.registry",
        "Classes",
        "AnalyzerFactory",
        "__init__",
        "create_analyzer",
        "_validate_config",
        "clear_cache",
        "get_cached_analyzers",
        "AnalysisRegistry",
        "register",
        "unregister",
        "get_analyzer_info",
        "get_available_analyzers",
        "get_analyzer",
        "create_analyzer_chain",
        "clear_registry",
        "src.basic_usage",
        "Classes",
        "DataProcessor",
        "__init__",
        "run",
        "CustomAnalyzer",
        "_analyze_impl",
        "src.core.logger",
        "Classes",
        "LoggerConfig",
        "__init__",
        "ContextualFormatter",
        "__init__",
        "format",
        "Framework0Logger",
        "__init__",
        "_create_logger",
        "_create_console_handler",
        "_create_file_handler",
        "debug",
        "info",
        "warning",
        "error",
        "critical",
        "log_context_operation",
        "get_logger_stats",
        "src.dash_demo",
        "Classes",
        "SimpleDashDemo",
        "__init__",
        "setup_layout",
        "setup_callbacks",
        "create_system_metrics_chart",
        "create_config_chart",
        "create_context_table",
        "create_alerts_table",
        "run",
        "src.dash_integration",
        "Classes",
        "ContextDashError",
        "ContextDashboard",
        "__init__",
        "_setup_layout",
        "_setup_callbacks",
        "_get_disconnected_state",
        "_get_error_state",
        "_build_context_display",
        "_build_context_stats",
        "_build_recent_changes",
        "_build_history_timeline",
        "run",
        "src.debug_enhanced_memory_bus",
        "src.integration_demo",
        "Classes",
        "ExampleSuite",
        "__init__",
        "check_server_connection",
        "example_basic_operations",
        "example_shell_integration",
        "example_monitoring_simulation",
        "example_configuration_management",
        "show_context_summary",
        "run_all_examples",
        "src.visualization.enhanced_visualizer",
        "Classes",
        "VisualizationFormat",
        "NodeType",
        "EdgeType",
        "VisualizationNode",
        "__post_init__",
        "_get_default_style",
        "VisualizationEdge",
        "__post_init__",
        "_get_default_style",
        "EnhancedVisualizer",
        "__init__",
        "_detect_capabilities",
        "create_recipe_execution_graph",
        "render_graph",
        "_generate_metadata_html",
        "update_execution_state",
        "get_available_graphs",
        "cleanup_graphs",
        "export_all_graphs",
        "shutdown",
        "src.visualization.execution_flow",
        "Classes",
        "ExecutionStatus",
        "FlowLayout",
        "ExecutionStep",
        "get_duration",
        "is_terminal_status",
        "RecipeExecution",
        "get_total_duration",
        "get_step_by_id",
        "get_completion_percentage",
        "update_metrics",
        "ExecutionFlowVisualizer",
        "__init__",
        "start_recipe_execution",
        "update_step_status",
        "_complete_recipe_execution",
        "create_execution_timeline",
        "_create_plotly_timeline",
        "_create_matplotlib_timeline",
        "_create_json_timeline",
        "_build_execution_state",
        "_start_monitoring",
        "_take_performance_snapshot",
        "get_execution_summary",
        "shutdown",
        "src.visualization.performance_dashboard",
        "Classes",
        "MetricType",
        "ChartType",
        "MetricPoint",
        "age_seconds",
        "PerformanceAlert",
        "is_active",
        "duration",
        "PerformanceDashboard",
        "__init__",
        "_initialize_default_thresholds",
        "add_metric",
        "_check_alert_thresholds",
        "_trigger_alert",
        "_update_aggregated_metrics",
        "create_realtime_dashboard",
        "_get_recent_metric_data",
        "_generate_dashboard_html",
        "_generate_alerts_html",
        "_generate_metrics_summary_html",
        "export_performance_report",
        "_collect_performance_data",
        "_calculate_system_health",
        "_generate_performance_report_html",
        "get_dashboard_status",
        "shutdown",
        "src.visualization.timeline_visualizer",
        "Classes",
        "TimelineType",
        "LayoutEngine",
        "TimelineEvent",
        "get_end_time",
        "overlaps_with",
        "FlowNode",
        "get_duration",
        "FlowEdge",
        "TimelineVisualizer",
        "__init__",
        "create_gantt_timeline",
        "create_dependency_flow",
        "_group_events_by_field",
        "_get_status_color",
        "_get_color_map",
        "_calculate_layout_positions",
        "_add_flow_edges_to_figure",
        "_add_flow_nodes_to_figure",
        "_add_arrowhead",
        "_generate_enhanced_gantt_html",
        "_generate_enhanced_flow_html",
        "get_timeline_summary",
        "_calculate_event_statistics",
        "_calculate_timeline_span",
        "_calculate_status_distribution",
        "shutdown",
        "tools.baseline_documentation_updater",
        "Classes",
        "DocumentationSection",
        "BaselineDocumentationStructure",
        "BaselineDocumentationUpdater",
        "__init__",
        "_detect_framework_version",
        "update_readme_baseline_framework",
        "_generate_consolidated_readme",
        "_generate_readme_header",
        "_generate_readme_overview",
        "_generate_readme_status",
        "_generate_readme_architecture",
        "_generate_readme_features",
        "_generate_readme_getting_started",
        "_generate_readme_documentation_links",
        "_generate_readme_contributing",
        "_generate_readme_footer",
        "save_updated_documentation",
        "tools.baseline_framework_analyzer",
        "Classes",
        "BaselineComponent",
        "BaselineFramework",
        "BaselineFrameworkAnalyzer",
        "__init__",
        "_detect_framework_version",
        "analyze_workspace",
        "_discover_framework_files",
        "_analyze_component",
        "_classify_component_type",
        "_extract_component_description",
        "_determine_framework_role",
        "_analyze_python_component",
        "_analyze_yaml_component",
        "_analyze_shell_component",
        "_analyze_markdown_component",
        "_get_decorator_name",
        "_get_base_name",
        "_calculate_python_complexity",
        "_build_architecture_layers",
        "_analyze_dependencies",
        "_identify_patterns_and_extensions",
        "_generate_analysis_metrics",
        "save_baseline_documentation",
        "tools.documentation_updater",
        "Classes",
        "DocumentationGenerator",
        "__init__",
        "scan_python_modules",
        "_extract_module_info",
        "_extract_class_info",
        "_extract_function_info",
        "_extract_import_info",
        "generate_api_reference",
        "_generate_module_documentation",
        "_generate_class_documentation",
        "_generate_function_documentation",
        "generate_method_index",
        "_build_signature",
        "generate_deployment_guide",
        "generate_integration_patterns",
        "generate_troubleshooting_guide",
        "update_all_documentation",
        "tools.phased_restructurer",
        "Classes",
        "PhasedRestructurer",
        "__init__",
        "load_restructuring_plan",
        "get_current_status",
        "_save_status",
        "get_phase_operations",
        "execute_phase",
        "_execute_operation",
        "_create_backup",
        "_backup_git_state",
        "_create_directory",
        "_create_file",
        "_move_file",
        "_validate_operation",
        "show_status",
        "tools.post_restructure_validator",
        "Classes",
        "ValidationResult",
        "ComponentValidator",
        "__init__",
        "discover_components",
        "_is_executable_script",
        "validate_all_components",
        "_validate_python_components",
        "_validate_python_syntax",
        "_validate_python_imports",
        "_validate_python_execution",
        "_validate_test_files",
        "_run_pytest_on_file",
        "_validate_recipe_files",
        "_validate_config_files",
        "_generate_validation_summary",
        "generate_validation_report",
        "tools.workspace_cleaner_clean",
        "Classes",
        "WorkspaceCleaner",
        "__init__",
        "run_cleanup",
        "_create_backup",
        "_remove_obsolete_files",
        "_create_fresh_directories",
        "_verify_consolidated_components",
        "_create_essential_configs",
        "_generate_fresh_documentation",
        "_verify_baseline_integrity",
        "_generate_cleanup_report",
        "tools.workspace_cleaner_v2",
        "Classes",
        "CleanupRule",
        "CleanupResult",
        "WorkspaceCleanerV2",
        "__init__",
        "add_cleanup_rule",
        "add_standard_rules",
        "save_configuration",
        "load_configuration",
        "execute_cleanup",
        "_create_backup",
        "_execute_single_rule",
        "_update_rule_metrics",
        "generate_report",
        "tools.workspace_restructurer",
        "Classes",
        "RestructureOperation",
        "RestructuringPlan",
        "WorkspaceRestructurer",
        "__init__",
        "analyze_current_structure",
        "_analyze_compliance",
        "_determine_correct_location",
        "_get_relocation_reason",
        "_check_package_structure",
        "_calculate_compliance_score",
        "_generate_compliance_recommendations",
        "generate_restructuring_plan",
        "_generate_validation_checks",
        "_generate_rollback_plan",
        "save_restructuring_plan"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 7219,
      "complexity_score": 0,
      "last_modified": "2025-10-05T01:08:40.972318",
      "checksum": "58e655b665061513a3e40179b47c30d3",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "docs/cleanup_report.json": {
      "name": "docs/cleanup_report.json",
      "path": "docs/cleanup_report.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 70,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:17:36.653843",
      "checksum": "3659f627b3b56d695e559609ae6f1bec",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    "docs/delta_compression.md": {
      "name": "docs/delta_compression.md",
      "path": "docs/delta_compression.md",
      "component_type": "documentation",
      "description": "Delta Compression Module Documentation",
      "dependencies": [],
      "exports": [
        "Delta Compression Module Documentation",
        "Overview",
        "Key Components",
        "DeltaRecord",
        "DeltaRecord Methods",
        "DeltaCompressor",
        "DeltaCompressor Methods",
        "DeltaChain",
        "DeltaChain Methods",
        "Strategy Options",
        "Usage Examples",
        "Basic Usage",
        "Create a delta compressor",
        "Calculate delta between states",
        "Apply delta to reconstruct state",
        "Using DeltaChain for State History",
        "Create a delta chain",
        "Add states",
        "Get state history",
        "Optimize chain",
        "Performance Considerations",
        "Integration with Other Modules"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 103,
      "complexity_score": 0,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "3d45372c4ef8886648c289547ab5ab84",
      "framework_role": "general_utility",
      "stability": "stable"
    },
    "docs/deployment_guide.md": {
      "name": "docs/deployment_guide.md",
      "path": "docs/deployment_guide.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Deployment Guide",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Deployment Guide",
        "System Requirements",
        "Minimum Requirements",
        "Supported Platforms",
        "Installation",
        "Quick Start",
        "Clone the repository",
        "Create virtual environment",
        "Install dependencies",
        "Start the server",
        "Configuration Options",
        "Environment Variables",
        "Docker Deployment",
        "Using Docker Compose",
        "Production Deployment",
        "Security Considerations",
        "Performance Optimization"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 62,
      "complexity_score": 0,
      "last_modified": "2025-10-05T01:08:41.028317",
      "checksum": "5559a55df4fa7fd3af4803f57a77a2d0",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/enhanced_analysis_framework_test_report.json": {
      "name": "docs/enhanced_analysis_framework_test_report.json",
      "path": "docs/enhanced_analysis_framework_test_report.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 203,
      "complexity_score": 0,
      "last_modified": "2025-10-04T17:17:40.091895",
      "checksum": "2fa0496664074a9f7227376c6d0a7986",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/getting_started.md": {
      "name": "docs/getting_started.md",
      "path": "docs/getting_started.md",
      "component_type": "documentation",
      "description": "Getting Started with IAF0 Framework",
      "dependencies": [],
      "exports": [
        "Getting Started with IAF0 Framework",
        "Quick Start",
        "1. Context System Usage",
        "Create context instance",
        "Store and retrieve data",
        "Track changes",
        "2. Scriptlet Development",
        "3. Analysis Framework",
        "Configure analysis",
        "Run analysis",
        "Testing",
        "Development Tools",
        "Format code",
        "Run compliance check",
        "Update documentation"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 48,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:17:36.649843",
      "checksum": "b4364746f4d32f3ba832434d1eee202b",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "docs/integrated_async_performance_demo.json": {
      "name": "docs/integrated_async_performance_demo.json",
      "path": "docs/integrated_async_performance_demo.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 23,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:10:46.189340",
      "checksum": "3e977c50b443140152e3fc0d0befc0f4",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/integration_patterns.md": {
      "name": "docs/integration_patterns.md",
      "path": "docs/integration_patterns.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Integration Patterns",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Integration Patterns",
        "Python Client Integration",
        "Synchronous Client",
        "Initialize client",
        "Basic operations",
        "File dumping",
        "Asynchronous Client",
        "Run async client",
        "Shell Script Integration",
        "Basic Commands",
        "Set context values",
        "Get context values",
        "List all context",
        "Create context dump",
        "Advanced Shell Integration",
        "Deployment script with context integration",
        "Update deployment context",
        "Perform deployment steps",
        "WebSocket Real-time Integration",
        "Python WebSocket Client",
        "Create WebSocket client",
        "Connect to server",
        "Dashboard Integration",
        "Custom Dash Application",
        "Initialize Dash app with context integration"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 122,
      "complexity_score": 0,
      "last_modified": "2025-10-05T01:08:41.036317",
      "checksum": "a311fe0876e49077e8002203900b0773",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/method_index.md": {
      "name": "docs/method_index.md",
      "path": "docs/method_index.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Method Index",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Method Index",
        "_",
        "__call__",
        "__clear",
        "__clear",
        "__clear_and_remove",
        "__contains",
        "__contains",
        "__del__",
        "__del__",
        "__del__",
        "__delete",
        "__delete",
        "__enter__",
        "__enter__",
        "__exit__",
        "__exit__",
        "__get",
        "__get",
        "__get_entry_metadata",
        "__get_keys",
        "__get_keys",
        "__get_stats",
        "__get_stats",
        "__getattr__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__persist",
        "__post_init__",
        "__post_init__",
        "__post_init__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__repr__",
        "__set",
        "__set",
        "__str__",
        "_add_arrowhead",
        "_add_flow_edges_to_figure",
        "_add_flow_nodes_to_figure",
        "_analyze_compliance",
        "_analyze_component",
        "_analyze_dependencies",
        "_analyze_dict_metrics",
        "_analyze_dictionary",
        "_analyze_general_metrics",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_impl",
        "_analyze_markdown_component",
        "_analyze_metric_trends",
        "_analyze_numeric_data",
        "_analyze_other",
        "_analyze_performance_metrics",
        "_analyze_python_component",
        "_analyze_sequence",
        "_analyze_sequence_metrics",
        "_analyze_shell_component",
        "_analyze_string",
        "_analyze_string_data",
        "_analyze_trends",
        "_analyze_yaml_component",
        "_assess_data_quality",
        "_assess_dictionary_quality",
        "_assess_quality",
        "_assess_sequence_quality",
        "_assess_string_quality",
        "_attempt_step_execution",
        "_auto_persist_worker",
        "_backup_git_state",
        "_binary_delta",
        "_build_architecture_layers",
        "_build_context_display",
        "_build_context_stats",
        "_build_execution_state",
        "_build_history_timeline",
        "_build_recent_changes",
        "_build_signature",
        "_calculate_compliance_score",
        "_calculate_event_statistics",
        "_calculate_layout_positions",
        "_calculate_metric_trend",
        "_calculate_multi_period_trends",
        "_calculate_python_complexity",
        "_calculate_statistics",
        "_calculate_status_distribution",
        "_calculate_system_health",
        "_calculate_timeline_span",
        "_check_alert_conditions",
        "_check_alert_thresholds",
        "_check_dependencies",
        "_check_json_compatibility",
        "_check_method_signatures",
        "_check_package_structure",
        "_check_state_management",
        "_classify_component_type",
        "_clean_expired_entries",
        "_clear",
        "_clear",
        "_clear",
        "_clear_and_remove",
        "_collect_context_metrics",
        "_collect_metrics",
        "_collect_performance_data",
        "_compare_with_history",
        "_complete_recipe_execution",
        "_compute_content_hash",
        "_compute_diff",
        "_contains",
        "_contains",
        "_create_backup",
        "_create_backup",
        "_create_backup",
        "_create_console_handler",
        "_create_delta_snapshot",
        "_create_directory",
        "_create_enhanced_summary",
        "_create_essential_configs",
        "_create_file",
        "_create_file_handler",
        "_create_fresh_directories",
        "_create_json_timeline",
        "_create_logger",
        "_create_matplotlib_timeline",
        "_create_plotly_timeline",
        "_create_snapshot",
        "_deep_merge",
        "_default_key_func",
        "_delete",
        "_delete",
        "_delete",
        "_detect_capabilities",
        "_detect_framework_version",
        "_detect_framework_version",
        "_detect_patterns",
        "_determine_correct_location",
        "_determine_framework_role",
        "_dict_delta",
        "_discover_framework_files",
        "_enforce_snapshot_limit",
        "_estimate_memory_usage",
        "_estimate_size",
        "_evict_entries",
        "_evict_memory",
        "_execute_callbacks",
        "_execute_hooks",
        "_execute_operation",
        "_execute_recipe_steps",
        "_execute_single_rule",
        "_execute_single_step",
        "_execution_context",
        "_export_data",
        "_extract_class_info",
        "_extract_component_description",
        "_extract_function_info",
        "_extract_import_info",
        "_extract_metadata",
        "_extract_module_info",
        "_extract_result_data",
        "_finalize_context",
        "_flush_to_db",
        "_flush_to_disk",
        "_generate_alerts_html",
        "_generate_analysis_metrics",
        "_generate_class_documentation",
        "_generate_cleanup_report",
        "_generate_compliance_recommendations",
        "_generate_consolidated_readme",
        "_generate_context_recommendations",
        "_generate_dashboard_html",
        "_generate_enhanced_flow_html",
        "_generate_enhanced_gantt_html",
        "_generate_fresh_documentation",
        "_generate_function_documentation",
        "_generate_metadata_html",
        "_generate_metrics_recommendations",
        "_generate_metrics_summary_html",
        "_generate_module_documentation",
        "_generate_performance_report_html",
        "_generate_readme_architecture",
        "_generate_readme_contributing",
        "_generate_readme_documentation_links",
        "_generate_readme_features",
        "_generate_readme_footer",
        "_generate_readme_getting_started",
        "_generate_readme_header",
        "_generate_readme_overview",
        "_generate_readme_status",
        "_generate_rollback_plan",
        "_generate_trend_recommendations",
        "_generate_validation_checks",
        "_generate_validation_summary",
        "_generate_version_id",
        "_get",
        "_get",
        "_get",
        "_get_base_name",
        "_get_color_map",
        "_get_decorator_name",
        "_get_default_style",
        "_get_default_style",
        "_get_disconnected_state",
        "_get_entry_metadata",
        "_get_error_state",
        "_get_keys",
        "_get_keys",
        "_get_recent_metric_data",
        "_get_relocation_reason",
        "_get_stats",
        "_get_stats",
        "_get_status_color",
        "_group_events_by_field",
        "_handle_completion",
        "_handle_error",
        "_has_changes_since_last_snapshot",
        "_identify_patterns_and_extensions",
        "_import_data",
        "_init_database",
        "_init_db",
        "_initialize_context",
        "_initialize_context_keys",
        "_initialize_default_thresholds",
        "_initialize_storage",
        "_is_executable_script",
        "_load",
        "_load_cache",
        "_load_config_file",
        "_load_current_state",
        "_load_data_from_file",
        "_load_default_config",
        "_load_environment_config",
        "_load_from_persistence",
        "_load_recipe",
        "_load_registry",
        "_make_request",
        "_message_cleanup_worker",
        "_move_file",
        "_optimize_chain",
        "_parse_steps",
        "_percentile",
        "_persist",
        "_publish_event",
        "_remove_obsolete_files",
        "_restore_snapshot",
        "_restore_snapshot_by_tag",
        "_run_hooks",
        "_run_pytest_on_file",
        "_save",
        "_save_data_to_file",
        "_save_registry",
        "_save_status",
        "_schedule_auto_persist",
        "_schedule_auto_snapshot",
        "_select_eviction_candidate",
        "_set",
        "_set",
        "_set",
        "_set_nested_value",
        "_setup_callbacks",
        "_setup_default_validators",
        "_setup_layout",
        "_setup_routes",
        "_setup_socketio_handlers",
        "_setup_websocket_handlers",
        "_signal_handler",
        "_start_background_tasks",
        "_start_monitoring",
        "_store_metrics_in_context",
        "_store_summary_in_context",
        "_summarize_metric_trends",
        "_take_performance_snapshot",
        "_track_analysis_trends",
        "_trigger_alert",
        "_update_aggregated_metrics",
        "_update_performance_metrics",
        "_update_rule_metrics",
        "_validate_config",
        "_validate_config_files",
        "_validate_dependency_graph",
        "_validate_json_serializable",
        "_validate_json_serializable",
        "_validate_json_serializable",
        "_validate_module_imports",
        "_validate_operation",
        "_validate_python_components",
        "_validate_python_execution",
        "_validate_python_imports",
        "_validate_python_syntax",
        "_validate_recipe_files",
        "_validate_recipe_structure",
        "_validate_required_fields",
        "_validate_step_indices",
        "_validate_step_structure",
        "_validate_test_files",
        "_verify_baseline_integrity",
        "_verify_consolidated_components",
        "_with_lock",
        "_with_lock",
        "_write_csv_dump",
        "_write_json_dump",
        "_write_pretty_dump",
        "_write_text_dump",
        "A",
        "access",
        "add_cleanup_rule",
        "add_context_key_accessed",
        "add_context_key_created",
        "add_delta",
        "add_dependency",
        "add_dependency_failed",
        "add_dependency_resolved",
        "add_error",
        "add_global_error",
        "add_global_warning",
        "add_hook",
        "add_metric",
        "add_pattern",
        "add_scriptlet",
        "add_standard_rules",
        "add_state",
        "add_statistic",
        "add_step_result",
        "add_task",
        "add_validator",
        "add_validator",
        "add_warning",
        "age_seconds",
        "all_policies",
        "analyze",
        "analyze",
        "analyze_current_structure",
        "analyze_workspace",
        "apply_delta",
        "apply_patch",
        "B",
        "backup",
        "backup",
        "backup",
        "backup",
        "C",
        "calculate_delta",
        "cancel_execution",
        "check_and_flush",
        "check_paradigm",
        "check_server_connection",
        "cleanup",
        "cleanup",
        "cleanup_graphs",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear",
        "clear_all",
        "clear_cache",
        "clear_cache",
        "clear_chain",
        "clear_history",
        "clear_registry",
        "commit",
        "compare_snapshots",
        "compare_snapshots",
        "contains",
        "contains",
        "create_alerts_table",
        "create_analyzer",
        "create_analyzer_chain",
        "create_config_chart",
        "create_context_table",
        "create_delta_record",
        "create_delta_snapshot",
        "create_delta_snapshot",
        "create_dependency_flow",
        "create_enhanced_pipeline",
        "create_execution_timeline",
        "create_gantt_timeline",
        "create_realtime_dashboard",
        "create_recipe_execution_graph",
        "create_snapshot",
        "create_snapshot",
        "create_system_metrics_chart",
        "critical",
        "D",
        "debug",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete",
        "delete_file",
        "delete_snapshot",
        "deserialize_delta",
        "detect_format",
        "discover_components",
        "download_dump",
        "dump_context",
        "duration",
        "E",
        "end_operation",
        "error",
        "error_count",
        "example_basic_operations",
        "example_configuration_management",
        "example_monitoring_simulation",
        "example_shell_integration",
        "execute",
        "execute_all",
        "execute_cleanup",
        "execute_phase",
        "execution_duration",
        "execution_time_seconds",
        "exists",
        "exists",
        "exists",
        "export_all_graphs",
        "export_data",
        "export_performance_report",
        "export_snapshot",
        "F",
        "fetch_snapshot",
        "flush",
        "flush",
        "format",
        "from_dict",
        "from_dict",
        "from_dict",
        "from_dict",
        "from_dict",
        "from_dict",
        "from_json",
        "G",
        "generate_api_reference",
        "generate_deployment_guide",
        "generate_integration_patterns",
        "generate_method_index",
        "generate_report",
        "generate_restructuring_plan",
        "generate_troubleshooting_guide",
        "generate_validation_report",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get",
        "get_age",
        "get_analyzer",
        "get_analyzer_info",
        "get_available_analyzers",
        "get_available_graphs",
        "get_average_load_time",
        "get_average_save_time",
        "get_cache_hit_ratio",
        "get_cached_analyzers",
        "get_capabilities",
        "get_category",
        "get_category",
        "get_chain_metrics",
        "get_completion_percentage",
        "get_compression_stats",
        "get_current_state",
        "get_current_status",
        "get_dashboard_status",
        "get_delta_at_index",
        "get_delta_snapshot",
        "get_duration",
        "get_duration",
        "get_end_time",
        "get_entry_metadata",
        "get_execution_history",
        "get_execution_statistics",
        "get_execution_summary",
        "get_history",
        "get_history",
        "get_history",
        "get_history",
        "get_idle_time",
        "get_keys",
        "get_keys",
        "get_latest_snapshot",
        "get_logger_stats",
        "get_metadata",
        "get_metrics",
        "get_metrics",
        "get_metrics",
        "get_metrics",
        "get_phase_operations",
        "get_shared_data",
        "get_snapshot",
        "get_snapshot",
        "get_snapshot_by_tag",
        "get_snapshot_data",
        "get_state_at_index",
        "get_statistics",
        "get_stats",
        "get_stats",
        "get_status",
        "get_status",
        "get_step_by_id",
        "get_task_dependencies",
        "get_task_dependents",
        "get_task_order",
        "get_timeline_summary",
        "get_total_duration",
        "get_validation_summary",
        "get_versions",
        "get_versions",
        "H",
        "handle_patch_request",
        "handle_snapshot_request",
        "health_check",
        "I",
        "import_data",
        "import_snapshot",
        "increment_cache_hits",
        "increment_cache_misses",
        "increment_errors",
        "info",
        "is_active",
        "is_executing",
        "is_execution_cancelled",
        "is_expired",
        "is_expired",
        "is_running",
        "is_terminal_status",
        "is_valid",
        "K",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "L",
        "list_all",
        "list_dumps",
        "list_files",
        "list_snapshots",
        "list_snapshots",
        "list_tags",
        "list_versions",
        "load",
        "load",
        "load",
        "load",
        "load",
        "load",
        "load_configuration",
        "load_context",
        "load_context",
        "load_file",
        "load_from_db",
        "load_from_disk",
        "load_latest",
        "load_restructuring_plan",
        "log_context_operation",
        "M",
        "merge_deltas",
        "merge_from",
        "O",
        "on",
        "overall_success",
        "overlaps_with",
        "P",
        "parse_recipe",
        "persist",
        "persist",
        "ping",
        "pop_dirty_keys",
        "pop_dirty_keys",
        "publish",
        "push_patch",
        "R",
        "rebaseline",
        "receive_messages",
        "register",
        "register_callback",
        "remove_dependency",
        "remove_hook",
        "remove_task",
        "render_graph",
        "reset",
        "resolve_dependencies",
        "restart",
        "restore",
        "restore",
        "restore",
        "restore",
        "restore_snapshot",
        "restore_snapshot_by_tag",
        "rollback",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run_all_examples",
        "run_cleanup",
        "run_recipe",
        "S",
        "save",
        "save",
        "save",
        "save",
        "save",
        "save",
        "save",
        "save_baseline_documentation",
        "save_configuration",
        "save_context",
        "save_context",
        "save_restructuring_plan",
        "save_updated_documentation",
        "scan_python_modules",
        "send_message",
        "serialize_delta",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "set",
        "setup_callbacks",
        "setup_layout",
        "share_data",
        "show_context_summary",
        "show_status",
        "shutdown",
        "shutdown",
        "shutdown",
        "shutdown",
        "shutdown",
        "start",
        "start_background_flush",
        "start_operation",
        "start_recipe_execution",
        "stop",
        "stop_background_flush",
        "subscribe",
        "success",
        "success_rate",
        "sync",
        "T",
        "tag_snapshot",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_dict",
        "to_json",
        "U",
        "unregister",
        "unsubscribe",
        "untag_snapshot",
        "update_all_documentation",
        "update_execution_state",
        "update_integrity_info",
        "update_load",
        "update_metrics",
        "update_operation_count",
        "update_operation_stats",
        "update_operation_time",
        "update_readme_baseline_framework",
        "update_save",
        "update_step_status",
        "V",
        "validate",
        "validate",
        "validate",
        "validate",
        "validate_all_components",
        "validate_configuration",
        "validate_custom",
        "validate_custom",
        "validate_custom",
        "visualize",
        "W",
        "warning",
        "warning_count"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 6290,
      "complexity_score": 0,
      "last_modified": "2025-10-05T01:08:40.988317",
      "checksum": "2a4001e19acc3aa6a9015ed01296e579",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "docs/post_restructure_execution_summary.md": {
      "name": "docs/post_restructure_execution_summary.md",
      "path": "docs/post_restructure_execution_summary.md",
      "component_type": "documentation",
      "description": "Framework0 Post-Restructure Execution Summary",
      "dependencies": [],
      "exports": [
        "Framework0 Post-Restructure Execution Summary",
        "🎯 Executive Summary",
        "📊 Validation Results",
        "Overall Metrics",
        "Component Breakdown",
        "🏗️ Restructuring Completed",
        "✅ Successfully Completed Phases",
        "📁 Current Directory Structure (Framework0 Compliant)",
        "🔧 Components Validation Status",
        "✅ Fully Operational Components",
        "⚠️ Components with Minor Issues",
        "🧪 Test Execution Results",
        "Recipe Validation",
        "Import Testing",
        "Execution Testing",
        "🛡️ Safety Measures Implemented",
        "🔍 Issues Identified and Resolved",
        "Fixed Issues:",
        "Remaining Minor Issues:",
        "🎉 Conclusion",
        "Key Achievements:",
        "Current Status:"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 124,
      "complexity_score": 0,
      "last_modified": "2025-10-05T01:10:40.083540",
      "checksum": "bbb058d8845f353bfccbe1c65f509fcd",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/post_restructure_validation_report.json": {
      "name": "docs/post_restructure_validation_report.json",
      "path": "docs/post_restructure_validation_report.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 332,
      "complexity_score": 0,
      "last_modified": "2025-10-05T01:04:52.841821",
      "checksum": "9039e11ce57cb9871babcd847c6f2649",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/test_execution_report.md": {
      "name": "docs/test_execution_report.md",
      "path": "docs/test_execution_report.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Test Execution Report",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Test Execution Report",
        "Generated: 2025-10-04",
        "🎯 Test Suite Summary",
        "✅ **Test Categories Validated**",
        "📊 Test Execution Results",
        "**1. Simple Validation Tests**",
        "**2. Core Functionality Tests**",
        "**3. Framework Integration Test**",
        "🧪 Test Coverage Analysis",
        "**Context Operations**: ✅ Comprehensive",
        "**File Dumping**: ✅ Multi-Format Support",
        "**Server Configuration**: ✅ Flexible Setup",
        "**Error Handling**: ✅ Robust",
        "🛠️ Dependencies Validated",
        "**Core Dependencies**: ✅ Installed and Working",
        "**Development Tools**: ✅ Configured",
        "🚀 Integration Validation",
        "**Framework0 Components Working**:",
        "**Client Integration Ready**:",
        "📋 Test Summary Stats",
        "🎯 Production Readiness Assessment",
        "**✅ Ready for Production**:",
        "**🚧 Areas for Enhancement** (Optional):",
        "🏆 Conclusion"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 126,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "224f52540c83f9b1b4c9ba373a159d08",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/troubleshooting.md": {
      "name": "docs/troubleshooting.md",
      "path": "docs/troubleshooting.md",
      "component_type": "documentation",
      "description": "Framework0 Enhanced Context Server - Troubleshooting Guide",
      "dependencies": [],
      "exports": [
        "Framework0 Enhanced Context Server - Troubleshooting Guide",
        "Connection Issues",
        "Server Won't Start",
        "Client Connection Refused",
        "Performance Issues",
        "High Memory Usage",
        "Slow Response Times",
        "File Dumping Issues",
        "Dump Directory Permission Error",
        "Invalid Dump Format Error",
        "Client Integration Issues",
        "Python Import Errors",
        "Shell Script Permission Error",
        "Debugging and Logging",
        "Enable Debug Mode",
        "Server debug mode",
        "Client debug mode",
        "Log Analysis",
        "Frequently Asked Questions",
        "Q: Can I run multiple context servers?",
        "Q: How do I backup context data?",
        "Q: Is the context server thread-safe?",
        "Q: What's the maximum context size?"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 124,
      "complexity_score": 0,
      "last_modified": "2025-10-05T01:08:41.036317",
      "checksum": "f3a2d350d232dfc0fbd33076a485eb24",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "docs/workspace_cleaner_test_report.json": {
      "name": "docs/workspace_cleaner_test_report.json",
      "path": "docs/workspace_cleaner_test_report.json",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 51,
      "complexity_score": 0,
      "last_modified": "2025-10-04T17:09:22.562760",
      "checksum": "9bea070aefa5985c25922b2a76a2db57",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "examples/README.md": {
      "name": "examples/README.md",
      "path": "examples/README.md",
      "component_type": "documentation",
      "description": "Framework0 Context Server Examples",
      "dependencies": [],
      "exports": [
        "Framework0 Context Server Examples",
        "Quick Start",
        "Example Files",
        "1. `shell_demo.sh`",
        "Run all examples",
        "Run specific example",
        "2. `integration_demo.py`",
        "Run all examples",
        "Run specific example",
        "3. `dash_demo.py`",
        "Start dashboard on default port 8050",
        "Custom configuration",
        "Integration Workflow",
        "Data Flow Example",
        "Environment Variables",
        "Monitoring the System",
        "Next Steps"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 118,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "ec988b62804645164ab219f51a7a135b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "examples/shell_demo.sh": {
      "name": "examples/shell_demo.sh",
      "path": "examples/shell_demo.sh",
      "component_type": "shell_script",
      "description": "Framework0 Context Server - Shell Integration Demo",
      "dependencies": [],
      "exports": [
        "log_info",
        "log_warn",
        "log_error",
        "log_step",
        "log_success",
        "check_server",
        "example_system_monitoring",
        "example_process_monitoring",
        "example_configuration",
        "example_data_pipeline",
        "example_alerting",
        "show_context_summary",
        "main"
      ],
      "imports": [],
      "functions": [
        {
          "name": "log_info",
          "line": 27,
          "type": "shell_function"
        },
        {
          "name": "log_warn",
          "line": 31,
          "type": "shell_function"
        },
        {
          "name": "log_error",
          "line": 35,
          "type": "shell_function"
        },
        {
          "name": "log_step",
          "line": 39,
          "type": "shell_function"
        },
        {
          "name": "log_success",
          "line": 43,
          "type": "shell_function"
        },
        {
          "name": "check_server",
          "line": 48,
          "type": "shell_function"
        },
        {
          "name": "example_system_monitoring",
          "line": 71,
          "type": "shell_function"
        },
        {
          "name": "example_process_monitoring",
          "line": 112,
          "type": "shell_function"
        },
        {
          "name": "example_configuration",
          "line": 148,
          "type": "shell_function"
        },
        {
          "name": "example_data_pipeline",
          "line": 191,
          "type": "shell_function"
        },
        {
          "name": "example_alerting",
          "line": 237,
          "type": "shell_function"
        },
        {
          "name": "show_context_summary",
          "line": 282,
          "type": "shell_function"
        },
        {
          "name": "main",
          "line": 317,
          "type": "shell_function"
        }
      ],
      "classes": [],
      "lines_of_code": 309,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "85542e4779be17ce4555ab486154387b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/__init__.py": {
      "name": "orchestrator/__init__.py",
      "path": "orchestrator/__init__.py",
      "component_type": "orchestration",
      "description": "orchestrator/__init__.py",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docker-compose.yml",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [],
      "imports": [
        "context.context",
        "context.memory_bus",
        "context.persistence",
        "context.version_control"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 44,
      "complexity_score": 4,
      "last_modified": "2025-10-05T01:10:40.083540",
      "checksum": "3a8bd4be045514f935fd52c36bc7a02e",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py": {
      "name": "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      "path": "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      "component_type": "orchestration",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 4,
      "complexity_score": 0,
      "last_modified": "2025-10-03T20:06:47.957118",
      "checksum": "2f766ec4ca25742414a1ae077df960ab",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py": {
      "name": "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      "path": "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      "component_type": "orchestration",
      "description": "Context class for managing JSON-safe, traceable shared state.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "set",
        "get",
        "to_dict",
        "get_history",
        "_validate_json_serializable",
        "clear",
        "keys",
        "__repr__",
        "Context"
      ],
      "imports": [
        "json",
        "copy",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 20,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 26,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 39,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 47,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get_history",
          "line": 53,
          "args": [
            "self",
            "key"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_validate_json_serializable",
          "line": 63,
          "args": [
            "self",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 73,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 79,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 84,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Context",
          "line": 13,
          "bases": [],
          "docstring": "Context class for managing JSON-safe, traceable shared state.\nAll values must be JSON-serializable (primitives, lists, dicts).\nKeys are dotted strings for namespacing (e.g., \"numbers.stats_v1\").",
          "methods": [
            {
              "name": "__init__",
              "line": 20,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 26,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 39,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": ""
            },
            {
              "name": "to_dict",
              "line": 47,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "get_history",
              "line": 53,
              "args": [
                "self",
                "key"
              ],
              "docstring": ""
            },
            {
              "name": "_validate_json_serializable",
              "line": 63,
              "args": [
                "self",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "clear",
              "line": 73,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "keys",
              "line": 79,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "__repr__",
              "line": 84,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 78,
      "complexity_score": 13,
      "last_modified": "2025-10-03T08:24:06.993546",
      "checksum": "f6cd62d33d16fcfb243ffdcea63ea87a",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py": {
      "name": "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "path": "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "component_type": "orchestration",
      "description": "MemoryBus class for in-memory, thread-safe, JSON-serializable caching.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "set",
        "get",
        "clear",
        "keys",
        "_validate_json_serializable",
        "__repr__",
        "MemoryBus"
      ],
      "imports": [
        "json",
        "threading",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 22,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 28,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 38,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 48,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 54,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_validate_json_serializable",
          "line": 60,
          "args": [
            "self",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 69,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MemoryBus",
          "line": 15,
          "bases": [],
          "docstring": "MemoryBus class for in-memory, thread-safe, JSON-serializable caching.\nDesigned for shared access across hosts via the central server.\nValidates all stored values for JSON compatibility.",
          "methods": [
            {
              "name": "__init__",
              "line": 22,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 28,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 38,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": ""
            },
            {
              "name": "clear",
              "line": 48,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "keys",
              "line": 54,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "_validate_json_serializable",
              "line": 60,
              "args": [
                "self",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "__repr__",
              "line": 69,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 66,
      "complexity_score": 14,
      "last_modified": "2025-10-03T08:24:06.993546",
      "checksum": "24df2825ad5111987329515ef2361922",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/context/__init__.py": {
      "name": "orchestrator/context/__init__.py",
      "path": "orchestrator/context/__init__.py",
      "component_type": "orchestration",
      "description": "Framework0 Orchestrator Context Package",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/__init__.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        "orchestrator/context/context.py",
        "orchestrator/context/db_adapter.py",
        "orchestrator/context/memory_bus.py",
        "orchestrator/context/persistence.py",
        "orchestrator/context/version_control.py",
        "orchestrator/context_client.py",
        "orchestrator/enhanced_context_server.py",
        "tests/test_enhanced_context_server.py",
        "tools/context.sh",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        "docs/method_index.md",
        "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        "orchestrator/context/memory_bus.py",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/memory_bus.py",
        "src/debug_enhanced_memory_bus.py",
        "tests/test_enhanced_memory_bus.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context/persistence.py",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence.py",
        "orchestrator/persistence/__init__.py",
        "orchestrator/persistence/cache.py",
        "orchestrator/persistence/core.py",
        "orchestrator/persistence/delta.py",
        "orchestrator/persistence/enhanced.py",
        "orchestrator/persistence/snapshot.py",
        "tests/test_enhanced_persistence.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/src/context_client.py",
        "docker-compose.yml",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context/version_control.py",
        "orchestrator/context_client.py"
      ],
      "exports": [],
      "imports": [
        "context",
        "memory_bus",
        "persistence",
        "version_control"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 34,
      "complexity_score": 8,
      "last_modified": "2025-10-05T01:06:28.785161",
      "checksum": "29e53e99b9037fef9da0d24e0ada56c2",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/context/context.py": {
      "name": "orchestrator/context/context.py",
      "path": "orchestrator/context/context.py",
      "component_type": "orchestration",
      "description": "Consolidated IAF0 Context System - Version 2.0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "to_dict",
        "update_operation_count",
        "__init__",
        "get",
        "set",
        "to_dict",
        "to_json",
        "from_json",
        "get_history",
        "pop_dirty_keys",
        "keys",
        "register_callback",
        "get_metrics",
        "clear_history",
        "merge_from",
        "_execute_callbacks",
        "_estimate_memory_usage",
        "__repr__",
        "ContextHistoryEntry",
        "ContextMetrics",
        "Context"
      ],
      "imports": [
        "os",
        "json",
        "copy",
        "time",
        "threading",
        "weakref",
        "typing",
        "pathlib",
        "dataclasses",
        "datetime",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "to_dict",
          "line": 50,
          "args": [
            "self"
          ],
          "docstring": "Convert history entry to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "update_operation_count",
          "line": 80,
          "args": [
            "self",
            "operation_type"
          ],
          "docstring": "Update operation counters based on operation type.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 108,
          "args": [
            "self",
            "enable_history",
            "enable_metrics"
          ],
          "docstring": "Initialize the Context with integrated components.\n\nArgs:\n    enable_history: Whether to track change history (default: True)\n    enable_metrics: Whether to collect performance metrics (default: True)",
          "decorators": []
        },
        {
          "name": "get",
          "line": 156,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Retrieve value for a given dotted key with optional default.\n\nThis method provides thread-safe access to stored values with\ncomprehensive logging and metrics collection.\n\nArgs:\n    key: Dotted string key for hierarchical access\n    default: Value to return if key is not found\n\nReturns:\n    Stored value or default if key doesn't exist",
          "decorators": []
        },
        {
          "name": "set",
          "line": 189,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "Set a context key to a new value with change tracking.\n\nThis method provides comprehensive state management including\nhistory tracking, dirty key management, and event notifications.\n\nArgs:\n    key: Dotted string key for hierarchical organization\n    value: JSON-serializable value to store\n    who: Optional identifier of who made the change\n\nRaises:\n    ValueError: If value is not JSON-serializable\n    TypeError: If key is not a string",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 271,
          "args": [
            "self"
          ],
          "docstring": "Return a deep copy of the complete context data.\n\nProvides safe access to all stored data without risk of\nexternal modification affecting internal state.\n\nReturns:\n    Deep copy of all context data as dictionary",
          "decorators": []
        },
        {
          "name": "to_json",
          "line": 286,
          "args": [
            "self"
          ],
          "docstring": "Convert the entire context data to formatted JSON string.\n\nProvides serialized representation suitable for persistence,\nnetwork transmission, or external system integration.\n\nReturns:\n    Formatted JSON string representation of context data\n\nRaises:\n    ValueError: If context contains non-JSON-serializable data",
          "decorators": []
        },
        {
          "name": "from_json",
          "line": 307,
          "args": [
            "cls",
            "json_string"
          ],
          "docstring": "Create a new Context instance from JSON string.\n\nDeserializes JSON data into a new context instance with\noptional configuration for history and metrics tracking.\n\nArgs:\n    json_string: JSON string containing context data\n    **kwargs: Additional arguments for Context initialization\n\nReturns:\n    New Context instance with deserialized data\n\nRaises:\n    ValueError: If JSON string is invalid or contains invalid data",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "get_history",
          "line": 344,
          "args": [
            "self"
          ],
          "docstring": "Retrieve complete change history as list of dictionaries.\n\nProvides access to all tracked changes for debugging,\nauditing, and rollback operations.\n\nReturns:\n    List of history entries as dictionaries",
          "decorators": []
        },
        {
          "name": "pop_dirty_keys",
          "line": 359,
          "args": [
            "self"
          ],
          "docstring": "Return and clear the list of dirty keys.\n\nThis method is essential for efficient persistence operations,\nallowing systems to save only changed data.\n\nReturns:\n    List of keys that have changed since last call",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 380,
          "args": [
            "self"
          ],
          "docstring": "Return list of all current keys in the context.\n\nProvides safe access to key enumeration for iteration\nand introspection purposes.\n\nReturns:\n    List of all keys currently stored in context",
          "decorators": []
        },
        {
          "name": "register_callback",
          "line": 393,
          "args": [
            "self",
            "event",
            "callback"
          ],
          "docstring": "Register a callback function for specific context events.\n\nEnables extensibility through event-driven programming patterns\nfor monitoring, validation, and custom processing.\n\nArgs:\n    event: Event name ('before_set', 'after_set', 'before_get', 'after_get', 'on_dirty')\n    callback: Function to call when event occurs\n\nRaises:\n    ValueError: If event name is not supported",
          "decorators": []
        },
        {
          "name": "get_metrics",
          "line": 417,
          "args": [
            "self"
          ],
          "docstring": "Retrieve current performance metrics.\n\nProvides access to operational statistics for monitoring,\noptimization, and capacity planning.\n\nReturns:\n    Dictionary of current metrics or None if metrics disabled",
          "decorators": []
        },
        {
          "name": "clear_history",
          "line": 448,
          "args": [
            "self"
          ],
          "docstring": "Clear all history entries and return count of cleared entries.\n\nUseful for memory management in long-running applications\nwith extensive change tracking requirements.\n\nReturns:\n    Number of history entries that were cleared",
          "decorators": []
        },
        {
          "name": "merge_from",
          "line": 469,
          "args": [
            "self",
            "other",
            "conflict_strategy",
            "prefix"
          ],
          "docstring": "Merge data from another Context instance with conflict resolution.\n\nProvides distributed Context integration capabilities with\nconfigurable conflict resolution strategies.\n\nArgs:\n    other: Another Context instance to merge from\n    conflict_strategy: How to handle conflicts ('last_wins', 'first_wins', 'error')\n    prefix: Optional prefix to add to keys from other context\n\nRaises:\n    ValueError: If conflict_strategy is not supported or conflicts found with 'error' strategy",
          "decorators": []
        },
        {
          "name": "_execute_callbacks",
          "line": 533,
          "args": [
            "self",
            "event"
          ],
          "docstring": "Execute all registered callbacks for a specific event.\n\nInternal method for triggering event-driven functionality\nwith proper error handling and logging.\n\nArgs:\n    event: Event name to trigger\n    **kwargs: Arguments to pass to callback functions",
          "decorators": []
        },
        {
          "name": "_estimate_memory_usage",
          "line": 552,
          "args": [
            "self"
          ],
          "docstring": "Estimate memory usage of the context data.\n\nProvides approximate memory consumption for monitoring\nand optimization purposes.\n\nReturns:\n    Estimated memory usage in bytes",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 577,
          "args": [
            "self"
          ],
          "docstring": "Provide detailed string representation for debugging.\n\nReturns comprehensive information about context state\nfor development and troubleshooting purposes.\n\nReturns:\n    Detailed string representation of Context instance",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextHistoryEntry",
          "line": 37,
          "bases": [],
          "docstring": "Structured representation of a Context history entry.\nProvides type safety and validation for history tracking.",
          "methods": [
            {
              "name": "to_dict",
              "line": 50,
              "args": [
                "self"
              ],
              "docstring": "Convert history entry to dictionary for serialization."
            }
          ]
        },
        {
          "name": "ContextMetrics",
          "line": 63,
          "bases": [],
          "docstring": "Metrics and statistics for Context operations.\nEnables performance monitoring and optimization.",
          "methods": [
            {
              "name": "update_operation_count",
              "line": 80,
              "args": [
                "self",
                "operation_type"
              ],
              "docstring": "Update operation counters based on operation type."
            }
          ]
        },
        {
          "name": "Context",
          "line": 90,
          "bases": [],
          "docstring": "Consolidated Context system with all functionality in one place.\n\nThis class combines state management, persistence, memory bus integration,\nversion control, and performance monitoring into a single, cohesive system\nthat follows IAF0 framework patterns and maintains backward compatibility.\n\nFeatures:\n- JSON-serializable state management with type safety\n- Comprehensive change history tracking with attribution\n- Dirty key tracking for efficient persistence operations\n- Integrated memory bus for cross-process communication\n- Built-in performance monitoring and metrics collection\n- Thread-safe operations with proper locking mechanisms\n- Extensible callback system for event notifications",
          "methods": [
            {
              "name": "__init__",
              "line": 108,
              "args": [
                "self",
                "enable_history",
                "enable_metrics"
              ],
              "docstring": "Initialize the Context with integrated components.\n\nArgs:\n    enable_history: Whether to track change history (default: True)\n    enable_metrics: Whether to collect performance metrics (default: True)"
            },
            {
              "name": "get",
              "line": 156,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Retrieve value for a given dotted key with optional default.\n\nThis method provides thread-safe access to stored values with\ncomprehensive logging and metrics collection.\n\nArgs:\n    key: Dotted string key for hierarchical access\n    default: Value to return if key is not found\n\nReturns:\n    Stored value or default if key doesn't exist"
            },
            {
              "name": "set",
              "line": 189,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": "Set a context key to a new value with change tracking.\n\nThis method provides comprehensive state management including\nhistory tracking, dirty key management, and event notifications.\n\nArgs:\n    key: Dotted string key for hierarchical organization\n    value: JSON-serializable value to store\n    who: Optional identifier of who made the change\n\nRaises:\n    ValueError: If value is not JSON-serializable\n    TypeError: If key is not a string"
            },
            {
              "name": "to_dict",
              "line": 271,
              "args": [
                "self"
              ],
              "docstring": "Return a deep copy of the complete context data.\n\nProvides safe access to all stored data without risk of\nexternal modification affecting internal state.\n\nReturns:\n    Deep copy of all context data as dictionary"
            },
            {
              "name": "to_json",
              "line": 286,
              "args": [
                "self"
              ],
              "docstring": "Convert the entire context data to formatted JSON string.\n\nProvides serialized representation suitable for persistence,\nnetwork transmission, or external system integration.\n\nReturns:\n    Formatted JSON string representation of context data\n\nRaises:\n    ValueError: If context contains non-JSON-serializable data"
            },
            {
              "name": "from_json",
              "line": 307,
              "args": [
                "cls",
                "json_string"
              ],
              "docstring": "Create a new Context instance from JSON string.\n\nDeserializes JSON data into a new context instance with\noptional configuration for history and metrics tracking.\n\nArgs:\n    json_string: JSON string containing context data\n    **kwargs: Additional arguments for Context initialization\n\nReturns:\n    New Context instance with deserialized data\n\nRaises:\n    ValueError: If JSON string is invalid or contains invalid data"
            },
            {
              "name": "get_history",
              "line": 344,
              "args": [
                "self"
              ],
              "docstring": "Retrieve complete change history as list of dictionaries.\n\nProvides access to all tracked changes for debugging,\nauditing, and rollback operations.\n\nReturns:\n    List of history entries as dictionaries"
            },
            {
              "name": "pop_dirty_keys",
              "line": 359,
              "args": [
                "self"
              ],
              "docstring": "Return and clear the list of dirty keys.\n\nThis method is essential for efficient persistence operations,\nallowing systems to save only changed data.\n\nReturns:\n    List of keys that have changed since last call"
            },
            {
              "name": "keys",
              "line": 380,
              "args": [
                "self"
              ],
              "docstring": "Return list of all current keys in the context.\n\nProvides safe access to key enumeration for iteration\nand introspection purposes.\n\nReturns:\n    List of all keys currently stored in context"
            },
            {
              "name": "register_callback",
              "line": 393,
              "args": [
                "self",
                "event",
                "callback"
              ],
              "docstring": "Register a callback function for specific context events.\n\nEnables extensibility through event-driven programming patterns\nfor monitoring, validation, and custom processing.\n\nArgs:\n    event: Event name ('before_set', 'after_set', 'before_get', 'after_get', 'on_dirty')\n    callback: Function to call when event occurs\n\nRaises:\n    ValueError: If event name is not supported"
            },
            {
              "name": "get_metrics",
              "line": 417,
              "args": [
                "self"
              ],
              "docstring": "Retrieve current performance metrics.\n\nProvides access to operational statistics for monitoring,\noptimization, and capacity planning.\n\nReturns:\n    Dictionary of current metrics or None if metrics disabled"
            },
            {
              "name": "clear_history",
              "line": 448,
              "args": [
                "self"
              ],
              "docstring": "Clear all history entries and return count of cleared entries.\n\nUseful for memory management in long-running applications\nwith extensive change tracking requirements.\n\nReturns:\n    Number of history entries that were cleared"
            },
            {
              "name": "merge_from",
              "line": 469,
              "args": [
                "self",
                "other",
                "conflict_strategy",
                "prefix"
              ],
              "docstring": "Merge data from another Context instance with conflict resolution.\n\nProvides distributed Context integration capabilities with\nconfigurable conflict resolution strategies.\n\nArgs:\n    other: Another Context instance to merge from\n    conflict_strategy: How to handle conflicts ('last_wins', 'first_wins', 'error')\n    prefix: Optional prefix to add to keys from other context\n\nRaises:\n    ValueError: If conflict_strategy is not supported or conflicts found with 'error' strategy"
            },
            {
              "name": "_execute_callbacks",
              "line": 533,
              "args": [
                "self",
                "event"
              ],
              "docstring": "Execute all registered callbacks for a specific event.\n\nInternal method for triggering event-driven functionality\nwith proper error handling and logging.\n\nArgs:\n    event: Event name to trigger\n    **kwargs: Arguments to pass to callback functions"
            },
            {
              "name": "_estimate_memory_usage",
              "line": 552,
              "args": [
                "self"
              ],
              "docstring": "Estimate memory usage of the context data.\n\nProvides approximate memory consumption for monitoring\nand optimization purposes.\n\nReturns:\n    Estimated memory usage in bytes"
            },
            {
              "name": "__repr__",
              "line": 577,
              "args": [
                "self"
              ],
              "docstring": "Provide detailed string representation for debugging.\n\nReturns comprehensive information about context state\nfor development and troubleshooting purposes.\n\nReturns:\n    Detailed string representation of Context instance"
            }
          ]
        }
      ],
      "lines_of_code": 486,
      "complexity_score": 61,
      "last_modified": "2025-10-04T14:13:32.509333",
      "checksum": "b3b79f296185eb5fbb2d2b70e02704da",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/context/db_adapter.py": {
      "name": "orchestrator/context/db_adapter.py",
      "path": "orchestrator/context/db_adapter.py",
      "component_type": "orchestration",
      "description": "Simple DB Adapter - IAF0 Framework Storage Component",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "_init_db",
        "save_context",
        "load_context",
        "get_versions",
        "clear",
        "__repr__",
        "__init__",
        "save_context",
        "load_context",
        "list_files",
        "delete_file",
        "__repr__",
        "DBAdapter",
        "FileAdapter"
      ],
      "imports": [
        "json",
        "sqlite3",
        "os",
        "pathlib",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 17,
          "args": [
            "self",
            "db_path"
          ],
          "docstring": "Initialize database adapter with SQLite backend.",
          "decorators": []
        },
        {
          "name": "_init_db",
          "line": 23,
          "args": [
            "self"
          ],
          "docstring": "Initialize database schema.",
          "decorators": []
        },
        {
          "name": "save_context",
          "line": 37,
          "args": [
            "self",
            "data",
            "mode"
          ],
          "docstring": "Save context data to database.",
          "decorators": []
        },
        {
          "name": "load_context",
          "line": 52,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Load context data from database.",
          "decorators": []
        },
        {
          "name": "get_versions",
          "line": 75,
          "args": [
            "self"
          ],
          "docstring": "Get list of available versions.",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 85,
          "args": [
            "self"
          ],
          "docstring": "Clear all data from database.",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 91,
          "args": [
            "self"
          ],
          "docstring": "String representation of adapter.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 100,
          "args": [
            "self",
            "storage_dir"
          ],
          "docstring": "Initialize file adapter.",
          "decorators": []
        },
        {
          "name": "save_context",
          "line": 105,
          "args": [
            "self",
            "data",
            "filename"
          ],
          "docstring": "Save context data to file.",
          "decorators": []
        },
        {
          "name": "load_context",
          "line": 111,
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Load context data from file.",
          "decorators": []
        },
        {
          "name": "list_files",
          "line": 120,
          "args": [
            "self"
          ],
          "docstring": "List all JSON files in storage directory.",
          "decorators": []
        },
        {
          "name": "delete_file",
          "line": 124,
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Delete a storage file.",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 130,
          "args": [
            "self"
          ],
          "docstring": "String representation of adapter.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DBAdapter",
          "line": 14,
          "bases": [],
          "docstring": "Simple database adapter for context persistence.",
          "methods": [
            {
              "name": "__init__",
              "line": 17,
              "args": [
                "self",
                "db_path"
              ],
              "docstring": "Initialize database adapter with SQLite backend."
            },
            {
              "name": "_init_db",
              "line": 23,
              "args": [
                "self"
              ],
              "docstring": "Initialize database schema."
            },
            {
              "name": "save_context",
              "line": 37,
              "args": [
                "self",
                "data",
                "mode"
              ],
              "docstring": "Save context data to database."
            },
            {
              "name": "load_context",
              "line": 52,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Load context data from database."
            },
            {
              "name": "get_versions",
              "line": 75,
              "args": [
                "self"
              ],
              "docstring": "Get list of available versions."
            },
            {
              "name": "clear",
              "line": 85,
              "args": [
                "self"
              ],
              "docstring": "Clear all data from database."
            },
            {
              "name": "__repr__",
              "line": 91,
              "args": [
                "self"
              ],
              "docstring": "String representation of adapter."
            }
          ]
        },
        {
          "name": "FileAdapter",
          "line": 97,
          "bases": [],
          "docstring": "Simple file-based storage adapter.",
          "methods": [
            {
              "name": "__init__",
              "line": 100,
              "args": [
                "self",
                "storage_dir"
              ],
              "docstring": "Initialize file adapter."
            },
            {
              "name": "save_context",
              "line": 105,
              "args": [
                "self",
                "data",
                "filename"
              ],
              "docstring": "Save context data to file."
            },
            {
              "name": "load_context",
              "line": 111,
              "args": [
                "self",
                "filename"
              ],
              "docstring": "Load context data from file."
            },
            {
              "name": "list_files",
              "line": 120,
              "args": [
                "self"
              ],
              "docstring": "List all JSON files in storage directory."
            },
            {
              "name": "delete_file",
              "line": 124,
              "args": [
                "self",
                "filename"
              ],
              "docstring": "Delete a storage file."
            },
            {
              "name": "__repr__",
              "line": 130,
              "args": [
                "self"
              ],
              "docstring": "String representation of adapter."
            }
          ]
        }
      ],
      "lines_of_code": 110,
      "complexity_score": 30,
      "last_modified": "2025-10-04T16:23:42.067528",
      "checksum": "7b8bc148f2837d5b2c048108a16bb244",
      "framework_role": "context_system",
      "stability": "stable"
    },
    "orchestrator/context/memory_bus.py": {
      "name": "orchestrator/context/memory_bus.py",
      "path": "orchestrator/context/memory_bus.py",
      "component_type": "orchestration",
      "description": "MemoryBus class for in-memory, thread-safe, JSON-serializable caching.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "set",
        "get",
        "clear",
        "keys",
        "_validate_json_serializable",
        "__repr__",
        "MemoryBus"
      ],
      "imports": [
        "json",
        "threading",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 27,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 37,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 49,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 61,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 67,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_validate_json_serializable",
          "line": 73,
          "args": [
            "self",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 84,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MemoryBus",
          "line": 20,
          "bases": [],
          "docstring": "MemoryBus class for in-memory, thread-safe, JSON-serializable caching.\nDesigned for shared access across hosts via the central server.\nValidates all stored values for JSON compatibility.",
          "methods": [
            {
              "name": "__init__",
              "line": 27,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 37,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 49,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": ""
            },
            {
              "name": "clear",
              "line": 61,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "keys",
              "line": 67,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "_validate_json_serializable",
              "line": 73,
              "args": [
                "self",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "__repr__",
              "line": 84,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 80,
      "complexity_score": 14,
      "last_modified": "2025-10-04T14:13:30.833347",
      "checksum": "b95ac4135cb717ad82c8aab2aaa3a853",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/context/persistence.py": {
      "name": "orchestrator/context/persistence.py",
      "path": "orchestrator/context/persistence.py",
      "component_type": "orchestration",
      "description": "Persistence class for flushing context data to disk or DB with compression.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        "docs/method_index.md",
        "orchestrator/context/db_adapter.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docker-compose.yml",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "flush",
        "check_and_flush",
        "load_from_disk",
        "load_from_db",
        "_flush_to_disk",
        "_flush_to_db",
        "_compute_diff",
        "__repr__",
        "Persistence"
      ],
      "imports": [
        "gzip",
        "json",
        "os",
        "time",
        "typing",
        "orchestrator.context.context",
        "db_adapter",
        "orchestrator.context.version_control"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 39,
          "args": [
            "self",
            "context",
            "db_adapter",
            "flush_interval",
            "flush_dir"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "flush",
          "line": 66,
          "args": [
            "self",
            "mode",
            "compress"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "check_and_flush",
          "line": 102,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "load_from_disk",
          "line": 111,
          "args": [
            "self",
            "file_name"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "load_from_db",
          "line": 135,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_flush_to_disk",
          "line": 153,
          "args": [
            "self",
            "data",
            "compress"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_flush_to_db",
          "line": 173,
          "args": [
            "self",
            "data",
            "mode"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_compute_diff",
          "line": 183,
          "args": [
            "self",
            "current_data"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 198,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Persistence",
          "line": 32,
          "bases": [],
          "docstring": "Persistence class for flushing context data to disk or DB with compression.\nSupports interval, diff-only, and on-demand modes.\nIntegrates with DBAdapter for persistent storage and VersionControl for versioning.",
          "methods": [
            {
              "name": "__init__",
              "line": 39,
              "args": [
                "self",
                "context",
                "db_adapter",
                "flush_interval",
                "flush_dir"
              ],
              "docstring": ""
            },
            {
              "name": "flush",
              "line": 66,
              "args": [
                "self",
                "mode",
                "compress"
              ],
              "docstring": ""
            },
            {
              "name": "check_and_flush",
              "line": 102,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "load_from_disk",
              "line": 111,
              "args": [
                "self",
                "file_name"
              ],
              "docstring": ""
            },
            {
              "name": "load_from_db",
              "line": 135,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": ""
            },
            {
              "name": "_flush_to_disk",
              "line": 153,
              "args": [
                "self",
                "data",
                "compress"
              ],
              "docstring": ""
            },
            {
              "name": "_flush_to_db",
              "line": 173,
              "args": [
                "self",
                "data",
                "mode"
              ],
              "docstring": ""
            },
            {
              "name": "_compute_diff",
              "line": 183,
              "args": [
                "self",
                "current_data"
              ],
              "docstring": ""
            },
            {
              "name": "__repr__",
              "line": 198,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 184,
      "complexity_score": 26,
      "last_modified": "2025-10-04T16:23:42.067528",
      "checksum": "3493873741fa053e4dec44daabf4a91d",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/context/version_control.py": {
      "name": "orchestrator/context/version_control.py",
      "path": "orchestrator/context/version_control.py",
      "component_type": "orchestration",
      "description": "Simplified VersionControl class that provides basic versioning without database dependencies.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "commit",
        "rollback",
        "get_versions",
        "_generate_version_id",
        "__repr__",
        "VersionControl"
      ],
      "imports": [
        "datetime",
        "json",
        "typing"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 16,
          "args": [
            "self",
            "db_adapter"
          ],
          "docstring": "Initialize the VersionControl instance.\n\nArgs:\n    db_adapter: Optional database adapter (unused in stub)",
          "decorators": []
        },
        {
          "name": "commit",
          "line": 26,
          "args": [
            "self",
            "context",
            "version_id",
            "parent_version"
          ],
          "docstring": "Commit the current context state as a new version.\n\nArgs:\n    context: The Context object to version\n    version_id: Optional custom version ID\n    parent_version: Optional parent version ID\n\nReturns:\n    The committed version_id",
          "decorators": []
        },
        {
          "name": "rollback",
          "line": 59,
          "args": [
            "self",
            "version_id",
            "context"
          ],
          "docstring": "Rollback the context to a previous version (stub implementation).\n\nArgs:\n    version_id: The version ID to rollback to\n    context: The Context object to update",
          "decorators": []
        },
        {
          "name": "get_versions",
          "line": 69,
          "args": [
            "self",
            "limit"
          ],
          "docstring": "Get a list of recent versions.\n\nArgs:\n    limit: Number of versions to return\n\nReturns:\n    List of version metadata",
          "decorators": []
        },
        {
          "name": "_generate_version_id",
          "line": 81,
          "args": [
            "self"
          ],
          "docstring": "Generate a unique version ID.",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "String representation for debugging.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "VersionControl",
          "line": 10,
          "bases": [],
          "docstring": "Simplified VersionControl class that provides basic versioning without database dependencies.\nThis is a stub implementation for compatibility with the persistence module.",
          "methods": [
            {
              "name": "__init__",
              "line": 16,
              "args": [
                "self",
                "db_adapter"
              ],
              "docstring": "Initialize the VersionControl instance.\n\nArgs:\n    db_adapter: Optional database adapter (unused in stub)"
            },
            {
              "name": "commit",
              "line": 26,
              "args": [
                "self",
                "context",
                "version_id",
                "parent_version"
              ],
              "docstring": "Commit the current context state as a new version.\n\nArgs:\n    context: The Context object to version\n    version_id: Optional custom version ID\n    parent_version: Optional parent version ID\n\nReturns:\n    The committed version_id"
            },
            {
              "name": "rollback",
              "line": 59,
              "args": [
                "self",
                "version_id",
                "context"
              ],
              "docstring": "Rollback the context to a previous version (stub implementation).\n\nArgs:\n    version_id: The version ID to rollback to\n    context: The Context object to update"
            },
            {
              "name": "get_versions",
              "line": 69,
              "args": [
                "self",
                "limit"
              ],
              "docstring": "Get a list of recent versions.\n\nArgs:\n    limit: Number of versions to return\n\nReturns:\n    List of version metadata"
            },
            {
              "name": "_generate_version_id",
              "line": 81,
              "args": [
                "self"
              ],
              "docstring": "Generate a unique version ID."
            },
            {
              "name": "__repr__",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": "String representation for debugging."
            }
          ]
        }
      ],
      "lines_of_code": 71,
      "complexity_score": 9,
      "last_modified": "2025-10-04T14:13:31.081345",
      "checksum": "af4d743e457097383f139f7cd85dc15d",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/context_client.py": {
      "name": "orchestrator/context_client.py",
      "path": "orchestrator/context_client.py",
      "component_type": "orchestration",
      "description": "Framework0 Context Server Python Client Library",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md"
      ],
      "exports": [
        "get_context_value",
        "set_context_value",
        "example_sync_usage",
        "__init__",
        "_make_request",
        "get",
        "set",
        "list_all",
        "get_history",
        "get_status",
        "ping",
        "dump_context",
        "list_dumps",
        "download_dump",
        "__init__",
        "_setup_socketio_handlers",
        "on",
        "ContextClientError",
        "ConnectionError",
        "ServerError",
        "TimeoutError",
        "ContextClient",
        "AsyncContextClient"
      ],
      "imports": [
        "asyncio",
        "logging",
        "datetime",
        "typing",
        "urllib.parse",
        "requests",
        "socketio",
        "argparse",
        "aiohttp",
        "aiohttp",
        "aiohttp",
        "aiohttp",
        "aiohttp"
      ],
      "functions": [
        {
          "name": "get_context_value",
          "line": 791,
          "args": [
            "key",
            "host",
            "port"
          ],
          "docstring": "Quick function to get single context value.\n\nArgs:\n    key: Context key to retrieve\n    host: Server host (default: localhost)\n    port: Server port (default: 8080)\n    \nReturns:\n    Value for the key or None if not found",
          "decorators": []
        },
        {
          "name": "set_context_value",
          "line": 807,
          "args": [
            "key",
            "value",
            "host",
            "port",
            "who"
          ],
          "docstring": "Quick function to set single context value.\n\nArgs:\n    key: Context key to set\n    value: Value to assign to key\n    host: Server host (default: localhost)\n    port: Server port (default: 8080)\n    who: Attribution for change (default: quick_client)\n    \nReturns:\n    True if operation was successful",
          "decorators": []
        },
        {
          "name": "example_sync_usage",
          "line": 826,
          "args": [],
          "docstring": "Example demonstrating synchronous client usage.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 56,
          "args": [
            "self",
            "host",
            "port",
            "timeout",
            "who"
          ],
          "docstring": "Initialize synchronous context client.\n\nArgs:\n    host: Context server hostname or IP address\n    port: Context server port number\n    timeout: Default timeout for HTTP requests in seconds\n    who: Attribution identifier for client operations",
          "decorators": []
        },
        {
          "name": "_make_request",
          "line": 93,
          "args": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "docstring": "Make HTTP request to context server with error handling.\n\nArgs:\n    method: HTTP method (GET, POST, PUT, DELETE)\n    endpoint: API endpoint path (e.g., '/ctx', '/ctx/all')\n    data: Optional request body data for POST/PUT requests\n    \nReturns:\n    Parsed JSON response from server\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response\n    TimeoutError: When request exceeds timeout",
          "decorators": []
        },
        {
          "name": "get",
          "line": 167,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Get value for specified key from context.\n\nArgs:\n    key: Context key to retrieve value for\n    \nReturns:\n    Value associated with the key, or None if key not found\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "set",
          "line": 188,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Set key to specified value in context.\n\nArgs:\n    key: Context key to set value for\n    value: Value to assign to the key\n    \nReturns:\n    True if operation was successful\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "list_all",
          "line": 217,
          "args": [
            "self"
          ],
          "docstring": "Get all context keys and values from server.\n\nReturns:\n    Dictionary containing all context data\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "get_history",
          "line": 235,
          "args": [
            "self",
            "key",
            "who"
          ],
          "docstring": "Get context change history with optional filtering.\n\nArgs:\n    key: Optional key filter for history entries\n    who: Optional attribution filter for history entries\n    \nReturns:\n    List of history entries matching the filters\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "get_status",
          "line": 269,
          "args": [
            "self"
          ],
          "docstring": "Get server status and connection information.\n\nReturns:\n    Dictionary containing server status and statistics\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response",
          "decorators": []
        },
        {
          "name": "ping",
          "line": 297,
          "args": [
            "self"
          ],
          "docstring": "Test connection to context server.\n\nReturns:\n    True if server is reachable and responding",
          "decorators": []
        },
        {
          "name": "dump_context",
          "line": 310,
          "args": [
            "self",
            "format_type",
            "filename",
            "include_history"
          ],
          "docstring": "Dump complete context state to file with specified format.\n\nArgs:\n    format_type: Output format - 'json', 'pretty', 'csv', or 'txt'\n    filename: Optional custom filename (auto-generated if not provided)\n    include_history: Whether to include change history in dump\n    \nReturns:\n    Dictionary with dump operation details and file information\n    \nRaises:\n    ValueError: If format_type is invalid\n    ServerError: If dump operation fails on server",
          "decorators": []
        },
        {
          "name": "list_dumps",
          "line": 354,
          "args": [
            "self"
          ],
          "docstring": "List all available context dump files and their metadata.\n\nReturns:\n    Dictionary with dump directory info and list of available files\n    \nRaises:\n    ServerError: If listing dumps fails",
          "decorators": []
        },
        {
          "name": "download_dump",
          "line": 375,
          "args": [
            "self",
            "filename"
          ],
          "docstring": "Download a specific context dump file content.\n\nArgs:\n    filename: Name of dump file to download\n    \nReturns:\n    String content of the dump file\n    \nRaises:\n    FileNotFoundError: If dump file doesn't exist\n    ServerError: If download fails",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 415,
          "args": [
            "self",
            "host",
            "port",
            "who"
          ],
          "docstring": "Initialize asynchronous context client.\n\nArgs:\n    host: Context server hostname or IP address\n    port: Context server port number  \n    who: Attribution identifier for client operations",
          "decorators": []
        },
        {
          "name": "_setup_socketio_handlers",
          "line": 453,
          "args": [
            "self"
          ],
          "docstring": "Configure Socket.IO event handlers for connection lifecycle.",
          "decorators": []
        },
        {
          "name": "on",
          "line": 522,
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "docstring": "Register event handler for specific event type.\n\nArgs:\n    event_type: Type of event to handle (connect, disconnect, context_updated, etc.)\n    handler: Async function to call when event occurs",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextClientError",
          "line": 27,
          "bases": [
            "Exception"
          ],
          "docstring": "Base exception for context client errors.",
          "methods": []
        },
        {
          "name": "ConnectionError",
          "line": 32,
          "bases": [
            "ContextClientError"
          ],
          "docstring": "Raised when connection to context server fails.",
          "methods": []
        },
        {
          "name": "ServerError",
          "line": 37,
          "bases": [
            "ContextClientError"
          ],
          "docstring": "Raised when context server returns an error response.",
          "methods": []
        },
        {
          "name": "TimeoutError",
          "line": 42,
          "bases": [
            "ContextClientError"
          ],
          "docstring": "Raised when operations exceed specified timeout.",
          "methods": []
        },
        {
          "name": "ContextClient",
          "line": 47,
          "bases": [],
          "docstring": "Synchronous context client for HTTP-based operations.\n\nThis client provides blocking operations for getting/setting context values\nand retrieving server information. Suitable for scripts and applications\nthat don't require real-time updates.",
          "methods": [
            {
              "name": "__init__",
              "line": 56,
              "args": [
                "self",
                "host",
                "port",
                "timeout",
                "who"
              ],
              "docstring": "Initialize synchronous context client.\n\nArgs:\n    host: Context server hostname or IP address\n    port: Context server port number\n    timeout: Default timeout for HTTP requests in seconds\n    who: Attribution identifier for client operations"
            },
            {
              "name": "_make_request",
              "line": 93,
              "args": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "docstring": "Make HTTP request to context server with error handling.\n\nArgs:\n    method: HTTP method (GET, POST, PUT, DELETE)\n    endpoint: API endpoint path (e.g., '/ctx', '/ctx/all')\n    data: Optional request body data for POST/PUT requests\n    \nReturns:\n    Parsed JSON response from server\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response\n    TimeoutError: When request exceeds timeout"
            },
            {
              "name": "get",
              "line": 167,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Get value for specified key from context.\n\nArgs:\n    key: Context key to retrieve value for\n    \nReturns:\n    Value associated with the key, or None if key not found\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "set",
              "line": 188,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Set key to specified value in context.\n\nArgs:\n    key: Context key to set value for\n    value: Value to assign to the key\n    \nReturns:\n    True if operation was successful\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "list_all",
              "line": 217,
              "args": [
                "self"
              ],
              "docstring": "Get all context keys and values from server.\n\nReturns:\n    Dictionary containing all context data\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "get_history",
              "line": 235,
              "args": [
                "self",
                "key",
                "who"
              ],
              "docstring": "Get context change history with optional filtering.\n\nArgs:\n    key: Optional key filter for history entries\n    who: Optional attribution filter for history entries\n    \nReturns:\n    List of history entries matching the filters\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "get_status",
              "line": 269,
              "args": [
                "self"
              ],
              "docstring": "Get server status and connection information.\n\nReturns:\n    Dictionary containing server status and statistics\n    \nRaises:\n    ConnectionError: When unable to connect to server\n    ServerError: When server returns error response"
            },
            {
              "name": "ping",
              "line": 297,
              "args": [
                "self"
              ],
              "docstring": "Test connection to context server.\n\nReturns:\n    True if server is reachable and responding"
            },
            {
              "name": "dump_context",
              "line": 310,
              "args": [
                "self",
                "format_type",
                "filename",
                "include_history"
              ],
              "docstring": "Dump complete context state to file with specified format.\n\nArgs:\n    format_type: Output format - 'json', 'pretty', 'csv', or 'txt'\n    filename: Optional custom filename (auto-generated if not provided)\n    include_history: Whether to include change history in dump\n    \nReturns:\n    Dictionary with dump operation details and file information\n    \nRaises:\n    ValueError: If format_type is invalid\n    ServerError: If dump operation fails on server"
            },
            {
              "name": "list_dumps",
              "line": 354,
              "args": [
                "self"
              ],
              "docstring": "List all available context dump files and their metadata.\n\nReturns:\n    Dictionary with dump directory info and list of available files\n    \nRaises:\n    ServerError: If listing dumps fails"
            },
            {
              "name": "download_dump",
              "line": 375,
              "args": [
                "self",
                "filename"
              ],
              "docstring": "Download a specific context dump file content.\n\nArgs:\n    filename: Name of dump file to download\n    \nReturns:\n    String content of the dump file\n    \nRaises:\n    FileNotFoundError: If dump file doesn't exist\n    ServerError: If download fails"
            }
          ]
        },
        {
          "name": "AsyncContextClient",
          "line": 406,
          "bases": [],
          "docstring": "Asynchronous context client with WebSocket support for real-time updates.\n\nThis client provides non-blocking operations and can maintain persistent\nWebSocket connections for receiving real-time context change notifications.\nSuitable for applications requiring live updates and event-driven behavior.",
          "methods": [
            {
              "name": "__init__",
              "line": 415,
              "args": [
                "self",
                "host",
                "port",
                "who"
              ],
              "docstring": "Initialize asynchronous context client.\n\nArgs:\n    host: Context server hostname or IP address\n    port: Context server port number  \n    who: Attribution identifier for client operations"
            },
            {
              "name": "_setup_socketio_handlers",
              "line": 453,
              "args": [
                "self"
              ],
              "docstring": "Configure Socket.IO event handlers for connection lifecycle."
            },
            {
              "name": "on",
              "line": 522,
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "docstring": "Register event handler for specific event type.\n\nArgs:\n    event_type: Type of event to handle (connect, disconnect, context_updated, etc.)\n    handler: Async function to call when event occurs"
            }
          ]
        }
      ],
      "lines_of_code": 731,
      "complexity_score": 72,
      "last_modified": "2025-10-04T23:19:13.986420",
      "checksum": "31f93a4d74815c2ad4f49fd53d352441",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/dependency_graph.py": {
      "name": "orchestrator/dependency_graph.py",
      "path": "orchestrator/dependency_graph.py",
      "component_type": "orchestration",
      "description": "A class to represent a directed acyclic graph (DAG) of tasks and their dependencies.",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "add_task",
        "get_task_order",
        "get_task_dependencies",
        "get_task_dependents",
        "remove_task",
        "visualize",
        "DependencyGraph"
      ],
      "imports": [
        "networkx",
        "typing",
        "matplotlib.pyplot"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 15,
          "args": [
            "self"
          ],
          "docstring": "Initializes an empty directed graph.",
          "decorators": []
        },
        {
          "name": "add_task",
          "line": 21,
          "args": [
            "self",
            "task_name",
            "dependencies"
          ],
          "docstring": "Adds a task to the graph with its dependencies.\n\nArgs:\n    task_name (str): The name of the task.\n    dependencies (List[str], optional): A list of task names that this task depends on. Defaults to [].",
          "decorators": []
        },
        {
          "name": "get_task_order",
          "line": 36,
          "args": [
            "self"
          ],
          "docstring": "Returns a list of tasks in the order they should be executed,\nrespecting their dependencies.\n\nReturns:\n    List[str]: A list of task names in execution order.",
          "decorators": []
        },
        {
          "name": "get_task_dependencies",
          "line": 47,
          "args": [
            "self",
            "task_name"
          ],
          "docstring": "Returns a list of tasks that the given task depends on.\n\nArgs:\n    task_name (str): The name of the task.\n\nReturns:\n    List[str]: A list of task names that the given task depends on.",
          "decorators": []
        },
        {
          "name": "get_task_dependents",
          "line": 60,
          "args": [
            "self",
            "task_name"
          ],
          "docstring": "Returns a list of tasks that depend on the given task.\n\nArgs:\n    task_name (str): The name of the task.\n\nReturns:\n    List[str]: A list of task names that depend on the given task.",
          "decorators": []
        },
        {
          "name": "remove_task",
          "line": 73,
          "args": [
            "self",
            "task_name"
          ],
          "docstring": "Removes a task and all its dependencies from the graph.\n\nArgs:\n    task_name (str): The name of the task to remove.",
          "decorators": []
        },
        {
          "name": "visualize",
          "line": 83,
          "args": [
            "self"
          ],
          "docstring": "Visualizes the dependency graph using matplotlib.\n\nNote:\n    Requires matplotlib to be installed.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DependencyGraph",
          "line": 7,
          "bases": [],
          "docstring": "A class to represent a directed acyclic graph (DAG) of tasks and their dependencies.\n\nAttributes:\n    graph (networkx.DiGraph): A directed graph to store tasks and their dependencies.",
          "methods": [
            {
              "name": "__init__",
              "line": 15,
              "args": [
                "self"
              ],
              "docstring": "Initializes an empty directed graph."
            },
            {
              "name": "add_task",
              "line": 21,
              "args": [
                "self",
                "task_name",
                "dependencies"
              ],
              "docstring": "Adds a task to the graph with its dependencies.\n\nArgs:\n    task_name (str): The name of the task.\n    dependencies (List[str], optional): A list of task names that this task depends on. Defaults to []."
            },
            {
              "name": "get_task_order",
              "line": 36,
              "args": [
                "self"
              ],
              "docstring": "Returns a list of tasks in the order they should be executed,\nrespecting their dependencies.\n\nReturns:\n    List[str]: A list of task names in execution order."
            },
            {
              "name": "get_task_dependencies",
              "line": 47,
              "args": [
                "self",
                "task_name"
              ],
              "docstring": "Returns a list of tasks that the given task depends on.\n\nArgs:\n    task_name (str): The name of the task.\n\nReturns:\n    List[str]: A list of task names that the given task depends on."
            },
            {
              "name": "get_task_dependents",
              "line": 60,
              "args": [
                "self",
                "task_name"
              ],
              "docstring": "Returns a list of tasks that depend on the given task.\n\nArgs:\n    task_name (str): The name of the task.\n\nReturns:\n    List[str]: A list of task names that depend on the given task."
            },
            {
              "name": "remove_task",
              "line": 73,
              "args": [
                "self",
                "task_name"
              ],
              "docstring": "Removes a task and all its dependencies from the graph.\n\nArgs:\n    task_name (str): The name of the task to remove."
            },
            {
              "name": "visualize",
              "line": 83,
              "args": [
                "self"
              ],
              "docstring": "Visualizes the dependency graph using matplotlib.\n\nNote:\n    Requires matplotlib to be installed."
            }
          ]
        }
      ],
      "lines_of_code": 80,
      "complexity_score": 11,
      "last_modified": "2025-10-04T14:13:31.285343",
      "checksum": "3b0ea18f8ce14ffbc7cdaafd9fa4d0a1",
      "framework_role": "dependency_management",
      "stability": "stable"
    },
    "orchestrator/enhanced_context_server.py": {
      "name": "orchestrator/enhanced_context_server.py",
      "path": "orchestrator/enhanced_context_server.py",
      "component_type": "orchestration",
      "description": "Enhanced Context Server for Framework0 - Interactive Multi-Client Support",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "get",
        "set",
        "to_dict",
        "get_history",
        "pop_dirty_keys",
        "__init__",
        "_setup_routes",
        "_setup_websocket_handlers",
        "_write_json_dump",
        "_write_pretty_dump",
        "_write_csv_dump",
        "_write_text_dump",
        "run",
        "get_logger",
        "index",
        "get_context",
        "set_context",
        "get_all_context",
        "get_history",
        "dump_context",
        "list_dumps",
        "download_dump",
        "handle_connect",
        "handle_disconnect",
        "handle_client_register",
        "handle_context_set",
        "__init__",
        "get",
        "set",
        "to_dict",
        "Context",
        "EnhancedContextServer",
        "MemoryBus"
      ],
      "imports": [
        "csv",
        "json",
        "logging",
        "os",
        "datetime",
        "pathlib",
        "typing",
        "flask",
        "flask_socketio",
        "orchestrator.memory_bus",
        "src.core.logger",
        "argparse"
      ],
      "functions": [
        {
          "name": "main",
          "line": 988,
          "args": [],
          "docstring": "Main entry point for running the enhanced context server.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 72,
          "args": [
            "self"
          ],
          "docstring": "Initialize context with empty data and history tracking.",
          "decorators": []
        },
        {
          "name": "get",
          "line": 78,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Retrieve value for a given key from context.\n\nArgs:\n    key: Context key to retrieve value for\n    \nReturns:\n    Value associated with key, or None if key not found",
          "decorators": []
        },
        {
          "name": "set",
          "line": 90,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "Set value for a key in context with change tracking.\n\nArgs:\n    key: Context key to set value for\n    value: New value to store for the key\n    who: Attribution for who made the change",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 114,
          "args": [
            "self"
          ],
          "docstring": "Get current context state as dictionary.\n\nReturns:\n    Complete current context state as dictionary copy",
          "decorators": []
        },
        {
          "name": "get_history",
          "line": 123,
          "args": [
            "self"
          ],
          "docstring": "Get complete change history for context.\n\nReturns:\n    List of all change records with timestamps and attribution",
          "decorators": []
        },
        {
          "name": "pop_dirty_keys",
          "line": 132,
          "args": [
            "self"
          ],
          "docstring": "Get and clear list of keys that have been modified.\n\nReturns:\n    List of keys that were modified since last call to this method",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 156,
          "args": [
            "self",
            "host",
            "port",
            "debug"
          ],
          "docstring": "Initialize the enhanced context server with multi-protocol support.\n\nArgs:\n    host: Server bind address for network accessibility\n    port: Server port for client connections\n    debug: Enable debug mode for verbose logging and error details",
          "decorators": []
        },
        {
          "name": "_setup_routes",
          "line": 198,
          "args": [
            "self"
          ],
          "docstring": "Configure REST API routes for HTTP-based client access.",
          "decorators": []
        },
        {
          "name": "_setup_websocket_handlers",
          "line": 780,
          "args": [
            "self"
          ],
          "docstring": "Configure WebSocket event handlers for real-time client communication.",
          "decorators": []
        },
        {
          "name": "_write_json_dump",
          "line": 874,
          "args": [
            "self",
            "dump_path",
            "dump_info"
          ],
          "docstring": "Write context dump in JSON format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data",
          "decorators": []
        },
        {
          "name": "_write_pretty_dump",
          "line": 885,
          "args": [
            "self",
            "dump_path",
            "dump_info"
          ],
          "docstring": "Write context dump in human-readable pretty format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data",
          "decorators": []
        },
        {
          "name": "_write_csv_dump",
          "line": 922,
          "args": [
            "self",
            "dump_path",
            "dump_info"
          ],
          "docstring": "Write context dump in CSV format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data",
          "decorators": []
        },
        {
          "name": "_write_text_dump",
          "line": 949,
          "args": [
            "self",
            "dump_path",
            "dump_info"
          ],
          "docstring": "Write context dump in plain text format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data",
          "decorators": []
        },
        {
          "name": "run",
          "line": 966,
          "args": [
            "self"
          ],
          "docstring": "Start the enhanced context server with full logging and error handling.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 45,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "index",
          "line": 202,
          "args": [],
          "docstring": "Serve interactive web dashboard for server monitoring and debugging.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "get_context",
          "line": 493,
          "args": [],
          "docstring": "Retrieve context value by key with optional versioning support.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "set_context",
          "line": 516,
          "args": [],
          "docstring": "Set context value with change notification to connected clients.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "get_all_context",
          "line": 557,
          "args": [],
          "docstring": "Retrieve entire context state for dashboard and debugging purposes.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "get_history",
          "line": 578,
          "args": [],
          "docstring": "Retrieve context change history for auditing and debugging.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "dump_context",
          "line": 610,
          "args": [],
          "docstring": "Dump complete context state to file triggered by client request.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "list_dumps",
          "line": 710,
          "args": [],
          "docstring": "List all available context dump files and their metadata.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "download_dump",
          "line": 744,
          "args": [
            "filename"
          ],
          "docstring": "Download a specific context dump file.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "handle_connect",
          "line": 784,
          "args": [],
          "docstring": "Handle new client connection and initialize tracking.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "handle_disconnect",
          "line": 802,
          "args": [],
          "docstring": "Handle client disconnection and cleanup tracking.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "handle_client_register",
          "line": 814,
          "args": [
            "data"
          ],
          "docstring": "Register client type and name for monitoring and debugging.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "handle_context_set",
          "line": 837,
          "args": [
            "data"
          ],
          "docstring": "Handle context value updates from WebSocket clients.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "__init__",
          "line": 29,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 32,
          "args": [
            "self",
            "key"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 35,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 38,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Context",
          "line": 64,
          "bases": [],
          "docstring": "Simple context implementation for storing and tracking data changes.\n\nThis provides basic context management with history tracking and change\nnotifications for the enhanced context server functionality.",
          "methods": [
            {
              "name": "__init__",
              "line": 72,
              "args": [
                "self"
              ],
              "docstring": "Initialize context with empty data and history tracking."
            },
            {
              "name": "get",
              "line": 78,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Retrieve value for a given key from context.\n\nArgs:\n    key: Context key to retrieve value for\n    \nReturns:\n    Value associated with key, or None if key not found"
            },
            {
              "name": "set",
              "line": 90,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": "Set value for a key in context with change tracking.\n\nArgs:\n    key: Context key to set value for\n    value: New value to store for the key\n    who: Attribution for who made the change"
            },
            {
              "name": "to_dict",
              "line": 114,
              "args": [
                "self"
              ],
              "docstring": "Get current context state as dictionary.\n\nReturns:\n    Complete current context state as dictionary copy"
            },
            {
              "name": "get_history",
              "line": 123,
              "args": [
                "self"
              ],
              "docstring": "Get complete change history for context.\n\nReturns:\n    List of all change records with timestamps and attribution"
            },
            {
              "name": "pop_dirty_keys",
              "line": 132,
              "args": [
                "self"
              ],
              "docstring": "Get and clear list of keys that have been modified.\n\nReturns:\n    List of keys that were modified since last call to this method"
            }
          ]
        },
        {
          "name": "EnhancedContextServer",
          "line": 144,
          "bases": [],
          "docstring": "Enhanced context server supporting multiple client types and real-time updates.\n\nFeatures:\n- REST API for HTTP-based access (shell scripts via curl)\n- WebSocket support for real-time updates (Dash apps, Python clients)\n- Interactive web dashboard for debugging and monitoring\n- Cross-platform client support with simple protocols\n- Event broadcasting for state change notifications",
          "methods": [
            {
              "name": "__init__",
              "line": 156,
              "args": [
                "self",
                "host",
                "port",
                "debug"
              ],
              "docstring": "Initialize the enhanced context server with multi-protocol support.\n\nArgs:\n    host: Server bind address for network accessibility\n    port: Server port for client connections\n    debug: Enable debug mode for verbose logging and error details"
            },
            {
              "name": "_setup_routes",
              "line": 198,
              "args": [
                "self"
              ],
              "docstring": "Configure REST API routes for HTTP-based client access."
            },
            {
              "name": "_setup_websocket_handlers",
              "line": 780,
              "args": [
                "self"
              ],
              "docstring": "Configure WebSocket event handlers for real-time client communication."
            },
            {
              "name": "_write_json_dump",
              "line": 874,
              "args": [
                "self",
                "dump_path",
                "dump_info"
              ],
              "docstring": "Write context dump in JSON format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data"
            },
            {
              "name": "_write_pretty_dump",
              "line": 885,
              "args": [
                "self",
                "dump_path",
                "dump_info"
              ],
              "docstring": "Write context dump in human-readable pretty format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data"
            },
            {
              "name": "_write_csv_dump",
              "line": 922,
              "args": [
                "self",
                "dump_path",
                "dump_info"
              ],
              "docstring": "Write context dump in CSV format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data"
            },
            {
              "name": "_write_text_dump",
              "line": 949,
              "args": [
                "self",
                "dump_path",
                "dump_info"
              ],
              "docstring": "Write context dump in plain text format.\n\nArgs:\n    dump_path: Path where to write the dump file\n    dump_info: Complete dump information including context data"
            },
            {
              "name": "run",
              "line": 966,
              "args": [
                "self"
              ],
              "docstring": "Start the enhanced context server with full logging and error handling."
            }
          ]
        },
        {
          "name": "MemoryBus",
          "line": 28,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 29,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 32,
              "args": [
                "self",
                "key"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 35,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": ""
            },
            {
              "name": "to_dict",
              "line": 38,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 849,
      "complexity_score": 84,
      "last_modified": "2025-10-04T23:19:13.986420",
      "checksum": "d3eaf0365b24279dd5247a47173d9fa2",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/enhanced_memory_bus.py": {
      "name": "orchestrator/enhanced_memory_bus.py",
      "path": "orchestrator/enhanced_memory_bus.py",
      "component_type": "orchestration",
      "description": "Enhanced Memory Bus System with Advanced Features",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py"
      ],
      "exports": [
        "create_json_memory_bus",
        "create_sqlite_memory_bus",
        "create_memory_only_bus",
        "update_operation_stats",
        "to_dict",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "__init__",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "__init__",
        "_init_database",
        "save",
        "load",
        "delete",
        "exists",
        "backup",
        "restore",
        "is_expired",
        "to_dict",
        "from_dict",
        "__init__",
        "_load_from_persistence",
        "_start_background_tasks",
        "_auto_persist_worker",
        "_message_cleanup_worker",
        "get",
        "set",
        "delete",
        "keys",
        "clear",
        "persist",
        "backup",
        "restore",
        "subscribe",
        "unsubscribe",
        "publish",
        "_publish_event",
        "get_metrics",
        "health_check",
        "shutdown",
        "__enter__",
        "__exit__",
        "MemoryBusMetrics",
        "PersistenceBackend",
        "JSONPersistenceBackend",
        "SQLitePersistenceBackend",
        "MessageEvent",
        "EnhancedMemoryBus"
      ],
      "imports": [
        "os",
        "json",
        "sqlite3",
        "pickle",
        "asyncio",
        "threading",
        "time",
        "weakref",
        "hashlib",
        "typing",
        "dataclasses",
        "datetime",
        "pathlib",
        "abc",
        "contextlib",
        "collections",
        "uuid",
        "src.core.logger",
        "orchestrator.context.context",
        "orchestrator.context.memory_bus",
        "sys",
        "shutil",
        "shutil",
        "shutil",
        "shutil"
      ],
      "functions": [
        {
          "name": "create_json_memory_bus",
          "line": 1066,
          "args": [
            "file_path"
          ],
          "docstring": "Create memory bus with JSON persistence backend.",
          "decorators": []
        },
        {
          "name": "create_sqlite_memory_bus",
          "line": 1075,
          "args": [
            "db_path"
          ],
          "docstring": "Create memory bus with SQLite persistence backend.",
          "decorators": []
        },
        {
          "name": "create_memory_only_bus",
          "line": 1084,
          "args": [],
          "docstring": "Create memory bus without persistence (for testing).",
          "decorators": []
        },
        {
          "name": "update_operation_stats",
          "line": 80,
          "args": [
            "self",
            "operation_type",
            "response_time"
          ],
          "docstring": "Update operation statistics with new data point.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 103,
          "args": [
            "self"
          ],
          "docstring": "Convert metrics to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 134,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to persistent storage.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "load",
          "line": 139,
          "args": [
            "self"
          ],
          "docstring": "Load data from persistent storage.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "delete",
          "line": 144,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete specific key from storage.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "exists",
          "line": 149,
          "args": [
            "self"
          ],
          "docstring": "Check if storage exists.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "backup",
          "line": 154,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Create backup of storage.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "restore",
          "line": 159,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Restore from backup.",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "__init__",
          "line": 172,
          "args": [
            "self",
            "file_path",
            "enable_compression"
          ],
          "docstring": "Initialize JSON persistence backend.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 183,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to JSON file.",
          "decorators": []
        },
        {
          "name": "load",
          "line": 206,
          "args": [
            "self"
          ],
          "docstring": "Load data from JSON file.",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 222,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete specific key from JSON storage.",
          "decorators": []
        },
        {
          "name": "exists",
          "line": 235,
          "args": [
            "self"
          ],
          "docstring": "Check if JSON file exists.",
          "decorators": []
        },
        {
          "name": "backup",
          "line": 239,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Create backup of JSON file.",
          "decorators": []
        },
        {
          "name": "restore",
          "line": 256,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Restore from JSON backup.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 280,
          "args": [
            "self",
            "db_path",
            "table_name"
          ],
          "docstring": "Initialize SQLite persistence backend.",
          "decorators": []
        },
        {
          "name": "_init_database",
          "line": 294,
          "args": [
            "self"
          ],
          "docstring": "Initialize SQLite database and create table.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 317,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to SQLite database.",
          "decorators": []
        },
        {
          "name": "load",
          "line": 342,
          "args": [
            "self"
          ],
          "docstring": "Load data from SQLite database.",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 363,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete specific key from SQLite storage.",
          "decorators": []
        },
        {
          "name": "exists",
          "line": 377,
          "args": [
            "self"
          ],
          "docstring": "Check if SQLite database exists.",
          "decorators": []
        },
        {
          "name": "backup",
          "line": 381,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Create backup of SQLite database.",
          "decorators": []
        },
        {
          "name": "restore",
          "line": 396,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Restore from SQLite backup.",
          "decorators": []
        },
        {
          "name": "is_expired",
          "line": 430,
          "args": [
            "self"
          ],
          "docstring": "Check if event has expired.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 434,
          "args": [
            "self"
          ],
          "docstring": "Convert event to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 448,
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create event from dictionary.",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "__init__",
          "line": 488,
          "args": [
            "self",
            "persistence_backend",
            "context",
            "enable_messaging",
            "enable_persistence",
            "auto_persist_interval"
          ],
          "docstring": "Initialize enhanced memory bus with advanced features.\n\nArgs:\n    persistence_backend: Backend for persistent storage\n    context: Context instance for integration (creates if None)\n    enable_messaging: Whether to enable messaging capabilities\n    enable_persistence: Whether to enable persistence\n    auto_persist_interval: Auto-persistence interval in seconds",
          "decorators": []
        },
        {
          "name": "_load_from_persistence",
          "line": 546,
          "args": [
            "self"
          ],
          "docstring": "Load data from persistence backend.",
          "decorators": []
        },
        {
          "name": "_start_background_tasks",
          "line": 561,
          "args": [
            "self"
          ],
          "docstring": "Start background tasks for auto-persistence and cleanup.",
          "decorators": []
        },
        {
          "name": "_auto_persist_worker",
          "line": 581,
          "args": [
            "self"
          ],
          "docstring": "Background worker for automatic persistence.",
          "decorators": []
        },
        {
          "name": "_message_cleanup_worker",
          "line": 598,
          "args": [
            "self"
          ],
          "docstring": "Background worker for cleaning up expired messages.",
          "decorators": []
        },
        {
          "name": "get",
          "line": 613,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get value from memory bus with performance tracking.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key not found\n    \nReturns:\n    Retrieved value or default",
          "decorators": []
        },
        {
          "name": "set",
          "line": 662,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "Set value in memory bus with persistence and Context integration.\n\nArgs:\n    key: Key to set\n    value: Value to store\n    who: Who is setting this value (for Context tracking)\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 714,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete key from memory bus and persistence.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "keys",
          "line": 767,
          "args": [
            "self"
          ],
          "docstring": "Get list of all keys in memory bus.",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 772,
          "args": [
            "self"
          ],
          "docstring": "Clear all data from memory bus.",
          "decorators": []
        },
        {
          "name": "persist",
          "line": 786,
          "args": [
            "self"
          ],
          "docstring": "Manually trigger persistence of current data.\n\nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "backup",
          "line": 812,
          "args": [
            "self",
            "backup_name"
          ],
          "docstring": "Create backup of current data.\n\nArgs:\n    backup_name: Name for backup (uses timestamp if None)\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "restore",
          "line": 846,
          "args": [
            "self",
            "backup_path"
          ],
          "docstring": "Restore data from backup.\n\nArgs:\n    backup_path: Path to backup file\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "subscribe",
          "line": 886,
          "args": [
            "self",
            "event_type",
            "callback"
          ],
          "docstring": "Subscribe to events of specific type.\n\nArgs:\n    event_type: Type of events to subscribe to\n    callback: Function to call when event occurs\n    \nReturns:\n    Subscription ID for unsubscribing",
          "decorators": []
        },
        {
          "name": "unsubscribe",
          "line": 909,
          "args": [
            "self",
            "event_type",
            "callback"
          ],
          "docstring": "Unsubscribe from events.\n\nArgs:\n    event_type: Type of events to unsubscribe from\n    callback: Callback function to remove\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "publish",
          "line": 935,
          "args": [
            "self",
            "event"
          ],
          "docstring": "Publish event to subscribers.\n\nArgs:\n    event: Event to publish\n    \nReturns:\n    True if successful, False otherwise",
          "decorators": []
        },
        {
          "name": "_publish_event",
          "line": 950,
          "args": [
            "self",
            "event"
          ],
          "docstring": "Internal method to publish events.",
          "decorators": []
        },
        {
          "name": "get_metrics",
          "line": 975,
          "args": [
            "self"
          ],
          "docstring": "Get current metrics.",
          "decorators": []
        },
        {
          "name": "health_check",
          "line": 983,
          "args": [
            "self"
          ],
          "docstring": "Perform comprehensive health check.\n\nReturns:\n    Health status information",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 1037,
          "args": [
            "self"
          ],
          "docstring": "Gracefully shutdown memory bus.",
          "decorators": []
        },
        {
          "name": "__enter__",
          "line": 1056,
          "args": [
            "self"
          ],
          "docstring": "Context manager entry.",
          "decorators": []
        },
        {
          "name": "__exit__",
          "line": 1060,
          "args": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "docstring": "Context manager exit with cleanup.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MemoryBusMetrics",
          "line": 46,
          "bases": [],
          "docstring": "Comprehensive metrics tracking for memory bus operations.\n\nProvides detailed performance monitoring and operational statistics\nfor optimization and troubleshooting purposes.",
          "methods": [
            {
              "name": "update_operation_stats",
              "line": 80,
              "args": [
                "self",
                "operation_type",
                "response_time"
              ],
              "docstring": "Update operation statistics with new data point."
            },
            {
              "name": "to_dict",
              "line": 103,
              "args": [
                "self"
              ],
              "docstring": "Convert metrics to dictionary for serialization."
            }
          ]
        },
        {
          "name": "PersistenceBackend",
          "line": 125,
          "bases": [
            "ABC"
          ],
          "docstring": "Abstract base class for persistence backends.\n\nDefines the interface that all persistence backends must implement\nfor storing and retrieving memory bus data.",
          "methods": [
            {
              "name": "save",
              "line": 134,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to persistent storage."
            },
            {
              "name": "load",
              "line": 139,
              "args": [
                "self"
              ],
              "docstring": "Load data from persistent storage."
            },
            {
              "name": "delete",
              "line": 144,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete specific key from storage."
            },
            {
              "name": "exists",
              "line": 149,
              "args": [
                "self"
              ],
              "docstring": "Check if storage exists."
            },
            {
              "name": "backup",
              "line": 154,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Create backup of storage."
            },
            {
              "name": "restore",
              "line": 159,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Restore from backup."
            }
          ]
        },
        {
          "name": "JSONPersistenceBackend",
          "line": 164,
          "bases": [
            "PersistenceBackend"
          ],
          "docstring": "JSON file-based persistence backend.\n\nProvides simple file-based persistence using JSON format\nfor easy debugging and cross-platform compatibility.",
          "methods": [
            {
              "name": "__init__",
              "line": 172,
              "args": [
                "self",
                "file_path",
                "enable_compression"
              ],
              "docstring": "Initialize JSON persistence backend."
            },
            {
              "name": "save",
              "line": 183,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to JSON file."
            },
            {
              "name": "load",
              "line": 206,
              "args": [
                "self"
              ],
              "docstring": "Load data from JSON file."
            },
            {
              "name": "delete",
              "line": 222,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete specific key from JSON storage."
            },
            {
              "name": "exists",
              "line": 235,
              "args": [
                "self"
              ],
              "docstring": "Check if JSON file exists."
            },
            {
              "name": "backup",
              "line": 239,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Create backup of JSON file."
            },
            {
              "name": "restore",
              "line": 256,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Restore from JSON backup."
            }
          ]
        },
        {
          "name": "SQLitePersistenceBackend",
          "line": 272,
          "bases": [
            "PersistenceBackend"
          ],
          "docstring": "SQLite database persistence backend.\n\nProvides robust database-based persistence with transaction support\nand better performance for large datasets.",
          "methods": [
            {
              "name": "__init__",
              "line": 280,
              "args": [
                "self",
                "db_path",
                "table_name"
              ],
              "docstring": "Initialize SQLite persistence backend."
            },
            {
              "name": "_init_database",
              "line": 294,
              "args": [
                "self"
              ],
              "docstring": "Initialize SQLite database and create table."
            },
            {
              "name": "save",
              "line": 317,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to SQLite database."
            },
            {
              "name": "load",
              "line": 342,
              "args": [
                "self"
              ],
              "docstring": "Load data from SQLite database."
            },
            {
              "name": "delete",
              "line": 363,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete specific key from SQLite storage."
            },
            {
              "name": "exists",
              "line": 377,
              "args": [
                "self"
              ],
              "docstring": "Check if SQLite database exists."
            },
            {
              "name": "backup",
              "line": 381,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Create backup of SQLite database."
            },
            {
              "name": "restore",
              "line": 396,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Restore from SQLite backup."
            }
          ]
        },
        {
          "name": "MessageEvent",
          "line": 413,
          "bases": [],
          "docstring": "Event structure for memory bus messaging system.\n\nProvides structured messaging between components with\nmetadata and routing information.",
          "methods": [
            {
              "name": "is_expired",
              "line": 430,
              "args": [
                "self"
              ],
              "docstring": "Check if event has expired."
            },
            {
              "name": "to_dict",
              "line": 434,
              "args": [
                "self"
              ],
              "docstring": "Convert event to dictionary for serialization."
            },
            {
              "name": "from_dict",
              "line": 448,
              "args": [
                "cls",
                "data"
              ],
              "docstring": "Create event from dictionary."
            }
          ]
        },
        {
          "name": "EnhancedMemoryBus",
          "line": 470,
          "bases": [],
          "docstring": "Enhanced memory bus with advanced features and Context integration.\n\nProvides comprehensive memory management with persistence, messaging,\nreliability features, and seamless Context system integration.\n\nFeatures:\n    - Multiple persistence backends (JSON, SQLite, Redis)\n    - Cross-process messaging with pub/sub\n    - Enhanced reliability with backup/recovery\n    - Context system integration\n    - Performance monitoring and metrics\n    - Distributed caching with consistency\n    - Event-driven architecture\n    - Advanced security and access control",
          "methods": [
            {
              "name": "__init__",
              "line": 488,
              "args": [
                "self",
                "persistence_backend",
                "context",
                "enable_messaging",
                "enable_persistence",
                "auto_persist_interval"
              ],
              "docstring": "Initialize enhanced memory bus with advanced features.\n\nArgs:\n    persistence_backend: Backend for persistent storage\n    context: Context instance for integration (creates if None)\n    enable_messaging: Whether to enable messaging capabilities\n    enable_persistence: Whether to enable persistence\n    auto_persist_interval: Auto-persistence interval in seconds"
            },
            {
              "name": "_load_from_persistence",
              "line": 546,
              "args": [
                "self"
              ],
              "docstring": "Load data from persistence backend."
            },
            {
              "name": "_start_background_tasks",
              "line": 561,
              "args": [
                "self"
              ],
              "docstring": "Start background tasks for auto-persistence and cleanup."
            },
            {
              "name": "_auto_persist_worker",
              "line": 581,
              "args": [
                "self"
              ],
              "docstring": "Background worker for automatic persistence."
            },
            {
              "name": "_message_cleanup_worker",
              "line": 598,
              "args": [
                "self"
              ],
              "docstring": "Background worker for cleaning up expired messages."
            },
            {
              "name": "get",
              "line": 613,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get value from memory bus with performance tracking.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key not found\n    \nReturns:\n    Retrieved value or default"
            },
            {
              "name": "set",
              "line": 662,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": "Set value in memory bus with persistence and Context integration.\n\nArgs:\n    key: Key to set\n    value: Value to store\n    who: Who is setting this value (for Context tracking)\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "delete",
              "line": 714,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete key from memory bus and persistence.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "keys",
              "line": 767,
              "args": [
                "self"
              ],
              "docstring": "Get list of all keys in memory bus."
            },
            {
              "name": "clear",
              "line": 772,
              "args": [
                "self"
              ],
              "docstring": "Clear all data from memory bus."
            },
            {
              "name": "persist",
              "line": 786,
              "args": [
                "self"
              ],
              "docstring": "Manually trigger persistence of current data.\n\nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "backup",
              "line": 812,
              "args": [
                "self",
                "backup_name"
              ],
              "docstring": "Create backup of current data.\n\nArgs:\n    backup_name: Name for backup (uses timestamp if None)\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "restore",
              "line": 846,
              "args": [
                "self",
                "backup_path"
              ],
              "docstring": "Restore data from backup.\n\nArgs:\n    backup_path: Path to backup file\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "subscribe",
              "line": 886,
              "args": [
                "self",
                "event_type",
                "callback"
              ],
              "docstring": "Subscribe to events of specific type.\n\nArgs:\n    event_type: Type of events to subscribe to\n    callback: Function to call when event occurs\n    \nReturns:\n    Subscription ID for unsubscribing"
            },
            {
              "name": "unsubscribe",
              "line": 909,
              "args": [
                "self",
                "event_type",
                "callback"
              ],
              "docstring": "Unsubscribe from events.\n\nArgs:\n    event_type: Type of events to unsubscribe from\n    callback: Callback function to remove\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "publish",
              "line": 935,
              "args": [
                "self",
                "event"
              ],
              "docstring": "Publish event to subscribers.\n\nArgs:\n    event: Event to publish\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "_publish_event",
              "line": 950,
              "args": [
                "self",
                "event"
              ],
              "docstring": "Internal method to publish events."
            },
            {
              "name": "get_metrics",
              "line": 975,
              "args": [
                "self"
              ],
              "docstring": "Get current metrics."
            },
            {
              "name": "health_check",
              "line": 983,
              "args": [
                "self"
              ],
              "docstring": "Perform comprehensive health check.\n\nReturns:\n    Health status information"
            },
            {
              "name": "shutdown",
              "line": 1037,
              "args": [
                "self"
              ],
              "docstring": "Gracefully shutdown memory bus."
            },
            {
              "name": "__enter__",
              "line": 1056,
              "args": [
                "self"
              ],
              "docstring": "Context manager entry."
            },
            {
              "name": "__exit__",
              "line": 1060,
              "args": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ],
              "docstring": "Context manager exit with cleanup."
            }
          ]
        }
      ],
      "lines_of_code": 885,
      "complexity_score": 161,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "c71c4de4e972a9e88f14a48af7c95075",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/enhanced_recipe_parser.py": {
      "name": "orchestrator/enhanced_recipe_parser.py",
      "path": "orchestrator/enhanced_recipe_parser.py",
      "component_type": "orchestration",
      "description": "Enhanced Recipe Parser with Context Integration and Advanced Features.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
        ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
        ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
        ".restructuring_backup/README.md",
        ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/configs/server_config.py",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/delta_compression.md",
        ".restructuring_backup/docs/deployment_guide.md",
        ".restructuring_backup/docs/getting_started.md",
        ".restructuring_backup/docs/integration_patterns.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/docs/troubleshooting.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/examples/README.md",
        ".restructuring_backup/examples/basic_usage.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/examples/integration_demo.py",
        ".restructuring_backup/examples/shell_demo.sh",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/orchestrator/__init__.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/__init__.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/orchestrator/recipe_parser.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/orchestrator/runner.py",
        ".restructuring_backup/pyproject.toml",
        ".restructuring_backup/requirements.txt",
        ".restructuring_backup/scriptlets/__init__.py",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/setup.cfg",
        ".restructuring_backup/src/__init__.py",
        ".restructuring_backup/src/analysis/__init__.py",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/src/analysis/registry.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/core/__init__.py",
        ".restructuring_backup/src/core/logger.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/__init__.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/start_server.sh",
        ".restructuring_backup/test_delta_module.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        ".restructuring_backup/test_enhanced_recipe_parser.py",
        ".restructuring_backup/test_execution_report.md",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/test_visualization_system.py",
        ".restructuring_backup/test_workspace_cleaner_v2.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_integration.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_basic_performance.py",
        ".restructuring_backup/tests/test_core_functionality.py",
        ".restructuring_backup/tests/test_delta_compression.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        ".restructuring_backup/tests/test_integration.py",
        ".restructuring_backup/tests/test_performance_load.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tests/test_simple_validation.py",
        ".restructuring_backup/tests/test_websocket_performance.py",
        ".restructuring_backup/tools/baseline_documentation_updater.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        ".restructuring_backup/tools/context.sh",
        ".restructuring_backup/tools/documentation_updater.py",
        ".restructuring_backup/tools/phased_restructurer.py",
        ".restructuring_backup/tools/workspace_cleaner.py",
        ".restructuring_backup/tools/workspace_cleaner_clean.py",
        ".restructuring_backup/tools/workspace_cleaner_v2.py",
        ".restructuring_backup/tools/workspace_restructurer.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/delta_compression.md",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "docs/test_execution_report.md",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/persistence/core.py",
        "orchestrator/recipe_parser.py",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        "requirements.txt",
        "src/analysis/registry.py",
        "src/core/__init__.py",
        "src/core/logger.py",
        "tests/test_core_functionality.py",
        "tests/test_delta_compression.py",
        "tests/test_enhanced_recipe_parser.py",
        "tests/test_realtime_performance.py",
        "tools/phased_restructurer.py",
        "tools/post_restructure_validator.py",
        "tools/workspace_restructurer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "parse_recipe_file",
        "validate_recipe_data",
        "__str__",
        "__post_init__",
        "is_valid",
        "error_count",
        "warning_count",
        "__init__",
        "_setup_default_validators",
        "add_validator",
        "validate",
        "_validate_required_fields",
        "_validate_step_structure",
        "_validate_dependency_graph",
        "_validate_module_imports",
        "_validate_step_indices",
        "__init__",
        "detect_format",
        "load_file",
        "_compute_content_hash",
        "_extract_metadata",
        "_parse_steps",
        "parse_recipe",
        "get_validation_summary",
        "clear_cache",
        "add_validator",
        "has_cycle",
        "RecipeFormat",
        "ValidationSeverity",
        "ValidationMessage",
        "RecipeMetadata",
        "StepInfo",
        "ParsedRecipe",
        "RecipeValidator",
        "EnhancedRecipeParser"
      ],
      "imports": [
        "json",
        "os",
        "re",
        "importlib",
        "hashlib",
        "pathlib",
        "datetime",
        "typing",
        "dataclasses",
        "enum",
        "yaml",
        "orchestrator.context.context",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "parse_recipe_file",
          "line": 799,
          "args": [
            "file_path",
            "context"
          ],
          "docstring": "Convenience function for parsing recipe files with Context integration.\n\nThis function provides backward compatibility with the existing recipe_parser\ninterface while leveraging the enhanced features of EnhancedRecipeParser.\n\n:param file_path: Path to recipe file to parse\n:param context: Optional Context instance for integration\n:return: Parsed recipe with validation results\n:raises FileNotFoundError: If recipe file not found\n:raises ValueError: If recipe parsing fails",
          "decorators": []
        },
        {
          "name": "validate_recipe_data",
          "line": 816,
          "args": [
            "recipe_data",
            "context"
          ],
          "docstring": "Convenience function for validating recipe data with Context integration.\n\n:param recipe_data: Raw recipe dictionary to validate\n:param context: Optional Context instance for integration\n:return: List of validation messages",
          "decorators": []
        },
        {
          "name": "__str__",
          "line": 60,
          "args": [
            "self"
          ],
          "docstring": "Return formatted validation message.",
          "decorators": []
        },
        {
          "name": "__post_init__",
          "line": 97,
          "args": [
            "self"
          ],
          "docstring": "Validate step information after initialization.",
          "decorators": []
        },
        {
          "name": "is_valid",
          "line": 121,
          "args": [
            "self"
          ],
          "docstring": "Check if recipe has no validation errors.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "error_count",
          "line": 127,
          "args": [
            "self"
          ],
          "docstring": "Count of validation errors.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "warning_count",
          "line": 133,
          "args": [
            "self"
          ],
          "docstring": "Count of validation warnings.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__init__",
          "line": 142,
          "args": [
            "self",
            "context"
          ],
          "docstring": "Initialize recipe validator with optional Context integration.\n\n:param context: Optional Context instance for logging and data sharing",
          "decorators": []
        },
        {
          "name": "_setup_default_validators",
          "line": 154,
          "args": [
            "self"
          ],
          "docstring": "Set up default validation rules for recipe structure.",
          "decorators": []
        },
        {
          "name": "add_validator",
          "line": 166,
          "args": [
            "self",
            "name",
            "validator"
          ],
          "docstring": "Add custom validation rule to validator.\n\n:param name: Validator name/identifier\n:param validator: Validation function returning ValidationMessage list",
          "decorators": []
        },
        {
          "name": "validate",
          "line": 176,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate recipe data using all registered validation rules.\n\n:param recipe_data: Raw recipe dictionary to validate\n:return: List of validation messages (errors, warnings, info)",
          "decorators": []
        },
        {
          "name": "_validate_required_fields",
          "line": 211,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate presence of required recipe fields.",
          "decorators": []
        },
        {
          "name": "_validate_step_structure",
          "line": 245,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate individual step structure and required fields.",
          "decorators": []
        },
        {
          "name": "_validate_dependency_graph",
          "line": 287,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate step dependency graph for cycles and missing dependencies.",
          "decorators": []
        },
        {
          "name": "_validate_module_imports",
          "line": 374,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate that required modules and functions can be imported.",
          "decorators": []
        },
        {
          "name": "_validate_step_indices",
          "line": 421,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Validate step index uniqueness and ordering.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 487,
          "args": [
            "self",
            "context"
          ],
          "docstring": "Initialize enhanced recipe parser with Context integration.\n\n:param context: Optional Context instance for logging and data sharing",
          "decorators": []
        },
        {
          "name": "detect_format",
          "line": 504,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Detect recipe file format based on file extension.\n\n:param file_path: Path to recipe file\n:return: Detected file format\n:raises ValueError: If file format is not supported",
          "decorators": []
        },
        {
          "name": "load_file",
          "line": 530,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Load and parse recipe file content based on detected format.\n\n:param file_path: Path to recipe file\n:return: Parsed recipe data as dictionary\n:raises FileNotFoundError: If file does not exist\n:raises ValueError: If file cannot be parsed",
          "decorators": []
        },
        {
          "name": "_compute_content_hash",
          "line": 582,
          "args": [
            "self",
            "content"
          ],
          "docstring": "Compute hash of recipe content for caching and change detection.\n\n:param content: Recipe content dictionary\n:return: SHA-256 hash of content",
          "decorators": []
        },
        {
          "name": "_extract_metadata",
          "line": 592,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Extract recipe metadata from raw recipe data.\n\n:param recipe_data: Raw recipe dictionary\n:return: Extracted metadata information",
          "decorators": []
        },
        {
          "name": "_parse_steps",
          "line": 633,
          "args": [
            "self",
            "recipe_data"
          ],
          "docstring": "Parse and validate individual steps from recipe data.\n\n:param recipe_data: Raw recipe dictionary containing steps\n:return: List of parsed step information\n:raises ValueError: If step parsing fails",
          "decorators": []
        },
        {
          "name": "parse_recipe",
          "line": 694,
          "args": [
            "self",
            "file_path",
            "use_cache"
          ],
          "docstring": "Parse recipe file with comprehensive validation and Context integration.\n\n:param file_path: Path to recipe file to parse\n:param use_cache: Whether to use cached results if available\n:return: Parsed recipe with validation results\n:raises FileNotFoundError: If recipe file not found\n:raises ValueError: If recipe parsing fails",
          "decorators": []
        },
        {
          "name": "get_validation_summary",
          "line": 759,
          "args": [
            "self",
            "parsed_recipe"
          ],
          "docstring": "Generate human-readable validation summary for parsed recipe.\n\n:param parsed_recipe: Parsed recipe with validation results\n:return: Formatted validation summary string",
          "decorators": []
        },
        {
          "name": "clear_cache",
          "line": 783,
          "args": [
            "self"
          ],
          "docstring": "Clear internal recipe cache.",
          "decorators": []
        },
        {
          "name": "add_validator",
          "line": 788,
          "args": [
            "self",
            "name",
            "validator"
          ],
          "docstring": "Add custom validation rule to parser.\n\n:param name: Validator name/identifier\n:param validator: Validation function returning ValidationMessage list",
          "decorators": []
        },
        {
          "name": "has_cycle",
          "line": 343,
          "args": [
            "node"
          ],
          "docstring": "Detect cycles in dependency graph using DFS.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RecipeFormat",
          "line": 37,
          "bases": [
            "Enum"
          ],
          "docstring": "Supported recipe file formats.",
          "methods": []
        },
        {
          "name": "ValidationSeverity",
          "line": 44,
          "bases": [
            "Enum"
          ],
          "docstring": "Validation message severity levels.",
          "methods": []
        },
        {
          "name": "ValidationMessage",
          "line": 52,
          "bases": [],
          "docstring": "Container for validation messages with location and severity.",
          "methods": [
            {
              "name": "__str__",
              "line": 60,
              "args": [
                "self"
              ],
              "docstring": "Return formatted validation message."
            }
          ]
        },
        {
          "name": "RecipeMetadata",
          "line": 68,
          "bases": [],
          "docstring": "Container for recipe metadata information.",
          "methods": []
        },
        {
          "name": "StepInfo",
          "line": 82,
          "bases": [],
          "docstring": "Container for parsed step information with validation.",
          "methods": [
            {
              "name": "__post_init__",
              "line": 97,
              "args": [
                "self"
              ],
              "docstring": "Validate step information after initialization."
            }
          ]
        },
        {
          "name": "ParsedRecipe",
          "line": 110,
          "bases": [],
          "docstring": "Container for complete parsed recipe with validation results.",
          "methods": [
            {
              "name": "is_valid",
              "line": 121,
              "args": [
                "self"
              ],
              "docstring": "Check if recipe has no validation errors."
            },
            {
              "name": "error_count",
              "line": 127,
              "args": [
                "self"
              ],
              "docstring": "Count of validation errors."
            },
            {
              "name": "warning_count",
              "line": 133,
              "args": [
                "self"
              ],
              "docstring": "Count of validation warnings."
            }
          ]
        },
        {
          "name": "RecipeValidator",
          "line": 139,
          "bases": [],
          "docstring": "Advanced recipe validation with extensible rule system.",
          "methods": [
            {
              "name": "__init__",
              "line": 142,
              "args": [
                "self",
                "context"
              ],
              "docstring": "Initialize recipe validator with optional Context integration.\n\n:param context: Optional Context instance for logging and data sharing"
            },
            {
              "name": "_setup_default_validators",
              "line": 154,
              "args": [
                "self"
              ],
              "docstring": "Set up default validation rules for recipe structure."
            },
            {
              "name": "add_validator",
              "line": 166,
              "args": [
                "self",
                "name",
                "validator"
              ],
              "docstring": "Add custom validation rule to validator.\n\n:param name: Validator name/identifier\n:param validator: Validation function returning ValidationMessage list"
            },
            {
              "name": "validate",
              "line": 176,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate recipe data using all registered validation rules.\n\n:param recipe_data: Raw recipe dictionary to validate\n:return: List of validation messages (errors, warnings, info)"
            },
            {
              "name": "_validate_required_fields",
              "line": 211,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate presence of required recipe fields."
            },
            {
              "name": "_validate_step_structure",
              "line": 245,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate individual step structure and required fields."
            },
            {
              "name": "_validate_dependency_graph",
              "line": 287,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate step dependency graph for cycles and missing dependencies."
            },
            {
              "name": "_validate_module_imports",
              "line": 374,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate that required modules and functions can be imported."
            },
            {
              "name": "_validate_step_indices",
              "line": 421,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Validate step index uniqueness and ordering."
            }
          ]
        },
        {
          "name": "EnhancedRecipeParser",
          "line": 475,
          "bases": [],
          "docstring": "Advanced recipe parser with Context integration and comprehensive features.\n\nThis parser provides enhanced functionality over the basic recipe_parser including:\n- Context system integration for logging and data sharing\n- Support for multiple file formats (YAML, JSON)\n- Comprehensive schema validation with detailed error reporting\n- Caching and performance optimization\n- Extensible validation and parsing pipeline",
          "methods": [
            {
              "name": "__init__",
              "line": 487,
              "args": [
                "self",
                "context"
              ],
              "docstring": "Initialize enhanced recipe parser with Context integration.\n\n:param context: Optional Context instance for logging and data sharing"
            },
            {
              "name": "detect_format",
              "line": 504,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Detect recipe file format based on file extension.\n\n:param file_path: Path to recipe file\n:return: Detected file format\n:raises ValueError: If file format is not supported"
            },
            {
              "name": "load_file",
              "line": 530,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Load and parse recipe file content based on detected format.\n\n:param file_path: Path to recipe file\n:return: Parsed recipe data as dictionary\n:raises FileNotFoundError: If file does not exist\n:raises ValueError: If file cannot be parsed"
            },
            {
              "name": "_compute_content_hash",
              "line": 582,
              "args": [
                "self",
                "content"
              ],
              "docstring": "Compute hash of recipe content for caching and change detection.\n\n:param content: Recipe content dictionary\n:return: SHA-256 hash of content"
            },
            {
              "name": "_extract_metadata",
              "line": 592,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Extract recipe metadata from raw recipe data.\n\n:param recipe_data: Raw recipe dictionary\n:return: Extracted metadata information"
            },
            {
              "name": "_parse_steps",
              "line": 633,
              "args": [
                "self",
                "recipe_data"
              ],
              "docstring": "Parse and validate individual steps from recipe data.\n\n:param recipe_data: Raw recipe dictionary containing steps\n:return: List of parsed step information\n:raises ValueError: If step parsing fails"
            },
            {
              "name": "parse_recipe",
              "line": 694,
              "args": [
                "self",
                "file_path",
                "use_cache"
              ],
              "docstring": "Parse recipe file with comprehensive validation and Context integration.\n\n:param file_path: Path to recipe file to parse\n:param use_cache: Whether to use cached results if available\n:return: Parsed recipe with validation results\n:raises FileNotFoundError: If recipe file not found\n:raises ValueError: If recipe parsing fails"
            },
            {
              "name": "get_validation_summary",
              "line": 759,
              "args": [
                "self",
                "parsed_recipe"
              ],
              "docstring": "Generate human-readable validation summary for parsed recipe.\n\n:param parsed_recipe: Parsed recipe with validation results\n:return: Formatted validation summary string"
            },
            {
              "name": "clear_cache",
              "line": 783,
              "args": [
                "self"
              ],
              "docstring": "Clear internal recipe cache."
            },
            {
              "name": "add_validator",
              "line": 788,
              "args": [
                "self",
                "name",
                "validator"
              ],
              "docstring": "Add custom validation rule to parser.\n\n:param name: Validator name/identifier\n:param validator: Validation function returning ValidationMessage list"
            }
          ]
        }
      ],
      "lines_of_code": 672,
      "complexity_score": 111,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "762f055fcbd676b0613bb8d7e2ce93da",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/memory_bus.py": {
      "name": "orchestrator/memory_bus.py",
      "path": "orchestrator/memory_bus.py",
      "component_type": "orchestration",
      "description": "MemoryBusClient is a client-side interface for interacting",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "fetch_snapshot",
        "push_patch",
        "sync",
        "__init__",
        "get_snapshot",
        "apply_patch",
        "handle_snapshot_request",
        "handle_patch_request",
        "MemoryBusClient",
        "MemoryBusServer"
      ],
      "imports": [
        "json",
        "threading",
        "time",
        "typing",
        "requests",
        "orchestrator.context"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 23,
          "args": [
            "self",
            "server_url",
            "timeout"
          ],
          "docstring": ":param server_url: Base URL of the context server (e.g. \"http://ctxserver:8000\")\n:param timeout: HTTP request timeout (seconds)",
          "decorators": []
        },
        {
          "name": "fetch_snapshot",
          "line": 33,
          "args": [
            "self"
          ],
          "docstring": "Fetch the full context snapshot from the server.\nReturns a Context object or None (if server returned empty or error).",
          "decorators": []
        },
        {
          "name": "push_patch",
          "line": 49,
          "args": [
            "self",
            "patch"
          ],
          "docstring": "Send a JSON patch (key→value mapping) to the server.\nReturns True if accepted / successful, False otherwise.",
          "decorators": []
        },
        {
          "name": "sync",
          "line": 59,
          "args": [
            "self",
            "local_ctx"
          ],
          "docstring": "Two‑way sync: fetch latest from server, merge into local context,\nthen push only local dirty keys as patch.\n\nReturns the merged Context (i.e. updated local context).",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get_snapshot",
          "line": 90,
          "args": [
            "self"
          ],
          "docstring": "Returns the full context data as a JSON‑serializable dict.",
          "decorators": []
        },
        {
          "name": "apply_patch",
          "line": 97,
          "args": [
            "self",
            "patch"
          ],
          "docstring": "Apply a patch (key → value) to the master context.\nOverwrites existing keys (last-write-wins by default).",
          "decorators": []
        },
        {
          "name": "handle_snapshot_request",
          "line": 108,
          "args": [
            "self",
            "request"
          ],
          "docstring": "HTTP endpoint handler for GET /snapshot\nReturns JSON dict of context snapshot.",
          "decorators": []
        },
        {
          "name": "handle_patch_request",
          "line": 116,
          "args": [
            "self",
            "request"
          ],
          "docstring": "HTTP endpoint handler for POST /patch\nExpects JSON body of key→value mapping.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MemoryBusClient",
          "line": 13,
          "bases": [],
          "docstring": "MemoryBusClient is a client-side interface for interacting\nwith a centralized context server (MemoryBus). It allows\nfetching/pushing context state or patches (deltas) over the network.\n\nThis helps multiple agents or test runners share a common context\nwithout each writing to disk locally.",
          "methods": [
            {
              "name": "__init__",
              "line": 23,
              "args": [
                "self",
                "server_url",
                "timeout"
              ],
              "docstring": ":param server_url: Base URL of the context server (e.g. \"http://ctxserver:8000\")\n:param timeout: HTTP request timeout (seconds)"
            },
            {
              "name": "fetch_snapshot",
              "line": 33,
              "args": [
                "self"
              ],
              "docstring": "Fetch the full context snapshot from the server.\nReturns a Context object or None (if server returned empty or error)."
            },
            {
              "name": "push_patch",
              "line": 49,
              "args": [
                "self",
                "patch"
              ],
              "docstring": "Send a JSON patch (key→value mapping) to the server.\nReturns True if accepted / successful, False otherwise."
            },
            {
              "name": "sync",
              "line": 59,
              "args": [
                "self",
                "local_ctx"
              ],
              "docstring": "Two‑way sync: fetch latest from server, merge into local context,\nthen push only local dirty keys as patch.\n\nReturns the merged Context (i.e. updated local context)."
            }
          ]
        },
        {
          "name": "MemoryBusServer",
          "line": 80,
          "bases": [],
          "docstring": "A simple in-memory context server. Exposes HTTP endpoints for clients\nto get snapshot, push patches, etc. Maintains an internal master Context.",
          "methods": [
            {
              "name": "__init__",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "get_snapshot",
              "line": 90,
              "args": [
                "self"
              ],
              "docstring": "Returns the full context data as a JSON‑serializable dict."
            },
            {
              "name": "apply_patch",
              "line": 97,
              "args": [
                "self",
                "patch"
              ],
              "docstring": "Apply a patch (key → value) to the master context.\nOverwrites existing keys (last-write-wins by default)."
            },
            {
              "name": "handle_snapshot_request",
              "line": 108,
              "args": [
                "self",
                "request"
              ],
              "docstring": "HTTP endpoint handler for GET /snapshot\nReturns JSON dict of context snapshot."
            },
            {
              "name": "handle_patch_request",
              "line": 116,
              "args": [
                "self",
                "request"
              ],
              "docstring": "HTTP endpoint handler for POST /patch\nExpects JSON body of key→value mapping."
            }
          ]
        }
      ],
      "lines_of_code": 106,
      "complexity_score": 22,
      "last_modified": "2025-10-04T14:13:31.761339",
      "checksum": "c5c615e3e27351495ef23c6b296de591",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/persistence.py": {
      "name": "orchestrator/persistence.py",
      "path": "orchestrator/persistence.py",
      "component_type": "orchestration",
      "description": "PersistenceManager handles writing the Context state (or deltas) to",
      "dependencies": [
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "__init__",
        "start_background_flush",
        "stop_background_flush",
        "flush",
        "load_latest",
        "_flush_loop",
        "PersistenceManager"
      ],
      "imports": [
        "threading",
        "time",
        "json",
        "os",
        "typing",
        "orchestrator.context"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 19,
          "args": [
            "self",
            "persist_dir",
            "flush_interval_sec",
            "max_history"
          ],
          "docstring": ":param persist_dir: Directory where serialized snapshots or delta files go.\n:param flush_interval_sec: If not None, flush dirty data every N seconds.\n:param max_history: Optional cap on how many history entries to retain.",
          "decorators": []
        },
        {
          "name": "start_background_flush",
          "line": 42,
          "args": [
            "self",
            "ctx"
          ],
          "docstring": "Begin a background thread that periodically flushes dirty keys\nfrom the context to disk / persistent storage.",
          "decorators": []
        },
        {
          "name": "stop_background_flush",
          "line": 67,
          "args": [
            "self"
          ],
          "docstring": "Signal the background flush thread to stop, and join it.",
          "decorators": []
        },
        {
          "name": "flush",
          "line": 75,
          "args": [
            "self",
            "ctx"
          ],
          "docstring": "Persist the current context state or dirty deltas to disk.\nFor now, this writes a full snapshot JSON. You may later optimize\nto delta-only or compressed storage.",
          "decorators": []
        },
        {
          "name": "load_latest",
          "line": 107,
          "args": [
            "self"
          ],
          "docstring": "Load the most recent snapshot file, reconstruct into a Context.\nReturns None if no snapshot exists.",
          "decorators": []
        },
        {
          "name": "_flush_loop",
          "line": 50,
          "args": [],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PersistenceManager",
          "line": 12,
          "bases": [],
          "docstring": "PersistenceManager handles writing the Context state (or deltas) to\ndurable storage (disk or database). It also schedules periodic flushes,\nand can perform full snapshotting or delta-only flushing.",
          "methods": [
            {
              "name": "__init__",
              "line": 19,
              "args": [
                "self",
                "persist_dir",
                "flush_interval_sec",
                "max_history"
              ],
              "docstring": ":param persist_dir: Directory where serialized snapshots or delta files go.\n:param flush_interval_sec: If not None, flush dirty data every N seconds.\n:param max_history: Optional cap on how many history entries to retain."
            },
            {
              "name": "start_background_flush",
              "line": 42,
              "args": [
                "self",
                "ctx"
              ],
              "docstring": "Begin a background thread that periodically flushes dirty keys\nfrom the context to disk / persistent storage."
            },
            {
              "name": "stop_background_flush",
              "line": 67,
              "args": [
                "self"
              ],
              "docstring": "Signal the background flush thread to stop, and join it."
            },
            {
              "name": "flush",
              "line": 75,
              "args": [
                "self",
                "ctx"
              ],
              "docstring": "Persist the current context state or dirty deltas to disk.\nFor now, this writes a full snapshot JSON. You may later optimize\nto delta-only or compressed storage."
            },
            {
              "name": "load_latest",
              "line": 107,
              "args": [
                "self"
              ],
              "docstring": "Load the most recent snapshot file, reconstruct into a Context.\nReturns None if no snapshot exists."
            }
          ]
        }
      ],
      "lines_of_code": 112,
      "complexity_score": 21,
      "last_modified": "2025-10-04T14:13:32.037337",
      "checksum": "96b3961c51a4bd1b14d746373755ff20",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/persistence/__init__.py": {
      "name": "orchestrator/persistence/__init__.py",
      "path": "orchestrator/persistence/__init__.py",
      "component_type": "orchestration",
      "description": "Persistence package initialization.",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 4,
      "complexity_score": 0,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "efcc51462c11de166b38446a4272be4a",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "orchestrator/persistence/cache.py": {
      "name": "orchestrator/persistence/cache.py",
      "path": "orchestrator/persistence/cache.py",
      "component_type": "orchestration",
      "description": "Cache Management Module for Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py"
      ],
      "exports": [
        "create_cache",
        "cache_function",
        "__init__",
        "_estimate_size",
        "access",
        "is_expired",
        "get_age",
        "get_idle_time",
        "to_dict",
        "from_dict",
        "all_policies",
        "__init__",
        "_with_lock",
        "set",
        "_set",
        "__set",
        "get",
        "_get",
        "__get",
        "contains",
        "_contains",
        "__contains",
        "delete",
        "_delete",
        "__delete",
        "clear",
        "_clear",
        "__clear",
        "get_stats",
        "_get_stats",
        "__get_stats",
        "get_keys",
        "_get_keys",
        "__get_keys",
        "get_entry_metadata",
        "_get_entry_metadata",
        "__get_entry_metadata",
        "_clean_expired_entries",
        "_evict_entries",
        "_evict_memory",
        "_select_eviction_candidate",
        "__init__",
        "_schedule_auto_persist",
        "persist",
        "_persist",
        "__persist",
        "_load_cache",
        "clear",
        "_clear_and_remove",
        "__clear_and_remove",
        "__del__",
        "__init__",
        "set",
        "_set",
        "__set",
        "get",
        "_get",
        "__get",
        "contains",
        "_contains",
        "__contains",
        "delete",
        "_delete",
        "__delete",
        "clear",
        "_clear",
        "__clear",
        "get_stats",
        "_get_stats",
        "__get_stats",
        "get_keys",
        "_get_keys",
        "__get_keys",
        "__init__",
        "_default_key_func",
        "__call__",
        "wrapper",
        "_auto_persist",
        "wrapper",
        "clear_cache",
        "CacheError",
        "CacheFullError",
        "CacheEntryNotFoundError",
        "CacheEntry",
        "EvictionPolicy",
        "Cache",
        "PersistentCache",
        "TieredCache",
        "CacheDecorator"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "uuid",
        "shutil",
        "hashlib",
        "logging",
        "tempfile",
        "threading",
        "functools",
        "datetime",
        "pathlib",
        "typing",
        "orchestrator.persistence.core",
        "numpy",
        "sys"
      ],
      "functions": [
        {
          "name": "create_cache",
          "line": 1322,
          "args": [
            "cache_type",
            "max_size",
            "max_memory_mb",
            "default_ttl",
            "eviction_policy",
            "disk_cache_dir"
          ],
          "docstring": "Create a cache instance with the specified configuration.\n\nArgs:\n    cache_type: Type of cache to create\n    max_size: Maximum number of entries\n    max_memory_mb: Maximum memory usage in MB\n    default_ttl: Default time-to-live in seconds\n    eviction_policy: Eviction policy to use\n    disk_cache_dir: Directory for disk cache (if applicable)\n    \nReturns:\n    Cache: Configured cache instance\n    \nRaises:\n    ValueError: If an invalid cache type is specified",
          "decorators": []
        },
        {
          "name": "cache_function",
          "line": 1380,
          "args": [
            "func"
          ],
          "docstring": "Decorator for caching function results.\n\nCan be used as @cache_function or @cache_function(ttl=60).\n\nArgs:\n    func: Function to decorate (when used as @cache_function)\n    ttl: Time-to-live in seconds\n    max_size: Maximum cache size\n    cache_type: Type of cache to use\n    \nReturns:\n    Callable: Decorated function or decorator",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 62,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Initialize a cache entry.\n\nArgs:\n    key: The cache key\n    value: The cached value\n    ttl: Time-to-live in seconds (None for no expiration)",
          "decorators": []
        },
        {
          "name": "_estimate_size",
          "line": 85,
          "args": [
            "self",
            "obj"
          ],
          "docstring": "Estimate the memory size of an object in bytes.\n\nArgs:\n    obj: The object to measure\n    \nReturns:\n    int: Estimated size in bytes",
          "decorators": []
        },
        {
          "name": "access",
          "line": 129,
          "args": [
            "self"
          ],
          "docstring": "Record an access to this cache entry.",
          "decorators": []
        },
        {
          "name": "is_expired",
          "line": 134,
          "args": [
            "self"
          ],
          "docstring": "Check if this cache entry has expired.\n\nReturns:\n    bool: True if expired, False otherwise",
          "decorators": []
        },
        {
          "name": "get_age",
          "line": 144,
          "args": [
            "self"
          ],
          "docstring": "Get the age of this cache entry in seconds.\n\nReturns:\n    float: Age in seconds",
          "decorators": []
        },
        {
          "name": "get_idle_time",
          "line": 152,
          "args": [
            "self"
          ],
          "docstring": "Get time since last access in seconds.\n\nReturns:\n    float: Idle time in seconds",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 160,
          "args": [
            "self"
          ],
          "docstring": "Convert cache entry to a dictionary for serialization.\n\nReturns:\n    Dict[str, Any]: Dictionary representation",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 177,
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create a cache entry from a dictionary.\n\nArgs:\n    data: Dictionary representation of cache entry\n    \nReturns:\n    CacheEntry: Reconstructed cache entry",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "all_policies",
          "line": 218,
          "args": [],
          "docstring": "Return all available eviction policies.\n\nReturns:\n    List[str]: List of all policy names",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "__init__",
          "line": 239,
          "args": [
            "self",
            "max_size",
            "max_memory_mb",
            "default_ttl",
            "eviction_policy",
            "thread_safe"
          ],
          "docstring": "Initialize the cache.\n\nArgs:\n    max_size: Maximum number of entries (0 for unlimited)\n    max_memory_mb: Maximum memory usage in MB (None for unlimited)\n    default_ttl: Default time-to-live in seconds (None for no expiration)\n    eviction_policy: Eviction policy to use (LRU, LFU, FIFO, TTL)\n    thread_safe: Whether to make this cache thread-safe",
          "decorators": []
        },
        {
          "name": "_with_lock",
          "line": 280,
          "args": [
            "self",
            "func"
          ],
          "docstring": "Decorator to execute a function with the cache lock if thread safety is enabled.\n\nArgs:\n    func: Function to wrap\n    \nReturns:\n    Callable: Wrapped function",
          "decorators": []
        },
        {
          "name": "set",
          "line": 301,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Set a value in the cache.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (None uses default_ttl)\n    \nRaises:\n    CacheFullError: If cache is full and no items can be evicted",
          "decorators": []
        },
        {
          "name": "_set",
          "line": 315,
          "args": [
            "self"
          ],
          "docstring": "Get the set method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__set",
          "line": 319,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Internal implementation of set (without locking).",
          "decorators": []
        },
        {
          "name": "get",
          "line": 363,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get a value from the cache.\n\nArgs:\n    key: Cache key\n    default: Default value if key is not found\n    \nReturns:\n    Optional[V]: The cached value or default",
          "decorators": []
        },
        {
          "name": "_get",
          "line": 376,
          "args": [
            "self"
          ],
          "docstring": "Get the get method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get",
          "line": 380,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Internal implementation of get (without locking).",
          "decorators": []
        },
        {
          "name": "contains",
          "line": 405,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Check if a key exists in the cache.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key exists and is not expired",
          "decorators": []
        },
        {
          "name": "_contains",
          "line": 417,
          "args": [
            "self"
          ],
          "docstring": "Get the contains method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__contains",
          "line": 421,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of contains (without locking).",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 440,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete a key from the cache.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key was deleted, False if not found",
          "decorators": []
        },
        {
          "name": "_delete",
          "line": 452,
          "args": [
            "self"
          ],
          "docstring": "Get the delete method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__delete",
          "line": 456,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of delete (without locking).",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 465,
          "args": [
            "self"
          ],
          "docstring": "Clear all entries from the cache.",
          "decorators": []
        },
        {
          "name": "_clear",
          "line": 470,
          "args": [
            "self"
          ],
          "docstring": "Get the clear method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__clear",
          "line": 474,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of clear (without locking).",
          "decorators": []
        },
        {
          "name": "get_stats",
          "line": 480,
          "args": [
            "self"
          ],
          "docstring": "Get cache statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of statistics",
          "decorators": []
        },
        {
          "name": "_get_stats",
          "line": 489,
          "args": [
            "self"
          ],
          "docstring": "Get the get_stats method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_stats",
          "line": 493,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of get_stats (without locking).",
          "decorators": []
        },
        {
          "name": "get_keys",
          "line": 513,
          "args": [
            "self"
          ],
          "docstring": "Get all keys in the cache.\n\nReturns:\n    List[K]: List of all cache keys (excluding expired entries)",
          "decorators": []
        },
        {
          "name": "_get_keys",
          "line": 522,
          "args": [
            "self"
          ],
          "docstring": "Get the get_keys method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_keys",
          "line": 526,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of get_keys (without locking).",
          "decorators": []
        },
        {
          "name": "get_entry_metadata",
          "line": 533,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Get metadata for a specific cache entry.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    Dict[str, Any]: Dictionary of metadata\n    \nRaises:\n    CacheEntryNotFoundError: If entry not found or expired",
          "decorators": []
        },
        {
          "name": "_get_entry_metadata",
          "line": 548,
          "args": [
            "self"
          ],
          "docstring": "Get the get_entry_metadata method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_entry_metadata",
          "line": 552,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of get_entry_metadata (without locking).",
          "decorators": []
        },
        {
          "name": "_clean_expired_entries",
          "line": 579,
          "args": [
            "self"
          ],
          "docstring": "Remove all expired entries from the cache.\n\nReturns:\n    int: Number of entries removed",
          "decorators": []
        },
        {
          "name": "_evict_entries",
          "line": 608,
          "args": [
            "self",
            "count"
          ],
          "docstring": "Evict a specified number of entries based on the eviction policy.\n\nArgs:\n    count: Number of entries to evict\n    \nReturns:\n    int: Number of entries actually evicted",
          "decorators": []
        },
        {
          "name": "_evict_memory",
          "line": 641,
          "args": [
            "self",
            "bytes_needed"
          ],
          "docstring": "Evict entries to free the specified amount of memory.\n\nArgs:\n    bytes_needed: Number of bytes to free\n    \nReturns:\n    int: Number of bytes actually freed",
          "decorators": []
        },
        {
          "name": "_select_eviction_candidate",
          "line": 677,
          "args": [
            "self"
          ],
          "docstring": "Select a candidate for eviction based on the configured policy.\n\nReturns:\n    Optional[K]: Key of the entry to evict, or None if no suitable candidate",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 742,
          "args": [
            "self",
            "cache_dir",
            "max_size",
            "max_memory_mb",
            "default_ttl",
            "eviction_policy",
            "thread_safe",
            "persist_on_shutdown",
            "auto_persist_interval"
          ],
          "docstring": "Initialize the persistent cache.\n\nArgs:\n    cache_dir: Directory for cache persistence (None for temp dir)\n    max_size: Maximum number of entries (0 for unlimited)\n    max_memory_mb: Maximum memory usage in MB (None for unlimited)\n    default_ttl: Default time-to-live in seconds (None for no expiration)\n    eviction_policy: Eviction policy to use (LRU, LFU, FIFO, TTL)\n    thread_safe: Whether to make this cache thread-safe\n    persist_on_shutdown: Whether to automatically persist on shutdown\n    auto_persist_interval: Interval in seconds for auto-persist (None to disable)",
          "decorators": []
        },
        {
          "name": "_schedule_auto_persist",
          "line": 799,
          "args": [
            "self"
          ],
          "docstring": "Schedule the next auto-persist operation.",
          "decorators": []
        },
        {
          "name": "persist",
          "line": 820,
          "args": [
            "self"
          ],
          "docstring": "Persist the cache contents to disk.",
          "decorators": []
        },
        {
          "name": "_persist",
          "line": 825,
          "args": [
            "self"
          ],
          "docstring": "Get the persist method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__persist",
          "line": 829,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of persist (without locking).",
          "decorators": []
        },
        {
          "name": "_load_cache",
          "line": 879,
          "args": [
            "self"
          ],
          "docstring": "Load cache contents from disk if available.",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 931,
          "args": [
            "self"
          ],
          "docstring": "Clear all entries from the cache and remove cache file.",
          "decorators": []
        },
        {
          "name": "_clear_and_remove",
          "line": 936,
          "args": [
            "self"
          ],
          "docstring": "Get the clear_and_remove method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__clear_and_remove",
          "line": 940,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of clear_and_remove (without locking).",
          "decorators": []
        },
        {
          "name": "__del__",
          "line": 954,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources when object is garbage collected.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 975,
          "args": [
            "self",
            "max_size",
            "max_memory_mb",
            "default_ttl",
            "eviction_policy",
            "thread_safe",
            "disk_cache_dir",
            "disk_cache_size_mb",
            "promote_on_access"
          ],
          "docstring": "Initialize the tiered cache.\n\nArgs:\n    max_size: Maximum number of entries in memory cache\n    max_memory_mb: Maximum memory usage in MB\n    default_ttl: Default time-to-live in seconds\n    eviction_policy: Eviction policy to use\n    thread_safe: Whether to make this cache thread-safe\n    disk_cache_dir: Directory for disk cache\n    disk_cache_size_mb: Maximum disk cache size in MB\n    promote_on_access: Whether to promote disk entries to memory on access",
          "decorators": []
        },
        {
          "name": "set",
          "line": 1023,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Set a value in the cache.\n\nThis will store in the memory cache first, and items evicted from\nmemory will cascade to disk cache.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (None uses default_ttl)",
          "decorators": []
        },
        {
          "name": "_set",
          "line": 1037,
          "args": [
            "self"
          ],
          "docstring": "Get the set method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__set",
          "line": 1041,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "docstring": "Internal implementation of set (without locking).",
          "decorators": []
        },
        {
          "name": "get",
          "line": 1050,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get a value from the cache.\n\nThis will check the memory cache first, then the disk cache.\n\nArgs:\n    key: Cache key\n    default: Default value if key is not found\n    \nReturns:\n    Optional[V]: The cached value or default",
          "decorators": []
        },
        {
          "name": "_get",
          "line": 1065,
          "args": [
            "self"
          ],
          "docstring": "Get the get method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get",
          "line": 1069,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Internal implementation of get (without locking).",
          "decorators": []
        },
        {
          "name": "contains",
          "line": 1092,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Check if a key exists in any cache level.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key exists in any cache level",
          "decorators": []
        },
        {
          "name": "_contains",
          "line": 1104,
          "args": [
            "self"
          ],
          "docstring": "Get the contains method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__contains",
          "line": 1108,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of contains (without locking).",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 1117,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete a key from all cache levels.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key was deleted from any level",
          "decorators": []
        },
        {
          "name": "_delete",
          "line": 1129,
          "args": [
            "self"
          ],
          "docstring": "Get the delete method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__delete",
          "line": 1133,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of delete (without locking).",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 1142,
          "args": [
            "self"
          ],
          "docstring": "Clear all entries from both cache levels.",
          "decorators": []
        },
        {
          "name": "_clear",
          "line": 1147,
          "args": [
            "self"
          ],
          "docstring": "Get the clear method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__clear",
          "line": 1151,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of clear (without locking).",
          "decorators": []
        },
        {
          "name": "get_stats",
          "line": 1157,
          "args": [
            "self"
          ],
          "docstring": "Get combined cache statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of statistics for both cache levels",
          "decorators": []
        },
        {
          "name": "_get_stats",
          "line": 1166,
          "args": [
            "self"
          ],
          "docstring": "Get the get_stats method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_stats",
          "line": 1170,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of get_stats (without locking).",
          "decorators": []
        },
        {
          "name": "get_keys",
          "line": 1200,
          "args": [
            "self"
          ],
          "docstring": "Get all keys from both cache levels.\n\nReturns:\n    List[K]: List of all cache keys from both levels",
          "decorators": []
        },
        {
          "name": "_get_keys",
          "line": 1209,
          "args": [
            "self"
          ],
          "docstring": "Get the get_keys method with lock if needed.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__get_keys",
          "line": 1213,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of get_keys (without locking).",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 1231,
          "args": [
            "self",
            "cache",
            "ttl",
            "key_func"
          ],
          "docstring": "Initialize the cache decorator.\n\nArgs:\n    cache: Cache instance to use (creates a new one if None)\n    ttl: Time-to-live for cached results\n    key_func: Function to generate cache keys from function arguments",
          "decorators": []
        },
        {
          "name": "_default_key_func",
          "line": 1254,
          "args": [
            "self",
            "func",
            "args",
            "kwargs"
          ],
          "docstring": "Default function to generate cache keys from function arguments.\n\nArgs:\n    func: The function being called\n    args: Positional arguments\n    kwargs: Keyword arguments\n    \nReturns:\n    str: Cache key",
          "decorators": []
        },
        {
          "name": "__call__",
          "line": 1279,
          "args": [
            "self",
            "func"
          ],
          "docstring": "Make this class callable as a decorator.\n\nArgs:\n    func: Function to decorate\n    \nReturns:\n    Callable: Decorated function",
          "decorators": []
        },
        {
          "name": "wrapper",
          "line": 290,
          "args": [],
          "docstring": "",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "_auto_persist",
          "line": 807,
          "args": [],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "wrapper",
          "line": 1289,
          "args": [],
          "docstring": "",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "clear_cache",
          "line": 1309,
          "args": [],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CacheError",
          "line": 44,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when cache operations fail.",
          "methods": []
        },
        {
          "name": "CacheFullError",
          "line": 49,
          "bases": [
            "CacheError"
          ],
          "docstring": "Exception raised when the cache is full and cannot accept more entries.",
          "methods": []
        },
        {
          "name": "CacheEntryNotFoundError",
          "line": 54,
          "bases": [
            "CacheError"
          ],
          "docstring": "Exception raised when a cache entry is not found.",
          "methods": []
        },
        {
          "name": "CacheEntry",
          "line": 59,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Represents a single entry in the cache with metadata.",
          "methods": [
            {
              "name": "__init__",
              "line": 62,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Initialize a cache entry.\n\nArgs:\n    key: The cache key\n    value: The cached value\n    ttl: Time-to-live in seconds (None for no expiration)"
            },
            {
              "name": "_estimate_size",
              "line": 85,
              "args": [
                "self",
                "obj"
              ],
              "docstring": "Estimate the memory size of an object in bytes.\n\nArgs:\n    obj: The object to measure\n    \nReturns:\n    int: Estimated size in bytes"
            },
            {
              "name": "access",
              "line": 129,
              "args": [
                "self"
              ],
              "docstring": "Record an access to this cache entry."
            },
            {
              "name": "is_expired",
              "line": 134,
              "args": [
                "self"
              ],
              "docstring": "Check if this cache entry has expired.\n\nReturns:\n    bool: True if expired, False otherwise"
            },
            {
              "name": "get_age",
              "line": 144,
              "args": [
                "self"
              ],
              "docstring": "Get the age of this cache entry in seconds.\n\nReturns:\n    float: Age in seconds"
            },
            {
              "name": "get_idle_time",
              "line": 152,
              "args": [
                "self"
              ],
              "docstring": "Get time since last access in seconds.\n\nReturns:\n    float: Idle time in seconds"
            },
            {
              "name": "to_dict",
              "line": 160,
              "args": [
                "self"
              ],
              "docstring": "Convert cache entry to a dictionary for serialization.\n\nReturns:\n    Dict[str, Any]: Dictionary representation"
            },
            {
              "name": "from_dict",
              "line": 177,
              "args": [
                "cls",
                "data"
              ],
              "docstring": "Create a cache entry from a dictionary.\n\nArgs:\n    data: Dictionary representation of cache entry\n    \nReturns:\n    CacheEntry: Reconstructed cache entry"
            }
          ]
        },
        {
          "name": "EvictionPolicy",
          "line": 202,
          "bases": [],
          "docstring": "Enumeration of cache eviction policies.",
          "methods": [
            {
              "name": "all_policies",
              "line": 218,
              "args": [],
              "docstring": "Return all available eviction policies.\n\nReturns:\n    List[str]: List of all policy names"
            }
          ]
        },
        {
          "name": "Cache",
          "line": 232,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Generic cache implementation with configurable eviction policies.\n\nThis class provides a generic in-memory cache with support for different\neviction policies, TTL-based expiration, and size limits.",
          "methods": [
            {
              "name": "__init__",
              "line": 239,
              "args": [
                "self",
                "max_size",
                "max_memory_mb",
                "default_ttl",
                "eviction_policy",
                "thread_safe"
              ],
              "docstring": "Initialize the cache.\n\nArgs:\n    max_size: Maximum number of entries (0 for unlimited)\n    max_memory_mb: Maximum memory usage in MB (None for unlimited)\n    default_ttl: Default time-to-live in seconds (None for no expiration)\n    eviction_policy: Eviction policy to use (LRU, LFU, FIFO, TTL)\n    thread_safe: Whether to make this cache thread-safe"
            },
            {
              "name": "_with_lock",
              "line": 280,
              "args": [
                "self",
                "func"
              ],
              "docstring": "Decorator to execute a function with the cache lock if thread safety is enabled.\n\nArgs:\n    func: Function to wrap\n    \nReturns:\n    Callable: Wrapped function"
            },
            {
              "name": "set",
              "line": 301,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Set a value in the cache.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (None uses default_ttl)\n    \nRaises:\n    CacheFullError: If cache is full and no items can be evicted"
            },
            {
              "name": "_set",
              "line": 315,
              "args": [
                "self"
              ],
              "docstring": "Get the set method with lock if needed."
            },
            {
              "name": "__set",
              "line": 319,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Internal implementation of set (without locking)."
            },
            {
              "name": "get",
              "line": 363,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get a value from the cache.\n\nArgs:\n    key: Cache key\n    default: Default value if key is not found\n    \nReturns:\n    Optional[V]: The cached value or default"
            },
            {
              "name": "_get",
              "line": 376,
              "args": [
                "self"
              ],
              "docstring": "Get the get method with lock if needed."
            },
            {
              "name": "__get",
              "line": 380,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Internal implementation of get (without locking)."
            },
            {
              "name": "contains",
              "line": 405,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Check if a key exists in the cache.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key exists and is not expired"
            },
            {
              "name": "_contains",
              "line": 417,
              "args": [
                "self"
              ],
              "docstring": "Get the contains method with lock if needed."
            },
            {
              "name": "__contains",
              "line": 421,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of contains (without locking)."
            },
            {
              "name": "delete",
              "line": 440,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete a key from the cache.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key was deleted, False if not found"
            },
            {
              "name": "_delete",
              "line": 452,
              "args": [
                "self"
              ],
              "docstring": "Get the delete method with lock if needed."
            },
            {
              "name": "__delete",
              "line": 456,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of delete (without locking)."
            },
            {
              "name": "clear",
              "line": 465,
              "args": [
                "self"
              ],
              "docstring": "Clear all entries from the cache."
            },
            {
              "name": "_clear",
              "line": 470,
              "args": [
                "self"
              ],
              "docstring": "Get the clear method with lock if needed."
            },
            {
              "name": "__clear",
              "line": 474,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of clear (without locking)."
            },
            {
              "name": "get_stats",
              "line": 480,
              "args": [
                "self"
              ],
              "docstring": "Get cache statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of statistics"
            },
            {
              "name": "_get_stats",
              "line": 489,
              "args": [
                "self"
              ],
              "docstring": "Get the get_stats method with lock if needed."
            },
            {
              "name": "__get_stats",
              "line": 493,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of get_stats (without locking)."
            },
            {
              "name": "get_keys",
              "line": 513,
              "args": [
                "self"
              ],
              "docstring": "Get all keys in the cache.\n\nReturns:\n    List[K]: List of all cache keys (excluding expired entries)"
            },
            {
              "name": "_get_keys",
              "line": 522,
              "args": [
                "self"
              ],
              "docstring": "Get the get_keys method with lock if needed."
            },
            {
              "name": "__get_keys",
              "line": 526,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of get_keys (without locking)."
            },
            {
              "name": "get_entry_metadata",
              "line": 533,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Get metadata for a specific cache entry.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    Dict[str, Any]: Dictionary of metadata\n    \nRaises:\n    CacheEntryNotFoundError: If entry not found or expired"
            },
            {
              "name": "_get_entry_metadata",
              "line": 548,
              "args": [
                "self"
              ],
              "docstring": "Get the get_entry_metadata method with lock if needed."
            },
            {
              "name": "__get_entry_metadata",
              "line": 552,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of get_entry_metadata (without locking)."
            },
            {
              "name": "_clean_expired_entries",
              "line": 579,
              "args": [
                "self"
              ],
              "docstring": "Remove all expired entries from the cache.\n\nReturns:\n    int: Number of entries removed"
            },
            {
              "name": "_evict_entries",
              "line": 608,
              "args": [
                "self",
                "count"
              ],
              "docstring": "Evict a specified number of entries based on the eviction policy.\n\nArgs:\n    count: Number of entries to evict\n    \nReturns:\n    int: Number of entries actually evicted"
            },
            {
              "name": "_evict_memory",
              "line": 641,
              "args": [
                "self",
                "bytes_needed"
              ],
              "docstring": "Evict entries to free the specified amount of memory.\n\nArgs:\n    bytes_needed: Number of bytes to free\n    \nReturns:\n    int: Number of bytes actually freed"
            },
            {
              "name": "_select_eviction_candidate",
              "line": 677,
              "args": [
                "self"
              ],
              "docstring": "Select a candidate for eviction based on the configured policy.\n\nReturns:\n    Optional[K]: Key of the entry to evict, or None if no suitable candidate"
            }
          ]
        },
        {
          "name": "PersistentCache",
          "line": 735,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Cache implementation with persistence to disk.\n\nThis class extends the base Cache with the ability to persist the cache\ncontents to disk and load from disk on initialization.",
          "methods": [
            {
              "name": "__init__",
              "line": 742,
              "args": [
                "self",
                "cache_dir",
                "max_size",
                "max_memory_mb",
                "default_ttl",
                "eviction_policy",
                "thread_safe",
                "persist_on_shutdown",
                "auto_persist_interval"
              ],
              "docstring": "Initialize the persistent cache.\n\nArgs:\n    cache_dir: Directory for cache persistence (None for temp dir)\n    max_size: Maximum number of entries (0 for unlimited)\n    max_memory_mb: Maximum memory usage in MB (None for unlimited)\n    default_ttl: Default time-to-live in seconds (None for no expiration)\n    eviction_policy: Eviction policy to use (LRU, LFU, FIFO, TTL)\n    thread_safe: Whether to make this cache thread-safe\n    persist_on_shutdown: Whether to automatically persist on shutdown\n    auto_persist_interval: Interval in seconds for auto-persist (None to disable)"
            },
            {
              "name": "_schedule_auto_persist",
              "line": 799,
              "args": [
                "self"
              ],
              "docstring": "Schedule the next auto-persist operation."
            },
            {
              "name": "persist",
              "line": 820,
              "args": [
                "self"
              ],
              "docstring": "Persist the cache contents to disk."
            },
            {
              "name": "_persist",
              "line": 825,
              "args": [
                "self"
              ],
              "docstring": "Get the persist method with lock if needed."
            },
            {
              "name": "__persist",
              "line": 829,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of persist (without locking)."
            },
            {
              "name": "_load_cache",
              "line": 879,
              "args": [
                "self"
              ],
              "docstring": "Load cache contents from disk if available."
            },
            {
              "name": "clear",
              "line": 931,
              "args": [
                "self"
              ],
              "docstring": "Clear all entries from the cache and remove cache file."
            },
            {
              "name": "_clear_and_remove",
              "line": 936,
              "args": [
                "self"
              ],
              "docstring": "Get the clear_and_remove method with lock if needed."
            },
            {
              "name": "__clear_and_remove",
              "line": 940,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of clear_and_remove (without locking)."
            },
            {
              "name": "__del__",
              "line": 954,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources when object is garbage collected."
            }
          ]
        },
        {
          "name": "TieredCache",
          "line": 968,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Multi-level cache implementation with tiered storage.\n\nThis class implements a tiered cache with different levels (typically\nmemory and disk) to balance between speed and capacity.",
          "methods": [
            {
              "name": "__init__",
              "line": 975,
              "args": [
                "self",
                "max_size",
                "max_memory_mb",
                "default_ttl",
                "eviction_policy",
                "thread_safe",
                "disk_cache_dir",
                "disk_cache_size_mb",
                "promote_on_access"
              ],
              "docstring": "Initialize the tiered cache.\n\nArgs:\n    max_size: Maximum number of entries in memory cache\n    max_memory_mb: Maximum memory usage in MB\n    default_ttl: Default time-to-live in seconds\n    eviction_policy: Eviction policy to use\n    thread_safe: Whether to make this cache thread-safe\n    disk_cache_dir: Directory for disk cache\n    disk_cache_size_mb: Maximum disk cache size in MB\n    promote_on_access: Whether to promote disk entries to memory on access"
            },
            {
              "name": "set",
              "line": 1023,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Set a value in the cache.\n\nThis will store in the memory cache first, and items evicted from\nmemory will cascade to disk cache.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (None uses default_ttl)"
            },
            {
              "name": "_set",
              "line": 1037,
              "args": [
                "self"
              ],
              "docstring": "Get the set method with lock if needed."
            },
            {
              "name": "__set",
              "line": 1041,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "docstring": "Internal implementation of set (without locking)."
            },
            {
              "name": "get",
              "line": 1050,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get a value from the cache.\n\nThis will check the memory cache first, then the disk cache.\n\nArgs:\n    key: Cache key\n    default: Default value if key is not found\n    \nReturns:\n    Optional[V]: The cached value or default"
            },
            {
              "name": "_get",
              "line": 1065,
              "args": [
                "self"
              ],
              "docstring": "Get the get method with lock if needed."
            },
            {
              "name": "__get",
              "line": 1069,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Internal implementation of get (without locking)."
            },
            {
              "name": "contains",
              "line": 1092,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Check if a key exists in any cache level.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key exists in any cache level"
            },
            {
              "name": "_contains",
              "line": 1104,
              "args": [
                "self"
              ],
              "docstring": "Get the contains method with lock if needed."
            },
            {
              "name": "__contains",
              "line": 1108,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of contains (without locking)."
            },
            {
              "name": "delete",
              "line": 1117,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete a key from all cache levels.\n\nArgs:\n    key: Cache key\n    \nReturns:\n    bool: True if the key was deleted from any level"
            },
            {
              "name": "_delete",
              "line": 1129,
              "args": [
                "self"
              ],
              "docstring": "Get the delete method with lock if needed."
            },
            {
              "name": "__delete",
              "line": 1133,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of delete (without locking)."
            },
            {
              "name": "clear",
              "line": 1142,
              "args": [
                "self"
              ],
              "docstring": "Clear all entries from both cache levels."
            },
            {
              "name": "_clear",
              "line": 1147,
              "args": [
                "self"
              ],
              "docstring": "Get the clear method with lock if needed."
            },
            {
              "name": "__clear",
              "line": 1151,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of clear (without locking)."
            },
            {
              "name": "get_stats",
              "line": 1157,
              "args": [
                "self"
              ],
              "docstring": "Get combined cache statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of statistics for both cache levels"
            },
            {
              "name": "_get_stats",
              "line": 1166,
              "args": [
                "self"
              ],
              "docstring": "Get the get_stats method with lock if needed."
            },
            {
              "name": "__get_stats",
              "line": 1170,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of get_stats (without locking)."
            },
            {
              "name": "get_keys",
              "line": 1200,
              "args": [
                "self"
              ],
              "docstring": "Get all keys from both cache levels.\n\nReturns:\n    List[K]: List of all cache keys from both levels"
            },
            {
              "name": "_get_keys",
              "line": 1209,
              "args": [
                "self"
              ],
              "docstring": "Get the get_keys method with lock if needed."
            },
            {
              "name": "__get_keys",
              "line": 1213,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of get_keys (without locking)."
            }
          ]
        },
        {
          "name": "CacheDecorator",
          "line": 1224,
          "bases": [],
          "docstring": "Decorator for caching function results.\n\nThis class provides a decorator that can be used to cache the results\nof function calls based on their arguments.",
          "methods": [
            {
              "name": "__init__",
              "line": 1231,
              "args": [
                "self",
                "cache",
                "ttl",
                "key_func"
              ],
              "docstring": "Initialize the cache decorator.\n\nArgs:\n    cache: Cache instance to use (creates a new one if None)\n    ttl: Time-to-live for cached results\n    key_func: Function to generate cache keys from function arguments"
            },
            {
              "name": "_default_key_func",
              "line": 1254,
              "args": [
                "self",
                "func",
                "args",
                "kwargs"
              ],
              "docstring": "Default function to generate cache keys from function arguments.\n\nArgs:\n    func: The function being called\n    args: Positional arguments\n    kwargs: Keyword arguments\n    \nReturns:\n    str: Cache key"
            },
            {
              "name": "__call__",
              "line": 1279,
              "args": [
                "self",
                "func"
              ],
              "docstring": "Make this class callable as a decorator.\n\nArgs:\n    func: Function to decorate\n    \nReturns:\n    Callable: Decorated function"
            }
          ]
        }
      ],
      "lines_of_code": 1127,
      "complexity_score": 174,
      "last_modified": "2025-10-04T21:52:33.133398",
      "checksum": "cee98820697dffd42972710b8462dc2b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/persistence/core.py": {
      "name": "orchestrator/persistence/core.py",
      "path": "orchestrator/persistence/core.py",
      "component_type": "orchestration",
      "description": "Core Persistence Module for Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "get_logger",
        "get_timestamp",
        "calculate_checksum",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "start_operation",
        "end_operation",
        "update_save",
        "update_load",
        "update_operation_time",
        "increment_errors",
        "increment_cache_hits",
        "increment_cache_misses",
        "get_average_save_time",
        "get_average_load_time",
        "get_cache_hit_ratio",
        "to_dict",
        "reset",
        "save",
        "load",
        "get",
        "set",
        "delete",
        "clear",
        "get_metrics",
        "StorageBackend",
        "CacheStrategy",
        "DeltaStrategy",
        "PersistenceError",
        "DataIntegrityError",
        "ThreadSafeContextWrapper",
        "PersistenceMetrics",
        "PersistenceBase"
      ],
      "imports": [
        "os",
        "time",
        "uuid",
        "hashlib",
        "logging",
        "threading",
        "datetime",
        "abc",
        "enum",
        "typing",
        "json"
      ],
      "functions": [
        {
          "name": "get_logger",
          "line": 26,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Create and configure a logger with appropriate settings.\n\nArgs:\n    name: Name for the logger\n    debug: Whether to enable debug level logging\n    \nReturns:\n    logging.Logger: Configured logger instance",
          "decorators": []
        },
        {
          "name": "get_timestamp",
          "line": 437,
          "args": [],
          "docstring": "Get current timestamp with millisecond precision.\n\nReturns:\n    float: Current timestamp",
          "decorators": []
        },
        {
          "name": "calculate_checksum",
          "line": 447,
          "args": [
            "data"
          ],
          "docstring": "Calculate a checksum for data integrity verification.\n\nArgs:\n    data: Data to calculate checksum for\n    \nReturns:\n    str: Hexadecimal checksum",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 126,
          "args": [
            "self",
            "context"
          ],
          "docstring": "Initialize the wrapper with a context object.\n\nArgs:\n    context: Context object to wrap",
          "decorators": []
        },
        {
          "name": "__enter__",
          "line": 138,
          "args": [
            "self"
          ],
          "docstring": "Enter context manager by acquiring lock.\n\nReturns:\n    Any: The wrapped context object",
          "decorators": []
        },
        {
          "name": "__exit__",
          "line": 148,
          "args": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "docstring": "Exit context manager by releasing lock.\n\nArgs:\n    exc_type: Exception type if raised\n    exc_val: Exception value if raised\n    exc_tb: Exception traceback if raised\n    \nReturns:\n    bool: Whether to suppress exception",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 171,
          "args": [
            "self"
          ],
          "docstring": "Initialize metrics with default values.",
          "decorators": []
        },
        {
          "name": "start_operation",
          "line": 194,
          "args": [
            "self"
          ],
          "docstring": "Start timing an operation.",
          "decorators": []
        },
        {
          "name": "end_operation",
          "line": 199,
          "args": [
            "self"
          ],
          "docstring": "End timing an operation and return duration.\n\nReturns:\n    float: Operation duration in seconds",
          "decorators": []
        },
        {
          "name": "update_save",
          "line": 219,
          "args": [
            "self",
            "data_size",
            "operation_time"
          ],
          "docstring": "Update metrics after a save operation.\n\nArgs:\n    data_size: Size of saved data in bytes\n    operation_time: Time taken for operation in seconds",
          "decorators": []
        },
        {
          "name": "update_load",
          "line": 235,
          "args": [
            "self",
            "data_size",
            "operation_time"
          ],
          "docstring": "Update metrics after a load operation.\n\nArgs:\n    data_size: Size of loaded data in bytes\n    operation_time: Time taken for operation in seconds",
          "decorators": []
        },
        {
          "name": "update_operation_time",
          "line": 251,
          "args": [
            "self",
            "operation_time"
          ],
          "docstring": "Update metrics for an arbitrary operation.\n\nArgs:\n    operation_time: Time taken for operation in seconds",
          "decorators": []
        },
        {
          "name": "increment_errors",
          "line": 260,
          "args": [
            "self"
          ],
          "docstring": "Increment error count.",
          "decorators": []
        },
        {
          "name": "increment_cache_hits",
          "line": 265,
          "args": [
            "self"
          ],
          "docstring": "Increment cache hit count.",
          "decorators": []
        },
        {
          "name": "increment_cache_misses",
          "line": 270,
          "args": [
            "self"
          ],
          "docstring": "Increment cache miss count.",
          "decorators": []
        },
        {
          "name": "get_average_save_time",
          "line": 275,
          "args": [
            "self"
          ],
          "docstring": "Calculate average save operation time.\n\nReturns:\n    float: Average save time in seconds",
          "decorators": []
        },
        {
          "name": "get_average_load_time",
          "line": 286,
          "args": [
            "self"
          ],
          "docstring": "Calculate average load operation time.\n\nReturns:\n    float: Average load time in seconds",
          "decorators": []
        },
        {
          "name": "get_cache_hit_ratio",
          "line": 297,
          "args": [
            "self"
          ],
          "docstring": "Calculate cache hit ratio.\n\nReturns:\n    float: Cache hit ratio (0.0-1.0)",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 309,
          "args": [
            "self"
          ],
          "docstring": "Convert metrics to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics",
          "decorators": []
        },
        {
          "name": "reset",
          "line": 332,
          "args": [
            "self"
          ],
          "docstring": "Reset all metrics to initial values.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 346,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to persistence storage.\n\nArgs:\n    data: Dictionary of data to save\n    \nReturns:\n    str: Operation ID for the save operation\n    \nRaises:\n    PersistenceError: If save operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "load",
          "line": 361,
          "args": [
            "self"
          ],
          "docstring": "Load data from persistence storage.\n\nReturns:\n    Dict[str, Any]: Loaded data\n    \nRaises:\n    PersistenceError: If load operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "get",
          "line": 373,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get a specific value from persistence storage.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key doesn't exist\n    \nReturns:\n    Any: The retrieved value or default\n    \nRaises:\n    PersistenceError: If get operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "set",
          "line": 389,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Set a specific value in persistence storage.\n\nArgs:\n    key: Key to set\n    value: Value to set\n    \nRaises:\n    PersistenceError: If set operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "delete",
          "line": 402,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete a specific value from persistence storage.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if key existed and was deleted, False otherwise\n    \nRaises:\n    PersistenceError: If delete operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "clear",
          "line": 417,
          "args": [
            "self"
          ],
          "docstring": "Clear all data from persistence storage.\n\nRaises:\n    PersistenceError: If clear operation fails",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "get_metrics",
          "line": 425,
          "args": [
            "self"
          ],
          "docstring": "Get performance and operation metrics.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StorageBackend",
          "line": 59,
          "bases": [
            "str",
            "Enum"
          ],
          "docstring": "Enumeration of available storage backends.",
          "methods": []
        },
        {
          "name": "CacheStrategy",
          "line": 78,
          "bases": [
            "str",
            "Enum"
          ],
          "docstring": "Enumeration of available cache strategies.",
          "methods": []
        },
        {
          "name": "DeltaStrategy",
          "line": 94,
          "bases": [
            "str",
            "Enum"
          ],
          "docstring": "Enumeration of available delta compression strategies.",
          "methods": []
        },
        {
          "name": "PersistenceError",
          "line": 113,
          "bases": [
            "Exception"
          ],
          "docstring": "Base exception for all persistence-related errors.",
          "methods": []
        },
        {
          "name": "DataIntegrityError",
          "line": 118,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when data integrity checks fail.",
          "methods": []
        },
        {
          "name": "ThreadSafeContextWrapper",
          "line": 123,
          "bases": [],
          "docstring": "Thread-safe context wrapper for ensuring consistent access to shared resources.",
          "methods": [
            {
              "name": "__init__",
              "line": 126,
              "args": [
                "self",
                "context"
              ],
              "docstring": "Initialize the wrapper with a context object.\n\nArgs:\n    context: Context object to wrap"
            },
            {
              "name": "__enter__",
              "line": 138,
              "args": [
                "self"
              ],
              "docstring": "Enter context manager by acquiring lock.\n\nReturns:\n    Any: The wrapped context object"
            },
            {
              "name": "__exit__",
              "line": 148,
              "args": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ],
              "docstring": "Exit context manager by releasing lock.\n\nArgs:\n    exc_type: Exception type if raised\n    exc_val: Exception value if raised\n    exc_tb: Exception traceback if raised\n    \nReturns:\n    bool: Whether to suppress exception"
            }
          ]
        },
        {
          "name": "PersistenceMetrics",
          "line": 164,
          "bases": [],
          "docstring": "Metrics tracking for persistence operations.\n\nThis class tracks various metrics related to persistence operations,\nsuch as operation counts, timing, and sizes.",
          "methods": [
            {
              "name": "__init__",
              "line": 171,
              "args": [
                "self"
              ],
              "docstring": "Initialize metrics with default values."
            },
            {
              "name": "start_operation",
              "line": 194,
              "args": [
                "self"
              ],
              "docstring": "Start timing an operation."
            },
            {
              "name": "end_operation",
              "line": 199,
              "args": [
                "self"
              ],
              "docstring": "End timing an operation and return duration.\n\nReturns:\n    float: Operation duration in seconds"
            },
            {
              "name": "update_save",
              "line": 219,
              "args": [
                "self",
                "data_size",
                "operation_time"
              ],
              "docstring": "Update metrics after a save operation.\n\nArgs:\n    data_size: Size of saved data in bytes\n    operation_time: Time taken for operation in seconds"
            },
            {
              "name": "update_load",
              "line": 235,
              "args": [
                "self",
                "data_size",
                "operation_time"
              ],
              "docstring": "Update metrics after a load operation.\n\nArgs:\n    data_size: Size of loaded data in bytes\n    operation_time: Time taken for operation in seconds"
            },
            {
              "name": "update_operation_time",
              "line": 251,
              "args": [
                "self",
                "operation_time"
              ],
              "docstring": "Update metrics for an arbitrary operation.\n\nArgs:\n    operation_time: Time taken for operation in seconds"
            },
            {
              "name": "increment_errors",
              "line": 260,
              "args": [
                "self"
              ],
              "docstring": "Increment error count."
            },
            {
              "name": "increment_cache_hits",
              "line": 265,
              "args": [
                "self"
              ],
              "docstring": "Increment cache hit count."
            },
            {
              "name": "increment_cache_misses",
              "line": 270,
              "args": [
                "self"
              ],
              "docstring": "Increment cache miss count."
            },
            {
              "name": "get_average_save_time",
              "line": 275,
              "args": [
                "self"
              ],
              "docstring": "Calculate average save operation time.\n\nReturns:\n    float: Average save time in seconds"
            },
            {
              "name": "get_average_load_time",
              "line": 286,
              "args": [
                "self"
              ],
              "docstring": "Calculate average load operation time.\n\nReturns:\n    float: Average load time in seconds"
            },
            {
              "name": "get_cache_hit_ratio",
              "line": 297,
              "args": [
                "self"
              ],
              "docstring": "Calculate cache hit ratio.\n\nReturns:\n    float: Cache hit ratio (0.0-1.0)"
            },
            {
              "name": "to_dict",
              "line": 309,
              "args": [
                "self"
              ],
              "docstring": "Convert metrics to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics"
            },
            {
              "name": "reset",
              "line": 332,
              "args": [
                "self"
              ],
              "docstring": "Reset all metrics to initial values."
            }
          ]
        },
        {
          "name": "PersistenceBase",
          "line": 338,
          "bases": [
            "ABC"
          ],
          "docstring": "Abstract base class for persistence implementations.\n\nThis class defines the interface that all persistence implementations\nmust adhere to, ensuring consistent behavior across different backends.",
          "methods": [
            {
              "name": "save",
              "line": 346,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to persistence storage.\n\nArgs:\n    data: Dictionary of data to save\n    \nReturns:\n    str: Operation ID for the save operation\n    \nRaises:\n    PersistenceError: If save operation fails"
            },
            {
              "name": "load",
              "line": 361,
              "args": [
                "self"
              ],
              "docstring": "Load data from persistence storage.\n\nReturns:\n    Dict[str, Any]: Loaded data\n    \nRaises:\n    PersistenceError: If load operation fails"
            },
            {
              "name": "get",
              "line": 373,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get a specific value from persistence storage.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key doesn't exist\n    \nReturns:\n    Any: The retrieved value or default\n    \nRaises:\n    PersistenceError: If get operation fails"
            },
            {
              "name": "set",
              "line": 389,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Set a specific value in persistence storage.\n\nArgs:\n    key: Key to set\n    value: Value to set\n    \nRaises:\n    PersistenceError: If set operation fails"
            },
            {
              "name": "delete",
              "line": 402,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete a specific value from persistence storage.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if key existed and was deleted, False otherwise\n    \nRaises:\n    PersistenceError: If delete operation fails"
            },
            {
              "name": "clear",
              "line": 417,
              "args": [
                "self"
              ],
              "docstring": "Clear all data from persistence storage.\n\nRaises:\n    PersistenceError: If clear operation fails"
            },
            {
              "name": "get_metrics",
              "line": 425,
              "args": [
                "self"
              ],
              "docstring": "Get performance and operation metrics.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics"
            }
          ]
        }
      ],
      "lines_of_code": 355,
      "complexity_score": 51,
      "last_modified": "2025-10-04T21:58:29.010985",
      "checksum": "61253b511e1f6c5005a5f1175a4bcafd",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/persistence/delta.py": {
      "name": "orchestrator/persistence/delta.py",
      "path": "orchestrator/persistence/delta.py",
      "component_type": "orchestration",
      "description": "Delta Compression Module for Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py"
      ],
      "exports": [
        "extract_keys_from_delta",
        "__init__",
        "__repr__",
        "to_dict",
        "from_dict",
        "__init__",
        "calculate_delta",
        "_dict_delta",
        "_binary_delta",
        "apply_delta",
        "create_delta_record",
        "merge_deltas",
        "get_compression_stats",
        "serialize_delta",
        "deserialize_delta",
        "__init__",
        "add_delta",
        "add_state",
        "get_state_at_index",
        "get_current_state",
        "get_delta_at_index",
        "clear_chain",
        "rebaseline",
        "_optimize_chain",
        "get_chain_metrics",
        "DeltaCompressionError",
        "DeltaRecord",
        "DeltaCompressor",
        "DeltaChain"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "gzip",
        "difflib",
        "hashlib",
        "logging",
        "functools",
        "datetime",
        "enum",
        "typing",
        "orchestrator.persistence.core",
        "numpy",
        "bsdiff4"
      ],
      "functions": [
        {
          "name": "extract_keys_from_delta",
          "line": 775,
          "args": [
            "delta"
          ],
          "docstring": "Extract all affected keys from a delta.\n\nArgs:\n    delta: Delta record to extract keys from\n    \nReturns:\n    Set[str]: Set of all keys affected by this delta",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 66,
          "args": [
            "self",
            "timestamp",
            "changes",
            "removed_keys",
            "metadata",
            "compression_ratio",
            "size_bytes",
            "checksum"
          ],
          "docstring": "Initialize a delta record.\n\nArgs:\n    timestamp: When the delta was created\n    changes: Key-value changes\n    removed_keys: Keys that were removed\n    metadata: Additional metadata\n    compression_ratio: Compression ratio achieved\n    size_bytes: Size in bytes after compression\n    checksum: Integrity checksum",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 96,
          "args": [
            "self"
          ],
          "docstring": "String representation of delta record.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 102,
          "args": [
            "self"
          ],
          "docstring": "Convert to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary representation",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 119,
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create from dictionary representation.\n\nArgs:\n    data: Dictionary representation\n    \nReturns:\n    DeltaRecord: Reconstructed delta record",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "__init__",
          "line": 146,
          "args": [
            "self",
            "strategy",
            "enable_compression",
            "compression_level"
          ],
          "docstring": "Initialize the delta compressor.\n\nArgs:\n    strategy: Delta compression strategy to use\n    enable_compression: Whether to enable compression\n    compression_level: Compression level (1-9, higher is more compression)",
          "decorators": []
        },
        {
          "name": "calculate_delta",
          "line": 175,
          "args": [
            "self",
            "old_state",
            "new_state",
            "include_unchanged"
          ],
          "docstring": "Calculate delta between two states.\n\nArgs:\n    old_state: Previous state\n    new_state: Current state\n    include_unchanged: Whether to include unchanged values\n    \nReturns:\n    Dict[str, Any]: Delta information including changes and removals",
          "decorators": []
        },
        {
          "name": "_dict_delta",
          "line": 234,
          "args": [
            "self",
            "old_state",
            "new_state",
            "include_unchanged"
          ],
          "docstring": "Calculate dictionary-based delta.\n\nArgs:\n    old_state: Previous state dictionary\n    new_state: Current state dictionary\n    include_unchanged: Whether to include unchanged values\n    \nReturns:\n    Dict[str, Any]: Delta information",
          "decorators": []
        },
        {
          "name": "_binary_delta",
          "line": 300,
          "args": [
            "self",
            "old_state",
            "new_state"
          ],
          "docstring": "Calculate binary delta using bsdiff if available.\n\nArgs:\n    old_state: Previous state\n    new_state: Current state\n    \nReturns:\n    Dict[str, Any]: Delta information",
          "decorators": []
        },
        {
          "name": "apply_delta",
          "line": 340,
          "args": [
            "self",
            "base_state",
            "delta_info"
          ],
          "docstring": "Apply delta to a base state to produce new state.\n\nArgs:\n    base_state: Base state to apply delta to\n    delta_info: Delta information from calculate_delta\n    \nReturns:\n    Dict[str, Any]: Updated state\n    \nRaises:\n    DeltaCompressionError: If delta application fails",
          "decorators": []
        },
        {
          "name": "create_delta_record",
          "line": 386,
          "args": [
            "self",
            "changes",
            "removed_keys",
            "timestamp"
          ],
          "docstring": "Create compressed delta record from changes.\n\nArgs:\n    changes: Dictionary of changes\n    removed_keys: List of removed keys\n    timestamp: Delta creation timestamp (default: current time)\n    \nReturns:\n    DeltaRecord: Compressed delta record",
          "decorators": []
        },
        {
          "name": "merge_deltas",
          "line": 456,
          "args": [
            "self",
            "deltas"
          ],
          "docstring": "Merge multiple deltas into a single delta.\n\nArgs:\n    deltas: List of deltas to merge\n    \nReturns:\n    Optional[DeltaRecord]: Merged delta or None if input is empty",
          "decorators": []
        },
        {
          "name": "get_compression_stats",
          "line": 498,
          "args": [
            "self"
          ],
          "docstring": "Get compression statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of compression statistics",
          "decorators": []
        },
        {
          "name": "serialize_delta",
          "line": 506,
          "args": [
            "self",
            "delta"
          ],
          "docstring": "Serialize delta record to bytes for storage.\n\nArgs:\n    delta: Delta record to serialize\n    \nReturns:\n    bytes: Serialized delta data",
          "decorators": []
        },
        {
          "name": "deserialize_delta",
          "line": 527,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Deserialize delta record from bytes.\n\nArgs:\n    data: Serialized delta data\n    \nReturns:\n    DeltaRecord: Deserialized delta record",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 557,
          "args": [
            "self",
            "delta_strategy",
            "max_chain_length",
            "enable_rebase"
          ],
          "docstring": "Initialize the delta chain manager.\n\nArgs:\n    delta_strategy: Delta compression strategy\n    max_chain_length: Maximum chain length before optimization\n    enable_rebase: Whether to enable automatic rebaseline",
          "decorators": []
        },
        {
          "name": "add_delta",
          "line": 587,
          "args": [
            "self",
            "delta"
          ],
          "docstring": "Add a delta to the chain.\n\nArgs:\n    delta: Delta record to add",
          "decorators": []
        },
        {
          "name": "add_state",
          "line": 605,
          "args": [
            "self",
            "state",
            "timestamp"
          ],
          "docstring": "Add a new state to the chain by calculating delta from previous state.\n\nArgs:\n    state: New state to add\n    timestamp: Timestamp for the delta (default: current time)\n    \nReturns:\n    DeltaRecord: Created delta record",
          "decorators": []
        },
        {
          "name": "get_state_at_index",
          "line": 655,
          "args": [
            "self",
            "index"
          ],
          "docstring": "Get the state at a specific index in the chain.\n\nArgs:\n    index: Index in the chain (0 is base state)\n    \nReturns:\n    Dict[str, Any]: State at the specified index\n    \nRaises:\n    IndexError: If index is out of range",
          "decorators": []
        },
        {
          "name": "get_current_state",
          "line": 683,
          "args": [
            "self"
          ],
          "docstring": "Get the current (latest) state in the chain.\n\nReturns:\n    Dict[str, Any]: Current state",
          "decorators": []
        },
        {
          "name": "get_delta_at_index",
          "line": 691,
          "args": [
            "self",
            "index"
          ],
          "docstring": "Get a delta record at a specific index in the chain.\n\nArgs:\n    index: Index in the chain\n    \nReturns:\n    Optional[DeltaRecord]: Delta record or None if index out of range",
          "decorators": []
        },
        {
          "name": "clear_chain",
          "line": 705,
          "args": [
            "self"
          ],
          "docstring": "Clear the delta chain.",
          "decorators": []
        },
        {
          "name": "rebaseline",
          "line": 719,
          "args": [
            "self"
          ],
          "docstring": "Rebaseline the chain by setting current state as new base state.",
          "decorators": []
        },
        {
          "name": "_optimize_chain",
          "line": 739,
          "args": [
            "self"
          ],
          "docstring": "Optimize the delta chain by merging deltas.",
          "decorators": []
        },
        {
          "name": "get_chain_metrics",
          "line": 764,
          "args": [
            "self"
          ],
          "docstring": "Get metrics about the delta chain.\n\nReturns:\n    Dict[str, Any]: Dictionary of chain metrics",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DeltaCompressionError",
          "line": 54,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when delta compression operations fail.",
          "methods": []
        },
        {
          "name": "DeltaRecord",
          "line": 59,
          "bases": [],
          "docstring": "Represents a delta record with changes and metadata.\n\nDelta records store the changes between two states, along with\nmetadata about the delta operation.",
          "methods": [
            {
              "name": "__init__",
              "line": 66,
              "args": [
                "self",
                "timestamp",
                "changes",
                "removed_keys",
                "metadata",
                "compression_ratio",
                "size_bytes",
                "checksum"
              ],
              "docstring": "Initialize a delta record.\n\nArgs:\n    timestamp: When the delta was created\n    changes: Key-value changes\n    removed_keys: Keys that were removed\n    metadata: Additional metadata\n    compression_ratio: Compression ratio achieved\n    size_bytes: Size in bytes after compression\n    checksum: Integrity checksum"
            },
            {
              "name": "__repr__",
              "line": 96,
              "args": [
                "self"
              ],
              "docstring": "String representation of delta record."
            },
            {
              "name": "to_dict",
              "line": 102,
              "args": [
                "self"
              ],
              "docstring": "Convert to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary representation"
            },
            {
              "name": "from_dict",
              "line": 119,
              "args": [
                "cls",
                "data"
              ],
              "docstring": "Create from dictionary representation.\n\nArgs:\n    data: Dictionary representation\n    \nReturns:\n    DeltaRecord: Reconstructed delta record"
            }
          ]
        },
        {
          "name": "DeltaCompressor",
          "line": 139,
          "bases": [],
          "docstring": "Delta compression engine for efficient state difference tracking.\n\nThis class handles the detection, compression, and management of \nincremental changes between data states.",
          "methods": [
            {
              "name": "__init__",
              "line": 146,
              "args": [
                "self",
                "strategy",
                "enable_compression",
                "compression_level"
              ],
              "docstring": "Initialize the delta compressor.\n\nArgs:\n    strategy: Delta compression strategy to use\n    enable_compression: Whether to enable compression\n    compression_level: Compression level (1-9, higher is more compression)"
            },
            {
              "name": "calculate_delta",
              "line": 175,
              "args": [
                "self",
                "old_state",
                "new_state",
                "include_unchanged"
              ],
              "docstring": "Calculate delta between two states.\n\nArgs:\n    old_state: Previous state\n    new_state: Current state\n    include_unchanged: Whether to include unchanged values\n    \nReturns:\n    Dict[str, Any]: Delta information including changes and removals"
            },
            {
              "name": "_dict_delta",
              "line": 234,
              "args": [
                "self",
                "old_state",
                "new_state",
                "include_unchanged"
              ],
              "docstring": "Calculate dictionary-based delta.\n\nArgs:\n    old_state: Previous state dictionary\n    new_state: Current state dictionary\n    include_unchanged: Whether to include unchanged values\n    \nReturns:\n    Dict[str, Any]: Delta information"
            },
            {
              "name": "_binary_delta",
              "line": 300,
              "args": [
                "self",
                "old_state",
                "new_state"
              ],
              "docstring": "Calculate binary delta using bsdiff if available.\n\nArgs:\n    old_state: Previous state\n    new_state: Current state\n    \nReturns:\n    Dict[str, Any]: Delta information"
            },
            {
              "name": "apply_delta",
              "line": 340,
              "args": [
                "self",
                "base_state",
                "delta_info"
              ],
              "docstring": "Apply delta to a base state to produce new state.\n\nArgs:\n    base_state: Base state to apply delta to\n    delta_info: Delta information from calculate_delta\n    \nReturns:\n    Dict[str, Any]: Updated state\n    \nRaises:\n    DeltaCompressionError: If delta application fails"
            },
            {
              "name": "create_delta_record",
              "line": 386,
              "args": [
                "self",
                "changes",
                "removed_keys",
                "timestamp"
              ],
              "docstring": "Create compressed delta record from changes.\n\nArgs:\n    changes: Dictionary of changes\n    removed_keys: List of removed keys\n    timestamp: Delta creation timestamp (default: current time)\n    \nReturns:\n    DeltaRecord: Compressed delta record"
            },
            {
              "name": "merge_deltas",
              "line": 456,
              "args": [
                "self",
                "deltas"
              ],
              "docstring": "Merge multiple deltas into a single delta.\n\nArgs:\n    deltas: List of deltas to merge\n    \nReturns:\n    Optional[DeltaRecord]: Merged delta or None if input is empty"
            },
            {
              "name": "get_compression_stats",
              "line": 498,
              "args": [
                "self"
              ],
              "docstring": "Get compression statistics.\n\nReturns:\n    Dict[str, Any]: Dictionary of compression statistics"
            },
            {
              "name": "serialize_delta",
              "line": 506,
              "args": [
                "self",
                "delta"
              ],
              "docstring": "Serialize delta record to bytes for storage.\n\nArgs:\n    delta: Delta record to serialize\n    \nReturns:\n    bytes: Serialized delta data"
            },
            {
              "name": "deserialize_delta",
              "line": 527,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Deserialize delta record from bytes.\n\nArgs:\n    data: Serialized delta data\n    \nReturns:\n    DeltaRecord: Deserialized delta record"
            }
          ]
        },
        {
          "name": "DeltaChain",
          "line": 550,
          "bases": [],
          "docstring": "Manages chains of delta records for efficient storage and retrieval.\n\nThis class handles sequences of delta records, including optimization,\nrebaseline, and state reconstruction operations.",
          "methods": [
            {
              "name": "__init__",
              "line": 557,
              "args": [
                "self",
                "delta_strategy",
                "max_chain_length",
                "enable_rebase"
              ],
              "docstring": "Initialize the delta chain manager.\n\nArgs:\n    delta_strategy: Delta compression strategy\n    max_chain_length: Maximum chain length before optimization\n    enable_rebase: Whether to enable automatic rebaseline"
            },
            {
              "name": "add_delta",
              "line": 587,
              "args": [
                "self",
                "delta"
              ],
              "docstring": "Add a delta to the chain.\n\nArgs:\n    delta: Delta record to add"
            },
            {
              "name": "add_state",
              "line": 605,
              "args": [
                "self",
                "state",
                "timestamp"
              ],
              "docstring": "Add a new state to the chain by calculating delta from previous state.\n\nArgs:\n    state: New state to add\n    timestamp: Timestamp for the delta (default: current time)\n    \nReturns:\n    DeltaRecord: Created delta record"
            },
            {
              "name": "get_state_at_index",
              "line": 655,
              "args": [
                "self",
                "index"
              ],
              "docstring": "Get the state at a specific index in the chain.\n\nArgs:\n    index: Index in the chain (0 is base state)\n    \nReturns:\n    Dict[str, Any]: State at the specified index\n    \nRaises:\n    IndexError: If index is out of range"
            },
            {
              "name": "get_current_state",
              "line": 683,
              "args": [
                "self"
              ],
              "docstring": "Get the current (latest) state in the chain.\n\nReturns:\n    Dict[str, Any]: Current state"
            },
            {
              "name": "get_delta_at_index",
              "line": 691,
              "args": [
                "self",
                "index"
              ],
              "docstring": "Get a delta record at a specific index in the chain.\n\nArgs:\n    index: Index in the chain\n    \nReturns:\n    Optional[DeltaRecord]: Delta record or None if index out of range"
            },
            {
              "name": "clear_chain",
              "line": 705,
              "args": [
                "self"
              ],
              "docstring": "Clear the delta chain."
            },
            {
              "name": "rebaseline",
              "line": 719,
              "args": [
                "self"
              ],
              "docstring": "Rebaseline the chain by setting current state as new base state."
            },
            {
              "name": "_optimize_chain",
              "line": 739,
              "args": [
                "self"
              ],
              "docstring": "Optimize the delta chain by merging deltas."
            },
            {
              "name": "get_chain_metrics",
              "line": 764,
              "args": [
                "self"
              ],
              "docstring": "Get metrics about the delta chain.\n\nReturns:\n    Dict[str, Any]: Dictionary of chain metrics"
            }
          ]
        }
      ],
      "lines_of_code": 635,
      "complexity_score": 78,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "e6ba96f46b3d9d8a054ab32d594a1d22",
      "framework_role": "persistence_system",
      "stability": "stable"
    },
    "orchestrator/persistence/enhanced.py": {
      "name": "orchestrator/persistence/enhanced.py",
      "path": "orchestrator/persistence/enhanced.py",
      "component_type": "orchestration",
      "description": "Enhanced Persistence Module for Framework0.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py"
      ],
      "exports": [
        "create_enhanced_persistence",
        "create_cached_persistence",
        "__init__",
        "_with_lock",
        "_schedule_auto_snapshot",
        "_has_changes_since_last_snapshot",
        "_load_current_state",
        "save",
        "_save",
        "load",
        "_load",
        "get",
        "_get",
        "set",
        "_set",
        "delete",
        "_delete",
        "clear",
        "_clear",
        "create_snapshot",
        "_create_snapshot",
        "create_delta_snapshot",
        "_create_delta_snapshot",
        "restore_snapshot",
        "_restore_snapshot",
        "restore_snapshot_by_tag",
        "_restore_snapshot_by_tag",
        "list_snapshots",
        "get_snapshot_data",
        "compare_snapshots",
        "get_metrics",
        "export_data",
        "_export_data",
        "import_data",
        "_import_data",
        "cleanup",
        "__del__",
        "__init__",
        "save",
        "load",
        "get",
        "set",
        "delete",
        "clear",
        "__getattr__",
        "wrapper",
        "_auto_snapshot",
        "EnhancedPersistenceError",
        "EnhancedPersistenceV2",
        "CachedPersistenceDecorator"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "uuid",
        "shutil",
        "hashlib",
        "logging",
        "tempfile",
        "threading",
        "functools",
        "datetime",
        "pathlib",
        "typing",
        "orchestrator.persistence.core",
        "orchestrator.persistence.delta",
        "orchestrator.persistence.snapshot",
        "orchestrator.persistence.cache",
        "numpy"
      ],
      "functions": [
        {
          "name": "create_enhanced_persistence",
          "line": 1096,
          "args": [
            "base_path",
            "storage_backend",
            "cache_strategy",
            "delta_strategy",
            "max_snapshots",
            "enable_compression",
            "auto_snapshot_interval",
            "thread_safe"
          ],
          "docstring": "Create an enhanced persistence instance with the specified configuration.\n\nArgs:\n    base_path: Base directory for persistence storage\n    storage_backend: Storage backend to use\n    cache_strategy: Cache strategy to use\n    delta_strategy: Delta compression strategy to use\n    max_snapshots: Maximum number of snapshots to keep\n    enable_compression: Whether to enable compression\n    auto_snapshot_interval: Interval for auto snapshots\n    thread_safe: Whether to make operations thread-safe\n    \nReturns:\n    EnhancedPersistenceV2: Configured persistence instance",
          "decorators": []
        },
        {
          "name": "create_cached_persistence",
          "line": 1133,
          "args": [
            "persistence_instance",
            "ttl"
          ],
          "docstring": "Create a cached decorator around a persistence instance.\n\nArgs:\n    persistence_instance: Base persistence instance\n    ttl: Cache time-to-live in seconds\n    \nReturns:\n    CachedPersistenceDecorator: Cached persistence decorator",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 66,
          "args": [
            "self",
            "base_path",
            "storage_backend",
            "cache_strategy",
            "delta_strategy",
            "max_snapshots",
            "enable_compression",
            "auto_snapshot_interval",
            "thread_safe"
          ],
          "docstring": "Initialize the enhanced persistence system.\n\nArgs:\n    base_path: Base directory for persistence storage\n    storage_backend: Storage backend to use\n    cache_strategy: Cache strategy to use\n    delta_strategy: Delta compression strategy to use\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)\n    enable_compression: Whether to enable data compression\n    auto_snapshot_interval: Interval in seconds for auto-snapshots\n    thread_safe: Whether to make operations thread-safe",
          "decorators": []
        },
        {
          "name": "_with_lock",
          "line": 158,
          "args": [
            "self",
            "func"
          ],
          "docstring": "Decorator to execute a function with the lock if thread safety is enabled.\n\nArgs:\n    func: Function to wrap\n    \nReturns:\n    Callable: Wrapped function",
          "decorators": []
        },
        {
          "name": "_schedule_auto_snapshot",
          "line": 179,
          "args": [
            "self"
          ],
          "docstring": "Schedule the next auto-snapshot operation.",
          "decorators": []
        },
        {
          "name": "_has_changes_since_last_snapshot",
          "line": 202,
          "args": [
            "self"
          ],
          "docstring": "Check if data has changed since the last snapshot.\n\nReturns:\n    bool: True if changes detected, False otherwise",
          "decorators": []
        },
        {
          "name": "_load_current_state",
          "line": 224,
          "args": [
            "self"
          ],
          "docstring": "Load the current state from the most recent snapshot if available.",
          "decorators": []
        },
        {
          "name": "save",
          "line": 247,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data to persistence storage.\n\nArgs:\n    data: Dictionary of data to save\n    \nReturns:\n    str: Operation ID for the save operation\n    \nRaises:\n    EnhancedPersistenceError: If save operation fails",
          "decorators": []
        },
        {
          "name": "_save",
          "line": 261,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Internal implementation of save (without lock).",
          "decorators": []
        },
        {
          "name": "load",
          "line": 298,
          "args": [
            "self"
          ],
          "docstring": "Load data from persistence storage.\n\nReturns:\n    Dict[str, Any]: Loaded data\n    \nRaises:\n    EnhancedPersistenceError: If load operation fails",
          "decorators": []
        },
        {
          "name": "_load",
          "line": 309,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of load (without lock).",
          "decorators": []
        },
        {
          "name": "get",
          "line": 359,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get a specific value from persistence storage.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key doesn't exist\n    \nReturns:\n    Any: The retrieved value or default\n    \nRaises:\n    EnhancedPersistenceError: If get operation fails",
          "decorators": []
        },
        {
          "name": "_get",
          "line": 374,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Internal implementation of get (without lock).",
          "decorators": []
        },
        {
          "name": "set",
          "line": 406,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Set a specific value in persistence storage.\n\nArgs:\n    key: Key to set\n    value: Value to set\n    \nRaises:\n    EnhancedPersistenceError: If set operation fails",
          "decorators": []
        },
        {
          "name": "_set",
          "line": 418,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Internal implementation of set (without lock).",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 456,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete a specific value from persistence storage.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if key existed and was deleted, False otherwise\n    \nRaises:\n    EnhancedPersistenceError: If delete operation fails",
          "decorators": []
        },
        {
          "name": "_delete",
          "line": 470,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Internal implementation of delete (without lock).",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 514,
          "args": [
            "self"
          ],
          "docstring": "Clear all data from persistence storage.\n\nRaises:\n    EnhancedPersistenceError: If clear operation fails",
          "decorators": []
        },
        {
          "name": "_clear",
          "line": 522,
          "args": [
            "self"
          ],
          "docstring": "Internal implementation of clear (without lock).",
          "decorators": []
        },
        {
          "name": "create_snapshot",
          "line": 552,
          "args": [
            "self",
            "tag",
            "description"
          ],
          "docstring": "Create a snapshot of the current data state.\n\nArgs:\n    tag: Tag to apply to the snapshot\n    description: Human-readable description\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    EnhancedPersistenceError: If snapshot creation fails",
          "decorators": []
        },
        {
          "name": "_create_snapshot",
          "line": 569,
          "args": [
            "self",
            "tag",
            "description"
          ],
          "docstring": "Internal implementation of create_snapshot (without lock).",
          "decorators": []
        },
        {
          "name": "create_delta_snapshot",
          "line": 604,
          "args": [
            "self",
            "base_version",
            "tag",
            "description"
          ],
          "docstring": "Create a delta snapshot relative to a base snapshot.\n\nArgs:\n    base_version: Version ID of base snapshot (latest if None)\n    tag: Tag to apply to the snapshot\n    description: Human-readable description\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    EnhancedPersistenceError: If snapshot creation fails",
          "decorators": []
        },
        {
          "name": "_create_delta_snapshot",
          "line": 623,
          "args": [
            "self",
            "base_version",
            "tag",
            "description"
          ],
          "docstring": "Internal implementation of create_delta_snapshot (without lock).",
          "decorators": []
        },
        {
          "name": "restore_snapshot",
          "line": 663,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Restore data from a specific snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to restore\n    \nReturns:\n    Dict[str, Any]: Restored data\n    \nRaises:\n    EnhancedPersistenceError: If restore operation fails",
          "decorators": []
        },
        {
          "name": "_restore_snapshot",
          "line": 677,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Internal implementation of restore_snapshot (without lock).",
          "decorators": []
        },
        {
          "name": "restore_snapshot_by_tag",
          "line": 718,
          "args": [
            "self",
            "tag",
            "latest"
          ],
          "docstring": "Restore data from a snapshot with a specific tag.\n\nArgs:\n    tag: Tag to search for\n    latest: Whether to get the latest snapshot with the tag\n    \nReturns:\n    Dict[str, Any]: Restored data\n    \nRaises:\n    EnhancedPersistenceError: If restore operation fails",
          "decorators": []
        },
        {
          "name": "_restore_snapshot_by_tag",
          "line": 733,
          "args": [
            "self",
            "tag",
            "latest"
          ],
          "docstring": "Internal implementation of restore_snapshot_by_tag (without lock).",
          "decorators": []
        },
        {
          "name": "list_snapshots",
          "line": 774,
          "args": [
            "self"
          ],
          "docstring": "List all available snapshots.\n\nReturns:\n    List[Dict[str, Any]]: List of snapshot metadata",
          "decorators": []
        },
        {
          "name": "get_snapshot_data",
          "line": 787,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Get data from a specific snapshot without restoring it.\n\nArgs:\n    version_id: Version ID of the snapshot\n    \nReturns:\n    Dict[str, Any]: Snapshot data\n    \nRaises:\n    EnhancedPersistenceError: If operation fails",
          "decorators": []
        },
        {
          "name": "compare_snapshots",
          "line": 809,
          "args": [
            "self",
            "version1",
            "version2"
          ],
          "docstring": "Compare two snapshots and return differences.\n\nArgs:\n    version1: First snapshot version ID\n    version2: Second snapshot version ID\n    \nReturns:\n    Dict[str, Any]: Differences between snapshots\n    \nRaises:\n    EnhancedPersistenceError: If comparison fails",
          "decorators": []
        },
        {
          "name": "get_metrics",
          "line": 833,
          "args": [
            "self"
          ],
          "docstring": "Get performance and operation metrics.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics",
          "decorators": []
        },
        {
          "name": "export_data",
          "line": 855,
          "args": [
            "self",
            "export_path"
          ],
          "docstring": "Export the current data to a standalone file.\n\nArgs:\n    export_path: Path to export the data to\n    \nReturns:\n    str: Path to the exported file\n    \nRaises:\n    EnhancedPersistenceError: If export fails",
          "decorators": []
        },
        {
          "name": "_export_data",
          "line": 869,
          "args": [
            "self",
            "export_path"
          ],
          "docstring": "Internal implementation of export_data (without lock).",
          "decorators": []
        },
        {
          "name": "import_data",
          "line": 902,
          "args": [
            "self",
            "import_path"
          ],
          "docstring": "Import data from an exported file.\n\nArgs:\n    import_path: Path to the exported data file\n    \nReturns:\n    Dict[str, Any]: Imported data\n    \nRaises:\n    EnhancedPersistenceError: If import fails",
          "decorators": []
        },
        {
          "name": "_import_data",
          "line": 916,
          "args": [
            "self",
            "import_path"
          ],
          "docstring": "Internal implementation of import_data (without lock).",
          "decorators": []
        },
        {
          "name": "cleanup",
          "line": 959,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources used by persistence system.",
          "decorators": []
        },
        {
          "name": "__del__",
          "line": 978,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources when object is garbage collected.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 989,
          "args": [
            "self",
            "persistence_instance",
            "ttl"
          ],
          "docstring": "Initialize the cached persistence decorator.\n\nArgs:\n    persistence_instance: Persistence instance to decorate\n    ttl: Cache time-to-live in seconds",
          "decorators": []
        },
        {
          "name": "save",
          "line": 1001,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Save data with cache invalidation.\n\nArgs:\n    data: Data to save\n    \nReturns:\n    str: Operation ID",
          "decorators": []
        },
        {
          "name": "load",
          "line": 1014,
          "args": [
            "self"
          ],
          "docstring": "Load data with caching.\n\nReturns:\n    Dict[str, Any]: Loaded data",
          "decorators": []
        },
        {
          "name": "get",
          "line": 1030,
          "args": [
            "self",
            "key",
            "default"
          ],
          "docstring": "Get value with caching.\n\nArgs:\n    key: Key to get\n    default: Default value\n    \nReturns:\n    Any: Value or default",
          "decorators": []
        },
        {
          "name": "set",
          "line": 1050,
          "args": [
            "self",
            "key",
            "value"
          ],
          "docstring": "Set value with cache update.\n\nArgs:\n    key: Key to set\n    value: Value to set",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 1062,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Delete value with cache invalidation.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if deleted",
          "decorators": []
        },
        {
          "name": "clear",
          "line": 1077,
          "args": [
            "self"
          ],
          "docstring": "Clear data with cache invalidation.",
          "decorators": []
        },
        {
          "name": "__getattr__",
          "line": 1082,
          "args": [
            "self",
            "name"
          ],
          "docstring": "Delegate all other methods to the underlying instance.\n\nArgs:\n    name: Method name\n    \nReturns:\n    Any: Method result",
          "decorators": []
        },
        {
          "name": "wrapper",
          "line": 168,
          "args": [],
          "docstring": "",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "_auto_snapshot",
          "line": 187,
          "args": [],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedPersistenceError",
          "line": 53,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when enhanced persistence operations fail.",
          "methods": []
        },
        {
          "name": "EnhancedPersistenceV2",
          "line": 58,
          "bases": [
            "PersistenceBase"
          ],
          "docstring": "Enhanced persistence implementation with comprehensive features.\n\nThis class integrates all persistence components (delta compression,\nsnapshot management, and caching) into a cohesive solution that provides\nefficient, reliable data persistence with advanced features.",
          "methods": [
            {
              "name": "__init__",
              "line": 66,
              "args": [
                "self",
                "base_path",
                "storage_backend",
                "cache_strategy",
                "delta_strategy",
                "max_snapshots",
                "enable_compression",
                "auto_snapshot_interval",
                "thread_safe"
              ],
              "docstring": "Initialize the enhanced persistence system.\n\nArgs:\n    base_path: Base directory for persistence storage\n    storage_backend: Storage backend to use\n    cache_strategy: Cache strategy to use\n    delta_strategy: Delta compression strategy to use\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)\n    enable_compression: Whether to enable data compression\n    auto_snapshot_interval: Interval in seconds for auto-snapshots\n    thread_safe: Whether to make operations thread-safe"
            },
            {
              "name": "_with_lock",
              "line": 158,
              "args": [
                "self",
                "func"
              ],
              "docstring": "Decorator to execute a function with the lock if thread safety is enabled.\n\nArgs:\n    func: Function to wrap\n    \nReturns:\n    Callable: Wrapped function"
            },
            {
              "name": "_schedule_auto_snapshot",
              "line": 179,
              "args": [
                "self"
              ],
              "docstring": "Schedule the next auto-snapshot operation."
            },
            {
              "name": "_has_changes_since_last_snapshot",
              "line": 202,
              "args": [
                "self"
              ],
              "docstring": "Check if data has changed since the last snapshot.\n\nReturns:\n    bool: True if changes detected, False otherwise"
            },
            {
              "name": "_load_current_state",
              "line": 224,
              "args": [
                "self"
              ],
              "docstring": "Load the current state from the most recent snapshot if available."
            },
            {
              "name": "save",
              "line": 247,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data to persistence storage.\n\nArgs:\n    data: Dictionary of data to save\n    \nReturns:\n    str: Operation ID for the save operation\n    \nRaises:\n    EnhancedPersistenceError: If save operation fails"
            },
            {
              "name": "_save",
              "line": 261,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Internal implementation of save (without lock)."
            },
            {
              "name": "load",
              "line": 298,
              "args": [
                "self"
              ],
              "docstring": "Load data from persistence storage.\n\nReturns:\n    Dict[str, Any]: Loaded data\n    \nRaises:\n    EnhancedPersistenceError: If load operation fails"
            },
            {
              "name": "_load",
              "line": 309,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of load (without lock)."
            },
            {
              "name": "get",
              "line": 359,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get a specific value from persistence storage.\n\nArgs:\n    key: Key to retrieve\n    default: Default value if key doesn't exist\n    \nReturns:\n    Any: The retrieved value or default\n    \nRaises:\n    EnhancedPersistenceError: If get operation fails"
            },
            {
              "name": "_get",
              "line": 374,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Internal implementation of get (without lock)."
            },
            {
              "name": "set",
              "line": 406,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Set a specific value in persistence storage.\n\nArgs:\n    key: Key to set\n    value: Value to set\n    \nRaises:\n    EnhancedPersistenceError: If set operation fails"
            },
            {
              "name": "_set",
              "line": 418,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Internal implementation of set (without lock)."
            },
            {
              "name": "delete",
              "line": 456,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete a specific value from persistence storage.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if key existed and was deleted, False otherwise\n    \nRaises:\n    EnhancedPersistenceError: If delete operation fails"
            },
            {
              "name": "_delete",
              "line": 470,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Internal implementation of delete (without lock)."
            },
            {
              "name": "clear",
              "line": 514,
              "args": [
                "self"
              ],
              "docstring": "Clear all data from persistence storage.\n\nRaises:\n    EnhancedPersistenceError: If clear operation fails"
            },
            {
              "name": "_clear",
              "line": 522,
              "args": [
                "self"
              ],
              "docstring": "Internal implementation of clear (without lock)."
            },
            {
              "name": "create_snapshot",
              "line": 552,
              "args": [
                "self",
                "tag",
                "description"
              ],
              "docstring": "Create a snapshot of the current data state.\n\nArgs:\n    tag: Tag to apply to the snapshot\n    description: Human-readable description\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    EnhancedPersistenceError: If snapshot creation fails"
            },
            {
              "name": "_create_snapshot",
              "line": 569,
              "args": [
                "self",
                "tag",
                "description"
              ],
              "docstring": "Internal implementation of create_snapshot (without lock)."
            },
            {
              "name": "create_delta_snapshot",
              "line": 604,
              "args": [
                "self",
                "base_version",
                "tag",
                "description"
              ],
              "docstring": "Create a delta snapshot relative to a base snapshot.\n\nArgs:\n    base_version: Version ID of base snapshot (latest if None)\n    tag: Tag to apply to the snapshot\n    description: Human-readable description\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    EnhancedPersistenceError: If snapshot creation fails"
            },
            {
              "name": "_create_delta_snapshot",
              "line": 623,
              "args": [
                "self",
                "base_version",
                "tag",
                "description"
              ],
              "docstring": "Internal implementation of create_delta_snapshot (without lock)."
            },
            {
              "name": "restore_snapshot",
              "line": 663,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Restore data from a specific snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to restore\n    \nReturns:\n    Dict[str, Any]: Restored data\n    \nRaises:\n    EnhancedPersistenceError: If restore operation fails"
            },
            {
              "name": "_restore_snapshot",
              "line": 677,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Internal implementation of restore_snapshot (without lock)."
            },
            {
              "name": "restore_snapshot_by_tag",
              "line": 718,
              "args": [
                "self",
                "tag",
                "latest"
              ],
              "docstring": "Restore data from a snapshot with a specific tag.\n\nArgs:\n    tag: Tag to search for\n    latest: Whether to get the latest snapshot with the tag\n    \nReturns:\n    Dict[str, Any]: Restored data\n    \nRaises:\n    EnhancedPersistenceError: If restore operation fails"
            },
            {
              "name": "_restore_snapshot_by_tag",
              "line": 733,
              "args": [
                "self",
                "tag",
                "latest"
              ],
              "docstring": "Internal implementation of restore_snapshot_by_tag (without lock)."
            },
            {
              "name": "list_snapshots",
              "line": 774,
              "args": [
                "self"
              ],
              "docstring": "List all available snapshots.\n\nReturns:\n    List[Dict[str, Any]]: List of snapshot metadata"
            },
            {
              "name": "get_snapshot_data",
              "line": 787,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Get data from a specific snapshot without restoring it.\n\nArgs:\n    version_id: Version ID of the snapshot\n    \nReturns:\n    Dict[str, Any]: Snapshot data\n    \nRaises:\n    EnhancedPersistenceError: If operation fails"
            },
            {
              "name": "compare_snapshots",
              "line": 809,
              "args": [
                "self",
                "version1",
                "version2"
              ],
              "docstring": "Compare two snapshots and return differences.\n\nArgs:\n    version1: First snapshot version ID\n    version2: Second snapshot version ID\n    \nReturns:\n    Dict[str, Any]: Differences between snapshots\n    \nRaises:\n    EnhancedPersistenceError: If comparison fails"
            },
            {
              "name": "get_metrics",
              "line": 833,
              "args": [
                "self"
              ],
              "docstring": "Get performance and operation metrics.\n\nReturns:\n    Dict[str, Any]: Dictionary of metrics"
            },
            {
              "name": "export_data",
              "line": 855,
              "args": [
                "self",
                "export_path"
              ],
              "docstring": "Export the current data to a standalone file.\n\nArgs:\n    export_path: Path to export the data to\n    \nReturns:\n    str: Path to the exported file\n    \nRaises:\n    EnhancedPersistenceError: If export fails"
            },
            {
              "name": "_export_data",
              "line": 869,
              "args": [
                "self",
                "export_path"
              ],
              "docstring": "Internal implementation of export_data (without lock)."
            },
            {
              "name": "import_data",
              "line": 902,
              "args": [
                "self",
                "import_path"
              ],
              "docstring": "Import data from an exported file.\n\nArgs:\n    import_path: Path to the exported data file\n    \nReturns:\n    Dict[str, Any]: Imported data\n    \nRaises:\n    EnhancedPersistenceError: If import fails"
            },
            {
              "name": "_import_data",
              "line": 916,
              "args": [
                "self",
                "import_path"
              ],
              "docstring": "Internal implementation of import_data (without lock)."
            },
            {
              "name": "cleanup",
              "line": 959,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources used by persistence system."
            },
            {
              "name": "__del__",
              "line": 978,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources when object is garbage collected."
            }
          ]
        },
        {
          "name": "CachedPersistenceDecorator",
          "line": 986,
          "bases": [],
          "docstring": "Decorator that adds caching to persistence operations.",
          "methods": [
            {
              "name": "__init__",
              "line": 989,
              "args": [
                "self",
                "persistence_instance",
                "ttl"
              ],
              "docstring": "Initialize the cached persistence decorator.\n\nArgs:\n    persistence_instance: Persistence instance to decorate\n    ttl: Cache time-to-live in seconds"
            },
            {
              "name": "save",
              "line": 1001,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Save data with cache invalidation.\n\nArgs:\n    data: Data to save\n    \nReturns:\n    str: Operation ID"
            },
            {
              "name": "load",
              "line": 1014,
              "args": [
                "self"
              ],
              "docstring": "Load data with caching.\n\nReturns:\n    Dict[str, Any]: Loaded data"
            },
            {
              "name": "get",
              "line": 1030,
              "args": [
                "self",
                "key",
                "default"
              ],
              "docstring": "Get value with caching.\n\nArgs:\n    key: Key to get\n    default: Default value\n    \nReturns:\n    Any: Value or default"
            },
            {
              "name": "set",
              "line": 1050,
              "args": [
                "self",
                "key",
                "value"
              ],
              "docstring": "Set value with cache update.\n\nArgs:\n    key: Key to set\n    value: Value to set"
            },
            {
              "name": "delete",
              "line": 1062,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Delete value with cache invalidation.\n\nArgs:\n    key: Key to delete\n    \nReturns:\n    bool: True if deleted"
            },
            {
              "name": "clear",
              "line": 1077,
              "args": [
                "self"
              ],
              "docstring": "Clear data with cache invalidation."
            },
            {
              "name": "__getattr__",
              "line": 1082,
              "args": [
                "self",
                "name"
              ],
              "docstring": "Delegate all other methods to the underlying instance.\n\nArgs:\n    name: Method name\n    \nReturns:\n    Any: Method result"
            }
          ]
        }
      ],
      "lines_of_code": 892,
      "complexity_score": 111,
      "last_modified": "2025-10-04T21:52:33.133398",
      "checksum": "c0314af0aaaf378dbf315ac2b6a70f3b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/persistence/snapshot.py": {
      "name": "orchestrator/persistence/snapshot.py",
      "path": "orchestrator/persistence/snapshot.py",
      "component_type": "orchestration",
      "description": "Snapshot Management Module for Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py"
      ],
      "exports": [
        "create_snapshot_manager",
        "__init__",
        "to_dict",
        "from_dict",
        "update_integrity_info",
        "__init__",
        "_initialize_storage",
        "_load_registry",
        "_save_registry",
        "create_snapshot",
        "_save_data_to_file",
        "_load_data_from_file",
        "get_snapshot",
        "get_latest_snapshot",
        "get_snapshot_by_tag",
        "list_snapshots",
        "list_versions",
        "list_tags",
        "tag_snapshot",
        "untag_snapshot",
        "delete_snapshot",
        "_enforce_snapshot_limit",
        "create_delta_snapshot",
        "get_delta_snapshot",
        "compare_snapshots",
        "export_snapshot",
        "import_snapshot",
        "cleanup",
        "clear_all",
        "__del__",
        "SnapshotError",
        "VersioningError",
        "SnapshotNotFoundError",
        "SnapshotMetadata",
        "SnapshotManager"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "uuid",
        "shutil",
        "hashlib",
        "logging",
        "tempfile",
        "datetime",
        "pathlib",
        "typing",
        "orchestrator.persistence.core",
        "orchestrator.persistence.delta",
        "numpy",
        "sys",
        "pickle",
        "pickle",
        "pickle",
        "pickle",
        "pickle",
        "pickle",
        "pickle"
      ],
      "functions": [
        {
          "name": "create_snapshot_manager",
          "line": 1072,
          "args": [
            "base_path",
            "storage_backend",
            "delta_strategy",
            "max_snapshots"
          ],
          "docstring": "Create a configured SnapshotManager instance.\n\nArgs:\n    base_path: Base directory for snapshot storage\n    storage_backend: Storage backend to use\n    delta_strategy: Delta compression strategy\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)\n    \nReturns:\n    SnapshotManager: Configured snapshot manager instance",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 61,
          "args": [
            "self",
            "version",
            "tags",
            "description",
            "user_info"
          ],
          "docstring": "Initialize snapshot metadata.\n\nArgs:\n    version: Version identifier (auto-generated if None)\n    tags: List of tags for categorization\n    description: Human-readable description\n    user_info: Additional user-provided metadata",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 94,
          "args": [
            "self"
          ],
          "docstring": "Convert metadata to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary representation of metadata",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 112,
          "args": [
            "cls",
            "data"
          ],
          "docstring": "Create metadata object from dictionary representation.\n\nArgs:\n    data: Dictionary representation of metadata\n    \nReturns:\n    SnapshotMetadata: Reconstructed metadata object",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "update_integrity_info",
          "line": 139,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Update integrity information based on the data.\n\nArgs:\n    data: The data to calculate integrity info for",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 177,
          "args": [
            "self",
            "base_path",
            "storage_backend",
            "delta_strategy",
            "max_snapshots"
          ],
          "docstring": "Initialize the snapshot manager.\n\nArgs:\n    base_path: Base directory for snapshot storage\n    storage_backend: Storage backend to use\n    delta_strategy: Delta compression strategy\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)",
          "decorators": []
        },
        {
          "name": "_initialize_storage",
          "line": 216,
          "args": [
            "self"
          ],
          "docstring": "Initialize the storage backend.\n\nCreates necessary directories and loads existing snapshot registry.",
          "decorators": []
        },
        {
          "name": "_load_registry",
          "line": 250,
          "args": [
            "self",
            "registry_data"
          ],
          "docstring": "Load snapshot registry from parsed data.\n\nArgs:\n    registry_data: Parsed registry data",
          "decorators": []
        },
        {
          "name": "_save_registry",
          "line": 276,
          "args": [
            "self"
          ],
          "docstring": "Save the snapshot registry to storage.",
          "decorators": []
        },
        {
          "name": "create_snapshot",
          "line": 306,
          "args": [
            "self",
            "data",
            "tags",
            "description",
            "user_info",
            "version"
          ],
          "docstring": "Create a new snapshot of data.\n\nArgs:\n    data: Data to snapshot\n    tags: List of tags to apply\n    description: Human-readable description\n    user_info: Additional user metadata\n    version: Specific version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    SnapshotError: If snapshot creation fails",
          "decorators": []
        },
        {
          "name": "_save_data_to_file",
          "line": 378,
          "args": [
            "self",
            "data",
            "file_path"
          ],
          "docstring": "Save data to a file with appropriate serialization.\n\nArgs:\n    data: Data to save\n    file_path: Path to save data to\n    \nRaises:\n    SnapshotError: If data cannot be saved",
          "decorators": []
        },
        {
          "name": "_load_data_from_file",
          "line": 421,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Load data from a file with appropriate deserialization.\n\nArgs:\n    file_path: Path to load data from\n    \nReturns:\n    Any: Loaded data\n    \nRaises:\n    SnapshotError: If data cannot be loaded",
          "decorators": []
        },
        {
          "name": "get_snapshot",
          "line": 464,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Retrieve a specific snapshot by version ID.\n\nArgs:\n    version_id: Version ID of the snapshot to retrieve\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "get_latest_snapshot",
          "line": 495,
          "args": [
            "self"
          ],
          "docstring": "Retrieve the most recent snapshot.\n\nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If no snapshots exist",
          "decorators": []
        },
        {
          "name": "get_snapshot_by_tag",
          "line": 515,
          "args": [
            "self",
            "tag",
            "latest"
          ],
          "docstring": "Retrieve a snapshot by tag.\n\nArgs:\n    tag: Tag to search for\n    latest: Whether to get the latest snapshot with the tag\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If no snapshot with the given tag exists",
          "decorators": []
        },
        {
          "name": "list_snapshots",
          "line": 544,
          "args": [
            "self"
          ],
          "docstring": "List all available snapshots.\n\nReturns:\n    List[Dict[str, Any]]: List of snapshot metadata dictionaries",
          "decorators": []
        },
        {
          "name": "list_versions",
          "line": 555,
          "args": [
            "self"
          ],
          "docstring": "List all available version IDs.\n\nReturns:\n    List[str]: List of version IDs",
          "decorators": []
        },
        {
          "name": "list_tags",
          "line": 563,
          "args": [
            "self"
          ],
          "docstring": "List all available tags with counts.\n\nReturns:\n    Dict[str, int]: Dictionary of tag to count of snapshots",
          "decorators": []
        },
        {
          "name": "tag_snapshot",
          "line": 571,
          "args": [
            "self",
            "version_id",
            "tags"
          ],
          "docstring": "Add tags to an existing snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to tag\n    tags: List of tags to add\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "untag_snapshot",
          "line": 608,
          "args": [
            "self",
            "version_id",
            "tags"
          ],
          "docstring": "Remove tags from an existing snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to untag\n    tags: List of tags to remove\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "delete_snapshot",
          "line": 647,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Delete a snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to delete\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "_enforce_snapshot_limit",
          "line": 695,
          "args": [
            "self"
          ],
          "docstring": "Enforce the maximum number of snapshots if configured.",
          "decorators": []
        },
        {
          "name": "create_delta_snapshot",
          "line": 727,
          "args": [
            "self",
            "data",
            "base_version",
            "tags",
            "description",
            "user_info",
            "version"
          ],
          "docstring": "Create a delta snapshot relative to an existing base snapshot.\n\nArgs:\n    data: New data to snapshot\n    base_version: Version ID of base snapshot (latest if None)\n    tags: List of tags to apply\n    description: Human-readable description\n    user_info: Additional user metadata\n    version: Specific version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    SnapshotError: If snapshot creation fails",
          "decorators": []
        },
        {
          "name": "get_delta_snapshot",
          "line": 824,
          "args": [
            "self",
            "version_id"
          ],
          "docstring": "Retrieve a delta snapshot by version ID.\n\nArgs:\n    version_id: Version ID of the delta snapshot to retrieve\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (reconstructed data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "compare_snapshots",
          "line": 880,
          "args": [
            "self",
            "version1",
            "version2"
          ],
          "docstring": "Compare two snapshots and return differences.\n\nArgs:\n    version1: First snapshot version ID\n    version2: Second snapshot version ID\n    \nReturns:\n    Dict[str, Any]: Differences between snapshots\n    \nRaises:\n    SnapshotNotFoundError: If either snapshot doesn't exist",
          "decorators": []
        },
        {
          "name": "export_snapshot",
          "line": 922,
          "args": [
            "self",
            "version_id",
            "export_path"
          ],
          "docstring": "Export a snapshot to a standalone file.\n\nArgs:\n    version_id: Version ID of the snapshot to export\n    export_path: Path to export the snapshot to\n    \nReturns:\n    str: Path to the exported file\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist",
          "decorators": []
        },
        {
          "name": "import_snapshot",
          "line": 971,
          "args": [
            "self",
            "import_path",
            "new_version"
          ],
          "docstring": "Import a snapshot from an exported file.\n\nArgs:\n    import_path: Path to the exported snapshot file\n    new_version: New version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of imported snapshot\n    \nRaises:\n    SnapshotError: If import fails",
          "decorators": []
        },
        {
          "name": "cleanup",
          "line": 1024,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources used by the snapshot manager.",
          "decorators": []
        },
        {
          "name": "clear_all",
          "line": 1030,
          "args": [
            "self"
          ],
          "docstring": "Delete all snapshots and reset the registry.\n\nUse with caution! This will permanently delete all snapshot data.",
          "decorators": []
        },
        {
          "name": "__del__",
          "line": 1063,
          "args": [
            "self"
          ],
          "docstring": "Clean up resources when object is garbage collected.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SnapshotError",
          "line": 43,
          "bases": [
            "PersistenceError"
          ],
          "docstring": "Exception raised when snapshot operations fail.",
          "methods": []
        },
        {
          "name": "VersioningError",
          "line": 48,
          "bases": [
            "SnapshotError"
          ],
          "docstring": "Exception raised when version-specific operations fail.",
          "methods": []
        },
        {
          "name": "SnapshotNotFoundError",
          "line": 53,
          "bases": [
            "SnapshotError"
          ],
          "docstring": "Exception raised when a requested snapshot cannot be found.",
          "methods": []
        },
        {
          "name": "SnapshotMetadata",
          "line": 58,
          "bases": [],
          "docstring": "Metadata for snapshots including version, timestamps, and user info.",
          "methods": [
            {
              "name": "__init__",
              "line": 61,
              "args": [
                "self",
                "version",
                "tags",
                "description",
                "user_info"
              ],
              "docstring": "Initialize snapshot metadata.\n\nArgs:\n    version: Version identifier (auto-generated if None)\n    tags: List of tags for categorization\n    description: Human-readable description\n    user_info: Additional user-provided metadata"
            },
            {
              "name": "to_dict",
              "line": 94,
              "args": [
                "self"
              ],
              "docstring": "Convert metadata to dictionary representation.\n\nReturns:\n    Dict[str, Any]: Dictionary representation of metadata"
            },
            {
              "name": "from_dict",
              "line": 112,
              "args": [
                "cls",
                "data"
              ],
              "docstring": "Create metadata object from dictionary representation.\n\nArgs:\n    data: Dictionary representation of metadata\n    \nReturns:\n    SnapshotMetadata: Reconstructed metadata object"
            },
            {
              "name": "update_integrity_info",
              "line": 139,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Update integrity information based on the data.\n\nArgs:\n    data: The data to calculate integrity info for"
            }
          ]
        },
        {
          "name": "SnapshotManager",
          "line": 170,
          "bases": [],
          "docstring": "Manages data snapshots with versioning, tagging, and lifecycle.\n\nThis class handles the creation, retrieval, and management of data snapshots,\nsupporting operations like versioning, tagging, and lifecycle management.",
          "methods": [
            {
              "name": "__init__",
              "line": 177,
              "args": [
                "self",
                "base_path",
                "storage_backend",
                "delta_strategy",
                "max_snapshots"
              ],
              "docstring": "Initialize the snapshot manager.\n\nArgs:\n    base_path: Base directory for snapshot storage\n    storage_backend: Storage backend to use\n    delta_strategy: Delta compression strategy\n    max_snapshots: Maximum number of snapshots to keep (0 = unlimited)"
            },
            {
              "name": "_initialize_storage",
              "line": 216,
              "args": [
                "self"
              ],
              "docstring": "Initialize the storage backend.\n\nCreates necessary directories and loads existing snapshot registry."
            },
            {
              "name": "_load_registry",
              "line": 250,
              "args": [
                "self",
                "registry_data"
              ],
              "docstring": "Load snapshot registry from parsed data.\n\nArgs:\n    registry_data: Parsed registry data"
            },
            {
              "name": "_save_registry",
              "line": 276,
              "args": [
                "self"
              ],
              "docstring": "Save the snapshot registry to storage."
            },
            {
              "name": "create_snapshot",
              "line": 306,
              "args": [
                "self",
                "data",
                "tags",
                "description",
                "user_info",
                "version"
              ],
              "docstring": "Create a new snapshot of data.\n\nArgs:\n    data: Data to snapshot\n    tags: List of tags to apply\n    description: Human-readable description\n    user_info: Additional user metadata\n    version: Specific version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    SnapshotError: If snapshot creation fails"
            },
            {
              "name": "_save_data_to_file",
              "line": 378,
              "args": [
                "self",
                "data",
                "file_path"
              ],
              "docstring": "Save data to a file with appropriate serialization.\n\nArgs:\n    data: Data to save\n    file_path: Path to save data to\n    \nRaises:\n    SnapshotError: If data cannot be saved"
            },
            {
              "name": "_load_data_from_file",
              "line": 421,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Load data from a file with appropriate deserialization.\n\nArgs:\n    file_path: Path to load data from\n    \nReturns:\n    Any: Loaded data\n    \nRaises:\n    SnapshotError: If data cannot be loaded"
            },
            {
              "name": "get_snapshot",
              "line": 464,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Retrieve a specific snapshot by version ID.\n\nArgs:\n    version_id: Version ID of the snapshot to retrieve\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "get_latest_snapshot",
              "line": 495,
              "args": [
                "self"
              ],
              "docstring": "Retrieve the most recent snapshot.\n\nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If no snapshots exist"
            },
            {
              "name": "get_snapshot_by_tag",
              "line": 515,
              "args": [
                "self",
                "tag",
                "latest"
              ],
              "docstring": "Retrieve a snapshot by tag.\n\nArgs:\n    tag: Tag to search for\n    latest: Whether to get the latest snapshot with the tag\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If no snapshot with the given tag exists"
            },
            {
              "name": "list_snapshots",
              "line": 544,
              "args": [
                "self"
              ],
              "docstring": "List all available snapshots.\n\nReturns:\n    List[Dict[str, Any]]: List of snapshot metadata dictionaries"
            },
            {
              "name": "list_versions",
              "line": 555,
              "args": [
                "self"
              ],
              "docstring": "List all available version IDs.\n\nReturns:\n    List[str]: List of version IDs"
            },
            {
              "name": "list_tags",
              "line": 563,
              "args": [
                "self"
              ],
              "docstring": "List all available tags with counts.\n\nReturns:\n    Dict[str, int]: Dictionary of tag to count of snapshots"
            },
            {
              "name": "tag_snapshot",
              "line": 571,
              "args": [
                "self",
                "version_id",
                "tags"
              ],
              "docstring": "Add tags to an existing snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to tag\n    tags: List of tags to add\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "untag_snapshot",
              "line": 608,
              "args": [
                "self",
                "version_id",
                "tags"
              ],
              "docstring": "Remove tags from an existing snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to untag\n    tags: List of tags to remove\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "delete_snapshot",
              "line": 647,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Delete a snapshot.\n\nArgs:\n    version_id: Version ID of the snapshot to delete\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "_enforce_snapshot_limit",
              "line": 695,
              "args": [
                "self"
              ],
              "docstring": "Enforce the maximum number of snapshots if configured."
            },
            {
              "name": "create_delta_snapshot",
              "line": 727,
              "args": [
                "self",
                "data",
                "base_version",
                "tags",
                "description",
                "user_info",
                "version"
              ],
              "docstring": "Create a delta snapshot relative to an existing base snapshot.\n\nArgs:\n    data: New data to snapshot\n    base_version: Version ID of base snapshot (latest if None)\n    tags: List of tags to apply\n    description: Human-readable description\n    user_info: Additional user metadata\n    version: Specific version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of created snapshot\n    \nRaises:\n    SnapshotError: If snapshot creation fails"
            },
            {
              "name": "get_delta_snapshot",
              "line": 824,
              "args": [
                "self",
                "version_id"
              ],
              "docstring": "Retrieve a delta snapshot by version ID.\n\nArgs:\n    version_id: Version ID of the delta snapshot to retrieve\n    \nReturns:\n    Tuple[Any, SnapshotMetadata]: Tuple of (reconstructed data, metadata)\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "compare_snapshots",
              "line": 880,
              "args": [
                "self",
                "version1",
                "version2"
              ],
              "docstring": "Compare two snapshots and return differences.\n\nArgs:\n    version1: First snapshot version ID\n    version2: Second snapshot version ID\n    \nReturns:\n    Dict[str, Any]: Differences between snapshots\n    \nRaises:\n    SnapshotNotFoundError: If either snapshot doesn't exist"
            },
            {
              "name": "export_snapshot",
              "line": 922,
              "args": [
                "self",
                "version_id",
                "export_path"
              ],
              "docstring": "Export a snapshot to a standalone file.\n\nArgs:\n    version_id: Version ID of the snapshot to export\n    export_path: Path to export the snapshot to\n    \nReturns:\n    str: Path to the exported file\n    \nRaises:\n    SnapshotNotFoundError: If snapshot with given version ID doesn't exist"
            },
            {
              "name": "import_snapshot",
              "line": 971,
              "args": [
                "self",
                "import_path",
                "new_version"
              ],
              "docstring": "Import a snapshot from an exported file.\n\nArgs:\n    import_path: Path to the exported snapshot file\n    new_version: New version ID (auto-generated if None)\n    \nReturns:\n    str: Version ID of imported snapshot\n    \nRaises:\n    SnapshotError: If import fails"
            },
            {
              "name": "cleanup",
              "line": 1024,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources used by the snapshot manager."
            },
            {
              "name": "clear_all",
              "line": 1030,
              "args": [
                "self"
              ],
              "docstring": "Delete all snapshots and reset the registry.\n\nUse with caution! This will permanently delete all snapshot data."
            },
            {
              "name": "__del__",
              "line": 1063,
              "args": [
                "self"
              ],
              "docstring": "Clean up resources when object is garbage collected."
            }
          ]
        }
      ],
      "lines_of_code": 869,
      "complexity_score": 152,
      "last_modified": "2025-10-04T21:45:27.332280",
      "checksum": "e443896c7ae32d0823924e199f9fcfc4",
      "framework_role": "logging_infrastructure",
      "stability": "stable"
    },
    "orchestrator/recipe_parser.py": {
      "name": "orchestrator/recipe_parser.py",
      "path": "orchestrator/recipe_parser.py",
      "component_type": "orchestration",
      "description": "Load and parse a YAML recipe file into a Python dictionary.",
      "dependencies": [
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "load_recipe",
        "validate_recipe",
        "parse_step",
        "parse_recipe"
      ],
      "imports": [
        "yaml",
        "os",
        "importlib",
        "typing",
        "orchestrator.context"
      ],
      "functions": [
        {
          "name": "load_recipe",
          "line": 11,
          "args": [
            "file_path"
          ],
          "docstring": "Load and parse a YAML recipe file into a Python dictionary.\n\n:param file_path: Path to the YAML recipe file.\n:return: Parsed content of the recipe.\n:raises FileNotFoundError: If the recipe file does not exist.\n:raises yaml.YAMLError: If the recipe file is not valid YAML.",
          "decorators": []
        },
        {
          "name": "validate_recipe",
          "line": 31,
          "args": [
            "recipe"
          ],
          "docstring": "Validate the structure and required fields of the recipe.\n\n:param recipe: Parsed recipe dictionary.\n:raises ValueError: If the recipe structure is invalid.",
          "decorators": []
        },
        {
          "name": "parse_step",
          "line": 48,
          "args": [
            "step"
          ],
          "docstring": "Parse and validate an individual step in the recipe.\n\n:param step: Step dictionary.\n:return: Parsed step information.\n:raises ValueError: If the step is invalid.",
          "decorators": []
        },
        {
          "name": "parse_recipe",
          "line": 82,
          "args": [
            "recipe"
          ],
          "docstring": "Parse and validate the entire recipe, returning a list of steps.\n\n:param recipe: Parsed recipe dictionary.\n:return: List of parsed steps.\n:raises ValueError: If the recipe is invalid.",
          "decorators": []
        }
      ],
      "classes": [],
      "lines_of_code": 74,
      "complexity_score": 15,
      "last_modified": "2025-10-04T14:13:31.945337",
      "checksum": "85cbb3915db07d8f11823261e5727a84",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "orchestrator/recipes/compute_median.yaml": {
      "name": "orchestrator/recipes/compute_median.yaml",
      "path": "orchestrator/recipes/compute_median.yaml",
      "component_type": "orchestration",
      "description": "orchestrator/recipes/compute_median.yaml",
      "dependencies": [],
      "exports": [
        "test_meta",
        "steps"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 27,
      "complexity_score": 0,
      "last_modified": "2025-10-03T17:00:28.412473",
      "checksum": "647b26bb6a456a8a44a711b08b1da242",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "orchestrator/recipes/enhanced_example.yaml": {
      "name": "orchestrator/recipes/enhanced_example.yaml",
      "path": "orchestrator/recipes/enhanced_example.yaml",
      "component_type": "orchestration",
      "description": "Enhanced recipe using new unified framework",
      "dependencies": [],
      "exports": [
        "test_meta",
        "steps"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 16,
      "complexity_score": 0,
      "last_modified": "2025-10-04T15:14:07.449741",
      "checksum": "d6cca7b7789f83becaabce82f12273c2",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    "orchestrator/recipes/example_numbers.yaml": {
      "name": "orchestrator/recipes/example_numbers.yaml",
      "path": "orchestrator/recipes/example_numbers.yaml",
      "component_type": "orchestration",
      "description": "orchestrator/recipes/example_numbers.yaml",
      "dependencies": [],
      "exports": [
        "test_meta",
        "steps"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 28,
      "complexity_score": 0,
      "last_modified": "2025-10-04T15:14:07.449741",
      "checksum": "a97aeaa9f9b5b1d3f4352a957cdaec18",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "orchestrator/recipes/example_numbers0.yaml": {
      "name": "orchestrator/recipes/example_numbers0.yaml",
      "path": "orchestrator/recipes/example_numbers0.yaml",
      "component_type": "orchestration",
      "description": "orchestrator/recipes/example_number.yaml",
      "dependencies": [],
      "exports": [
        "tosca_definitions_version",
        "description",
        "imports",
        "inputs",
        "outputs",
        "tasks"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 71,
      "complexity_score": 0,
      "last_modified": "2025-10-03T08:23:37.177759",
      "checksum": "71ecf8d4972bb7595d084fe822a63885",
      "framework_role": "recipe_system",
      "stability": "stable"
    },
    "orchestrator/runner.py": {
      "name": "orchestrator/runner.py",
      "path": "orchestrator/runner.py",
      "component_type": "orchestration",
      "description": "Enhanced IAF0 Runner System - Version 2.0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "run_recipe",
        "main",
        "success",
        "to_dict",
        "execution_time_seconds",
        "success_rate",
        "overall_success",
        "add_step_result",
        "add_global_error",
        "add_global_warning",
        "to_dict",
        "__init__",
        "run_recipe",
        "cancel_execution",
        "is_execution_cancelled",
        "get_execution_statistics",
        "get_execution_history",
        "_load_recipe",
        "_validate_recipe_structure",
        "_initialize_context",
        "_execute_recipe_steps",
        "_execute_single_step",
        "_attempt_step_execution",
        "_finalize_context",
        "RecipeExecutionStatus",
        "StepExecutionResult",
        "RecipeExecutionResult",
        "EnhancedRecipeRunner"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "yaml",
        "time",
        "importlib",
        "traceback",
        "threading",
        "typing",
        "pathlib",
        "dataclasses",
        "datetime",
        "enum",
        "orchestrator.context.context",
        "scriptlets.framework",
        "src.core.logger",
        "argparse"
      ],
      "functions": [
        {
          "name": "run_recipe",
          "line": 864,
          "args": [
            "recipe_path"
          ],
          "docstring": "Convenience function for recipe execution with enhanced capabilities.\n\nThis function provides a simplified interface to the enhanced recipe runner\nwhile maintaining backward compatibility with existing code.\n\nArgs:\n    recipe_path: Path to YAML recipe file to execute\n    debug: Enable verbose logging and detailed tracing\n    only: Optional list of step names to execute (others skipped)\n    skip: Optional list of step names to skip during execution\n    continue_on_error: Continue execution after step failures\n    step_timeout: Timeout for individual steps in seconds\n    max_retries: Maximum number of retry attempts for failed steps\n    retry_delay: Delay between retry attempts in seconds\n    \nReturns:\n    Context: Final context state with execution results\n    \nRaises:\n    FileNotFoundError: If recipe file doesn't exist\n    yaml.YAMLError: If recipe file is malformed\n    ValueError: If recipe validation fails\n    RuntimeError: If execution fails and continue_on_error is False",
          "decorators": []
        },
        {
          "name": "main",
          "line": 916,
          "args": [],
          "docstring": "Command-line interface for enhanced recipe execution.\n\nProvides comprehensive CLI capabilities for recipe execution including\nfiltering, error handling, retry logic, and detailed result reporting.",
          "decorators": []
        },
        {
          "name": "success",
          "line": 76,
          "args": [
            "self"
          ],
          "docstring": "Check if the step execution was successful.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "to_dict",
          "line": 80,
          "args": [
            "self"
          ],
          "docstring": "Convert step result to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "execution_time_seconds",
          "line": 122,
          "args": [
            "self"
          ],
          "docstring": "Calculate total execution time in seconds.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "success_rate",
          "line": 129,
          "args": [
            "self"
          ],
          "docstring": "Calculate success rate as percentage of completed steps.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "overall_success",
          "line": 136,
          "args": [
            "self"
          ],
          "docstring": "Check if the recipe execution was overall successful.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "add_step_result",
          "line": 142,
          "args": [
            "self",
            "step_result"
          ],
          "docstring": "Add a step result to the recipe result tracking.",
          "decorators": []
        },
        {
          "name": "add_global_error",
          "line": 155,
          "args": [
            "self",
            "error_message"
          ],
          "docstring": "Add a global error message to recipe tracking.",
          "decorators": []
        },
        {
          "name": "add_global_warning",
          "line": 160,
          "args": [
            "self",
            "warning_message"
          ],
          "docstring": "Add a global warning message to recipe tracking.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 165,
          "args": [
            "self"
          ],
          "docstring": "Convert recipe result to dictionary for JSON serialization.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 200,
          "args": [
            "self",
            "default_timeout"
          ],
          "docstring": "Initialize the enhanced recipe runner with configuration.\n\nArgs:\n    default_timeout: Default timeout for step execution (no timeout if None)",
          "decorators": []
        },
        {
          "name": "run_recipe",
          "line": 225,
          "args": [
            "self",
            "recipe_path"
          ],
          "docstring": "Execute a complete recipe with enhanced capabilities and comprehensive monitoring.\n\nThis method provides the main recipe execution interface with advanced\nfeatures including filtering, error handling, and performance tracking.\n\nArgs:\n    recipe_path: Path to the YAML recipe file to execute\n    debug: Enable verbose logging and detailed tracing\n    only: Optional list of step names to execute (others skipped)\n    skip: Optional list of step names to skip during execution\n    continue_on_error: Continue execution after step failures\n    step_timeout: Timeout for individual steps (overrides default)\n    max_retries: Maximum number of retry attempts for failed steps\n    retry_delay: Delay between retry attempts in seconds\n    \nReturns:\n    Context: Final context state with execution results and metadata\n    \nRaises:\n    FileNotFoundError: If recipe file doesn't exist\n    yaml.YAMLError: If recipe file is malformed\n    ValueError: If recipe validation fails\n    RuntimeError: If execution fails and continue_on_error is False",
          "decorators": []
        },
        {
          "name": "cancel_execution",
          "line": 361,
          "args": [
            "self"
          ],
          "docstring": "Request cancellation of the currently running recipe execution.\n\nSets cancellation flags that are checked by long-running steps\nto enable graceful termination of recipe execution.",
          "decorators": []
        },
        {
          "name": "is_execution_cancelled",
          "line": 376,
          "args": [
            "self"
          ],
          "docstring": "Check if execution cancellation has been requested.\n\nReturns:\n    bool: True if cancellation has been requested",
          "decorators": []
        },
        {
          "name": "get_execution_statistics",
          "line": 385,
          "args": [
            "self"
          ],
          "docstring": "Get comprehensive execution statistics and performance metrics.\n\nReturns:\n    Dict[str, Any]: Detailed statistics about runner performance",
          "decorators": []
        },
        {
          "name": "get_execution_history",
          "line": 402,
          "args": [
            "self",
            "limit"
          ],
          "docstring": "Get historical execution results for analysis and monitoring.\n\nArgs:\n    limit: Maximum number of results to return (all if None)\n    \nReturns:\n    List[Dict[str, Any]]: Historical execution results",
          "decorators": []
        },
        {
          "name": "_load_recipe",
          "line": 419,
          "args": [
            "self",
            "recipe_path"
          ],
          "docstring": "Load and parse recipe YAML file with comprehensive error handling.\n\nArgs:\n    recipe_path: Path to recipe file to load\n    \nReturns:\n    Dict[str, Any]: Parsed recipe data\n    \nRaises:\n    yaml.YAMLError: If YAML parsing fails\n    ValueError: If recipe content is invalid",
          "decorators": []
        },
        {
          "name": "_validate_recipe_structure",
          "line": 453,
          "args": [
            "self",
            "recipe_data",
            "recipe_path"
          ],
          "docstring": "Validate recipe structure and extract steps with comprehensive validation.\n\nArgs:\n    recipe_data: Parsed recipe data to validate\n    recipe_path: Path to recipe file for error reporting\n    \nReturns:\n    List[Dict[str, Any]]: Validated and sorted steps\n    \nRaises:\n    ValueError: If recipe structure is invalid",
          "decorators": []
        },
        {
          "name": "_initialize_context",
          "line": 504,
          "args": [
            "self",
            "ctx",
            "recipe_path",
            "recipe_data"
          ],
          "docstring": "Initialize context with recipe metadata and execution information.\n\nArgs:\n    ctx: Context instance to initialize\n    recipe_path: Path to recipe file\n    recipe_data: Parsed recipe data",
          "decorators": []
        },
        {
          "name": "_execute_recipe_steps",
          "line": 529,
          "args": [
            "self",
            "ctx",
            "steps",
            "execution_result",
            "debug",
            "only",
            "skip",
            "continue_on_error",
            "step_timeout",
            "max_retries",
            "retry_delay"
          ],
          "docstring": "Execute all recipe steps with comprehensive monitoring and error handling.\n\nArgs:\n    ctx: Context for step execution\n    steps: List of validated steps to execute\n    execution_result: Result tracking for recipe execution\n    debug: Enable debug logging\n    only: Steps to include (others skipped)\n    skip: Steps to skip\n    continue_on_error: Continue after failures\n    step_timeout: Timeout for individual steps\n    max_retries: Maximum retry attempts\n    retry_delay: Delay between retries\n    \nReturns:\n    int: Number of successfully executed steps",
          "decorators": []
        },
        {
          "name": "_execute_single_step",
          "line": 611,
          "args": [
            "self",
            "ctx",
            "step",
            "step_index",
            "debug",
            "step_timeout",
            "max_retries",
            "retry_delay"
          ],
          "docstring": "Execute a single recipe step with comprehensive error handling and retry logic.\n\nArgs:\n    ctx: Context for step execution\n    step: Step configuration dictionary\n    step_index: Index of step in recipe\n    debug: Enable debug logging\n    step_timeout: Timeout for step execution\n    max_retries: Maximum retry attempts\n    retry_delay: Delay between retries\n    \nReturns:\n    StepExecutionResult: Comprehensive result of step execution",
          "decorators": []
        },
        {
          "name": "_attempt_step_execution",
          "line": 706,
          "args": [
            "self",
            "ctx",
            "step",
            "step_result",
            "debug",
            "step_timeout"
          ],
          "docstring": "Attempt execution of a single step with framework integration.\n\nArgs:\n    ctx: Context for step execution\n    step: Step configuration\n    step_result: Result tracking object\n    debug: Enable debug logging\n    step_timeout: Timeout for execution\n    \nReturns:\n    bool: True if execution was successful, False otherwise",
          "decorators": []
        },
        {
          "name": "_finalize_context",
          "line": 830,
          "args": [
            "self",
            "ctx",
            "execution_result"
          ],
          "docstring": "Finalize context with execution results and comprehensive metadata.\n\nArgs:\n    ctx: Context to finalize\n    execution_result: Execution result to store",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RecipeExecutionStatus",
          "line": 41,
          "bases": [
            "Enum"
          ],
          "docstring": "Enumerated status values for recipe execution states.\nProvides comprehensive tracking of recipe execution lifecycle.",
          "methods": []
        },
        {
          "name": "StepExecutionResult",
          "line": 56,
          "bases": [],
          "docstring": "Comprehensive result container for individual step execution.\nTracks execution outcomes, timing, and metadata for each recipe step.",
          "methods": [
            {
              "name": "success",
              "line": 76,
              "args": [
                "self"
              ],
              "docstring": "Check if the step execution was successful."
            },
            {
              "name": "to_dict",
              "line": 80,
              "args": [
                "self"
              ],
              "docstring": "Convert step result to dictionary for serialization."
            }
          ]
        },
        {
          "name": "RecipeExecutionResult",
          "line": 101,
          "bases": [],
          "docstring": "Comprehensive result container for complete recipe execution.\nProvides detailed information about recipe execution including\nstep results, timing, performance metrics, and final status.",
          "methods": [
            {
              "name": "execution_time_seconds",
              "line": 122,
              "args": [
                "self"
              ],
              "docstring": "Calculate total execution time in seconds."
            },
            {
              "name": "success_rate",
              "line": 129,
              "args": [
                "self"
              ],
              "docstring": "Calculate success rate as percentage of completed steps."
            },
            {
              "name": "overall_success",
              "line": 136,
              "args": [
                "self"
              ],
              "docstring": "Check if the recipe execution was overall successful."
            },
            {
              "name": "add_step_result",
              "line": 142,
              "args": [
                "self",
                "step_result"
              ],
              "docstring": "Add a step result to the recipe result tracking."
            },
            {
              "name": "add_global_error",
              "line": 155,
              "args": [
                "self",
                "error_message"
              ],
              "docstring": "Add a global error message to recipe tracking."
            },
            {
              "name": "add_global_warning",
              "line": 160,
              "args": [
                "self",
                "warning_message"
              ],
              "docstring": "Add a global warning message to recipe tracking."
            },
            {
              "name": "to_dict",
              "line": 165,
              "args": [
                "self"
              ],
              "docstring": "Convert recipe result to dictionary for JSON serialization."
            }
          ]
        },
        {
          "name": "EnhancedRecipeRunner",
          "line": 187,
          "bases": [],
          "docstring": "Enhanced recipe execution engine with comprehensive IAF0 compliance.\n\nThis class provides advanced recipe execution capabilities including:\n- Integration with unified Scriptlet Framework\n- Comprehensive error handling and recovery\n- Performance monitoring and metrics collection\n- Flexible execution control and filtering\n- Thread-safe operations with cancellation support\n- Detailed logging and result reporting",
          "methods": [
            {
              "name": "__init__",
              "line": 200,
              "args": [
                "self",
                "default_timeout"
              ],
              "docstring": "Initialize the enhanced recipe runner with configuration.\n\nArgs:\n    default_timeout: Default timeout for step execution (no timeout if None)"
            },
            {
              "name": "run_recipe",
              "line": 225,
              "args": [
                "self",
                "recipe_path"
              ],
              "docstring": "Execute a complete recipe with enhanced capabilities and comprehensive monitoring.\n\nThis method provides the main recipe execution interface with advanced\nfeatures including filtering, error handling, and performance tracking.\n\nArgs:\n    recipe_path: Path to the YAML recipe file to execute\n    debug: Enable verbose logging and detailed tracing\n    only: Optional list of step names to execute (others skipped)\n    skip: Optional list of step names to skip during execution\n    continue_on_error: Continue execution after step failures\n    step_timeout: Timeout for individual steps (overrides default)\n    max_retries: Maximum number of retry attempts for failed steps\n    retry_delay: Delay between retry attempts in seconds\n    \nReturns:\n    Context: Final context state with execution results and metadata\n    \nRaises:\n    FileNotFoundError: If recipe file doesn't exist\n    yaml.YAMLError: If recipe file is malformed\n    ValueError: If recipe validation fails\n    RuntimeError: If execution fails and continue_on_error is False"
            },
            {
              "name": "cancel_execution",
              "line": 361,
              "args": [
                "self"
              ],
              "docstring": "Request cancellation of the currently running recipe execution.\n\nSets cancellation flags that are checked by long-running steps\nto enable graceful termination of recipe execution."
            },
            {
              "name": "is_execution_cancelled",
              "line": 376,
              "args": [
                "self"
              ],
              "docstring": "Check if execution cancellation has been requested.\n\nReturns:\n    bool: True if cancellation has been requested"
            },
            {
              "name": "get_execution_statistics",
              "line": 385,
              "args": [
                "self"
              ],
              "docstring": "Get comprehensive execution statistics and performance metrics.\n\nReturns:\n    Dict[str, Any]: Detailed statistics about runner performance"
            },
            {
              "name": "get_execution_history",
              "line": 402,
              "args": [
                "self",
                "limit"
              ],
              "docstring": "Get historical execution results for analysis and monitoring.\n\nArgs:\n    limit: Maximum number of results to return (all if None)\n    \nReturns:\n    List[Dict[str, Any]]: Historical execution results"
            },
            {
              "name": "_load_recipe",
              "line": 419,
              "args": [
                "self",
                "recipe_path"
              ],
              "docstring": "Load and parse recipe YAML file with comprehensive error handling.\n\nArgs:\n    recipe_path: Path to recipe file to load\n    \nReturns:\n    Dict[str, Any]: Parsed recipe data\n    \nRaises:\n    yaml.YAMLError: If YAML parsing fails\n    ValueError: If recipe content is invalid"
            },
            {
              "name": "_validate_recipe_structure",
              "line": 453,
              "args": [
                "self",
                "recipe_data",
                "recipe_path"
              ],
              "docstring": "Validate recipe structure and extract steps with comprehensive validation.\n\nArgs:\n    recipe_data: Parsed recipe data to validate\n    recipe_path: Path to recipe file for error reporting\n    \nReturns:\n    List[Dict[str, Any]]: Validated and sorted steps\n    \nRaises:\n    ValueError: If recipe structure is invalid"
            },
            {
              "name": "_initialize_context",
              "line": 504,
              "args": [
                "self",
                "ctx",
                "recipe_path",
                "recipe_data"
              ],
              "docstring": "Initialize context with recipe metadata and execution information.\n\nArgs:\n    ctx: Context instance to initialize\n    recipe_path: Path to recipe file\n    recipe_data: Parsed recipe data"
            },
            {
              "name": "_execute_recipe_steps",
              "line": 529,
              "args": [
                "self",
                "ctx",
                "steps",
                "execution_result",
                "debug",
                "only",
                "skip",
                "continue_on_error",
                "step_timeout",
                "max_retries",
                "retry_delay"
              ],
              "docstring": "Execute all recipe steps with comprehensive monitoring and error handling.\n\nArgs:\n    ctx: Context for step execution\n    steps: List of validated steps to execute\n    execution_result: Result tracking for recipe execution\n    debug: Enable debug logging\n    only: Steps to include (others skipped)\n    skip: Steps to skip\n    continue_on_error: Continue after failures\n    step_timeout: Timeout for individual steps\n    max_retries: Maximum retry attempts\n    retry_delay: Delay between retries\n    \nReturns:\n    int: Number of successfully executed steps"
            },
            {
              "name": "_execute_single_step",
              "line": 611,
              "args": [
                "self",
                "ctx",
                "step",
                "step_index",
                "debug",
                "step_timeout",
                "max_retries",
                "retry_delay"
              ],
              "docstring": "Execute a single recipe step with comprehensive error handling and retry logic.\n\nArgs:\n    ctx: Context for step execution\n    step: Step configuration dictionary\n    step_index: Index of step in recipe\n    debug: Enable debug logging\n    step_timeout: Timeout for step execution\n    max_retries: Maximum retry attempts\n    retry_delay: Delay between retries\n    \nReturns:\n    StepExecutionResult: Comprehensive result of step execution"
            },
            {
              "name": "_attempt_step_execution",
              "line": 706,
              "args": [
                "self",
                "ctx",
                "step",
                "step_result",
                "debug",
                "step_timeout"
              ],
              "docstring": "Attempt execution of a single step with framework integration.\n\nArgs:\n    ctx: Context for step execution\n    step: Step configuration\n    step_result: Result tracking object\n    debug: Enable debug logging\n    step_timeout: Timeout for execution\n    \nReturns:\n    bool: True if execution was successful, False otherwise"
            },
            {
              "name": "_finalize_context",
              "line": 830,
              "args": [
                "self",
                "ctx",
                "execution_result"
              ],
              "docstring": "Finalize context with execution results and comprehensive metadata.\n\nArgs:\n    ctx: Context to finalize\n    execution_result: Execution result to store"
            }
          ]
        }
      ],
      "lines_of_code": 910,
      "complexity_score": 93,
      "last_modified": "2025-10-04T15:14:07.445741",
      "checksum": "d4de2701968a25864777c6e31902b501",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "pyproject.toml": {
      "name": "pyproject.toml",
      "path": "pyproject.toml",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 29,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:17:36.645844",
      "checksum": "86298b12805435de6ba94d7bb62fdab8",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    "requirements.txt": {
      "name": "requirements.txt",
      "path": "requirements.txt",
      "component_type": "utility",
      "description": "requirements.txt",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 33,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.935753",
      "checksum": "76ac0ddc7bbccc6d36fe7fc55760890e",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "scriptlets/__init__.py": {
      "name": "scriptlets/__init__.py",
      "path": "scriptlets/__init__.py",
      "component_type": "scriptlet",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 0,
      "complexity_score": 0,
      "last_modified": "2025-10-03T08:23:37.181759",
      "checksum": "d41d8cd98f00b204e9800998ecf8427e",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "scriptlets/framework.py": {
      "name": "scriptlets/framework.py",
      "path": "scriptlets/framework.py",
      "component_type": "scriptlet",
      "description": "Unified IAF0 Scriptlet Framework - Consolidated System",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "register_scriptlet",
        "get_scriptlet_class",
        "list_scriptlets",
        "resource_monitor",
        "debug_trace",
        "retry_on_failure",
        "create_compute_scriptlet",
        "create_io_scriptlet",
        "load_scriptlet_from_module",
        "validate_scriptlet_compliance",
        "to_dict",
        "validate_configuration",
        "validate",
        "run",
        "get_category",
        "decorator",
        "decorator",
        "decorator",
        "decorator",
        "__init__",
        "execution_duration",
        "is_executing",
        "get_category",
        "get_capabilities",
        "get_metadata",
        "execute",
        "_execute_hooks",
        "_handle_error",
        "_handle_completion",
        "_extract_result_data",
        "validate",
        "validate_custom",
        "run",
        "check_paradigm",
        "_check_method_signatures",
        "_check_json_compatibility",
        "_check_state_management",
        "__repr__",
        "__init__",
        "validate_custom",
        "__init__",
        "validate_custom",
        "__init__",
        "add_scriptlet",
        "resolve_dependencies",
        "execute_all",
        "wrapper",
        "wrapper",
        "wrapper",
        "visit",
        "ScriptletState",
        "ScriptletCategory",
        "ScriptletResult",
        "ScriptletConfig",
        "ScriptletProtocol",
        "BaseScriptlet",
        "ComputeScriptlet",
        "IOScriptlet",
        "ExecutionContext"
      ],
      "imports": [
        "os",
        "json",
        "copy",
        "time",
        "threading",
        "functools",
        "inspect",
        "importlib",
        "ast",
        "psutil",
        "typing",
        "pathlib",
        "dataclasses",
        "datetime",
        "abc",
        "enum",
        "contextlib",
        "orchestrator.context.context",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "register_scriptlet",
          "line": 225,
          "args": [
            "category"
          ],
          "docstring": "Decorator to register a scriptlet class in the global registry.\n\nEnables dynamic discovery and loading of scriptlets by name.\nProvides category-based organization and filtering capabilities.\n\nArgs:\n    category: Scriptlet category for organization and filtering\n\nReturns:\n    Decorator function for scriptlet class registration\n\nRaises:\n    ValueError: If class doesn't inherit from BaseScriptlet",
          "decorators": []
        },
        {
          "name": "get_scriptlet_class",
          "line": 264,
          "args": [
            "name"
          ],
          "docstring": "Retrieve a scriptlet class from the registry by name.\n\nProvides dynamic loading capability for recipe execution\nand runtime scriptlet discovery.\n\nArgs:\n    name: Name of the scriptlet class to retrieve\n\nReturns:\n    Scriptlet class for instantiation\n\nRaises:\n    KeyError: If scriptlet name is not registered",
          "decorators": []
        },
        {
          "name": "list_scriptlets",
          "line": 286,
          "args": [
            "category"
          ],
          "docstring": "List all registered scriptlet names, optionally filtered by category.\n\nProvides discovery mechanism for available scriptlets\nand debugging capabilities for registry inspection.\n\nArgs:\n    category: Optional category filter for results\n\nReturns:\n    Sorted list of scriptlet names",
          "decorators": []
        },
        {
          "name": "resource_monitor",
          "line": 311,
          "args": [
            "log_metrics"
          ],
          "docstring": "Decorator to monitor resource usage during scriptlet execution.\n\nTracks CPU, memory, and I/O statistics for performance analysis\nand optimization. Integrates with logging system for audit trails.\n\nArgs:\n    log_metrics: Whether to log metrics to logger\n\nReturns:\n    Decorator function for resource monitoring",
          "decorators": []
        },
        {
          "name": "debug_trace",
          "line": 390,
          "args": [
            "capture_vars"
          ],
          "docstring": "Decorator to add comprehensive debug tracing to scriptlet execution.\n\nCaptures function arguments, local variables, context changes,\nand exception details for debugging and development purposes.\n\nArgs:\n    capture_vars: List of variable names to capture during execution\n\nReturns:\n    Decorator function for debug tracing",
          "decorators": []
        },
        {
          "name": "retry_on_failure",
          "line": 457,
          "args": [
            "max_attempts",
            "delay",
            "backoff"
          ],
          "docstring": "Decorator to add retry logic to scriptlet execution.\n\nAutomatically retries failed executions with configurable\ndelay and backoff strategies for resilient operations.\n\nArgs:\n    max_attempts: Maximum number of execution attempts\n    delay: Initial delay between retries in seconds\n    backoff: Multiplier for delay after each failure\n\nReturns:\n    Decorator function for retry logic",
          "decorators": []
        },
        {
          "name": "create_compute_scriptlet",
          "line": 1081,
          "args": [
            "scriptlet_class"
          ],
          "docstring": "Create a compute scriptlet with custom configuration.\n\nArgs:\n    scriptlet_class: Class to instantiate\n    **config_kwargs: Configuration parameters\n\nReturns:\n    Configured compute scriptlet instance",
          "decorators": []
        },
        {
          "name": "create_io_scriptlet",
          "line": 1098,
          "args": [
            "scriptlet_class"
          ],
          "docstring": "Create an I/O scriptlet with custom configuration.\n\nArgs:\n    scriptlet_class: Class to instantiate\n    **config_kwargs: Configuration parameters\n\nReturns:\n    Configured I/O scriptlet instance",
          "decorators": []
        },
        {
          "name": "load_scriptlet_from_module",
          "line": 1257,
          "args": [
            "module_path",
            "class_name"
          ],
          "docstring": "Dynamically load a scriptlet class from a module.\n\nArgs:\n    module_path: Python module path (e.g., 'scriptlets.steps.compute')\n    class_name: Name of the scriptlet class to load\n\nReturns:\n    Loaded scriptlet class\n\nRaises:\n    ImportError: If module or class cannot be loaded\n    ValueError: If loaded class is not a scriptlet",
          "decorators": []
        },
        {
          "name": "validate_scriptlet_compliance",
          "line": 1290,
          "args": [
            "scriptlet_class"
          ],
          "docstring": "Validate that a scriptlet class complies with framework requirements.\n\nArgs:\n    scriptlet_class: Scriptlet class to validate\n\nReturns:\n    List of compliance issues (empty if fully compliant)",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 110,
          "args": [
            "self"
          ],
          "docstring": "Convert result to dictionary for serialization and logging.",
          "decorators": []
        },
        {
          "name": "validate_configuration",
          "line": 177,
          "args": [
            "self"
          ],
          "docstring": "Validate configuration settings and return list of validation errors.",
          "decorators": []
        },
        {
          "name": "validate",
          "line": 205,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Validate scriptlet parameters and context state.",
          "decorators": []
        },
        {
          "name": "run",
          "line": 209,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Execute scriptlet with context and parameters.",
          "decorators": []
        },
        {
          "name": "get_category",
          "line": 213,
          "args": [
            "self"
          ],
          "docstring": "Get scriptlet category for classification.",
          "decorators": []
        },
        {
          "name": "decorator",
          "line": 244,
          "args": [
            "cls"
          ],
          "docstring": "Inner decorator function that performs actual registration.",
          "decorators": []
        },
        {
          "name": "decorator",
          "line": 325,
          "args": [
            "func"
          ],
          "docstring": "Inner decorator that adds resource monitoring to function.",
          "decorators": []
        },
        {
          "name": "decorator",
          "line": 404,
          "args": [
            "func"
          ],
          "docstring": "Inner decorator that adds debug tracing to function.",
          "decorators": []
        },
        {
          "name": "decorator",
          "line": 475,
          "args": [
            "func"
          ],
          "docstring": "Inner decorator that adds retry logic to function.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 543,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize the BaseScriptlet with configuration and setup.\n\nArgs:\n    config: Optional configuration object for scriptlet behavior",
          "decorators": []
        },
        {
          "name": "execution_duration",
          "line": 581,
          "args": [
            "self"
          ],
          "docstring": "Get execution duration if available.\n\nReturns:\n    Execution duration in seconds or None if not available",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "is_executing",
          "line": 595,
          "args": [
            "self"
          ],
          "docstring": "Check if scriptlet is currently executing.\n\nReturns:\n    True if scriptlet is in executing state",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "get_category",
          "line": 604,
          "args": [
            "self"
          ],
          "docstring": "Get the category of this scriptlet.\n\nReturns:\n    Scriptlet category for classification and filtering",
          "decorators": []
        },
        {
          "name": "get_capabilities",
          "line": 613,
          "args": [
            "self"
          ],
          "docstring": "Get list of capabilities supported by this scriptlet.\n\nReturns:\n    List of capability strings for introspection",
          "decorators": []
        },
        {
          "name": "get_metadata",
          "line": 634,
          "args": [
            "self"
          ],
          "docstring": "Get comprehensive metadata about this scriptlet.\n\nReturns:\n    Dictionary containing scriptlet metadata and statistics",
          "decorators": []
        },
        {
          "name": "execute",
          "line": 659,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Execute the scriptlet with comprehensive lifecycle management.\n\nThis method orchestrates the complete scriptlet execution including\nvalidation, monitoring, error handling, and state management.\n\nArgs:\n    context: Context instance for state management\n    params: Parameters for scriptlet execution\n\nReturns:\n    Comprehensive result object with execution details\n\nRaises:\n    ValueError: If validation fails\n    RuntimeError: If execution fails",
          "decorators": [
            "resource_monitor",
            "debug_trace",
            "retry_on_failure"
          ]
        },
        {
          "name": "_execute_hooks",
          "line": 732,
          "args": [
            "self",
            "hooks"
          ],
          "docstring": "Execute lifecycle hooks safely with error handling.\n\nArgs:\n    hooks: List of hook functions to execute\n    *args: Positional arguments to pass to hooks\n    **kwargs: Keyword arguments to pass to hooks",
          "decorators": []
        },
        {
          "name": "_handle_error",
          "line": 748,
          "args": [
            "self",
            "error",
            "context",
            "params"
          ],
          "docstring": "Handle execution errors with custom error handlers.\n\nArgs:\n    error: Exception that occurred during execution\n    context: Context instance for state management\n    params: Parameters that were being processed\n\nReturns:\n    Error result with detailed information",
          "decorators": []
        },
        {
          "name": "_handle_completion",
          "line": 791,
          "args": [
            "self",
            "result"
          ],
          "docstring": "Handle scriptlet completion with cleanup and logging.\n\nArgs:\n    result: Execution result to process",
          "decorators": []
        },
        {
          "name": "_extract_result_data",
          "line": 818,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Extract result data from context and parameters.\n\nOverride this method to customize result data extraction.\n\nArgs:\n    context: Context instance with execution state\n    params: Parameters used during execution\n\nReturns:\n    Dictionary of result data",
          "decorators": []
        },
        {
          "name": "validate",
          "line": 844,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Validate scriptlet parameters and context state.\n\nOverride this method to implement custom validation logic.\n\nArgs:\n    context: Context instance for validation\n    params: Parameters to validate\n\nReturns:\n    True if validation passes, False otherwise",
          "decorators": []
        },
        {
          "name": "validate_custom",
          "line": 878,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Custom validation method for subclasses to override.\n\nArgs:\n    context: Context instance for validation\n    params: Parameters to validate\n\nReturns:\n    True if custom validation passes, False otherwise",
          "decorators": []
        },
        {
          "name": "run",
          "line": 892,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Execute the main scriptlet logic.\n\nThis method must be implemented by all concrete scriptlet classes.\nIt should perform the core functionality and return an exit code.\n\nArgs:\n    context: Context instance for state management\n    params: Parameters for execution\n\nReturns:\n    Exit code (0 for success, non-zero for failure)\n\nRaises:\n    NotImplementedError: If not implemented by subclass",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "check_paradigm",
          "line": 911,
          "args": [
            "self"
          ],
          "docstring": "Check framework paradigm compliance.\n\nVerifies that the scriptlet follows IAF0 framework patterns\nand best practices for proper integration.\n\nReturns:\n    True if compliant with framework paradigms",
          "decorators": []
        },
        {
          "name": "_check_method_signatures",
          "line": 939,
          "args": [
            "self"
          ],
          "docstring": "Check that required methods have correct signatures.",
          "decorators": []
        },
        {
          "name": "_check_json_compatibility",
          "line": 959,
          "args": [
            "self"
          ],
          "docstring": "Check that scriptlet produces JSON-compatible data.",
          "decorators": []
        },
        {
          "name": "_check_state_management",
          "line": 971,
          "args": [
            "self"
          ],
          "docstring": "Check that scriptlet properly manages state.",
          "decorators": []
        },
        {
          "name": "__repr__",
          "line": 985,
          "args": [
            "self"
          ],
          "docstring": "Provide detailed string representation for debugging.\n\nReturns:\n    Detailed string representation of scriptlet instance",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 1009,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize computational scriptlet with optimized configuration.",
          "decorators": []
        },
        {
          "name": "validate_custom",
          "line": 1024,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Custom validation for computational parameters.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 1045,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize I/O scriptlet with optimized configuration.",
          "decorators": []
        },
        {
          "name": "validate_custom",
          "line": 1061,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Custom validation for I/O parameters.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 1124,
          "args": [
            "self"
          ],
          "docstring": "Initialize execution context with management structures.",
          "decorators": []
        },
        {
          "name": "add_scriptlet",
          "line": 1135,
          "args": [
            "self",
            "name",
            "scriptlet",
            "dependencies"
          ],
          "docstring": "Add a scriptlet to the execution context.\n\nArgs:\n    name: Unique name for the scriptlet\n    scriptlet: Scriptlet instance to add\n    dependencies: List of scriptlet names this depends on",
          "decorators": []
        },
        {
          "name": "resolve_dependencies",
          "line": 1157,
          "args": [
            "self"
          ],
          "docstring": "Resolve scriptlet execution order based on dependencies.\n\nUses topological sorting to determine safe execution order\nthat respects all dependency constraints.\n\nReturns:\n    List of scriptlet names in execution order\n\nRaises:\n    ValueError: If circular dependencies are detected",
          "decorators": []
        },
        {
          "name": "execute_all",
          "line": 1204,
          "args": [
            "self",
            "params"
          ],
          "docstring": "Execute all scriptlets in dependency order.\n\nArgs:\n    params: Optional parameters for each scriptlet by name\n\nReturns:\n    Dictionary of results by scriptlet name",
          "decorators": []
        },
        {
          "name": "wrapper",
          "line": 329,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Wrapper function that performs monitoring around execution.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "wrapper",
          "line": 408,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Wrapper function that performs debug tracing around execution.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "wrapper",
          "line": 479,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Wrapper function that performs retry logic around execution.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "visit",
          "line": 1175,
          "args": [
            "name"
          ],
          "docstring": "Recursive function for topological sort.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ScriptletState",
          "line": 55,
          "bases": [
            "Enum"
          ],
          "docstring": "Enumeration of possible scriptlet execution states.\nProvides type-safe state management throughout scriptlet lifecycle.",
          "methods": []
        },
        {
          "name": "ScriptletCategory",
          "line": 70,
          "bases": [
            "Enum"
          ],
          "docstring": "Categories of scriptlets for organization and capability identification.\nEnables filtering, routing, and optimization based on scriptlet type.",
          "methods": []
        },
        {
          "name": "ScriptletResult",
          "line": 85,
          "bases": [],
          "docstring": "Comprehensive scriptlet execution result with detailed information.\nProvides structured data for monitoring, debugging, and reporting.",
          "methods": [
            {
              "name": "to_dict",
              "line": 110,
              "args": [
                "self"
              ],
              "docstring": "Convert result to dictionary for serialization and logging."
            }
          ]
        },
        {
          "name": "ScriptletConfig",
          "line": 133,
          "bases": [],
          "docstring": "Comprehensive scriptlet configuration container with all runtime settings.\nProvides centralized configuration management for scriptlet behavior.",
          "methods": [
            {
              "name": "validate_configuration",
              "line": 177,
              "args": [
                "self"
              ],
              "docstring": "Validate configuration settings and return list of validation errors."
            }
          ]
        },
        {
          "name": "ScriptletProtocol",
          "line": 199,
          "bases": [
            "Protocol"
          ],
          "docstring": "Protocol defining the contract that all scriptlets must implement.\nProvides type safety for scriptlet operations and registry management.",
          "methods": [
            {
              "name": "validate",
              "line": 205,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Validate scriptlet parameters and context state."
            },
            {
              "name": "run",
              "line": 209,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Execute scriptlet with context and parameters."
            },
            {
              "name": "get_category",
              "line": 213,
              "args": [
                "self"
              ],
              "docstring": "Get scriptlet category for classification."
            }
          ]
        },
        {
          "name": "BaseScriptlet",
          "line": 525,
          "bases": [
            "ABC"
          ],
          "docstring": "Unified base class for all scriptlets in the IAF0 framework.\n\nThis class provides the complete foundation for scriptlet development,\nincluding lifecycle management, validation, execution, monitoring,\nerror handling, and integration with the Context system.\n\nFeatures:\n- Comprehensive parameter validation with custom rules\n- Resource monitoring and performance tracking\n- Retry logic and error handling with custom handlers\n- Event-driven lifecycle with pre/post execution hooks\n- Thread-safe operations and state management\n- Integration with logging and debugging systems\n- Extensible configuration and metadata management",
          "methods": [
            {
              "name": "__init__",
              "line": 543,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize the BaseScriptlet with configuration and setup.\n\nArgs:\n    config: Optional configuration object for scriptlet behavior"
            },
            {
              "name": "execution_duration",
              "line": 581,
              "args": [
                "self"
              ],
              "docstring": "Get execution duration if available.\n\nReturns:\n    Execution duration in seconds or None if not available"
            },
            {
              "name": "is_executing",
              "line": 595,
              "args": [
                "self"
              ],
              "docstring": "Check if scriptlet is currently executing.\n\nReturns:\n    True if scriptlet is in executing state"
            },
            {
              "name": "get_category",
              "line": 604,
              "args": [
                "self"
              ],
              "docstring": "Get the category of this scriptlet.\n\nReturns:\n    Scriptlet category for classification and filtering"
            },
            {
              "name": "get_capabilities",
              "line": 613,
              "args": [
                "self"
              ],
              "docstring": "Get list of capabilities supported by this scriptlet.\n\nReturns:\n    List of capability strings for introspection"
            },
            {
              "name": "get_metadata",
              "line": 634,
              "args": [
                "self"
              ],
              "docstring": "Get comprehensive metadata about this scriptlet.\n\nReturns:\n    Dictionary containing scriptlet metadata and statistics"
            },
            {
              "name": "execute",
              "line": 659,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Execute the scriptlet with comprehensive lifecycle management.\n\nThis method orchestrates the complete scriptlet execution including\nvalidation, monitoring, error handling, and state management.\n\nArgs:\n    context: Context instance for state management\n    params: Parameters for scriptlet execution\n\nReturns:\n    Comprehensive result object with execution details\n\nRaises:\n    ValueError: If validation fails\n    RuntimeError: If execution fails"
            },
            {
              "name": "_execute_hooks",
              "line": 732,
              "args": [
                "self",
                "hooks"
              ],
              "docstring": "Execute lifecycle hooks safely with error handling.\n\nArgs:\n    hooks: List of hook functions to execute\n    *args: Positional arguments to pass to hooks\n    **kwargs: Keyword arguments to pass to hooks"
            },
            {
              "name": "_handle_error",
              "line": 748,
              "args": [
                "self",
                "error",
                "context",
                "params"
              ],
              "docstring": "Handle execution errors with custom error handlers.\n\nArgs:\n    error: Exception that occurred during execution\n    context: Context instance for state management\n    params: Parameters that were being processed\n\nReturns:\n    Error result with detailed information"
            },
            {
              "name": "_handle_completion",
              "line": 791,
              "args": [
                "self",
                "result"
              ],
              "docstring": "Handle scriptlet completion with cleanup and logging.\n\nArgs:\n    result: Execution result to process"
            },
            {
              "name": "_extract_result_data",
              "line": 818,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Extract result data from context and parameters.\n\nOverride this method to customize result data extraction.\n\nArgs:\n    context: Context instance with execution state\n    params: Parameters used during execution\n\nReturns:\n    Dictionary of result data"
            },
            {
              "name": "validate",
              "line": 844,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Validate scriptlet parameters and context state.\n\nOverride this method to implement custom validation logic.\n\nArgs:\n    context: Context instance for validation\n    params: Parameters to validate\n\nReturns:\n    True if validation passes, False otherwise"
            },
            {
              "name": "validate_custom",
              "line": 878,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Custom validation method for subclasses to override.\n\nArgs:\n    context: Context instance for validation\n    params: Parameters to validate\n\nReturns:\n    True if custom validation passes, False otherwise"
            },
            {
              "name": "run",
              "line": 892,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Execute the main scriptlet logic.\n\nThis method must be implemented by all concrete scriptlet classes.\nIt should perform the core functionality and return an exit code.\n\nArgs:\n    context: Context instance for state management\n    params: Parameters for execution\n\nReturns:\n    Exit code (0 for success, non-zero for failure)\n\nRaises:\n    NotImplementedError: If not implemented by subclass"
            },
            {
              "name": "check_paradigm",
              "line": 911,
              "args": [
                "self"
              ],
              "docstring": "Check framework paradigm compliance.\n\nVerifies that the scriptlet follows IAF0 framework patterns\nand best practices for proper integration.\n\nReturns:\n    True if compliant with framework paradigms"
            },
            {
              "name": "_check_method_signatures",
              "line": 939,
              "args": [
                "self"
              ],
              "docstring": "Check that required methods have correct signatures."
            },
            {
              "name": "_check_json_compatibility",
              "line": 959,
              "args": [
                "self"
              ],
              "docstring": "Check that scriptlet produces JSON-compatible data."
            },
            {
              "name": "_check_state_management",
              "line": 971,
              "args": [
                "self"
              ],
              "docstring": "Check that scriptlet properly manages state."
            },
            {
              "name": "__repr__",
              "line": 985,
              "args": [
                "self"
              ],
              "docstring": "Provide detailed string representation for debugging.\n\nReturns:\n    Detailed string representation of scriptlet instance"
            }
          ]
        },
        {
          "name": "ComputeScriptlet",
          "line": 1001,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "Specialized base class for computational scriptlets.\n\nProvides optimizations and patterns specific to computational\noperations, data processing, and mathematical calculations.",
          "methods": [
            {
              "name": "__init__",
              "line": 1009,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize computational scriptlet with optimized configuration."
            },
            {
              "name": "validate_custom",
              "line": 1024,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Custom validation for computational parameters."
            }
          ]
        },
        {
          "name": "IOScriptlet",
          "line": 1037,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "Specialized base class for I/O scriptlets.\n\nProvides optimizations and patterns specific to file operations,\nnetwork I/O, and data transfer operations.",
          "methods": [
            {
              "name": "__init__",
              "line": 1045,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize I/O scriptlet with optimized configuration."
            },
            {
              "name": "validate_custom",
              "line": 1061,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": "Custom validation for I/O parameters."
            }
          ]
        },
        {
          "name": "ExecutionContext",
          "line": 1116,
          "bases": [],
          "docstring": "Advanced execution context for managing scriptlet dependencies and orchestration.\n\nProvides comprehensive dependency resolution, parallel execution capabilities,\nand advanced scheduling for complex scriptlet workflows.",
          "methods": [
            {
              "name": "__init__",
              "line": 1124,
              "args": [
                "self"
              ],
              "docstring": "Initialize execution context with management structures."
            },
            {
              "name": "add_scriptlet",
              "line": 1135,
              "args": [
                "self",
                "name",
                "scriptlet",
                "dependencies"
              ],
              "docstring": "Add a scriptlet to the execution context.\n\nArgs:\n    name: Unique name for the scriptlet\n    scriptlet: Scriptlet instance to add\n    dependencies: List of scriptlet names this depends on"
            },
            {
              "name": "resolve_dependencies",
              "line": 1157,
              "args": [
                "self"
              ],
              "docstring": "Resolve scriptlet execution order based on dependencies.\n\nUses topological sorting to determine safe execution order\nthat respects all dependency constraints.\n\nReturns:\n    List of scriptlet names in execution order\n\nRaises:\n    ValueError: If circular dependencies are detected"
            },
            {
              "name": "execute_all",
              "line": 1204,
              "args": [
                "self",
                "params"
              ],
              "docstring": "Execute all scriptlets in dependency order.\n\nArgs:\n    params: Optional parameters for each scriptlet by name\n\nReturns:\n    Dictionary of results by scriptlet name"
            }
          ]
        }
      ],
      "lines_of_code": 1078,
      "complexity_score": 144,
      "last_modified": "2025-10-04T14:19:09.599127",
      "checksum": "e6767f4f8b67724ad47e2bbeeefd486a",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "server/__init__.py": {
      "name": "server/__init__.py",
      "path": "server/__init__.py",
      "component_type": "server_infrastructure",
      "description": "Framework0 package initializer",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:50:45.703975",
      "checksum": "6f3997601d8c1c43c83608fe7ff049fe",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "server/server_config.py": {
      "name": "server/server_config.py",
      "path": "server/server_config.py",
      "component_type": "server_infrastructure",
      "description": "Framework0 Context Server Configuration Management",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "create_default_config_file",
        "main",
        "__init__",
        "_load_default_config",
        "_load_config_file",
        "_load_environment_config",
        "_deep_merge",
        "_set_nested_value",
        "get",
        "set",
        "validate",
        "save",
        "to_dict",
        "__init__",
        "_signal_handler",
        "start",
        "stop",
        "restart",
        "is_running",
        "get_status",
        "ContextServerConfig",
        "ServerManager"
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "signal",
        "subprocess",
        "sys",
        "time",
        "pathlib",
        "typing",
        "argparse"
      ],
      "functions": [
        {
          "name": "create_default_config_file",
          "line": 497,
          "args": [
            "config_path"
          ],
          "docstring": "Create a default configuration file with all settings and comments.\n\nArgs:\n    config_path: Path where to create the configuration file",
          "decorators": []
        },
        {
          "name": "main",
          "line": 578,
          "args": [],
          "docstring": "Main entry point for configuration and server management.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 30,
          "args": [
            "self",
            "config_file"
          ],
          "docstring": "Initialize configuration manager with optional config file.\n\nArgs:\n    config_file: Path to configuration file (JSON format)",
          "decorators": []
        },
        {
          "name": "_load_default_config",
          "line": 55,
          "args": [
            "self"
          ],
          "docstring": "Load default configuration values for all settings.",
          "decorators": []
        },
        {
          "name": "_load_config_file",
          "line": 115,
          "args": [
            "self",
            "config_file"
          ],
          "docstring": "Load configuration from JSON file.\n\nArgs:\n    config_file: Path to JSON configuration file",
          "decorators": []
        },
        {
          "name": "_load_environment_config",
          "line": 141,
          "args": [
            "self"
          ],
          "docstring": "Load configuration overrides from environment variables.",
          "decorators": []
        },
        {
          "name": "_deep_merge",
          "line": 197,
          "args": [
            "self",
            "base",
            "update"
          ],
          "docstring": "Deep merge two dictionaries, updating base with values from update.\n\nArgs:\n    base: Base dictionary to update\n    update: Dictionary with updates to apply",
          "decorators": []
        },
        {
          "name": "_set_nested_value",
          "line": 211,
          "args": [
            "self",
            "config",
            "path",
            "value"
          ],
          "docstring": "Set nested configuration value using dot notation path.\n\nArgs:\n    config: Configuration dictionary to update\n    path: Dot notation path (e.g., 'server.host')\n    value: Value to set",
          "decorators": []
        },
        {
          "name": "get",
          "line": 232,
          "args": [
            "self",
            "path",
            "default"
          ],
          "docstring": "Get configuration value using dot notation path.\n\nArgs:\n    path: Dot notation path to configuration value\n    default: Default value if path not found\n    \nReturns:\n    Configuration value or default",
          "decorators": []
        },
        {
          "name": "set",
          "line": 253,
          "args": [
            "self",
            "path",
            "value"
          ],
          "docstring": "Set configuration value using dot notation path.\n\nArgs:\n    path: Dot notation path to set\n    value: Value to set",
          "decorators": []
        },
        {
          "name": "validate",
          "line": 263,
          "args": [
            "self"
          ],
          "docstring": "Validate configuration and return list of errors.\n\nReturns:\n    List of validation error messages",
          "decorators": []
        },
        {
          "name": "save",
          "line": 294,
          "args": [
            "self",
            "config_file"
          ],
          "docstring": "Save current configuration to JSON file.\n\nArgs:\n    config_file: Path to save configuration file",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 314,
          "args": [
            "self"
          ],
          "docstring": "Get complete configuration as dictionary.\n\nReturns:\n    Complete configuration dictionary",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 332,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize server manager with configuration.\n\nArgs:\n    config: Context server configuration instance",
          "decorators": []
        },
        {
          "name": "_signal_handler",
          "line": 350,
          "args": [
            "self",
            "signum",
            "frame"
          ],
          "docstring": "Handle shutdown signals for graceful server termination.\n\nArgs:\n    signum: Signal number received\n    frame: Current stack frame",
          "decorators": []
        },
        {
          "name": "start",
          "line": 362,
          "args": [
            "self"
          ],
          "docstring": "Start the context server process.\n\nReturns:\n    True if server started successfully",
          "decorators": []
        },
        {
          "name": "stop",
          "line": 414,
          "args": [
            "self"
          ],
          "docstring": "Stop the context server process gracefully.\n\nReturns:\n    True if server stopped successfully",
          "decorators": []
        },
        {
          "name": "restart",
          "line": 447,
          "args": [
            "self"
          ],
          "docstring": "Restart the context server process.\n\nReturns:\n    True if server restarted successfully",
          "decorators": []
        },
        {
          "name": "is_running",
          "line": 463,
          "args": [
            "self"
          ],
          "docstring": "Check if server process is currently running.\n\nReturns:\n    True if server process is active",
          "decorators": []
        },
        {
          "name": "get_status",
          "line": 472,
          "args": [
            "self"
          ],
          "docstring": "Get current server status information.\n\nReturns:\n    Dictionary with server status details",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextServerConfig",
          "line": 21,
          "bases": [],
          "docstring": "Configuration manager for Framework0 Enhanced Context Server.\n\nThis class handles loading, validation, and management of server\nconfiguration from files, environment variables, and command-line\narguments with support for multiple deployment environments.",
          "methods": [
            {
              "name": "__init__",
              "line": 30,
              "args": [
                "self",
                "config_file"
              ],
              "docstring": "Initialize configuration manager with optional config file.\n\nArgs:\n    config_file: Path to configuration file (JSON format)"
            },
            {
              "name": "_load_default_config",
              "line": 55,
              "args": [
                "self"
              ],
              "docstring": "Load default configuration values for all settings."
            },
            {
              "name": "_load_config_file",
              "line": 115,
              "args": [
                "self",
                "config_file"
              ],
              "docstring": "Load configuration from JSON file.\n\nArgs:\n    config_file: Path to JSON configuration file"
            },
            {
              "name": "_load_environment_config",
              "line": 141,
              "args": [
                "self"
              ],
              "docstring": "Load configuration overrides from environment variables."
            },
            {
              "name": "_deep_merge",
              "line": 197,
              "args": [
                "self",
                "base",
                "update"
              ],
              "docstring": "Deep merge two dictionaries, updating base with values from update.\n\nArgs:\n    base: Base dictionary to update\n    update: Dictionary with updates to apply"
            },
            {
              "name": "_set_nested_value",
              "line": 211,
              "args": [
                "self",
                "config",
                "path",
                "value"
              ],
              "docstring": "Set nested configuration value using dot notation path.\n\nArgs:\n    config: Configuration dictionary to update\n    path: Dot notation path (e.g., 'server.host')\n    value: Value to set"
            },
            {
              "name": "get",
              "line": 232,
              "args": [
                "self",
                "path",
                "default"
              ],
              "docstring": "Get configuration value using dot notation path.\n\nArgs:\n    path: Dot notation path to configuration value\n    default: Default value if path not found\n    \nReturns:\n    Configuration value or default"
            },
            {
              "name": "set",
              "line": 253,
              "args": [
                "self",
                "path",
                "value"
              ],
              "docstring": "Set configuration value using dot notation path.\n\nArgs:\n    path: Dot notation path to set\n    value: Value to set"
            },
            {
              "name": "validate",
              "line": 263,
              "args": [
                "self"
              ],
              "docstring": "Validate configuration and return list of errors.\n\nReturns:\n    List of validation error messages"
            },
            {
              "name": "save",
              "line": 294,
              "args": [
                "self",
                "config_file"
              ],
              "docstring": "Save current configuration to JSON file.\n\nArgs:\n    config_file: Path to save configuration file"
            },
            {
              "name": "to_dict",
              "line": 314,
              "args": [
                "self"
              ],
              "docstring": "Get complete configuration as dictionary.\n\nReturns:\n    Complete configuration dictionary"
            }
          ]
        },
        {
          "name": "ServerManager",
          "line": 324,
          "bases": [],
          "docstring": "Server process manager for starting, stopping, and monitoring the context server.\n\nThis class handles server lifecycle management including process control,\nhealth monitoring, and graceful shutdown handling for production deployments.",
          "methods": [
            {
              "name": "__init__",
              "line": 332,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize server manager with configuration.\n\nArgs:\n    config: Context server configuration instance"
            },
            {
              "name": "_signal_handler",
              "line": 350,
              "args": [
                "self",
                "signum",
                "frame"
              ],
              "docstring": "Handle shutdown signals for graceful server termination.\n\nArgs:\n    signum: Signal number received\n    frame: Current stack frame"
            },
            {
              "name": "start",
              "line": 362,
              "args": [
                "self"
              ],
              "docstring": "Start the context server process.\n\nReturns:\n    True if server started successfully"
            },
            {
              "name": "stop",
              "line": 414,
              "args": [
                "self"
              ],
              "docstring": "Stop the context server process gracefully.\n\nReturns:\n    True if server stopped successfully"
            },
            {
              "name": "restart",
              "line": 447,
              "args": [
                "self"
              ],
              "docstring": "Restart the context server process.\n\nReturns:\n    True if server restarted successfully"
            },
            {
              "name": "is_running",
              "line": 463,
              "args": [
                "self"
              ],
              "docstring": "Check if server process is currently running.\n\nReturns:\n    True if server process is active"
            },
            {
              "name": "get_status",
              "line": 472,
              "args": [
                "self"
              ],
              "docstring": "Get current server status information.\n\nReturns:\n    Dictionary with server status details"
            }
          ]
        }
      ],
      "lines_of_code": 569,
      "complexity_score": 78,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "86fca82fc2cca15452fc99f945b58f1f",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "setup.cfg": {
      "name": "setup.cfg",
      "path": "setup.cfg",
      "component_type": "utility",
      "description": "Framework component - no description available",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 9,
      "complexity_score": 0,
      "last_modified": "2025-10-04T16:17:36.649843",
      "checksum": "b592d1974672031f4894385ddbd21956",
      "framework_role": "general_utility",
      "stability": "stable"
    },
    "src/__init__.py": {
      "name": "src/__init__.py",
      "path": "src/__init__.py",
      "component_type": "utility",
      "description": "src package initialization",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-04T14:13:35.121310",
      "checksum": "05c5c9e1714e37950ab0178204a45590",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "src/analysis/__init__.py": {
      "name": "src/analysis/__init__.py",
      "path": "src/analysis/__init__.py",
      "component_type": "utility",
      "description": "Framework0 Analysis Package",
      "dependencies": [
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        "docs/enhanced_analysis_framework_test_report.json",
        "scriptlets/framework.py",
        "src/analysis/enhanced_framework.py",
        "src/analysis/framework.py",
        "tests/test_analysis_framework.py",
        "tests/test_async_load_framework.py",
        "tests/test_enhanced_analysis_framework.py",
        "tests/test_framework0_integration.py",
        "tests/test_scriptlet_framework.py",
        "tools/baseline_framework_analyzer.py",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        "docs/method_index.md",
        "src/analysis/enhanced_framework.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "src/analysis/components.py",
        "src/analysis/enhanced_components.py"
      ],
      "exports": [],
      "imports": [
        "framework",
        "enhanced_framework",
        "components"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 28,
      "complexity_score": 6,
      "last_modified": "2025-10-05T01:06:28.785161",
      "checksum": "082892ea60846e3d1d2f721e5c98a871",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "src/analysis/components.py": {
      "name": "src/analysis/components.py",
      "path": "src/analysis/components.py",
      "component_type": "utility",
      "description": "Enhanced Analysis Components",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        "docs/enhanced_analysis_framework_test_report.json",
        "scriptlets/framework.py",
        "src/analysis/enhanced_framework.py",
        "src/analysis/framework.py",
        "tests/test_analysis_framework.py",
        "tests/test_async_load_framework.py",
        "tests/test_enhanced_analysis_framework.py",
        "tests/test_framework0_integration.py",
        "tests/test_scriptlet_framework.py",
        "tools/baseline_framework_analyzer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "_analyze_impl",
        "_analyze_sequence",
        "_analyze_numeric_data",
        "_percentile",
        "_analyze_string_data",
        "_analyze_dictionary",
        "_analyze_string",
        "_analyze_other",
        "_assess_data_quality",
        "_assess_sequence_quality",
        "_assess_dictionary_quality",
        "_assess_string_quality",
        "__init__",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "EnhancedSummarizer",
        "StatisticalAnalyzer",
        "PatternAnalyzer",
        "QualityAnalyzer"
      ],
      "imports": [
        "os",
        "statistics",
        "json",
        "typing",
        "datetime",
        "collections",
        "framework",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 54,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize EnhancedSummarizer with configuration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 59,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform enhanced summarization analysis.\n\nArgs:\n    data: Input data for summarization\n    config: Analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive summary information",
          "decorators": []
        },
        {
          "name": "_analyze_sequence",
          "line": 96,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze sequence data (list or tuple).",
          "decorators": []
        },
        {
          "name": "_analyze_numeric_data",
          "line": 138,
          "args": [
            "self",
            "numeric_data"
          ],
          "docstring": "Perform comprehensive numeric data analysis.",
          "decorators": []
        },
        {
          "name": "_percentile",
          "line": 201,
          "args": [
            "self",
            "sorted_data",
            "percentile"
          ],
          "docstring": "Calculate percentile value from sorted data.",
          "decorators": []
        },
        {
          "name": "_analyze_string_data",
          "line": 222,
          "args": [
            "self",
            "string_data"
          ],
          "docstring": "Analyze string data for text characteristics.",
          "decorators": []
        },
        {
          "name": "_analyze_dictionary",
          "line": 254,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze dictionary data structure.",
          "decorators": []
        },
        {
          "name": "_analyze_string",
          "line": 293,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze single string data.",
          "decorators": []
        },
        {
          "name": "_analyze_other",
          "line": 324,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze other data types.",
          "decorators": []
        },
        {
          "name": "_assess_data_quality",
          "line": 343,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Comprehensive data quality assessment.",
          "decorators": []
        },
        {
          "name": "_assess_sequence_quality",
          "line": 368,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Assess quality of sequence data.",
          "decorators": []
        },
        {
          "name": "_assess_dictionary_quality",
          "line": 395,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Assess quality of dictionary data.",
          "decorators": []
        },
        {
          "name": "_assess_string_quality",
          "line": 415,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Assess quality of string data.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 439,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize StatisticalAnalyzer with configuration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 444,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform comprehensive statistical analysis.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 459,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize PatternAnalyzer with configuration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 464,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform pattern detection analysis.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 479,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize QualityAnalyzer with configuration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 484,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform data quality analysis.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedSummarizer",
          "line": 38,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Advanced data summarization analyzer with comprehensive statistics.\n\nProvides detailed summaries of data including descriptive statistics,\ndistribution analysis, and intelligent insights generation.\n\nFeatures:\n    - Descriptive statistics (mean, median, mode, standard deviation)\n    - Distribution analysis (quartiles, percentiles, skewness)\n    - Data type analysis and validation\n    - Missing value detection and reporting\n    - Outlier identification\n    - Correlation analysis for multi-dimensional data",
          "methods": [
            {
              "name": "__init__",
              "line": 54,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize EnhancedSummarizer with configuration."
            },
            {
              "name": "_analyze_impl",
              "line": 59,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform enhanced summarization analysis.\n\nArgs:\n    data: Input data for summarization\n    config: Analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive summary information"
            },
            {
              "name": "_analyze_sequence",
              "line": 96,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze sequence data (list or tuple)."
            },
            {
              "name": "_analyze_numeric_data",
              "line": 138,
              "args": [
                "self",
                "numeric_data"
              ],
              "docstring": "Perform comprehensive numeric data analysis."
            },
            {
              "name": "_percentile",
              "line": 201,
              "args": [
                "self",
                "sorted_data",
                "percentile"
              ],
              "docstring": "Calculate percentile value from sorted data."
            },
            {
              "name": "_analyze_string_data",
              "line": 222,
              "args": [
                "self",
                "string_data"
              ],
              "docstring": "Analyze string data for text characteristics."
            },
            {
              "name": "_analyze_dictionary",
              "line": 254,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze dictionary data structure."
            },
            {
              "name": "_analyze_string",
              "line": 293,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze single string data."
            },
            {
              "name": "_analyze_other",
              "line": 324,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze other data types."
            },
            {
              "name": "_assess_data_quality",
              "line": 343,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Comprehensive data quality assessment."
            },
            {
              "name": "_assess_sequence_quality",
              "line": 368,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Assess quality of sequence data."
            },
            {
              "name": "_assess_dictionary_quality",
              "line": 395,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Assess quality of dictionary data."
            },
            {
              "name": "_assess_string_quality",
              "line": 415,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Assess quality of string data."
            }
          ]
        },
        {
          "name": "StatisticalAnalyzer",
          "line": 431,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Comprehensive statistical analysis for numeric data.\n\nProvides advanced statistical calculations, distribution analysis,\nhypothesis testing, and correlation analysis capabilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 439,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize StatisticalAnalyzer with configuration."
            },
            {
              "name": "_analyze_impl",
              "line": 444,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform comprehensive statistical analysis."
            }
          ]
        },
        {
          "name": "PatternAnalyzer",
          "line": 451,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Pattern detection and trend analysis for data sequences.\n\nIdentifies trends, cycles, anomalies, and recurring patterns\nin time series and sequential data.",
          "methods": [
            {
              "name": "__init__",
              "line": 459,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize PatternAnalyzer with configuration."
            },
            {
              "name": "_analyze_impl",
              "line": 464,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform pattern detection analysis."
            }
          ]
        },
        {
          "name": "QualityAnalyzer",
          "line": 471,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Data quality assessment and validation analyzer.\n\nEvaluates data completeness, consistency, accuracy, and validity\nproviding actionable quality metrics and improvement recommendations.",
          "methods": [
            {
              "name": "__init__",
              "line": 479,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize QualityAnalyzer with configuration."
            },
            {
              "name": "_analyze_impl",
              "line": 484,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform data quality analysis."
            }
          ]
        }
      ],
      "lines_of_code": 389,
      "complexity_score": 56,
      "last_modified": "2025-10-04T16:03:22.522742",
      "checksum": "4e966d0448a8ce65c1be99898aaa78d9",
      "framework_role": "general_utility",
      "stability": "stable"
    },
    "src/analysis/enhanced_components.py": {
      "name": "src/analysis/enhanced_components.py",
      "path": "src/analysis/enhanced_components.py",
      "component_type": "utility",
      "description": "Enhanced Analysis Components with Context Integration",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        "docs/method_index.md",
        "src/analysis/enhanced_framework.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "src/analysis/components.py",
        ".restructuring_backup/src/analysis/registry.py",
        "src/analysis/registry.py"
      ],
      "exports": [
        "__init__",
        "_analyze_impl",
        "_create_enhanced_summary",
        "_store_summary_in_context",
        "_compare_with_history",
        "_calculate_multi_period_trends",
        "_analyze_trends",
        "_generate_context_recommendations",
        "_generate_trend_recommendations",
        "_update_performance_metrics",
        "_track_analysis_trends",
        "__init__",
        "_analyze_impl",
        "_collect_metrics",
        "_analyze_dict_metrics",
        "_analyze_sequence_metrics",
        "_analyze_general_metrics",
        "_collect_context_metrics",
        "_analyze_performance_metrics",
        "_analyze_metric_trends",
        "_calculate_metric_trend",
        "_summarize_metric_trends",
        "_check_alert_conditions",
        "_generate_metrics_recommendations",
        "_store_metrics_in_context",
        "ContextAwareSummarizer",
        "MetricsAnalyzer",
        "RegisteredContextAwareSummarizer",
        "RegisteredMetricsAnalyzer"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "statistics",
        "typing",
        "datetime",
        "collections",
        "src.core.logger",
        "orchestrator.context.context",
        "enhanced_framework",
        "components",
        "registry"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 62,
          "args": [
            "self",
            "name",
            "config",
            "context"
          ],
          "docstring": "Initialize context-aware summarizer with enhanced capabilities.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 87,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform context-aware summarization analysis.\n\nArgs:\n    data: Input data for summarization\n    config: Enhanced analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive summary with context integration",
          "decorators": []
        },
        {
          "name": "_create_enhanced_summary",
          "line": 128,
          "args": [
            "self",
            "base_summary",
            "data",
            "config"
          ],
          "docstring": "Create enhanced summary with context integration.",
          "decorators": []
        },
        {
          "name": "_store_summary_in_context",
          "line": 158,
          "args": [
            "self",
            "summary"
          ],
          "docstring": "Store summary results in context for future reference.",
          "decorators": []
        },
        {
          "name": "_compare_with_history",
          "line": 188,
          "args": [
            "self",
            "current_summary"
          ],
          "docstring": "Compare current summary with historical data.",
          "decorators": []
        },
        {
          "name": "_calculate_multi_period_trends",
          "line": 235,
          "args": [
            "self"
          ],
          "docstring": "Calculate trends across multiple historical periods.",
          "decorators": []
        },
        {
          "name": "_analyze_trends",
          "line": 282,
          "args": [
            "self",
            "summary"
          ],
          "docstring": "Analyze current trends in the data.",
          "decorators": []
        },
        {
          "name": "_generate_context_recommendations",
          "line": 334,
          "args": [
            "self",
            "summary",
            "data"
          ],
          "docstring": "Generate context-aware recommendations for data improvement.",
          "decorators": []
        },
        {
          "name": "_generate_trend_recommendations",
          "line": 395,
          "args": [
            "self",
            "patterns"
          ],
          "docstring": "Generate recommendations based on detected patterns.",
          "decorators": []
        },
        {
          "name": "_update_performance_metrics",
          "line": 416,
          "args": [
            "self",
            "start_time",
            "data_size"
          ],
          "docstring": "Update performance tracking metrics.",
          "decorators": []
        },
        {
          "name": "_track_analysis_trends",
          "line": 438,
          "args": [
            "self",
            "summary"
          ],
          "docstring": "Track analysis trends for long-term monitoring.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 480,
          "args": [
            "self",
            "name",
            "config",
            "context"
          ],
          "docstring": "Initialize metrics analyzer with enhanced capabilities.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 493,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Perform comprehensive metrics analysis.\n\nArgs:\n    data: Metrics data for analysis (can be various formats)\n    config: Enhanced analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive metrics analysis",
          "decorators": []
        },
        {
          "name": "_collect_metrics",
          "line": 545,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Collect comprehensive metrics from input data.",
          "decorators": []
        },
        {
          "name": "_analyze_dict_metrics",
          "line": 568,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze metrics for dictionary data.",
          "decorators": []
        },
        {
          "name": "_analyze_sequence_metrics",
          "line": 578,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze metrics for sequence data.",
          "decorators": []
        },
        {
          "name": "_analyze_general_metrics",
          "line": 602,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Analyze metrics for general data types.",
          "decorators": []
        },
        {
          "name": "_collect_context_metrics",
          "line": 612,
          "args": [
            "self"
          ],
          "docstring": "Collect metrics from the Context system.",
          "decorators": []
        },
        {
          "name": "_analyze_performance_metrics",
          "line": 647,
          "args": [
            "self",
            "collected_metrics"
          ],
          "docstring": "Analyze performance characteristics of collected metrics.",
          "decorators": []
        },
        {
          "name": "_analyze_metric_trends",
          "line": 691,
          "args": [
            "self"
          ],
          "docstring": "Analyze trends in collected metrics over time.",
          "decorators": []
        },
        {
          "name": "_calculate_metric_trend",
          "line": 716,
          "args": [
            "self",
            "metric_history"
          ],
          "docstring": "Calculate trend for a specific metric.",
          "decorators": []
        },
        {
          "name": "_summarize_metric_trends",
          "line": 772,
          "args": [
            "self",
            "metric_trends"
          ],
          "docstring": "Summarize overall trends across all metrics.",
          "decorators": []
        },
        {
          "name": "_check_alert_conditions",
          "line": 815,
          "args": [
            "self",
            "metrics"
          ],
          "docstring": "Check collected metrics against alert thresholds.",
          "decorators": []
        },
        {
          "name": "_generate_metrics_recommendations",
          "line": 859,
          "args": [
            "self",
            "metrics_result"
          ],
          "docstring": "Generate recommendations based on metrics analysis.",
          "decorators": []
        },
        {
          "name": "_store_metrics_in_context",
          "line": 895,
          "args": [
            "self",
            "metrics_result"
          ],
          "docstring": "Store metrics analysis results in context.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextAwareSummarizer",
          "line": 46,
          "bases": [
            "EnhancedAnalyzerV2"
          ],
          "docstring": "Context-aware data summarizer with advanced tracking and integration.\n\nExtends EnhancedSummarizer with Context system integration, providing\ncomprehensive data summarization with full traceability and advanced\nstatistical analysis capabilities.\n\nFeatures:\n    - Context-integrated statistical analysis\n    - Historical data tracking and comparison\n    - Advanced pattern detection with context awareness\n    - Quality assessment with context-based recommendations\n    - Real-time performance monitoring",
          "methods": [
            {
              "name": "__init__",
              "line": 62,
              "args": [
                "self",
                "name",
                "config",
                "context"
              ],
              "docstring": "Initialize context-aware summarizer with enhanced capabilities."
            },
            {
              "name": "_analyze_impl",
              "line": 87,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform context-aware summarization analysis.\n\nArgs:\n    data: Input data for summarization\n    config: Enhanced analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive summary with context integration"
            },
            {
              "name": "_create_enhanced_summary",
              "line": 128,
              "args": [
                "self",
                "base_summary",
                "data",
                "config"
              ],
              "docstring": "Create enhanced summary with context integration."
            },
            {
              "name": "_store_summary_in_context",
              "line": 158,
              "args": [
                "self",
                "summary"
              ],
              "docstring": "Store summary results in context for future reference."
            },
            {
              "name": "_compare_with_history",
              "line": 188,
              "args": [
                "self",
                "current_summary"
              ],
              "docstring": "Compare current summary with historical data."
            },
            {
              "name": "_calculate_multi_period_trends",
              "line": 235,
              "args": [
                "self"
              ],
              "docstring": "Calculate trends across multiple historical periods."
            },
            {
              "name": "_analyze_trends",
              "line": 282,
              "args": [
                "self",
                "summary"
              ],
              "docstring": "Analyze current trends in the data."
            },
            {
              "name": "_generate_context_recommendations",
              "line": 334,
              "args": [
                "self",
                "summary",
                "data"
              ],
              "docstring": "Generate context-aware recommendations for data improvement."
            },
            {
              "name": "_generate_trend_recommendations",
              "line": 395,
              "args": [
                "self",
                "patterns"
              ],
              "docstring": "Generate recommendations based on detected patterns."
            },
            {
              "name": "_update_performance_metrics",
              "line": 416,
              "args": [
                "self",
                "start_time",
                "data_size"
              ],
              "docstring": "Update performance tracking metrics."
            },
            {
              "name": "_track_analysis_trends",
              "line": 438,
              "args": [
                "self",
                "summary"
              ],
              "docstring": "Track analysis trends for long-term monitoring."
            }
          ]
        },
        {
          "name": "MetricsAnalyzer",
          "line": 465,
          "bases": [
            "EnhancedAnalyzerV2"
          ],
          "docstring": "Comprehensive metrics analyzer with Context integration.\n\nProvides advanced metrics collection, analysis, and monitoring\ncapabilities with full Context system integration.\n\nFeatures:\n    - Real-time performance monitoring\n    - Resource usage tracking\n    - Context-aware metric correlation\n    - Historical trend analysis\n    - Alert generation and notification",
          "methods": [
            {
              "name": "__init__",
              "line": 480,
              "args": [
                "self",
                "name",
                "config",
                "context"
              ],
              "docstring": "Initialize metrics analyzer with enhanced capabilities."
            },
            {
              "name": "_analyze_impl",
              "line": 493,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Perform comprehensive metrics analysis.\n\nArgs:\n    data: Metrics data for analysis (can be various formats)\n    config: Enhanced analysis configuration\n    \nReturns:\n    Dictionary containing comprehensive metrics analysis"
            },
            {
              "name": "_collect_metrics",
              "line": 545,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Collect comprehensive metrics from input data."
            },
            {
              "name": "_analyze_dict_metrics",
              "line": 568,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze metrics for dictionary data."
            },
            {
              "name": "_analyze_sequence_metrics",
              "line": 578,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze metrics for sequence data."
            },
            {
              "name": "_analyze_general_metrics",
              "line": 602,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Analyze metrics for general data types."
            },
            {
              "name": "_collect_context_metrics",
              "line": 612,
              "args": [
                "self"
              ],
              "docstring": "Collect metrics from the Context system."
            },
            {
              "name": "_analyze_performance_metrics",
              "line": 647,
              "args": [
                "self",
                "collected_metrics"
              ],
              "docstring": "Analyze performance characteristics of collected metrics."
            },
            {
              "name": "_analyze_metric_trends",
              "line": 691,
              "args": [
                "self"
              ],
              "docstring": "Analyze trends in collected metrics over time."
            },
            {
              "name": "_calculate_metric_trend",
              "line": 716,
              "args": [
                "self",
                "metric_history"
              ],
              "docstring": "Calculate trend for a specific metric."
            },
            {
              "name": "_summarize_metric_trends",
              "line": 772,
              "args": [
                "self",
                "metric_trends"
              ],
              "docstring": "Summarize overall trends across all metrics."
            },
            {
              "name": "_check_alert_conditions",
              "line": 815,
              "args": [
                "self",
                "metrics"
              ],
              "docstring": "Check collected metrics against alert thresholds."
            },
            {
              "name": "_generate_metrics_recommendations",
              "line": 859,
              "args": [
                "self",
                "metrics_result"
              ],
              "docstring": "Generate recommendations based on metrics analysis."
            },
            {
              "name": "_store_metrics_in_context",
              "line": 895,
              "args": [
                "self",
                "metrics_result"
              ],
              "docstring": "Store metrics analysis results in context."
            }
          ]
        },
        {
          "name": "RegisteredContextAwareSummarizer",
          "line": 942,
          "bases": [
            "ContextAwareSummarizer"
          ],
          "docstring": "Registered version of ContextAwareSummarizer for automatic discovery.",
          "methods": []
        },
        {
          "name": "RegisteredMetricsAnalyzer",
          "line": 953,
          "bases": [
            "MetricsAnalyzer"
          ],
          "docstring": "Registered version of MetricsAnalyzer for automatic discovery.",
          "methods": []
        }
      ],
      "lines_of_code": 766,
      "complexity_score": 141,
      "last_modified": "2025-10-04T17:23:07.905833",
      "checksum": "294e7df275a883351c97948c40f9ad05",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "src/analysis/enhanced_framework.py": {
      "name": "src/analysis/enhanced_framework.py",
      "path": "src/analysis/enhanced_framework.py",
      "component_type": "utility",
      "description": "Enhanced Analysis Framework with Context Integration",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        "docs/enhanced_analysis_framework_test_report.json",
        "scriptlets/framework.py",
        "src/analysis/framework.py",
        "tests/test_analysis_framework.py",
        "tests/test_async_load_framework.py",
        "tests/test_enhanced_analysis_framework.py",
        "tests/test_framework0_integration.py",
        "tests/test_scriptlet_framework.py",
        "tools/baseline_framework_analyzer.py",
        ".restructuring_backup/src/analysis/registry.py",
        "src/analysis/registry.py"
      ],
      "exports": [
        "create_enhanced_analyzer",
        "__init__",
        "to_dict",
        "from_dict",
        "add_context_key_created",
        "add_context_key_accessed",
        "add_dependency_resolved",
        "add_dependency_failed",
        "to_dict",
        "__init__",
        "_initialize_context_keys",
        "add_dependency",
        "remove_dependency",
        "_check_dependencies",
        "send_message",
        "receive_messages",
        "share_data",
        "get_shared_data",
        "_execution_context",
        "analyze",
        "_analyze_impl",
        "create_enhanced_pipeline",
        "EnhancedAnalysisError",
        "EnhancedAnalysisConfig",
        "EnhancedAnalysisResult",
        "EnhancedAnalyzerV2",
        "EnhancedAnalysisRegistry"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "threading",
        "traceback",
        "abc",
        "typing",
        "dataclasses",
        "datetime",
        "pathlib",
        "contextlib",
        "src.core.logger",
        "orchestrator.context.context",
        "framework",
        "registry"
      ],
      "functions": [
        {
          "name": "create_enhanced_analyzer",
          "line": 679,
          "args": [
            "analyzer_type",
            "name",
            "config",
            "context"
          ],
          "docstring": "Create enhanced analyzer instance with Context integration.\n\nArgs:\n    analyzer_type: Type of analyzer to create\n    name: Name for analyzer instance\n    config: Enhanced configuration\n    context: Context instance for integration\n    \nReturns:\n    Configured enhanced analyzer instance",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 50,
          "args": [
            "self",
            "message",
            "error_code",
            "context",
            "analyzer_name",
            "execution_context"
          ],
          "docstring": "Initialize enhanced error with Context integration.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 102,
          "args": [
            "self"
          ],
          "docstring": "Convert enhanced configuration to dictionary.",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 128,
          "args": [
            "cls",
            "config_dict"
          ],
          "docstring": "Create enhanced configuration from dictionary.",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "add_context_key_created",
          "line": 187,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Record that a context key was created.",
          "decorators": []
        },
        {
          "name": "add_context_key_accessed",
          "line": 192,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Record that a context key was accessed.",
          "decorators": []
        },
        {
          "name": "add_dependency_resolved",
          "line": 197,
          "args": [
            "self",
            "dependency"
          ],
          "docstring": "Record that a dependency was resolved.",
          "decorators": []
        },
        {
          "name": "add_dependency_failed",
          "line": 202,
          "args": [
            "self",
            "dependency"
          ],
          "docstring": "Record that a dependency failed to resolve.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 207,
          "args": [
            "self"
          ],
          "docstring": "Convert enhanced result to dictionary.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 252,
          "args": [
            "self",
            "name",
            "config",
            "context"
          ],
          "docstring": "Initialize enhanced analyzer with Context integration.\n\nArgs:\n    name: Unique analyzer name\n    config: Enhanced configuration (uses defaults if None)\n    context: Context instance for state management (creates if None)",
          "decorators": []
        },
        {
          "name": "_initialize_context_keys",
          "line": 290,
          "args": [
            "self"
          ],
          "docstring": "Initialize analyzer-specific context keys.",
          "decorators": []
        },
        {
          "name": "add_dependency",
          "line": 302,
          "args": [
            "self",
            "analyzer_name"
          ],
          "docstring": "Add analyzer dependency.",
          "decorators": []
        },
        {
          "name": "remove_dependency",
          "line": 315,
          "args": [
            "self",
            "analyzer_name"
          ],
          "docstring": "Remove analyzer dependency.",
          "decorators": []
        },
        {
          "name": "_check_dependencies",
          "line": 328,
          "args": [
            "self"
          ],
          "docstring": "Check if all dependencies are satisfied.",
          "decorators": []
        },
        {
          "name": "send_message",
          "line": 343,
          "args": [
            "self",
            "target_analyzer",
            "message"
          ],
          "docstring": "Send message to another analyzer.",
          "decorators": []
        },
        {
          "name": "receive_messages",
          "line": 364,
          "args": [
            "self"
          ],
          "docstring": "Receive messages from other analyzers.",
          "decorators": []
        },
        {
          "name": "share_data",
          "line": 392,
          "args": [
            "self",
            "data_key",
            "data"
          ],
          "docstring": "Share data with other analyzers.",
          "decorators": []
        },
        {
          "name": "get_shared_data",
          "line": 409,
          "args": [
            "self",
            "data_key"
          ],
          "docstring": "Get shared data from other analyzers.",
          "decorators": []
        },
        {
          "name": "_execution_context",
          "line": 426,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Context manager for execution tracking and cleanup.",
          "decorators": [
            "contextmanager"
          ]
        },
        {
          "name": "analyze",
          "line": 464,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Enhanced analysis method with Context integration and advanced features.\n\nProvides comprehensive analysis workflow with dependency checking,\nContext integration, performance monitoring, and error recovery.\n\nArgs:\n    data: Input data for analysis\n    config: Enhanced configuration override\n    \nReturns:\n    EnhancedAnalysisResult with comprehensive metadata and tracking",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 579,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Default implementation for enhanced analyzer.\n\nThis provides a basic implementation that can be overridden by subclasses.\nFor testing and base functionality.\n\nArgs:\n    data: Input data for analysis\n    config: Enhanced analysis configuration\n    \nReturns:\n    Basic analysis result",
          "decorators": []
        },
        {
          "name": "create_enhanced_pipeline",
          "line": 617,
          "args": [
            "analyzer_configs",
            "context",
            "pipeline_name"
          ],
          "docstring": "Create enhanced analyzer pipeline with dependency resolution and Context integration.\n\nArgs:\n    analyzer_configs: List of analyzer configuration dictionaries\n    context: Shared context instance (creates if None)\n    pipeline_name: Name for the pipeline\n    \nReturns:\n    List of configured enhanced analyzer instances in execution order",
          "decorators": [
            "staticmethod"
          ]
        }
      ],
      "classes": [
        {
          "name": "EnhancedAnalysisError",
          "line": 42,
          "bases": [
            "AnalysisError"
          ],
          "docstring": "Enhanced analysis error with Context integration and advanced error tracking.\n\nProvides comprehensive error information including context state,\nexecution trace, and recovery suggestions.",
          "methods": [
            {
              "name": "__init__",
              "line": 50,
              "args": [
                "self",
                "message",
                "error_code",
                "context",
                "analyzer_name",
                "execution_context"
              ],
              "docstring": "Initialize enhanced error with Context integration."
            }
          ]
        },
        {
          "name": "EnhancedAnalysisConfig",
          "line": 69,
          "bases": [
            "AnalysisConfig"
          ],
          "docstring": "Enhanced analysis configuration with Context integration and advanced features.\n\nExtends base configuration with Context system integration,\npipeline management, and advanced optimization settings.",
          "methods": [
            {
              "name": "to_dict",
              "line": 102,
              "args": [
                "self"
              ],
              "docstring": "Convert enhanced configuration to dictionary."
            },
            {
              "name": "from_dict",
              "line": 128,
              "args": [
                "cls",
                "config_dict"
              ],
              "docstring": "Create enhanced configuration from dictionary."
            }
          ]
        },
        {
          "name": "EnhancedAnalysisResult",
          "line": 152,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Enhanced analysis result with Context integration and advanced metadata.\n\nExtends base result with Context system integration, dependency tracking,\nand comprehensive execution information.",
          "methods": [
            {
              "name": "add_context_key_created",
              "line": 187,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Record that a context key was created."
            },
            {
              "name": "add_context_key_accessed",
              "line": 192,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Record that a context key was accessed."
            },
            {
              "name": "add_dependency_resolved",
              "line": 197,
              "args": [
                "self",
                "dependency"
              ],
              "docstring": "Record that a dependency was resolved."
            },
            {
              "name": "add_dependency_failed",
              "line": 202,
              "args": [
                "self",
                "dependency"
              ],
              "docstring": "Record that a dependency failed to resolve."
            },
            {
              "name": "to_dict",
              "line": 207,
              "args": [
                "self"
              ],
              "docstring": "Convert enhanced result to dictionary."
            }
          ]
        },
        {
          "name": "EnhancedAnalyzerV2",
          "line": 235,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Enhanced analyzer base class with Context integration and advanced features.\n\nExtends BaseAnalyzerV2 with Context system integration, dependency management,\nadvanced error handling, and inter-analyzer communication capabilities.\n\nFeatures:\n    - Full Context system integration for state management\n    - Advanced dependency tracking and resolution\n    - Inter-analyzer communication and data sharing\n    - Enhanced error handling with recovery mechanisms  \n    - Performance monitoring and resource optimization\n    - Plugin architecture support\n    - Real-time pipeline execution",
          "methods": [
            {
              "name": "__init__",
              "line": 252,
              "args": [
                "self",
                "name",
                "config",
                "context"
              ],
              "docstring": "Initialize enhanced analyzer with Context integration.\n\nArgs:\n    name: Unique analyzer name\n    config: Enhanced configuration (uses defaults if None)\n    context: Context instance for state management (creates if None)"
            },
            {
              "name": "_initialize_context_keys",
              "line": 290,
              "args": [
                "self"
              ],
              "docstring": "Initialize analyzer-specific context keys."
            },
            {
              "name": "add_dependency",
              "line": 302,
              "args": [
                "self",
                "analyzer_name"
              ],
              "docstring": "Add analyzer dependency."
            },
            {
              "name": "remove_dependency",
              "line": 315,
              "args": [
                "self",
                "analyzer_name"
              ],
              "docstring": "Remove analyzer dependency."
            },
            {
              "name": "_check_dependencies",
              "line": 328,
              "args": [
                "self"
              ],
              "docstring": "Check if all dependencies are satisfied."
            },
            {
              "name": "send_message",
              "line": 343,
              "args": [
                "self",
                "target_analyzer",
                "message"
              ],
              "docstring": "Send message to another analyzer."
            },
            {
              "name": "receive_messages",
              "line": 364,
              "args": [
                "self"
              ],
              "docstring": "Receive messages from other analyzers."
            },
            {
              "name": "share_data",
              "line": 392,
              "args": [
                "self",
                "data_key",
                "data"
              ],
              "docstring": "Share data with other analyzers."
            },
            {
              "name": "get_shared_data",
              "line": 409,
              "args": [
                "self",
                "data_key"
              ],
              "docstring": "Get shared data from other analyzers."
            },
            {
              "name": "_execution_context",
              "line": 426,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Context manager for execution tracking and cleanup."
            },
            {
              "name": "analyze",
              "line": 464,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Enhanced analysis method with Context integration and advanced features.\n\nProvides comprehensive analysis workflow with dependency checking,\nContext integration, performance monitoring, and error recovery.\n\nArgs:\n    data: Input data for analysis\n    config: Enhanced configuration override\n    \nReturns:\n    EnhancedAnalysisResult with comprehensive metadata and tracking"
            },
            {
              "name": "_analyze_impl",
              "line": 579,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Default implementation for enhanced analyzer.\n\nThis provides a basic implementation that can be overridden by subclasses.\nFor testing and base functionality.\n\nArgs:\n    data: Input data for analysis\n    config: Enhanced analysis configuration\n    \nReturns:\n    Basic analysis result"
            }
          ]
        },
        {
          "name": "EnhancedAnalysisRegistry",
          "line": 608,
          "bases": [
            "AnalysisRegistry"
          ],
          "docstring": "Enhanced registry with Context integration and advanced features.\n\nExtends base registry with Context system integration, dependency management,\nand advanced analyzer lifecycle management.",
          "methods": [
            {
              "name": "create_enhanced_pipeline",
              "line": 617,
              "args": [
                "analyzer_configs",
                "context",
                "pipeline_name"
              ],
              "docstring": "Create enhanced analyzer pipeline with dependency resolution and Context integration.\n\nArgs:\n    analyzer_configs: List of analyzer configuration dictionaries\n    context: Shared context instance (creates if None)\n    pipeline_name: Name for the pipeline\n    \nReturns:\n    List of configured enhanced analyzer instances in execution order"
            }
          ]
        }
      ],
      "lines_of_code": 599,
      "complexity_score": 82,
      "last_modified": "2025-10-04T17:23:07.905833",
      "checksum": "0b6654efbd8a1fe0119e3e0fa9a4c8d9",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "src/analysis/framework.py": {
      "name": "src/analysis/framework.py",
      "path": "src/analysis/framework.py",
      "component_type": "utility",
      "description": "Core Analysis Framework",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "to_dict",
        "from_dict",
        "add_error",
        "add_warning",
        "add_statistic",
        "add_pattern",
        "to_dict",
        "__init__",
        "add_hook",
        "remove_hook",
        "_run_hooks",
        "_calculate_statistics",
        "_detect_patterns",
        "_assess_quality",
        "get_statistics",
        "_analyze_impl",
        "analyze",
        "AnalysisError",
        "AnalysisConfig",
        "AnalysisResult",
        "BaseAnalyzerV2"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "threading",
        "abc",
        "typing",
        "dataclasses",
        "datetime",
        "pathlib",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 48,
          "args": [
            "self",
            "message",
            "error_code",
            "context"
          ],
          "docstring": "Initialize AnalysisError with enhanced context information.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "Convert configuration to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "from_dict",
          "line": 104,
          "args": [
            "cls",
            "config_dict"
          ],
          "docstring": "Create configuration from dictionary with validation.",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "add_error",
          "line": 151,
          "args": [
            "self",
            "error"
          ],
          "docstring": "Add error message to result and mark as unsuccessful.",
          "decorators": []
        },
        {
          "name": "add_warning",
          "line": 156,
          "args": [
            "self",
            "warning"
          ],
          "docstring": "Add warning message to result.",
          "decorators": []
        },
        {
          "name": "add_statistic",
          "line": 160,
          "args": [
            "self",
            "name",
            "value"
          ],
          "docstring": "Add statistical measure to result.",
          "decorators": []
        },
        {
          "name": "add_pattern",
          "line": 164,
          "args": [
            "self",
            "pattern_type",
            "confidence",
            "details"
          ],
          "docstring": "Add detected pattern to result.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 175,
          "args": [
            "self"
          ],
          "docstring": "Convert result to dictionary for serialization.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 219,
          "args": [
            "self",
            "name",
            "config"
          ],
          "docstring": "Initialize analyzer with configuration and thread safety.\n\nArgs:\n    name: Unique name for this analyzer instance\n    config: Configuration object, uses defaults if None",
          "decorators": []
        },
        {
          "name": "add_hook",
          "line": 247,
          "args": [
            "self",
            "hook_type",
            "hook_function"
          ],
          "docstring": "Add hook function to specified hook type.",
          "decorators": []
        },
        {
          "name": "remove_hook",
          "line": 256,
          "args": [
            "self",
            "hook_type",
            "hook_function"
          ],
          "docstring": "Remove hook function from specified hook type.",
          "decorators": []
        },
        {
          "name": "_run_hooks",
          "line": 263,
          "args": [
            "self",
            "hook_type"
          ],
          "docstring": "Execute all hooks of specified type with provided arguments.",
          "decorators": []
        },
        {
          "name": "_calculate_statistics",
          "line": 271,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Calculate basic statistical measures for numeric data.",
          "decorators": []
        },
        {
          "name": "_detect_patterns",
          "line": 299,
          "args": [
            "self",
            "data",
            "threshold"
          ],
          "docstring": "Detect patterns in data using configurable threshold.",
          "decorators": []
        },
        {
          "name": "_assess_quality",
          "line": 328,
          "args": [
            "self",
            "data"
          ],
          "docstring": "Assess data quality returning score from 0.0 to 1.0.",
          "decorators": []
        },
        {
          "name": "get_statistics",
          "line": 360,
          "args": [
            "self"
          ],
          "docstring": "Get analyzer performance statistics.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 379,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Abstract method for analyzer-specific implementation.\n\nThis method must be implemented by all concrete analyzer classes\nto provide their specific analysis functionality.\n\nArgs:\n    data: Input data for analysis\n    config: Configuration for analysis operation\n    \nReturns:\n    Analysis result data (type depends on analyzer implementation)",
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "analyze",
          "line": 395,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Main analysis method with comprehensive error handling and logging.\n\nProvides standardized analysis workflow with timing, statistics,\npattern detection, quality assessment, and hook execution.\n\nArgs:\n    data: Input data for analysis\n    config: Optional configuration override\n    \nReturns:\n    AnalysisResult containing analysis data and metadata",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AnalysisError",
          "line": 40,
          "bases": [
            "Exception"
          ],
          "docstring": "Custom exception class for analysis-related errors.\n\nProvides enhanced error reporting with context information\nand support for error chaining in complex analysis pipelines.",
          "methods": [
            {
              "name": "__init__",
              "line": 48,
              "args": [
                "self",
                "message",
                "error_code",
                "context"
              ],
              "docstring": "Initialize AnalysisError with enhanced context information."
            }
          ]
        },
        {
          "name": "AnalysisConfig",
          "line": 58,
          "bases": [],
          "docstring": "Configuration class for analysis operations.\n\nProvides centralized configuration management with validation,\nserialization support, and environment-based overrides.",
          "methods": [
            {
              "name": "to_dict",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": "Convert configuration to dictionary for serialization."
            },
            {
              "name": "from_dict",
              "line": 104,
              "args": [
                "cls",
                "config_dict"
              ],
              "docstring": "Create configuration from dictionary with validation."
            }
          ]
        },
        {
          "name": "AnalysisResult",
          "line": 121,
          "bases": [
            "unknown_base"
          ],
          "docstring": "Standardized result structure for all analysis operations.\n\nProvides consistent result format with metadata, timing information,\nstatistical summaries, and comprehensive error handling.",
          "methods": [
            {
              "name": "add_error",
              "line": 151,
              "args": [
                "self",
                "error"
              ],
              "docstring": "Add error message to result and mark as unsuccessful."
            },
            {
              "name": "add_warning",
              "line": 156,
              "args": [
                "self",
                "warning"
              ],
              "docstring": "Add warning message to result."
            },
            {
              "name": "add_statistic",
              "line": 160,
              "args": [
                "self",
                "name",
                "value"
              ],
              "docstring": "Add statistical measure to result."
            },
            {
              "name": "add_pattern",
              "line": 164,
              "args": [
                "self",
                "pattern_type",
                "confidence",
                "details"
              ],
              "docstring": "Add detected pattern to result."
            },
            {
              "name": "to_dict",
              "line": 175,
              "args": [
                "self"
              ],
              "docstring": "Convert result to dictionary for serialization."
            }
          ]
        },
        {
          "name": "BaseAnalyzerV2",
          "line": 201,
          "bases": [
            "ABC"
          ],
          "docstring": "Abstract base class for all analyzers in the consolidated framework.\n\nProvides standardized interface, thread safety, comprehensive logging,\nand built-in statistical analysis capabilities. All analyzers should\ninherit from this class to ensure consistency and compatibility.\n\nFeatures:\n    - Thread-safe operations with RLock\n    - Comprehensive logging with debug support\n    - Hook system for extensible analysis pipelines\n    - Memory usage monitoring\n    - Statistical analysis utilities\n    - Pattern detection capabilities\n    - Data quality assessment",
          "methods": [
            {
              "name": "__init__",
              "line": 219,
              "args": [
                "self",
                "name",
                "config"
              ],
              "docstring": "Initialize analyzer with configuration and thread safety.\n\nArgs:\n    name: Unique name for this analyzer instance\n    config: Configuration object, uses defaults if None"
            },
            {
              "name": "add_hook",
              "line": 247,
              "args": [
                "self",
                "hook_type",
                "hook_function"
              ],
              "docstring": "Add hook function to specified hook type."
            },
            {
              "name": "remove_hook",
              "line": 256,
              "args": [
                "self",
                "hook_type",
                "hook_function"
              ],
              "docstring": "Remove hook function from specified hook type."
            },
            {
              "name": "_run_hooks",
              "line": 263,
              "args": [
                "self",
                "hook_type"
              ],
              "docstring": "Execute all hooks of specified type with provided arguments."
            },
            {
              "name": "_calculate_statistics",
              "line": 271,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Calculate basic statistical measures for numeric data."
            },
            {
              "name": "_detect_patterns",
              "line": 299,
              "args": [
                "self",
                "data",
                "threshold"
              ],
              "docstring": "Detect patterns in data using configurable threshold."
            },
            {
              "name": "_assess_quality",
              "line": 328,
              "args": [
                "self",
                "data"
              ],
              "docstring": "Assess data quality returning score from 0.0 to 1.0."
            },
            {
              "name": "get_statistics",
              "line": 360,
              "args": [
                "self"
              ],
              "docstring": "Get analyzer performance statistics."
            },
            {
              "name": "_analyze_impl",
              "line": 379,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Abstract method for analyzer-specific implementation.\n\nThis method must be implemented by all concrete analyzer classes\nto provide their specific analysis functionality.\n\nArgs:\n    data: Input data for analysis\n    config: Configuration for analysis operation\n    \nReturns:\n    Analysis result data (type depends on analyzer implementation)"
            },
            {
              "name": "analyze",
              "line": 395,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Main analysis method with comprehensive error handling and logging.\n\nProvides standardized analysis workflow with timing, statistics,\npattern detection, quality assessment, and hook execution.\n\nArgs:\n    data: Input data for analysis\n    config: Optional configuration override\n    \nReturns:\n    AnalysisResult containing analysis data and metadata"
            }
          ]
        }
      ],
      "lines_of_code": 382,
      "complexity_score": 55,
      "last_modified": "2025-10-04T16:03:22.522742",
      "checksum": "64b5ff90e1fe735d42aa92dac4942eb6",
      "framework_role": "logging_infrastructure",
      "stability": "stable"
    },
    "src/analysis/registry.py": {
      "name": "src/analysis/registry.py",
      "path": "src/analysis/registry.py",
      "component_type": "utility",
      "description": "Analysis Registry System",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        "docs/enhanced_analysis_framework_test_report.json",
        "scriptlets/framework.py",
        "src/analysis/enhanced_framework.py",
        "src/analysis/framework.py",
        "tests/test_analysis_framework.py",
        "tests/test_async_load_framework.py",
        "tests/test_enhanced_analysis_framework.py",
        "tests/test_framework0_integration.py",
        "tests/test_scriptlet_framework.py",
        "tools/baseline_framework_analyzer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "register_analyzer",
        "get_available_analyzers",
        "discover_analyzers",
        "__init__",
        "create_analyzer",
        "_validate_config",
        "clear_cache",
        "get_cached_analyzers",
        "register",
        "unregister",
        "get_analyzer_info",
        "get_available_analyzers",
        "get_analyzer",
        "create_analyzer_chain",
        "clear_registry",
        "decorator",
        "AnalyzerFactory",
        "AnalysisRegistry"
      ],
      "imports": [
        "os",
        "threading",
        "importlib",
        "typing",
        "datetime",
        "pathlib",
        "framework",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "register_analyzer",
          "line": 334,
          "args": [
            "name",
            "description",
            "version",
            "dependencies",
            "config_requirements"
          ],
          "docstring": "Decorator for registering analyzer classes.\n\nArgs:\n    name: Analyzer name (uses class name if None)\n    description: Analyzer description\n    version: Version string\n    dependencies: List of dependencies\n    config_requirements: Configuration requirements\n    \nReturns:\n    Decorator function for analyzer class registration",
          "decorators": []
        },
        {
          "name": "get_available_analyzers",
          "line": 371,
          "args": [],
          "docstring": "Get simple mapping of available analyzer names to descriptions.\n\nReturns:\n    Dictionary mapping analyzer names to descriptions",
          "decorators": []
        },
        {
          "name": "discover_analyzers",
          "line": 382,
          "args": [
            "package_path"
          ],
          "docstring": "Automatically discover and register analyzers from specified package.\n\nArgs:\n    package_path: Python package path to search for analyzers\n    \nReturns:\n    Number of analyzers discovered and registered",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 51,
          "args": [
            "self"
          ],
          "docstring": "Initialize analyzer factory with thread safety.",
          "decorators": []
        },
        {
          "name": "create_analyzer",
          "line": 59,
          "args": [
            "self",
            "analyzer_name",
            "config",
            "force_new"
          ],
          "docstring": "Create analyzer instance with configuration and caching.\n\nArgs:\n    analyzer_name: Name of analyzer to create\n    config: Configuration for analyzer (uses defaults if None)\n    force_new: Whether to force creation of new instance\n    \nReturns:\n    BaseAnalyzerV2: Configured analyzer instance\n    \nRaises:\n    AnalysisError: If analyzer not found or creation fails",
          "decorators": []
        },
        {
          "name": "_validate_config",
          "line": 119,
          "args": [
            "self",
            "analyzer_name",
            "config",
            "analyzer_info"
          ],
          "docstring": "Validate configuration against analyzer requirements.",
          "decorators": []
        },
        {
          "name": "clear_cache",
          "line": 151,
          "args": [
            "self"
          ],
          "docstring": "Clear instance cache to free memory.",
          "decorators": []
        },
        {
          "name": "get_cached_analyzers",
          "line": 158,
          "args": [
            "self"
          ],
          "docstring": "Get list of cached analyzer names.",
          "decorators": []
        },
        {
          "name": "register",
          "line": 184,
          "args": [
            "analyzer_name",
            "analyzer_class",
            "description",
            "version",
            "dependencies",
            "config_requirements"
          ],
          "docstring": "Register analyzer class in the global registry.\n\nArgs:\n    analyzer_name: Unique name for the analyzer\n    analyzer_class: Analyzer class (must inherit from BaseAnalyzerV2)\n    description: Optional description of analyzer capabilities\n    version: Version string for analyzer\n    dependencies: List of required dependencies\n    config_requirements: Configuration requirements specification",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "unregister",
          "line": 228,
          "args": [
            "analyzer_name"
          ],
          "docstring": "Unregister analyzer from registry.\n\nArgs:\n    analyzer_name: Name of analyzer to remove\n    \nReturns:\n    bool: True if analyzer was removed, False if not found",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "get_analyzer_info",
          "line": 250,
          "args": [
            "analyzer_name"
          ],
          "docstring": "Get detailed information about registered analyzer.\n\nArgs:\n    analyzer_name: Name of analyzer to query\n    \nReturns:\n    Dictionary with analyzer information or None if not found",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "get_available_analyzers",
          "line": 266,
          "args": [],
          "docstring": "Get dictionary of all registered analyzers with their metadata.\n\nReturns:\n    Dictionary mapping analyzer names to their information",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "get_analyzer",
          "line": 280,
          "args": [
            "analyzer_name",
            "config"
          ],
          "docstring": "Get analyzer instance using factory pattern.\n\nArgs:\n    analyzer_name: Name of analyzer to retrieve\n    config: Configuration for analyzer\n    \nReturns:\n    BaseAnalyzerV2: Configured analyzer instance",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "create_analyzer_chain",
          "line": 294,
          "args": [
            "analyzer_names",
            "configs"
          ],
          "docstring": "Create chain of analyzers for pipeline processing.\n\nArgs:\n    analyzer_names: List of analyzer names in execution order\n    configs: Optional list of configurations (must match analyzer count)\n    \nReturns:\n    List of configured analyzer instances",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "clear_registry",
          "line": 323,
          "args": [],
          "docstring": "Clear all registered analyzers (primarily for testing).",
          "decorators": [
            "staticmethod"
          ]
        },
        {
          "name": "decorator",
          "line": 352,
          "args": [
            "analyzer_class"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AnalyzerFactory",
          "line": 43,
          "bases": [],
          "docstring": "Factory class for creating analyzer instances with configuration validation.\n\nProvides standardized analyzer instantiation with configuration management,\ndependency resolution, and performance monitoring capabilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 51,
              "args": [
                "self"
              ],
              "docstring": "Initialize analyzer factory with thread safety."
            },
            {
              "name": "create_analyzer",
              "line": 59,
              "args": [
                "self",
                "analyzer_name",
                "config",
                "force_new"
              ],
              "docstring": "Create analyzer instance with configuration and caching.\n\nArgs:\n    analyzer_name: Name of analyzer to create\n    config: Configuration for analyzer (uses defaults if None)\n    force_new: Whether to force creation of new instance\n    \nReturns:\n    BaseAnalyzerV2: Configured analyzer instance\n    \nRaises:\n    AnalysisError: If analyzer not found or creation fails"
            },
            {
              "name": "_validate_config",
              "line": 119,
              "args": [
                "self",
                "analyzer_name",
                "config",
                "analyzer_info"
              ],
              "docstring": "Validate configuration against analyzer requirements."
            },
            {
              "name": "clear_cache",
              "line": 151,
              "args": [
                "self"
              ],
              "docstring": "Clear instance cache to free memory."
            },
            {
              "name": "get_cached_analyzers",
              "line": 158,
              "args": [
                "self"
              ],
              "docstring": "Get list of cached analyzer names."
            }
          ]
        },
        {
          "name": "AnalysisRegistry",
          "line": 168,
          "bases": [],
          "docstring": "Central registry for analyzer discovery, registration, and management.\n\nProvides thread-safe operations for registering analyzers, retrieving\nanalyzer information, and managing analyzer lifecycle.\n\nFeatures:\n    - Thread-safe registration and lookup\n    - Analyzer metadata management\n    - Dependency tracking and resolution\n    - Plugin-style extensions\n    - Performance monitoring",
          "methods": [
            {
              "name": "register",
              "line": 184,
              "args": [
                "analyzer_name",
                "analyzer_class",
                "description",
                "version",
                "dependencies",
                "config_requirements"
              ],
              "docstring": "Register analyzer class in the global registry.\n\nArgs:\n    analyzer_name: Unique name for the analyzer\n    analyzer_class: Analyzer class (must inherit from BaseAnalyzerV2)\n    description: Optional description of analyzer capabilities\n    version: Version string for analyzer\n    dependencies: List of required dependencies\n    config_requirements: Configuration requirements specification"
            },
            {
              "name": "unregister",
              "line": 228,
              "args": [
                "analyzer_name"
              ],
              "docstring": "Unregister analyzer from registry.\n\nArgs:\n    analyzer_name: Name of analyzer to remove\n    \nReturns:\n    bool: True if analyzer was removed, False if not found"
            },
            {
              "name": "get_analyzer_info",
              "line": 250,
              "args": [
                "analyzer_name"
              ],
              "docstring": "Get detailed information about registered analyzer.\n\nArgs:\n    analyzer_name: Name of analyzer to query\n    \nReturns:\n    Dictionary with analyzer information or None if not found"
            },
            {
              "name": "get_available_analyzers",
              "line": 266,
              "args": [],
              "docstring": "Get dictionary of all registered analyzers with their metadata.\n\nReturns:\n    Dictionary mapping analyzer names to their information"
            },
            {
              "name": "get_analyzer",
              "line": 280,
              "args": [
                "analyzer_name",
                "config"
              ],
              "docstring": "Get analyzer instance using factory pattern.\n\nArgs:\n    analyzer_name: Name of analyzer to retrieve\n    config: Configuration for analyzer\n    \nReturns:\n    BaseAnalyzerV2: Configured analyzer instance"
            },
            {
              "name": "create_analyzer_chain",
              "line": 294,
              "args": [
                "analyzer_names",
                "configs"
              ],
              "docstring": "Create chain of analyzers for pipeline processing.\n\nArgs:\n    analyzer_names: List of analyzer names in execution order\n    configs: Optional list of configurations (must match analyzer count)\n    \nReturns:\n    List of configured analyzer instances"
            },
            {
              "name": "clear_registry",
              "line": 323,
              "args": [],
              "docstring": "Clear all registered analyzers (primarily for testing)."
            }
          ]
        }
      ],
      "lines_of_code": 340,
      "complexity_score": 49,
      "last_modified": "2025-10-04T16:03:22.522742",
      "checksum": "d3a8f7dcb302fadef74f16457869504f",
      "framework_role": "logging_infrastructure",
      "stability": "stable"
    },
    "src/basic_usage.py": {
      "name": "src/basic_usage.py",
      "path": "src/basic_usage.py",
      "component_type": "utility",
      "description": "Basic Usage Example - IAF0 Framework Integration",
      "dependencies": [
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md"
      ],
      "exports": [
        "main",
        "__init__",
        "run",
        "_analyze_impl",
        "DataProcessor",
        "CustomAnalyzer"
      ],
      "imports": [
        "sys",
        "os",
        "orchestrator.context.context",
        "scriptlets.framework",
        "src.analysis.framework"
      ],
      "functions": [
        {
          "name": "main",
          "line": 79,
          "args": [],
          "docstring": "Demonstrate integrated usage of IAF0 frameworks.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 25,
          "args": [
            "self"
          ],
          "docstring": "Initialize the processor.",
          "decorators": []
        },
        {
          "name": "run",
          "line": 30,
          "args": [
            "self",
            "input_data"
          ],
          "docstring": "Process input data and store results in context.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 51,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Internal analysis implementation required by base class.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DataProcessor",
          "line": 22,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "Example scriptlet for data processing.",
          "methods": [
            {
              "name": "__init__",
              "line": 25,
              "args": [
                "self"
              ],
              "docstring": "Initialize the processor."
            },
            {
              "name": "run",
              "line": 30,
              "args": [
                "self",
                "input_data"
              ],
              "docstring": "Process input data and store results in context."
            }
          ]
        },
        {
          "name": "CustomAnalyzer",
          "line": 48,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Example analyzer for statistical analysis.",
          "methods": [
            {
              "name": "_analyze_impl",
              "line": 51,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Internal analysis implementation required by base class."
            }
          ]
        }
      ],
      "lines_of_code": 93,
      "complexity_score": 14,
      "last_modified": "2025-10-04T16:23:42.071527",
      "checksum": "6b8100fa83b9e372d96c88d9be90c209",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "src/core/__init__.py": {
      "name": "src/core/__init__.py",
      "path": "src/core/__init__.py",
      "component_type": "core_framework",
      "description": "src.core package initialization",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-04T14:13:35.129310",
      "checksum": "4ae11962109b77fcab1e65972dcf03ee",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "src/core/logger.py": {
      "name": "src/core/logger.py",
      "path": "src/core/logger.py",
      "component_type": "core_framework",
      "description": "Logger module providing structured logging with debug support and cross-platform compatibility.",
      "dependencies": [
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py"
      ],
      "exports": [
        "get_logger",
        "set_global_debug",
        "get_all_logger_stats",
        "debug_enabled",
        "create_module_logger",
        "__init__",
        "__init__",
        "format",
        "__init__",
        "_create_logger",
        "_create_console_handler",
        "_create_file_handler",
        "debug",
        "info",
        "warning",
        "error",
        "critical",
        "log_context_operation",
        "get_logger_stats",
        "LoggerConfig",
        "ContextualFormatter",
        "Framework0Logger"
      ],
      "imports": [
        "logging",
        "os",
        "sys",
        "typing",
        "pathlib",
        "time",
        "threading",
        "datetime"
      ],
      "functions": [
        {
          "name": "get_logger",
          "line": 310,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Factory function to get or create a Framework0Logger instance.\n\nThis function implements the singleton pattern per logger name to ensure\nconsistent logger behavior across the application.\n\nArgs:\n    name: Logger name (typically __name__)\n    debug: Optional debug flag override\n\nReturns:\n    Framework0Logger instance for the specified name",
          "decorators": []
        },
        {
          "name": "set_global_debug",
          "line": 347,
          "args": [
            "enabled"
          ],
          "docstring": "Set debug mode for all existing loggers.\n\nArgs:\n    enabled: Whether to enable debug logging globally",
          "decorators": []
        },
        {
          "name": "get_all_logger_stats",
          "line": 362,
          "args": [],
          "docstring": "Get statistics for all registered loggers.\n\nReturns:\n    Dictionary mapping logger names to their statistics",
          "decorators": []
        },
        {
          "name": "debug_enabled",
          "line": 376,
          "args": [],
          "docstring": "Check if debug logging is enabled globally.",
          "decorators": []
        },
        {
          "name": "create_module_logger",
          "line": 381,
          "args": [
            "module_name"
          ],
          "docstring": "Create a logger for a specific module with standard configuration.\n\nArgs:\n    module_name: Name of the module (typically __name__)\n\nReturns:\n    Configured Framework0Logger instance",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 26,
          "args": [
            "self"
          ],
          "docstring": "Initialize logger configuration with environment-based defaults.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 60,
          "args": [
            "self",
            "fmt",
            "datefmt"
          ],
          "docstring": "Initialize contextual formatter with format strings.\n\nArgs:\n    fmt: Log message format string\n    datefmt: Date format string for timestamps",
          "decorators": []
        },
        {
          "name": "format",
          "line": 71,
          "args": [
            "self",
            "record"
          ],
          "docstring": "Format log record with additional contextual information.\n\nArgs:\n    record: Log record to format\n\nReturns:\n    Formatted log message string",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 108,
          "args": [
            "self",
            "name",
            "debug"
          ],
          "docstring": "Initialize Framework0 logger with name and debug configuration.\n\nArgs:\n    name: Logger name (typically module name)\n    debug: Optional debug flag override",
          "decorators": []
        },
        {
          "name": "_create_logger",
          "line": 131,
          "args": [
            "self"
          ],
          "docstring": "Create and configure the underlying Python logger.\n\nReturns:\n    Configured logging.Logger instance",
          "decorators": []
        },
        {
          "name": "_create_console_handler",
          "line": 162,
          "args": [
            "self"
          ],
          "docstring": "Create console handler with proper formatting.\n\nReturns:\n    Configured console handler",
          "decorators": []
        },
        {
          "name": "_create_file_handler",
          "line": 183,
          "args": [
            "self"
          ],
          "docstring": "Create file handler with proper formatting and directory creation.\n\nReturns:\n    Configured file handler",
          "decorators": []
        },
        {
          "name": "debug",
          "line": 210,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log debug message with proper formatting.\n\nArgs:\n    message: Debug message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "info",
          "line": 222,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log info message with proper formatting.\n\nArgs:\n    message: Info message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "warning",
          "line": 233,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log warning message with proper formatting.\n\nArgs:\n    message: Warning message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "error",
          "line": 244,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log error message with proper formatting.\n\nArgs:\n    message: Error message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "critical",
          "line": 255,
          "args": [
            "self",
            "message"
          ],
          "docstring": "Log critical message with proper formatting.\n\nArgs:\n    message: Critical message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger",
          "decorators": []
        },
        {
          "name": "log_context_operation",
          "line": 266,
          "args": [
            "self",
            "operation",
            "key",
            "before",
            "after"
          ],
          "docstring": "Log Context operations for debugging and audit purposes.\n\nArgs:\n    operation: Type of operation (get, set, merge, etc.)\n    key: Context key being operated on\n    before: Previous value (for set operations)\n    after: New value (for set operations)",
          "decorators": []
        },
        {
          "name": "get_logger_stats",
          "line": 286,
          "args": [
            "self"
          ],
          "docstring": "Get logger statistics and configuration information.\n\nReturns:\n    Dictionary containing logger statistics",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LoggerConfig",
          "line": 18,
          "bases": [],
          "docstring": "Configuration class for logger settings with environment variable support.\n\nManages logger configuration including levels, formats, and output destinations\nwith proper defaults and environment variable overrides.",
          "methods": [
            {
              "name": "__init__",
              "line": 26,
              "args": [
                "self"
              ],
              "docstring": "Initialize logger configuration with environment-based defaults."
            }
          ]
        },
        {
          "name": "ContextualFormatter",
          "line": 52,
          "bases": [
            "Formatter"
          ],
          "docstring": "Custom formatter that adds contextual information to log records.\n\nEnhances log entries with additional context like thread information,\nexecution context, and custom metadata for better debugging.",
          "methods": [
            {
              "name": "__init__",
              "line": 60,
              "args": [
                "self",
                "fmt",
                "datefmt"
              ],
              "docstring": "Initialize contextual formatter with format strings.\n\nArgs:\n    fmt: Log message format string\n    datefmt: Date format string for timestamps"
            },
            {
              "name": "format",
              "line": 71,
              "args": [
                "self",
                "record"
              ],
              "docstring": "Format log record with additional contextual information.\n\nArgs:\n    record: Log record to format\n\nReturns:\n    Formatted log message string"
            }
          ]
        },
        {
          "name": "Framework0Logger",
          "line": 100,
          "bases": [],
          "docstring": "Main logger class for Framework0 with advanced features and context awareness.\n\nProvides structured logging with debug control, file output, and integration\nwith the orchestrator system for comprehensive application logging.",
          "methods": [
            {
              "name": "__init__",
              "line": 108,
              "args": [
                "self",
                "name",
                "debug"
              ],
              "docstring": "Initialize Framework0 logger with name and debug configuration.\n\nArgs:\n    name: Logger name (typically module name)\n    debug: Optional debug flag override"
            },
            {
              "name": "_create_logger",
              "line": 131,
              "args": [
                "self"
              ],
              "docstring": "Create and configure the underlying Python logger.\n\nReturns:\n    Configured logging.Logger instance"
            },
            {
              "name": "_create_console_handler",
              "line": 162,
              "args": [
                "self"
              ],
              "docstring": "Create console handler with proper formatting.\n\nReturns:\n    Configured console handler"
            },
            {
              "name": "_create_file_handler",
              "line": 183,
              "args": [
                "self"
              ],
              "docstring": "Create file handler with proper formatting and directory creation.\n\nReturns:\n    Configured file handler"
            },
            {
              "name": "debug",
              "line": 210,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log debug message with proper formatting.\n\nArgs:\n    message: Debug message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "info",
              "line": 222,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log info message with proper formatting.\n\nArgs:\n    message: Info message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "warning",
              "line": 233,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log warning message with proper formatting.\n\nArgs:\n    message: Warning message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "error",
              "line": 244,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log error message with proper formatting.\n\nArgs:\n    message: Error message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "critical",
              "line": 255,
              "args": [
                "self",
                "message"
              ],
              "docstring": "Log critical message with proper formatting.\n\nArgs:\n    message: Critical message to log\n    *args: Positional arguments for message formatting\n    **kwargs: Keyword arguments for logger"
            },
            {
              "name": "log_context_operation",
              "line": 266,
              "args": [
                "self",
                "operation",
                "key",
                "before",
                "after"
              ],
              "docstring": "Log Context operations for debugging and audit purposes.\n\nArgs:\n    operation: Type of operation (get, set, merge, etc.)\n    key: Context key being operated on\n    before: Previous value (for set operations)\n    after: New value (for set operations)"
            },
            {
              "name": "get_logger_stats",
              "line": 286,
              "args": [
                "self"
              ],
              "docstring": "Get logger statistics and configuration information.\n\nReturns:\n    Dictionary containing logger statistics"
            }
          ]
        }
      ],
      "lines_of_code": 302,
      "complexity_score": 40,
      "last_modified": "2025-10-04T14:13:36.857295",
      "checksum": "1696231ec18659a20487fb892e582e4a",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "src/dash_demo.py": {
      "name": "src/dash_demo.py",
      "path": "src/dash_demo.py",
      "component_type": "utility",
      "description": "Framework0 Context Server - Dash Dashboard Demo",
      "dependencies": [
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "src/dash_integration.py",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "src/dash_integration.py",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "main",
        "__init__",
        "setup_layout",
        "setup_callbacks",
        "create_system_metrics_chart",
        "create_config_chart",
        "create_context_table",
        "create_alerts_table",
        "run",
        "update_dashboard",
        "SimpleDashDemo"
      ],
      "imports": [
        "logging",
        "datetime",
        "dash",
        "dash",
        "plotly.graph_objects",
        "orchestrator.context_client",
        "argparse",
        "sys",
        "pathlib",
        "orchestrator.context_client"
      ],
      "functions": [
        {
          "name": "main",
          "line": 428,
          "args": [],
          "docstring": "Main entry point for the Dash demo.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 38,
          "args": [
            "self",
            "server_host",
            "server_port"
          ],
          "docstring": "Initialize the Dash demo application.\n\nArgs:\n    server_host: Context server hostname\n    server_port: Context server port number",
          "decorators": []
        },
        {
          "name": "setup_layout",
          "line": 68,
          "args": [
            "self"
          ],
          "docstring": "Set up the dashboard layout with components and styling.",
          "decorators": []
        },
        {
          "name": "setup_callbacks",
          "line": 130,
          "args": [
            "self"
          ],
          "docstring": "Set up Dash callbacks for interactivity and real-time updates.",
          "decorators": []
        },
        {
          "name": "create_system_metrics_chart",
          "line": 206,
          "args": [
            "self",
            "all_data"
          ],
          "docstring": "Create system monitoring metrics chart.",
          "decorators": []
        },
        {
          "name": "create_config_chart",
          "line": 260,
          "args": [
            "self",
            "all_data"
          ],
          "docstring": "Create configuration status overview chart.",
          "decorators": []
        },
        {
          "name": "create_context_table",
          "line": 305,
          "args": [
            "self",
            "all_data"
          ],
          "docstring": "Create a table showing recent context data.",
          "decorators": []
        },
        {
          "name": "create_alerts_table",
          "line": 352,
          "args": [
            "self",
            "all_data"
          ],
          "docstring": "Create a table showing recent alerts.",
          "decorators": []
        },
        {
          "name": "run",
          "line": 417,
          "args": [
            "self",
            "host",
            "port",
            "debug"
          ],
          "docstring": "Run the Dash application.",
          "decorators": []
        },
        {
          "name": "update_dashboard",
          "line": 144,
          "args": [
            "n_intervals",
            "refresh_clicks"
          ],
          "docstring": "Update all dashboard components with latest data.",
          "decorators": [
            "unknown_decorator"
          ]
        }
      ],
      "classes": [
        {
          "name": "SimpleDashDemo",
          "line": 29,
          "bases": [],
          "docstring": "Simple Dash demo application for Framework0 Context Server integration.\n\nThis class creates a basic dashboard that displays context server data\nin real-time with charts, tables, and interactive controls for\nmonitoring system status and configuration values.",
          "methods": [
            {
              "name": "__init__",
              "line": 38,
              "args": [
                "self",
                "server_host",
                "server_port"
              ],
              "docstring": "Initialize the Dash demo application.\n\nArgs:\n    server_host: Context server hostname\n    server_port: Context server port number"
            },
            {
              "name": "setup_layout",
              "line": 68,
              "args": [
                "self"
              ],
              "docstring": "Set up the dashboard layout with components and styling."
            },
            {
              "name": "setup_callbacks",
              "line": 130,
              "args": [
                "self"
              ],
              "docstring": "Set up Dash callbacks for interactivity and real-time updates."
            },
            {
              "name": "create_system_metrics_chart",
              "line": 206,
              "args": [
                "self",
                "all_data"
              ],
              "docstring": "Create system monitoring metrics chart."
            },
            {
              "name": "create_config_chart",
              "line": 260,
              "args": [
                "self",
                "all_data"
              ],
              "docstring": "Create configuration status overview chart."
            },
            {
              "name": "create_context_table",
              "line": 305,
              "args": [
                "self",
                "all_data"
              ],
              "docstring": "Create a table showing recent context data."
            },
            {
              "name": "create_alerts_table",
              "line": 352,
              "args": [
                "self",
                "all_data"
              ],
              "docstring": "Create a table showing recent alerts."
            },
            {
              "name": "run",
              "line": 417,
              "args": [
                "self",
                "host",
                "port",
                "debug"
              ],
              "docstring": "Run the Dash application."
            }
          ]
        }
      ],
      "lines_of_code": 377,
      "complexity_score": 41,
      "last_modified": "2025-10-05T01:12:04.522980",
      "checksum": "6b1901f2df239e72ffd108402c812542",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "src/dash_integration.py": {
      "name": "src/dash_integration.py",
      "path": "src/dash_integration.py",
      "component_type": "utility",
      "description": "Framework0 Context Server Dash Integration",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "src/dash_demo.py",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "src/dash_demo.py",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md"
      ],
      "exports": [
        "create_context_component",
        "example_dash_integration",
        "__init__",
        "_setup_layout",
        "_setup_callbacks",
        "_get_disconnected_state",
        "_get_error_state",
        "_build_context_display",
        "_build_context_stats",
        "_build_recent_changes",
        "_build_history_timeline",
        "run",
        "set_context_value",
        "get_context_value",
        "update_refresh_interval",
        "update_dashboard_data",
        "ContextDashError",
        "ContextDashboard"
      ],
      "imports": [
        "json",
        "logging",
        "threading",
        "time",
        "datetime",
        "typing",
        "src.context_client",
        "dash",
        "dash",
        "plotly.graph_objects",
        "plotly.express",
        "pandas",
        "argparse"
      ],
      "functions": [
        {
          "name": "create_context_component",
          "line": 535,
          "args": [
            "component_id",
            "context_key",
            "server_host",
            "server_port",
            "refresh_interval"
          ],
          "docstring": "Create a simple Dash component that displays a context value.\n\nArgs:\n    component_id: Unique ID for the Dash component\n    context_key: Context key to monitor and display\n    server_host: Context server host\n    server_port: Context server port  \n    refresh_interval: Refresh interval in milliseconds\n    \nReturns:\n    Dash HTML component that displays the context value",
          "decorators": []
        },
        {
          "name": "example_dash_integration",
          "line": 570,
          "args": [],
          "docstring": "Example demonstrating Dash integration with context server.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 46,
          "args": [
            "self",
            "server_host",
            "server_port",
            "dash_port",
            "title",
            "who"
          ],
          "docstring": "Initialize context dashboard with server connection.\n\nArgs:\n    server_host: Context server hostname or IP address\n    server_port: Context server port number\n    dash_port: Port for Dash web application\n    title: Dashboard title for web interface\n    who: Attribution identifier for dashboard operations",
          "decorators": []
        },
        {
          "name": "_setup_layout",
          "line": 99,
          "args": [
            "self"
          ],
          "docstring": "Configure the dashboard HTML layout with interactive components.",
          "decorators": []
        },
        {
          "name": "_setup_callbacks",
          "line": 209,
          "args": [
            "self"
          ],
          "docstring": "Configure Dash callbacks for interactive functionality.",
          "decorators": []
        },
        {
          "name": "_get_disconnected_state",
          "line": 339,
          "args": [
            "self"
          ],
          "docstring": "Return dashboard state when disconnected from server.",
          "decorators": []
        },
        {
          "name": "_get_error_state",
          "line": 358,
          "args": [
            "self",
            "error_msg"
          ],
          "docstring": "Return dashboard state when error occurs.",
          "decorators": []
        },
        {
          "name": "_build_context_display",
          "line": 377,
          "args": [
            "self",
            "context_data"
          ],
          "docstring": "Build formatted display of current context data.",
          "decorators": []
        },
        {
          "name": "_build_context_stats",
          "line": 394,
          "args": [
            "self",
            "context_data",
            "status_data"
          ],
          "docstring": "Build statistics display for context data.",
          "decorators": []
        },
        {
          "name": "_build_recent_changes",
          "line": 405,
          "args": [
            "self",
            "history_data"
          ],
          "docstring": "Build display of recent context changes.",
          "decorators": []
        },
        {
          "name": "_build_history_timeline",
          "line": 440,
          "args": [
            "self",
            "history_data"
          ],
          "docstring": "Build timeline visualization of context history.",
          "decorators": []
        },
        {
          "name": "run",
          "line": 507,
          "args": [
            "self",
            "debug",
            "host"
          ],
          "docstring": "Start the Dash dashboard web application.\n\nArgs:\n    debug: Enable Dash debug mode for development\n    host: Host address to bind Dash server to",
          "decorators": []
        },
        {
          "name": "set_context_value",
          "line": 218,
          "args": [
            "n_clicks",
            "key",
            "value"
          ],
          "docstring": "Handle setting context values from the dashboard.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "get_context_value",
          "line": 257,
          "args": [
            "n_clicks",
            "key"
          ],
          "docstring": "Handle getting individual context values from the dashboard.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "update_refresh_interval",
          "line": 288,
          "args": [
            "interval_value"
          ],
          "docstring": "Update the auto-refresh interval based on user selection.",
          "decorators": [
            "unknown_decorator"
          ]
        },
        {
          "name": "update_dashboard_data",
          "line": 305,
          "args": [
            "n_intervals",
            "refresh_clicks"
          ],
          "docstring": "Update all dashboard components with latest context data.",
          "decorators": [
            "unknown_decorator"
          ]
        }
      ],
      "classes": [
        {
          "name": "ContextDashError",
          "line": 32,
          "bases": [
            "Exception"
          ],
          "docstring": "Base exception for context Dash integration errors.",
          "methods": []
        },
        {
          "name": "ContextDashboard",
          "line": 37,
          "bases": [],
          "docstring": "Interactive Dash dashboard with real-time context synchronization.\n\nThis class creates a complete Dash web application that can display\ncontext data in real-time, provide interactive controls for setting\nvalues, and visualize context history and statistics.",
          "methods": [
            {
              "name": "__init__",
              "line": 46,
              "args": [
                "self",
                "server_host",
                "server_port",
                "dash_port",
                "title",
                "who"
              ],
              "docstring": "Initialize context dashboard with server connection.\n\nArgs:\n    server_host: Context server hostname or IP address\n    server_port: Context server port number\n    dash_port: Port for Dash web application\n    title: Dashboard title for web interface\n    who: Attribution identifier for dashboard operations"
            },
            {
              "name": "_setup_layout",
              "line": 99,
              "args": [
                "self"
              ],
              "docstring": "Configure the dashboard HTML layout with interactive components."
            },
            {
              "name": "_setup_callbacks",
              "line": 209,
              "args": [
                "self"
              ],
              "docstring": "Configure Dash callbacks for interactive functionality."
            },
            {
              "name": "_get_disconnected_state",
              "line": 339,
              "args": [
                "self"
              ],
              "docstring": "Return dashboard state when disconnected from server."
            },
            {
              "name": "_get_error_state",
              "line": 358,
              "args": [
                "self",
                "error_msg"
              ],
              "docstring": "Return dashboard state when error occurs."
            },
            {
              "name": "_build_context_display",
              "line": 377,
              "args": [
                "self",
                "context_data"
              ],
              "docstring": "Build formatted display of current context data."
            },
            {
              "name": "_build_context_stats",
              "line": 394,
              "args": [
                "self",
                "context_data",
                "status_data"
              ],
              "docstring": "Build statistics display for context data."
            },
            {
              "name": "_build_recent_changes",
              "line": 405,
              "args": [
                "self",
                "history_data"
              ],
              "docstring": "Build display of recent context changes."
            },
            {
              "name": "_build_history_timeline",
              "line": 440,
              "args": [
                "self",
                "history_data"
              ],
              "docstring": "Build timeline visualization of context history."
            },
            {
              "name": "run",
              "line": 507,
              "args": [
                "self",
                "debug",
                "host"
              ],
              "docstring": "Start the Dash dashboard web application.\n\nArgs:\n    debug: Enable Dash debug mode for development\n    host: Host address to bind Dash server to"
            }
          ]
        }
      ],
      "lines_of_code": 526,
      "complexity_score": 45,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "b2d28ec784c2f19805aae0a9e302b969",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "src/debug_enhanced_memory_bus.py": {
      "name": "src/debug_enhanced_memory_bus.py",
      "path": "src/debug_enhanced_memory_bus.py",
      "component_type": "utility",
      "description": "Debugging script to identify and fix test failures in Enhanced Memory Bus.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md"
      ],
      "exports": [
        "debug_metrics_test",
        "debug_basic_operations_test",
        "debug_backup_restore_test",
        "main"
      ],
      "imports": [
        "os",
        "tempfile",
        "json",
        "orchestrator.enhanced_memory_bus",
        "traceback",
        "traceback"
      ],
      "functions": [
        {
          "name": "debug_metrics_test",
          "line": 17,
          "args": [],
          "docstring": "Debug the metrics update operation stats test.",
          "decorators": []
        },
        {
          "name": "debug_basic_operations_test",
          "line": 48,
          "args": [],
          "docstring": "Debug the basic operations test.",
          "decorators": []
        },
        {
          "name": "debug_backup_restore_test",
          "line": 85,
          "args": [],
          "docstring": "Debug the backup and restore test.",
          "decorators": []
        },
        {
          "name": "main",
          "line": 156,
          "args": [],
          "docstring": "Run all debug tests.",
          "decorators": []
        }
      ],
      "classes": [],
      "lines_of_code": 140,
      "complexity_score": 17,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "2a0a3666b690820b73949c66c27de92f",
      "framework_role": "data_storage",
      "stability": "stable"
    },
    "src/integration_demo.py": {
      "name": "src/integration_demo.py",
      "path": "src/integration_demo.py",
      "component_type": "utility",
      "description": "Framework0 Context Server - Interactive Example Suite",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "main",
        "__init__",
        "check_server_connection",
        "example_basic_operations",
        "example_shell_integration",
        "example_monitoring_simulation",
        "example_configuration_management",
        "show_context_summary",
        "run_all_examples",
        "ExampleSuite"
      ],
      "imports": [
        "asyncio",
        "logging",
        "subprocess",
        "time",
        "datetime",
        "pathlib",
        "orchestrator.context_client",
        "argparse",
        "sys",
        "pathlib",
        "orchestrator.context_client"
      ],
      "functions": [
        {
          "name": "main",
          "line": 647,
          "args": [],
          "docstring": "Main entry point for running the example suite.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 37,
          "args": [
            "self",
            "server_host",
            "server_port"
          ],
          "docstring": "Initialize the example suite with server connection details.\n\nArgs:\n    server_host: Context server hostname\n    server_port: Context server port number",
          "decorators": []
        },
        {
          "name": "check_server_connection",
          "line": 61,
          "args": [
            "self"
          ],
          "docstring": "Check if context server is running and accessible.\n\nReturns:\n    True if server is reachable, False otherwise",
          "decorators": []
        },
        {
          "name": "example_basic_operations",
          "line": 74,
          "args": [
            "self"
          ],
          "docstring": "Demonstrate basic context operations (get/set/list).",
          "decorators": []
        },
        {
          "name": "example_shell_integration",
          "line": 126,
          "args": [
            "self"
          ],
          "docstring": "Demonstrate shell script integration using the context.sh client.",
          "decorators": []
        },
        {
          "name": "example_monitoring_simulation",
          "line": 319,
          "args": [
            "self"
          ],
          "docstring": "Simulate a monitoring scenario with multiple data sources.",
          "decorators": []
        },
        {
          "name": "example_configuration_management",
          "line": 434,
          "args": [
            "self"
          ],
          "docstring": "Demonstrate configuration management across services.",
          "decorators": []
        },
        {
          "name": "show_context_summary",
          "line": 536,
          "args": [
            "self"
          ],
          "docstring": "Display a summary of all context data created during examples.",
          "decorators": []
        },
        {
          "name": "run_all_examples",
          "line": 604,
          "args": [
            "self"
          ],
          "docstring": "Run all examples in sequence.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExampleSuite",
          "line": 28,
          "bases": [],
          "docstring": "Interactive example suite demonstrating context server integration.\n\nThis class provides a comprehensive demonstration of how different types\nof applications can share data through the Enhanced Context Server using\nREST API, WebSocket, and shell script interfaces.",
          "methods": [
            {
              "name": "__init__",
              "line": 37,
              "args": [
                "self",
                "server_host",
                "server_port"
              ],
              "docstring": "Initialize the example suite with server connection details.\n\nArgs:\n    server_host: Context server hostname\n    server_port: Context server port number"
            },
            {
              "name": "check_server_connection",
              "line": 61,
              "args": [
                "self"
              ],
              "docstring": "Check if context server is running and accessible.\n\nReturns:\n    True if server is reachable, False otherwise"
            },
            {
              "name": "example_basic_operations",
              "line": 74,
              "args": [
                "self"
              ],
              "docstring": "Demonstrate basic context operations (get/set/list)."
            },
            {
              "name": "example_shell_integration",
              "line": 126,
              "args": [
                "self"
              ],
              "docstring": "Demonstrate shell script integration using the context.sh client."
            },
            {
              "name": "example_monitoring_simulation",
              "line": 319,
              "args": [
                "self"
              ],
              "docstring": "Simulate a monitoring scenario with multiple data sources."
            },
            {
              "name": "example_configuration_management",
              "line": 434,
              "args": [
                "self"
              ],
              "docstring": "Demonstrate configuration management across services."
            },
            {
              "name": "show_context_summary",
              "line": 536,
              "args": [
                "self"
              ],
              "docstring": "Display a summary of all context data created during examples."
            },
            {
              "name": "run_all_examples",
              "line": 604,
              "args": [
                "self"
              ],
              "docstring": "Run all examples in sequence."
            }
          ]
        }
      ],
      "lines_of_code": 555,
      "complexity_score": 56,
      "last_modified": "2025-10-05T01:12:04.522980",
      "checksum": "a33fbf683c072003beaa1620422d7b91",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "src/visualization/__init__.py": {
      "name": "src/visualization/__init__.py",
      "path": "src/visualization/__init__.py",
      "component_type": "utility",
      "description": "Framework0 Visualization Package",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        "docs/method_index.md",
        "src/visualization/performance_dashboard.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "src/visualization/execution_flow.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/timeline_visualizer.py"
      ],
      "exports": [],
      "imports": [
        "enhanced_visualizer",
        "performance_dashboard",
        "execution_flow",
        "timeline_visualizer"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 34,
      "complexity_score": 8,
      "last_modified": "2025-10-05T01:06:28.785161",
      "checksum": "9b258216e9f01c05cb6eb0f63efd1f42",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "src/visualization/enhanced_visualizer.py": {
      "name": "src/visualization/enhanced_visualizer.py",
      "path": "src/visualization/enhanced_visualizer.py",
      "component_type": "utility",
      "description": "Enhanced Visualization Framework for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md"
      ],
      "exports": [
        "__post_init__",
        "_get_default_style",
        "__post_init__",
        "_get_default_style",
        "__init__",
        "_detect_capabilities",
        "create_recipe_execution_graph",
        "render_graph",
        "_generate_metadata_html",
        "update_execution_state",
        "get_available_graphs",
        "cleanup_graphs",
        "export_all_graphs",
        "shutdown",
        "_create_graph_impl",
        "_render_impl",
        "_update_impl",
        "_get_graphs_impl",
        "_cleanup_impl",
        "_export_impl",
        "_shutdown_impl",
        "VisualizationFormat",
        "NodeType",
        "EdgeType",
        "VisualizationNode",
        "VisualizationEdge",
        "EnhancedVisualizer"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "tempfile",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "enum",
        "threading",
        "logging",
        "orchestrator.context.context",
        "src.core.logger",
        "graphviz",
        "matplotlib.pyplot",
        "matplotlib.patches",
        "matplotlib.animation",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "plotly.offline",
        "networkx"
      ],
      "functions": [
        {
          "name": "__post_init__",
          "line": 111,
          "args": [
            "self"
          ],
          "docstring": "Initialize node with default styling based on type and status.",
          "decorators": []
        },
        {
          "name": "_get_default_style",
          "line": 116,
          "args": [
            "self"
          ],
          "docstring": "Generate default visual styling based on node type and status.",
          "decorators": []
        },
        {
          "name": "__post_init__",
          "line": 177,
          "args": [
            "self"
          ],
          "docstring": "Initialize edge with default styling based on type.",
          "decorators": []
        },
        {
          "name": "_get_default_style",
          "line": 182,
          "args": [
            "self"
          ],
          "docstring": "Generate default visual styling based on edge type.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 249,
          "args": [
            "self",
            "context",
            "output_directory",
            "enable_interactive",
            "enable_real_time"
          ],
          "docstring": "Initialize enhanced visualization system with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    output_directory: Directory for saving visualization outputs\n    enable_interactive: Whether to enable interactive visualization features\n    enable_real_time: Whether to enable real-time visualization updates",
          "decorators": []
        },
        {
          "name": "_detect_capabilities",
          "line": 300,
          "args": [
            "self"
          ],
          "docstring": "Detect available visualization libraries and log capabilities.",
          "decorators": []
        },
        {
          "name": "create_recipe_execution_graph",
          "line": 322,
          "args": [
            "self",
            "recipe_data",
            "execution_state",
            "layout_algorithm"
          ],
          "docstring": "Create comprehensive visualization graph for recipe execution flow.\n\nArgs:\n    recipe_data: Recipe definition with steps and dependencies\n    execution_state: Optional execution state for status visualization\n    layout_algorithm: Layout algorithm ('hierarchical', 'force', 'circular')\n    \nReturns:\n    str: Graph identifier for further operations",
          "decorators": []
        },
        {
          "name": "render_graph",
          "line": 470,
          "args": [
            "self",
            "graph_id",
            "output_format",
            "filename",
            "include_metadata"
          ],
          "docstring": "Render visualization graph to specified format with comprehensive output options.\n\nArgs:\n    graph_id: Identifier of graph to render\n    output_format: Output format for rendering\n    filename: Optional custom filename for output\n    include_metadata: Whether to include metadata in output\n    \nReturns:\n    str: Path to rendered output file",
          "decorators": []
        },
        {
          "name": "_generate_metadata_html",
          "line": 646,
          "args": [
            "self",
            "graph_data"
          ],
          "docstring": "Generate HTML metadata section for graph information.",
          "decorators": []
        },
        {
          "name": "update_execution_state",
          "line": 680,
          "args": [
            "self",
            "graph_id",
            "step_id",
            "status",
            "metadata"
          ],
          "docstring": "Update execution state for specific step in visualization graph.\n\nArgs:\n    graph_id: Identifier of graph to update\n    step_id: Identifier of step to update\n    status: New status for step\n    metadata: Optional additional metadata for step",
          "decorators": []
        },
        {
          "name": "get_available_graphs",
          "line": 738,
          "args": [
            "self"
          ],
          "docstring": "Get information about all available visualization graphs.\n\nReturns:\n    Dict[str, Dict[str, Any]]: Dictionary of graph information indexed by graph ID",
          "decorators": []
        },
        {
          "name": "cleanup_graphs",
          "line": 775,
          "args": [
            "self",
            "max_age_hours"
          ],
          "docstring": "Clean up old visualization graphs to manage memory usage.\n\nArgs:\n    max_age_hours: Maximum age in hours before graphs are cleaned up\n    \nReturns:\n    int: Number of graphs cleaned up",
          "decorators": []
        },
        {
          "name": "export_all_graphs",
          "line": 824,
          "args": [
            "self",
            "output_format",
            "include_metadata"
          ],
          "docstring": "Export all available graphs to specified format.\n\nArgs:\n    output_format: Format for exporting graphs\n    include_metadata: Whether to include metadata in exports\n    \nReturns:\n    List[str]: List of exported file paths",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 864,
          "args": [
            "self"
          ],
          "docstring": "Shutdown visualization system and clean up resources.",
          "decorators": []
        },
        {
          "name": "_create_graph_impl",
          "line": 339,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_render_impl",
          "line": 489,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_update_impl",
          "line": 696,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_get_graphs_impl",
          "line": 745,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_cleanup_impl",
          "line": 785,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_export_impl",
          "line": 839,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_shutdown_impl",
          "line": 866,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "VisualizationFormat",
          "line": 64,
          "bases": [
            "Enum"
          ],
          "docstring": "Supported visualization output formats for Framework0.",
          "methods": []
        },
        {
          "name": "NodeType",
          "line": 75,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of nodes in execution flow visualizations.",
          "methods": []
        },
        {
          "name": "EdgeType",
          "line": 88,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of edges in execution flow visualizations.",
          "methods": []
        },
        {
          "name": "VisualizationNode",
          "line": 100,
          "bases": [],
          "docstring": "Represents a node in Framework0 visualization graphs.",
          "methods": [
            {
              "name": "__post_init__",
              "line": 111,
              "args": [
                "self"
              ],
              "docstring": "Initialize node with default styling based on type and status."
            },
            {
              "name": "_get_default_style",
              "line": 116,
              "args": [
                "self"
              ],
              "docstring": "Generate default visual styling based on node type and status."
            }
          ]
        },
        {
          "name": "VisualizationEdge",
          "line": 166,
          "bases": [],
          "docstring": "Represents an edge in Framework0 visualization graphs.",
          "methods": [
            {
              "name": "__post_init__",
              "line": 177,
              "args": [
                "self"
              ],
              "docstring": "Initialize edge with default styling based on type."
            },
            {
              "name": "_get_default_style",
              "line": 182,
              "args": [
                "self"
              ],
              "docstring": "Generate default visual styling based on edge type."
            }
          ]
        },
        {
          "name": "EnhancedVisualizer",
          "line": 235,
          "bases": [],
          "docstring": "Enhanced visualization system for Framework0 with comprehensive graph rendering,\nexecution flow tracking, and interactive visualization capabilities.\n\nProvides advanced visualization features including:\n- Recipe execution flow diagrams with step dependencies\n- Performance metrics visualization and trending\n- Interactive web-based dashboards and monitoring\n- Export capabilities to multiple formats (PNG, SVG, HTML, PDF)\n- Real-time visualization updates during execution\n- Integration with Context system for data sharing",
          "methods": [
            {
              "name": "__init__",
              "line": 249,
              "args": [
                "self",
                "context",
                "output_directory",
                "enable_interactive",
                "enable_real_time"
              ],
              "docstring": "Initialize enhanced visualization system with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    output_directory: Directory for saving visualization outputs\n    enable_interactive: Whether to enable interactive visualization features\n    enable_real_time: Whether to enable real-time visualization updates"
            },
            {
              "name": "_detect_capabilities",
              "line": 300,
              "args": [
                "self"
              ],
              "docstring": "Detect available visualization libraries and log capabilities."
            },
            {
              "name": "create_recipe_execution_graph",
              "line": 322,
              "args": [
                "self",
                "recipe_data",
                "execution_state",
                "layout_algorithm"
              ],
              "docstring": "Create comprehensive visualization graph for recipe execution flow.\n\nArgs:\n    recipe_data: Recipe definition with steps and dependencies\n    execution_state: Optional execution state for status visualization\n    layout_algorithm: Layout algorithm ('hierarchical', 'force', 'circular')\n    \nReturns:\n    str: Graph identifier for further operations"
            },
            {
              "name": "render_graph",
              "line": 470,
              "args": [
                "self",
                "graph_id",
                "output_format",
                "filename",
                "include_metadata"
              ],
              "docstring": "Render visualization graph to specified format with comprehensive output options.\n\nArgs:\n    graph_id: Identifier of graph to render\n    output_format: Output format for rendering\n    filename: Optional custom filename for output\n    include_metadata: Whether to include metadata in output\n    \nReturns:\n    str: Path to rendered output file"
            },
            {
              "name": "_generate_metadata_html",
              "line": 646,
              "args": [
                "self",
                "graph_data"
              ],
              "docstring": "Generate HTML metadata section for graph information."
            },
            {
              "name": "update_execution_state",
              "line": 680,
              "args": [
                "self",
                "graph_id",
                "step_id",
                "status",
                "metadata"
              ],
              "docstring": "Update execution state for specific step in visualization graph.\n\nArgs:\n    graph_id: Identifier of graph to update\n    step_id: Identifier of step to update\n    status: New status for step\n    metadata: Optional additional metadata for step"
            },
            {
              "name": "get_available_graphs",
              "line": 738,
              "args": [
                "self"
              ],
              "docstring": "Get information about all available visualization graphs.\n\nReturns:\n    Dict[str, Dict[str, Any]]: Dictionary of graph information indexed by graph ID"
            },
            {
              "name": "cleanup_graphs",
              "line": 775,
              "args": [
                "self",
                "max_age_hours"
              ],
              "docstring": "Clean up old visualization graphs to manage memory usage.\n\nArgs:\n    max_age_hours: Maximum age in hours before graphs are cleaned up\n    \nReturns:\n    int: Number of graphs cleaned up"
            },
            {
              "name": "export_all_graphs",
              "line": 824,
              "args": [
                "self",
                "output_format",
                "include_metadata"
              ],
              "docstring": "Export all available graphs to specified format.\n\nArgs:\n    output_format: Format for exporting graphs\n    include_metadata: Whether to include metadata in exports\n    \nReturns:\n    List[str]: List of exported file paths"
            },
            {
              "name": "shutdown",
              "line": 864,
              "args": [
                "self"
              ],
              "docstring": "Shutdown visualization system and clean up resources."
            }
          ]
        }
      ],
      "lines_of_code": 746,
      "complexity_score": 104,
      "last_modified": "2025-10-04T18:17:50.503299",
      "checksum": "a47eb70bb0683373d77582ca6b9101b0",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "src/visualization/execution_flow.py": {
      "name": "src/visualization/execution_flow.py",
      "path": "src/visualization/execution_flow.py",
      "component_type": "utility",
      "description": "Recipe Execution Flow Visualizer for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md"
      ],
      "exports": [
        "get_duration",
        "is_terminal_status",
        "get_total_duration",
        "get_step_by_id",
        "get_completion_percentage",
        "update_metrics",
        "__init__",
        "start_recipe_execution",
        "update_step_status",
        "_complete_recipe_execution",
        "create_execution_timeline",
        "_create_plotly_timeline",
        "_create_matplotlib_timeline",
        "_create_json_timeline",
        "_build_execution_state",
        "_start_monitoring",
        "_take_performance_snapshot",
        "get_execution_summary",
        "shutdown",
        "_start_execution_impl",
        "_update_step_impl",
        "_create_timeline_impl",
        "monitor_loop",
        "_get_summary_impl",
        "_shutdown_impl",
        "ExecutionStatus",
        "FlowLayout",
        "ExecutionStep",
        "RecipeExecution",
        "ExecutionFlowVisualizer"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "enum",
        "threading",
        "logging",
        "orchestrator.context.context",
        "src.core.logger",
        "enhanced_visualizer",
        "graphviz",
        "matplotlib.pyplot",
        "matplotlib.patches",
        "matplotlib.animation",
        "matplotlib.dates",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "plotly.offline"
      ],
      "functions": [
        {
          "name": "get_duration",
          "line": 116,
          "args": [
            "self"
          ],
          "docstring": "Calculate step execution duration in seconds.",
          "decorators": []
        },
        {
          "name": "is_terminal_status",
          "line": 124,
          "args": [
            "self"
          ],
          "docstring": "Check if step has reached a terminal execution status.",
          "decorators": []
        },
        {
          "name": "get_total_duration",
          "line": 163,
          "args": [
            "self"
          ],
          "docstring": "Calculate total recipe execution duration in seconds.",
          "decorators": []
        },
        {
          "name": "get_step_by_id",
          "line": 171,
          "args": [
            "self",
            "step_id"
          ],
          "docstring": "Find step by identifier.",
          "decorators": []
        },
        {
          "name": "get_completion_percentage",
          "line": 178,
          "args": [
            "self"
          ],
          "docstring": "Calculate recipe completion percentage.",
          "decorators": []
        },
        {
          "name": "update_metrics",
          "line": 184,
          "args": [
            "self"
          ],
          "docstring": "Update aggregate metrics from individual steps.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 211,
          "args": [
            "self",
            "context",
            "base_visualizer",
            "enable_real_time",
            "update_interval"
          ],
          "docstring": "Initialize execution flow visualizer with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    enable_real_time: Whether to enable real-time visualization updates\n    update_interval: Update interval in seconds for real-time monitoring",
          "decorators": []
        },
        {
          "name": "start_recipe_execution",
          "line": 260,
          "args": [
            "self",
            "recipe_data",
            "execution_id"
          ],
          "docstring": "Start tracking new recipe execution with comprehensive monitoring setup.\n\nArgs:\n    recipe_data: Recipe definition with steps and configuration\n    execution_id: Optional custom execution identifier\n    \nReturns:\n    str: Execution identifier for tracking and updates",
          "decorators": []
        },
        {
          "name": "update_step_status",
          "line": 339,
          "args": [
            "self",
            "execution_id",
            "step_id",
            "status",
            "result",
            "error_message",
            "performance_data"
          ],
          "docstring": "Update execution status for specific step with comprehensive tracking.\n\nArgs:\n    execution_id: Identifier of recipe execution\n    step_id: Identifier of step to update\n    status: New execution status for step\n    result: Optional execution result data\n    error_message: Optional error message if step failed\n    performance_data: Optional performance metrics for step",
          "decorators": []
        },
        {
          "name": "_complete_recipe_execution",
          "line": 439,
          "args": [
            "self",
            "execution_id"
          ],
          "docstring": "Complete recipe execution and update final status.",
          "decorators": []
        },
        {
          "name": "create_execution_timeline",
          "line": 469,
          "args": [
            "self",
            "execution_id",
            "output_format",
            "include_performance"
          ],
          "docstring": "Create timeline visualization of recipe execution with step timing.\n\nArgs:\n    execution_id: Identifier of execution to visualize\n    output_format: Output format for timeline visualization\n    include_performance: Whether to include performance metrics\n    \nReturns:\n    str: Path to generated timeline visualization",
          "decorators": []
        },
        {
          "name": "_create_plotly_timeline",
          "line": 519,
          "args": [
            "self",
            "recipe_execution",
            "include_performance"
          ],
          "docstring": "Create interactive Plotly timeline visualization.",
          "decorators": []
        },
        {
          "name": "_create_matplotlib_timeline",
          "line": 612,
          "args": [
            "self",
            "recipe_execution",
            "output_format",
            "include_performance"
          ],
          "docstring": "Create static matplotlib timeline visualization.",
          "decorators": []
        },
        {
          "name": "_create_json_timeline",
          "line": 701,
          "args": [
            "self",
            "recipe_execution",
            "include_performance"
          ],
          "docstring": "Create JSON export of timeline data.",
          "decorators": []
        },
        {
          "name": "_build_execution_state",
          "line": 750,
          "args": [
            "self",
            "recipe_execution"
          ],
          "docstring": "Build execution state dictionary for visualization integration.",
          "decorators": []
        },
        {
          "name": "_start_monitoring",
          "line": 765,
          "args": [
            "self"
          ],
          "docstring": "Start real-time monitoring thread for active executions.",
          "decorators": []
        },
        {
          "name": "_take_performance_snapshot",
          "line": 810,
          "args": [
            "self"
          ],
          "docstring": "Take snapshot of current performance metrics.",
          "decorators": []
        },
        {
          "name": "get_execution_summary",
          "line": 838,
          "args": [
            "self",
            "execution_id"
          ],
          "docstring": "Get comprehensive summary of recipe execution.",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 902,
          "args": [
            "self"
          ],
          "docstring": "Shutdown execution flow visualizer and clean up resources.",
          "decorators": []
        },
        {
          "name": "_start_execution_impl",
          "line": 275,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_update_step_impl",
          "line": 359,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_create_timeline_impl",
          "line": 486,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "monitor_loop",
          "line": 773,
          "args": [],
          "docstring": "Monitoring loop for real-time updates.",
          "decorators": []
        },
        {
          "name": "_get_summary_impl",
          "line": 840,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_shutdown_impl",
          "line": 904,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ExecutionStatus",
          "line": 62,
          "bases": [
            "Enum"
          ],
          "docstring": "Execution status types for recipe steps and workflows.",
          "methods": []
        },
        {
          "name": "FlowLayout",
          "line": 75,
          "bases": [
            "Enum"
          ],
          "docstring": "Layout algorithms for execution flow visualization.",
          "methods": []
        },
        {
          "name": "ExecutionStep",
          "line": 86,
          "bases": [],
          "docstring": "Represents a single step in recipe execution with comprehensive tracking.",
          "methods": [
            {
              "name": "get_duration",
              "line": 116,
              "args": [
                "self"
              ],
              "docstring": "Calculate step execution duration in seconds."
            },
            {
              "name": "is_terminal_status",
              "line": 124,
              "args": [
                "self"
              ],
              "docstring": "Check if step has reached a terminal execution status."
            }
          ]
        },
        {
          "name": "RecipeExecution",
          "line": 136,
          "bases": [],
          "docstring": "Represents complete recipe execution with step tracking and performance metrics.",
          "methods": [
            {
              "name": "get_total_duration",
              "line": 163,
              "args": [
                "self"
              ],
              "docstring": "Calculate total recipe execution duration in seconds."
            },
            {
              "name": "get_step_by_id",
              "line": 171,
              "args": [
                "self",
                "step_id"
              ],
              "docstring": "Find step by identifier."
            },
            {
              "name": "get_completion_percentage",
              "line": 178,
              "args": [
                "self"
              ],
              "docstring": "Calculate recipe completion percentage."
            },
            {
              "name": "update_metrics",
              "line": 184,
              "args": [
                "self"
              ],
              "docstring": "Update aggregate metrics from individual steps."
            }
          ]
        },
        {
          "name": "ExecutionFlowVisualizer",
          "line": 197,
          "bases": [],
          "docstring": "Specialized visualizer for recipe execution flows with comprehensive tracking,\nperformance visualization, and real-time monitoring capabilities.\n\nProvides advanced execution visualization features including:\n- Step-by-step execution flow diagrams with dependencies\n- Real-time status updates and progress tracking\n- Performance metrics visualization and trending\n- Timeline views with execution duration analysis\n- Interactive execution monitoring and control\n- Export capabilities for documentation and reporting",
          "methods": [
            {
              "name": "__init__",
              "line": 211,
              "args": [
                "self",
                "context",
                "base_visualizer",
                "enable_real_time",
                "update_interval"
              ],
              "docstring": "Initialize execution flow visualizer with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    enable_real_time: Whether to enable real-time visualization updates\n    update_interval: Update interval in seconds for real-time monitoring"
            },
            {
              "name": "start_recipe_execution",
              "line": 260,
              "args": [
                "self",
                "recipe_data",
                "execution_id"
              ],
              "docstring": "Start tracking new recipe execution with comprehensive monitoring setup.\n\nArgs:\n    recipe_data: Recipe definition with steps and configuration\n    execution_id: Optional custom execution identifier\n    \nReturns:\n    str: Execution identifier for tracking and updates"
            },
            {
              "name": "update_step_status",
              "line": 339,
              "args": [
                "self",
                "execution_id",
                "step_id",
                "status",
                "result",
                "error_message",
                "performance_data"
              ],
              "docstring": "Update execution status for specific step with comprehensive tracking.\n\nArgs:\n    execution_id: Identifier of recipe execution\n    step_id: Identifier of step to update\n    status: New execution status for step\n    result: Optional execution result data\n    error_message: Optional error message if step failed\n    performance_data: Optional performance metrics for step"
            },
            {
              "name": "_complete_recipe_execution",
              "line": 439,
              "args": [
                "self",
                "execution_id"
              ],
              "docstring": "Complete recipe execution and update final status."
            },
            {
              "name": "create_execution_timeline",
              "line": 469,
              "args": [
                "self",
                "execution_id",
                "output_format",
                "include_performance"
              ],
              "docstring": "Create timeline visualization of recipe execution with step timing.\n\nArgs:\n    execution_id: Identifier of execution to visualize\n    output_format: Output format for timeline visualization\n    include_performance: Whether to include performance metrics\n    \nReturns:\n    str: Path to generated timeline visualization"
            },
            {
              "name": "_create_plotly_timeline",
              "line": 519,
              "args": [
                "self",
                "recipe_execution",
                "include_performance"
              ],
              "docstring": "Create interactive Plotly timeline visualization."
            },
            {
              "name": "_create_matplotlib_timeline",
              "line": 612,
              "args": [
                "self",
                "recipe_execution",
                "output_format",
                "include_performance"
              ],
              "docstring": "Create static matplotlib timeline visualization."
            },
            {
              "name": "_create_json_timeline",
              "line": 701,
              "args": [
                "self",
                "recipe_execution",
                "include_performance"
              ],
              "docstring": "Create JSON export of timeline data."
            },
            {
              "name": "_build_execution_state",
              "line": 750,
              "args": [
                "self",
                "recipe_execution"
              ],
              "docstring": "Build execution state dictionary for visualization integration."
            },
            {
              "name": "_start_monitoring",
              "line": 765,
              "args": [
                "self"
              ],
              "docstring": "Start real-time monitoring thread for active executions."
            },
            {
              "name": "_take_performance_snapshot",
              "line": 810,
              "args": [
                "self"
              ],
              "docstring": "Take snapshot of current performance metrics."
            },
            {
              "name": "get_execution_summary",
              "line": 838,
              "args": [
                "self",
                "execution_id"
              ],
              "docstring": "Get comprehensive summary of recipe execution."
            },
            {
              "name": "shutdown",
              "line": 902,
              "args": [
                "self"
              ],
              "docstring": "Shutdown execution flow visualizer and clean up resources."
            }
          ]
        }
      ],
      "lines_of_code": 770,
      "complexity_score": 103,
      "last_modified": "2025-10-04T18:17:50.503299",
      "checksum": "757725a3b36e8ee2ff51ebd96fd26229",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "src/visualization/performance_dashboard.py": {
      "name": "src/visualization/performance_dashboard.py",
      "path": "src/visualization/performance_dashboard.py",
      "component_type": "utility",
      "description": "Performance Dashboard for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "age_seconds",
        "is_active",
        "duration",
        "__init__",
        "_initialize_default_thresholds",
        "add_metric",
        "_check_alert_thresholds",
        "_trigger_alert",
        "_update_aggregated_metrics",
        "create_realtime_dashboard",
        "_get_recent_metric_data",
        "_generate_dashboard_html",
        "_generate_alerts_html",
        "_generate_metrics_summary_html",
        "export_performance_report",
        "_collect_performance_data",
        "_calculate_system_health",
        "_generate_performance_report_html",
        "get_dashboard_status",
        "shutdown",
        "_add_metric_impl",
        "_create_dashboard_impl",
        "_export_report_impl",
        "_get_status_impl",
        "_shutdown_impl",
        "MetricType",
        "ChartType",
        "MetricPoint",
        "PerformanceAlert",
        "PerformanceDashboard"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "statistics",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "enum",
        "threading",
        "logging",
        "collections",
        "orchestrator.context.context",
        "src.core.logger",
        "enhanced_visualizer",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "plotly.offline",
        "matplotlib.pyplot",
        "matplotlib.patches",
        "matplotlib.animation",
        "matplotlib.dates",
        "numpy",
        "numpy"
      ],
      "functions": [
        {
          "name": "age_seconds",
          "line": 100,
          "args": [
            "self"
          ],
          "docstring": "Calculate age of metric point in seconds.",
          "decorators": []
        },
        {
          "name": "is_active",
          "line": 119,
          "args": [
            "self"
          ],
          "docstring": "Check if alert is still active (not resolved).",
          "decorators": []
        },
        {
          "name": "duration",
          "line": 123,
          "args": [
            "self"
          ],
          "docstring": "Calculate alert duration in seconds.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 145,
          "args": [
            "self",
            "context",
            "base_visualizer",
            "update_interval",
            "retention_hours",
            "enable_alerts"
          ],
          "docstring": "Initialize performance dashboard with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    update_interval: Update interval in seconds for real-time monitoring\n    retention_hours: Data retention period in hours\n    enable_alerts: Whether to enable performance alerting",
          "decorators": []
        },
        {
          "name": "_initialize_default_thresholds",
          "line": 211,
          "args": [
            "self"
          ],
          "docstring": "Initialize default alert thresholds for performance monitoring.",
          "decorators": []
        },
        {
          "name": "add_metric",
          "line": 245,
          "args": [
            "self",
            "metric_type",
            "value",
            "source",
            "metadata"
          ],
          "docstring": "Add new performance metric measurement to the dashboard.\n\nArgs:\n    metric_type: Type of performance metric\n    value: Metric measurement value\n    source: Source component or operation that generated metric\n    metadata: Optional additional context information",
          "decorators": []
        },
        {
          "name": "_check_alert_thresholds",
          "line": 297,
          "args": [
            "self",
            "metric_point"
          ],
          "docstring": "Check if metric point violates alert thresholds.",
          "decorators": []
        },
        {
          "name": "_trigger_alert",
          "line": 321,
          "args": [
            "self",
            "metric_point",
            "severity",
            "threshold"
          ],
          "docstring": "Trigger performance alert for threshold violation.",
          "decorators": []
        },
        {
          "name": "_update_aggregated_metrics",
          "line": 366,
          "args": [
            "self",
            "metric_type"
          ],
          "docstring": "Update aggregated statistical metrics for dashboard summaries.",
          "decorators": []
        },
        {
          "name": "create_realtime_dashboard",
          "line": 406,
          "args": [
            "self",
            "metrics_to_include",
            "refresh_interval"
          ],
          "docstring": "Create comprehensive real-time performance dashboard.\n\nArgs:\n    metrics_to_include: List of metric types to include (all if None)\n    refresh_interval: Dashboard refresh interval in seconds\n    \nReturns:\n    str: Path to generated dashboard HTML file",
          "decorators": []
        },
        {
          "name": "_get_recent_metric_data",
          "line": 536,
          "args": [
            "self",
            "metric_type",
            "hours"
          ],
          "docstring": "Get recent metric data points for specified time period.",
          "decorators": []
        },
        {
          "name": "_generate_dashboard_html",
          "line": 553,
          "args": [
            "self",
            "plotly_figure",
            "refresh_interval"
          ],
          "docstring": "Generate complete HTML dashboard with auto-refresh and styling.",
          "decorators": []
        },
        {
          "name": "_generate_alerts_html",
          "line": 813,
          "args": [
            "self"
          ],
          "docstring": "Generate HTML section for active alerts display.",
          "decorators": []
        },
        {
          "name": "_generate_metrics_summary_html",
          "line": 835,
          "args": [
            "self"
          ],
          "docstring": "Generate HTML section for metrics summary cards.",
          "decorators": []
        },
        {
          "name": "export_performance_report",
          "line": 876,
          "args": [
            "self",
            "hours_back",
            "include_charts",
            "output_format"
          ],
          "docstring": "Export comprehensive performance report for specified time period.\n\nArgs:\n    hours_back: Number of hours of data to include in report\n    include_charts: Whether to include visualization charts\n    output_format: Output format for report\n    \nReturns:\n    str: Path to generated performance report",
          "decorators": []
        },
        {
          "name": "_collect_performance_data",
          "line": 928,
          "args": [
            "self",
            "hours_back"
          ],
          "docstring": "Collect comprehensive performance data for report generation.",
          "decorators": []
        },
        {
          "name": "_calculate_system_health",
          "line": 967,
          "args": [
            "self"
          ],
          "docstring": "Calculate overall system health score and status.",
          "decorators": []
        },
        {
          "name": "_generate_performance_report_html",
          "line": 998,
          "args": [
            "self",
            "report_data",
            "include_charts"
          ],
          "docstring": "Generate comprehensive HTML performance report.",
          "decorators": []
        },
        {
          "name": "get_dashboard_status",
          "line": 1060,
          "args": [
            "self"
          ],
          "docstring": "Get comprehensive dashboard status and statistics.",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 1089,
          "args": [
            "self"
          ],
          "docstring": "Shutdown performance dashboard and clean up resources.",
          "decorators": []
        },
        {
          "name": "_add_metric_impl",
          "line": 261,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_create_dashboard_impl",
          "line": 421,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_export_report_impl",
          "line": 893,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_get_status_impl",
          "line": 1062,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_shutdown_impl",
          "line": 1091,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MetricType",
          "line": 61,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of performance metrics tracked by the dashboard.",
          "methods": []
        },
        {
          "name": "ChartType",
          "line": 76,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of charts available in the performance dashboard.",
          "methods": []
        },
        {
          "name": "MetricPoint",
          "line": 91,
          "bases": [],
          "docstring": "Represents a single metric measurement with comprehensive metadata.",
          "methods": [
            {
              "name": "age_seconds",
              "line": 100,
              "args": [
                "self"
              ],
              "docstring": "Calculate age of metric point in seconds."
            }
          ]
        },
        {
          "name": "PerformanceAlert",
          "line": 106,
          "bases": [],
          "docstring": "Represents performance alerts and threshold violations.",
          "methods": [
            {
              "name": "is_active",
              "line": 119,
              "args": [
                "self"
              ],
              "docstring": "Check if alert is still active (not resolved)."
            },
            {
              "name": "duration",
              "line": 123,
              "args": [
                "self"
              ],
              "docstring": "Calculate alert duration in seconds."
            }
          ]
        },
        {
          "name": "PerformanceDashboard",
          "line": 130,
          "bases": [],
          "docstring": "Comprehensive performance monitoring dashboard for Framework0 with real-time\nmetrics visualization, historical analysis, and alerting capabilities.\n\nProvides advanced dashboard features including:\n- Real-time performance metrics collection and visualization\n- Historical trend analysis and statistical summaries\n- Customizable alerting and threshold monitoring\n- Interactive charts and graphs with drill-down capabilities\n- Performance bottleneck identification and analysis\n- Resource utilization monitoring and optimization insights\n- Export capabilities for reporting and documentation",
          "methods": [
            {
              "name": "__init__",
              "line": 145,
              "args": [
                "self",
                "context",
                "base_visualizer",
                "update_interval",
                "retention_hours",
                "enable_alerts"
              ],
              "docstring": "Initialize performance dashboard with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    update_interval: Update interval in seconds for real-time monitoring\n    retention_hours: Data retention period in hours\n    enable_alerts: Whether to enable performance alerting"
            },
            {
              "name": "_initialize_default_thresholds",
              "line": 211,
              "args": [
                "self"
              ],
              "docstring": "Initialize default alert thresholds for performance monitoring."
            },
            {
              "name": "add_metric",
              "line": 245,
              "args": [
                "self",
                "metric_type",
                "value",
                "source",
                "metadata"
              ],
              "docstring": "Add new performance metric measurement to the dashboard.\n\nArgs:\n    metric_type: Type of performance metric\n    value: Metric measurement value\n    source: Source component or operation that generated metric\n    metadata: Optional additional context information"
            },
            {
              "name": "_check_alert_thresholds",
              "line": 297,
              "args": [
                "self",
                "metric_point"
              ],
              "docstring": "Check if metric point violates alert thresholds."
            },
            {
              "name": "_trigger_alert",
              "line": 321,
              "args": [
                "self",
                "metric_point",
                "severity",
                "threshold"
              ],
              "docstring": "Trigger performance alert for threshold violation."
            },
            {
              "name": "_update_aggregated_metrics",
              "line": 366,
              "args": [
                "self",
                "metric_type"
              ],
              "docstring": "Update aggregated statistical metrics for dashboard summaries."
            },
            {
              "name": "create_realtime_dashboard",
              "line": 406,
              "args": [
                "self",
                "metrics_to_include",
                "refresh_interval"
              ],
              "docstring": "Create comprehensive real-time performance dashboard.\n\nArgs:\n    metrics_to_include: List of metric types to include (all if None)\n    refresh_interval: Dashboard refresh interval in seconds\n    \nReturns:\n    str: Path to generated dashboard HTML file"
            },
            {
              "name": "_get_recent_metric_data",
              "line": 536,
              "args": [
                "self",
                "metric_type",
                "hours"
              ],
              "docstring": "Get recent metric data points for specified time period."
            },
            {
              "name": "_generate_dashboard_html",
              "line": 553,
              "args": [
                "self",
                "plotly_figure",
                "refresh_interval"
              ],
              "docstring": "Generate complete HTML dashboard with auto-refresh and styling."
            },
            {
              "name": "_generate_alerts_html",
              "line": 813,
              "args": [
                "self"
              ],
              "docstring": "Generate HTML section for active alerts display."
            },
            {
              "name": "_generate_metrics_summary_html",
              "line": 835,
              "args": [
                "self"
              ],
              "docstring": "Generate HTML section for metrics summary cards."
            },
            {
              "name": "export_performance_report",
              "line": 876,
              "args": [
                "self",
                "hours_back",
                "include_charts",
                "output_format"
              ],
              "docstring": "Export comprehensive performance report for specified time period.\n\nArgs:\n    hours_back: Number of hours of data to include in report\n    include_charts: Whether to include visualization charts\n    output_format: Output format for report\n    \nReturns:\n    str: Path to generated performance report"
            },
            {
              "name": "_collect_performance_data",
              "line": 928,
              "args": [
                "self",
                "hours_back"
              ],
              "docstring": "Collect comprehensive performance data for report generation."
            },
            {
              "name": "_calculate_system_health",
              "line": 967,
              "args": [
                "self"
              ],
              "docstring": "Calculate overall system health score and status."
            },
            {
              "name": "_generate_performance_report_html",
              "line": 998,
              "args": [
                "self",
                "report_data",
                "include_charts"
              ],
              "docstring": "Generate comprehensive HTML performance report."
            },
            {
              "name": "get_dashboard_status",
              "line": 1060,
              "args": [
                "self"
              ],
              "docstring": "Get comprehensive dashboard status and statistics."
            },
            {
              "name": "shutdown",
              "line": 1089,
              "args": [
                "self"
              ],
              "docstring": "Shutdown performance dashboard and clean up resources."
            }
          ]
        }
      ],
      "lines_of_code": 933,
      "complexity_score": 84,
      "last_modified": "2025-10-04T18:17:50.507299",
      "checksum": "a10ad13534828bde29f15b81a925e4d1",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "src/visualization/timeline_visualizer.py": {
      "name": "src/visualization/timeline_visualizer.py",
      "path": "src/visualization/timeline_visualizer.py",
      "component_type": "utility",
      "description": "Timeline and Flow Visualizations for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/dependency_graph.py",
        "src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "get_end_time",
        "overlaps_with",
        "get_duration",
        "__init__",
        "create_gantt_timeline",
        "create_dependency_flow",
        "_group_events_by_field",
        "_get_status_color",
        "_get_color_map",
        "_calculate_layout_positions",
        "_add_flow_edges_to_figure",
        "_add_flow_nodes_to_figure",
        "_add_arrowhead",
        "_generate_enhanced_gantt_html",
        "_generate_enhanced_flow_html",
        "get_timeline_summary",
        "_calculate_event_statistics",
        "_calculate_timeline_span",
        "_calculate_status_distribution",
        "shutdown",
        "_create_gantt_impl",
        "_create_flow_impl",
        "_get_summary_impl",
        "_shutdown_impl",
        "TimelineType",
        "LayoutEngine",
        "TimelineEvent",
        "FlowNode",
        "FlowEdge",
        "TimelineVisualizer"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "math",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "enum",
        "threading",
        "logging",
        "orchestrator.context.context",
        "src.core.logger",
        "enhanced_visualizer",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "plotly.offline",
        "networkx",
        "matplotlib.pyplot",
        "matplotlib.patches",
        "matplotlib.patches",
        "matplotlib.dates",
        "matplotlib.animation",
        "numpy",
        "statistics"
      ],
      "functions": [
        {
          "name": "get_end_time",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Calculate event end time based on start and duration.",
          "decorators": []
        },
        {
          "name": "overlaps_with",
          "line": 121,
          "args": [
            "self",
            "other"
          ],
          "docstring": "Check if this event overlaps with another event.",
          "decorators": []
        },
        {
          "name": "get_duration",
          "line": 154,
          "args": [
            "self"
          ],
          "docstring": "Calculate node execution duration.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 200,
          "args": [
            "self",
            "context",
            "base_visualizer",
            "enable_animation",
            "enable_interactivity"
          ],
          "docstring": "Initialize timeline visualizer with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    enable_animation: Whether to enable animated visualizations\n    enable_interactivity: Whether to enable interactive features",
          "decorators": []
        },
        {
          "name": "create_gantt_timeline",
          "line": 254,
          "args": [
            "self",
            "timeline_id",
            "events",
            "title",
            "group_by"
          ],
          "docstring": "Create interactive Gantt chart timeline visualization.\n\nArgs:\n    timeline_id: Unique identifier for timeline\n    events: List of timeline events to visualize\n    title: Optional title for the timeline\n    group_by: Optional field to group events by\n    \nReturns:\n    str: Path to generated Gantt chart file",
          "decorators": []
        },
        {
          "name": "create_dependency_flow",
          "line": 378,
          "args": [
            "self",
            "flow_id",
            "nodes",
            "edges",
            "layout_engine",
            "title"
          ],
          "docstring": "Create interactive dependency flow diagram visualization.\n\nArgs:\n    flow_id: Unique identifier for flow diagram\n    nodes: List of flow nodes to visualize\n    edges: List of flow edges connecting nodes\n    layout_engine: Layout algorithm for node positioning\n    title: Optional title for the flow diagram\n    \nReturns:\n    str: Path to generated flow diagram file",
          "decorators": []
        },
        {
          "name": "_group_events_by_field",
          "line": 481,
          "args": [
            "self",
            "events",
            "field"
          ],
          "docstring": "Group timeline events by specified field.",
          "decorators": []
        },
        {
          "name": "_get_status_color",
          "line": 508,
          "args": [
            "self",
            "status"
          ],
          "docstring": "Get color for event status.",
          "decorators": []
        },
        {
          "name": "_get_color_map",
          "line": 520,
          "args": [
            "self"
          ],
          "docstring": "Get comprehensive color mapping for statuses.",
          "decorators": []
        },
        {
          "name": "_calculate_layout_positions",
          "line": 532,
          "args": [
            "self",
            "graph",
            "layout_engine"
          ],
          "docstring": "Calculate node positions using specified layout algorithm.",
          "decorators": []
        },
        {
          "name": "_add_flow_edges_to_figure",
          "line": 573,
          "args": [
            "self",
            "fig",
            "edges",
            "positions"
          ],
          "docstring": "Add flow edges to Plotly figure.",
          "decorators": []
        },
        {
          "name": "_add_flow_nodes_to_figure",
          "line": 604,
          "args": [
            "self",
            "fig",
            "nodes",
            "positions"
          ],
          "docstring": "Add flow nodes to Plotly figure.",
          "decorators": []
        },
        {
          "name": "_add_arrowhead",
          "line": 668,
          "args": [
            "self",
            "fig",
            "source_pos",
            "target_pos",
            "color"
          ],
          "docstring": "Add arrowhead to indicate edge direction.",
          "decorators": []
        },
        {
          "name": "_generate_enhanced_gantt_html",
          "line": 724,
          "args": [
            "self",
            "fig",
            "timeline_id",
            "events"
          ],
          "docstring": "Generate enhanced HTML for Gantt chart with additional features.",
          "decorators": []
        },
        {
          "name": "_generate_enhanced_flow_html",
          "line": 954,
          "args": [
            "self",
            "fig",
            "flow_id",
            "nodes",
            "edges"
          ],
          "docstring": "Generate enhanced HTML for flow diagram with additional features.",
          "decorators": []
        },
        {
          "name": "get_timeline_summary",
          "line": 1098,
          "args": [
            "self",
            "timeline_id"
          ],
          "docstring": "Get comprehensive summary of timeline visualization.",
          "decorators": []
        },
        {
          "name": "_calculate_event_statistics",
          "line": 1123,
          "args": [
            "self",
            "events"
          ],
          "docstring": "Calculate statistical metrics for timeline events.",
          "decorators": []
        },
        {
          "name": "_calculate_timeline_span",
          "line": 1147,
          "args": [
            "self",
            "events"
          ],
          "docstring": "Calculate timeline temporal span information.",
          "decorators": []
        },
        {
          "name": "_calculate_status_distribution",
          "line": 1163,
          "args": [
            "self",
            "events"
          ],
          "docstring": "Calculate distribution of event statuses.",
          "decorators": []
        },
        {
          "name": "shutdown",
          "line": 1171,
          "args": [
            "self"
          ],
          "docstring": "Shutdown timeline visualizer and clean up resources.",
          "decorators": []
        },
        {
          "name": "_create_gantt_impl",
          "line": 273,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_create_flow_impl",
          "line": 399,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_get_summary_impl",
          "line": 1100,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        },
        {
          "name": "_shutdown_impl",
          "line": 1173,
          "args": [],
          "docstring": "Internal implementation with thread safety.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TimelineType",
          "line": 70,
          "bases": [
            "Enum"
          ],
          "docstring": "Types of timeline visualizations available in Framework0.",
          "methods": []
        },
        {
          "name": "LayoutEngine",
          "line": 82,
          "bases": [
            "Enum"
          ],
          "docstring": "Layout algorithms for flow and dependency visualizations.",
          "methods": []
        },
        {
          "name": "TimelineEvent",
          "line": 94,
          "bases": [],
          "docstring": "Represents a single event in timeline visualizations.",
          "methods": [
            {
              "name": "get_end_time",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Calculate event end time based on start and duration."
            },
            {
              "name": "overlaps_with",
              "line": 121,
              "args": [
                "self",
                "other"
              ],
              "docstring": "Check if this event overlaps with another event."
            }
          ]
        },
        {
          "name": "FlowNode",
          "line": 130,
          "bases": [],
          "docstring": "Represents a node in execution flow visualizations.",
          "methods": [
            {
              "name": "get_duration",
              "line": 154,
              "args": [
                "self"
              ],
              "docstring": "Calculate node execution duration."
            }
          ]
        },
        {
          "name": "FlowEdge",
          "line": 162,
          "bases": [],
          "docstring": "Represents an edge in execution flow visualizations.",
          "methods": []
        },
        {
          "name": "TimelineVisualizer",
          "line": 186,
          "bases": [],
          "docstring": "Advanced timeline and flow visualization system for Framework0 with comprehensive\ninteractive features, dependency analysis, and real-time execution tracking.\n\nProvides sophisticated visualization capabilities including:\n- Interactive Gantt charts with drill-down functionality\n- Dynamic dependency flow diagrams with live updates\n- Multi-track parallel execution timelines\n- Resource utilization visualization over time\n- Event sequence analysis with correlation detection\n- Export capabilities to multiple formats with animation support",
          "methods": [
            {
              "name": "__init__",
              "line": 200,
              "args": [
                "self",
                "context",
                "base_visualizer",
                "enable_animation",
                "enable_interactivity"
              ],
              "docstring": "Initialize timeline visualizer with comprehensive configuration.\n\nArgs:\n    context: Context instance for data sharing and coordination\n    base_visualizer: Base visualization system for rendering\n    enable_animation: Whether to enable animated visualizations\n    enable_interactivity: Whether to enable interactive features"
            },
            {
              "name": "create_gantt_timeline",
              "line": 254,
              "args": [
                "self",
                "timeline_id",
                "events",
                "title",
                "group_by"
              ],
              "docstring": "Create interactive Gantt chart timeline visualization.\n\nArgs:\n    timeline_id: Unique identifier for timeline\n    events: List of timeline events to visualize\n    title: Optional title for the timeline\n    group_by: Optional field to group events by\n    \nReturns:\n    str: Path to generated Gantt chart file"
            },
            {
              "name": "create_dependency_flow",
              "line": 378,
              "args": [
                "self",
                "flow_id",
                "nodes",
                "edges",
                "layout_engine",
                "title"
              ],
              "docstring": "Create interactive dependency flow diagram visualization.\n\nArgs:\n    flow_id: Unique identifier for flow diagram\n    nodes: List of flow nodes to visualize\n    edges: List of flow edges connecting nodes\n    layout_engine: Layout algorithm for node positioning\n    title: Optional title for the flow diagram\n    \nReturns:\n    str: Path to generated flow diagram file"
            },
            {
              "name": "_group_events_by_field",
              "line": 481,
              "args": [
                "self",
                "events",
                "field"
              ],
              "docstring": "Group timeline events by specified field."
            },
            {
              "name": "_get_status_color",
              "line": 508,
              "args": [
                "self",
                "status"
              ],
              "docstring": "Get color for event status."
            },
            {
              "name": "_get_color_map",
              "line": 520,
              "args": [
                "self"
              ],
              "docstring": "Get comprehensive color mapping for statuses."
            },
            {
              "name": "_calculate_layout_positions",
              "line": 532,
              "args": [
                "self",
                "graph",
                "layout_engine"
              ],
              "docstring": "Calculate node positions using specified layout algorithm."
            },
            {
              "name": "_add_flow_edges_to_figure",
              "line": 573,
              "args": [
                "self",
                "fig",
                "edges",
                "positions"
              ],
              "docstring": "Add flow edges to Plotly figure."
            },
            {
              "name": "_add_flow_nodes_to_figure",
              "line": 604,
              "args": [
                "self",
                "fig",
                "nodes",
                "positions"
              ],
              "docstring": "Add flow nodes to Plotly figure."
            },
            {
              "name": "_add_arrowhead",
              "line": 668,
              "args": [
                "self",
                "fig",
                "source_pos",
                "target_pos",
                "color"
              ],
              "docstring": "Add arrowhead to indicate edge direction."
            },
            {
              "name": "_generate_enhanced_gantt_html",
              "line": 724,
              "args": [
                "self",
                "fig",
                "timeline_id",
                "events"
              ],
              "docstring": "Generate enhanced HTML for Gantt chart with additional features."
            },
            {
              "name": "_generate_enhanced_flow_html",
              "line": 954,
              "args": [
                "self",
                "fig",
                "flow_id",
                "nodes",
                "edges"
              ],
              "docstring": "Generate enhanced HTML for flow diagram with additional features."
            },
            {
              "name": "get_timeline_summary",
              "line": 1098,
              "args": [
                "self",
                "timeline_id"
              ],
              "docstring": "Get comprehensive summary of timeline visualization."
            },
            {
              "name": "_calculate_event_statistics",
              "line": 1123,
              "args": [
                "self",
                "events"
              ],
              "docstring": "Calculate statistical metrics for timeline events."
            },
            {
              "name": "_calculate_timeline_span",
              "line": 1147,
              "args": [
                "self",
                "events"
              ],
              "docstring": "Calculate timeline temporal span information."
            },
            {
              "name": "_calculate_status_distribution",
              "line": 1163,
              "args": [
                "self",
                "events"
              ],
              "docstring": "Calculate distribution of event statuses."
            },
            {
              "name": "shutdown",
              "line": 1171,
              "args": [
                "self"
              ],
              "docstring": "Shutdown timeline visualizer and clean up resources."
            }
          ]
        }
      ],
      "lines_of_code": 1017,
      "complexity_score": 88,
      "last_modified": "2025-10-04T18:17:50.507299",
      "checksum": "f5aef6adb50b81a18bd93816b657f27e",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "start_server.sh": {
      "name": "start_server.sh",
      "path": "start_server.sh",
      "component_type": "shell_script",
      "description": "Framework0 Context Server Startup Script",
      "dependencies": [],
      "exports": [
        "log_info",
        "log_success",
        "log_warning",
        "log_error",
        "log_highlight",
        "show_help",
        "check_dependencies",
        "activate_python_env",
        "get_server_pid",
        "is_server_running",
        "wait_for_server_start",
        "wait_for_server_stop",
        "start_server",
        "stop_server",
        "show_status",
        "restart_server",
        "show_logs",
        "manage_config",
        "install_dependencies",
        "main"
      ],
      "imports": [],
      "functions": [
        {
          "name": "log_info",
          "line": 36,
          "type": "shell_function"
        },
        {
          "name": "log_success",
          "line": 40,
          "type": "shell_function"
        },
        {
          "name": "log_warning",
          "line": 44,
          "type": "shell_function"
        },
        {
          "name": "log_error",
          "line": 48,
          "type": "shell_function"
        },
        {
          "name": "log_highlight",
          "line": 52,
          "type": "shell_function"
        },
        {
          "name": "show_help",
          "line": 57,
          "type": "shell_function"
        },
        {
          "name": "check_dependencies",
          "line": 122,
          "type": "shell_function"
        },
        {
          "name": "activate_python_env",
          "line": 154,
          "type": "shell_function"
        },
        {
          "name": "get_server_pid",
          "line": 169,
          "type": "shell_function"
        },
        {
          "name": "is_server_running",
          "line": 175,
          "type": "shell_function"
        },
        {
          "name": "wait_for_server_start",
          "line": 190,
          "type": "shell_function"
        },
        {
          "name": "wait_for_server_stop",
          "line": 211,
          "type": "shell_function"
        },
        {
          "name": "start_server",
          "line": 232,
          "type": "shell_function"
        },
        {
          "name": "stop_server",
          "line": 325,
          "type": "shell_function"
        },
        {
          "name": "show_status",
          "line": 376,
          "type": "shell_function"
        },
        {
          "name": "restart_server",
          "line": 406,
          "type": "shell_function"
        },
        {
          "name": "show_logs",
          "line": 420,
          "type": "shell_function"
        },
        {
          "name": "manage_config",
          "line": 472,
          "type": "shell_function"
        },
        {
          "name": "install_dependencies",
          "line": 503,
          "type": "shell_function"
        },
        {
          "name": "main",
          "line": 535,
          "type": "shell_function"
        }
      ],
      "classes": [],
      "lines_of_code": 535,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:07:56.987753",
      "checksum": "2fc187fd68e10a98c2bb582f69b6334f",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "storage/__init__.py": {
      "name": "storage/__init__.py",
      "path": "storage/__init__.py",
      "component_type": "utility",
      "description": "Framework0 package initializer",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:50:45.703975",
      "checksum": "6f3997601d8c1c43c83608fe7ff049fe",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "tests/__init__.py": {
      "name": "tests/__init__.py",
      "path": "tests/__init__.py",
      "component_type": "test",
      "description": "Framework0 package initializer",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:50:45.703975",
      "checksum": "6f3997601d8c1c43c83608fe7ff049fe",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "tests/test_analysis_framework.py": {
      "name": "tests/test_analysis_framework.py",
      "path": "tests/test_analysis_framework.py",
      "component_type": "test",
      "description": "Comprehensive Test Suite for Analysis Framework",
      "dependencies": [
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md"
      ],
      "exports": [
        "test_default_config_creation",
        "test_config_with_custom_values",
        "test_config_to_dict_conversion",
        "test_config_from_dict_creation",
        "test_config_from_dict_with_invalid_keys",
        "test_basic_result_creation",
        "test_result_error_handling",
        "test_result_warning_handling",
        "test_result_statistics_management",
        "test_result_pattern_management",
        "test_result_to_dict_conversion",
        "__init__",
        "_analyze_impl",
        "__init__",
        "set_registry_name",
        "_analyze_impl",
        "test_analyzer_initialization",
        "test_analyzer_with_default_config",
        "test_basic_analysis_execution",
        "test_analysis_with_statistics_calculation",
        "test_pattern_detection",
        "test_quality_assessment",
        "test_hook_system",
        "test_error_handling",
        "test_analyzer_statistics_tracking",
        "test_summarizer_initialization",
        "test_list_data_summarization",
        "test_numeric_data_analysis",
        "test_string_data_analysis",
        "test_dictionary_data_analysis",
        "test_quality_assessment",
        "test_empty_data_handling",
        "setup_method",
        "teardown_method",
        "test_analyzer_registration",
        "test_analyzer_retrieval",
        "test_analyzer_unregistration",
        "test_analyzer_chain_creation",
        "test_register_analyzer_decorator",
        "test_registry_error_handling",
        "test_concurrent_analysis",
        "test_concurrent_registry_operations",
        "test_analysis_with_context_system",
        "test_analysis_with_scriptlet_framework",
        "pre_analysis_hook",
        "post_analysis_hook",
        "worker_analysis",
        "register_worker",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "__init__",
        "_analyze_impl",
        "_analyze_impl",
        "TestAnalysisConfig",
        "TestAnalysisResult",
        "MockAnalyzer",
        "NamedMockAnalyzer",
        "TestBaseAnalyzerV2",
        "TestEnhancedSummarizer",
        "TestAnalysisRegistry",
        "TestThreadSafety",
        "TestIntegration",
        "FailingAnalyzer",
        "RetrievalTestAnalyzer",
        "Chain1Analyzer",
        "Chain2Analyzer",
        "DecoratedAnalyzer"
      ],
      "imports": [
        "pytest",
        "threading",
        "time",
        "json",
        "typing",
        "unittest.mock",
        "datetime",
        "src.analysis.framework",
        "src.analysis.components",
        "src.analysis.registry"
      ],
      "functions": [
        {
          "name": "test_default_config_creation",
          "line": 48,
          "args": [
            "self"
          ],
          "docstring": "Test creation of AnalysisConfig with default values.",
          "decorators": []
        },
        {
          "name": "test_config_with_custom_values",
          "line": 65,
          "args": [
            "self"
          ],
          "docstring": "Test AnalysisConfig with custom values.",
          "decorators": []
        },
        {
          "name": "test_config_to_dict_conversion",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "Test conversion of AnalysisConfig to dictionary.",
          "decorators": []
        },
        {
          "name": "test_config_from_dict_creation",
          "line": 98,
          "args": [
            "self"
          ],
          "docstring": "Test creation of AnalysisConfig from dictionary.",
          "decorators": []
        },
        {
          "name": "test_config_from_dict_with_invalid_keys",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Test AnalysisConfig creation from dict with invalid keys.",
          "decorators": []
        },
        {
          "name": "test_basic_result_creation",
          "line": 134,
          "args": [
            "self"
          ],
          "docstring": "Test creation of basic AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_error_handling",
          "line": 155,
          "args": [
            "self"
          ],
          "docstring": "Test error handling in AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_warning_handling",
          "line": 167,
          "args": [
            "self"
          ],
          "docstring": "Test warning handling in AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_statistics_management",
          "line": 181,
          "args": [
            "self"
          ],
          "docstring": "Test statistics management in AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_pattern_management",
          "line": 194,
          "args": [
            "self"
          ],
          "docstring": "Test pattern management in AnalysisResult.",
          "decorators": []
        },
        {
          "name": "test_result_to_dict_conversion",
          "line": 209,
          "args": [
            "self"
          ],
          "docstring": "Test AnalysisResult conversion to dictionary.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 240,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize mock analyzer.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 245,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Mock implementation that records calls.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 267,
          "args": [
            "self",
            "config"
          ],
          "docstring": "Initialize named mock analyzer.",
          "decorators": []
        },
        {
          "name": "set_registry_name",
          "line": 275,
          "args": [
            "cls",
            "name"
          ],
          "docstring": "Set the name to use when creating instances from registry.",
          "decorators": [
            "classmethod"
          ]
        },
        {
          "name": "_analyze_impl",
          "line": 279,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "Mock implementation that records calls.",
          "decorators": []
        },
        {
          "name": "test_analyzer_initialization",
          "line": 299,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer initialization with configuration.",
          "decorators": []
        },
        {
          "name": "test_analyzer_with_default_config",
          "line": 313,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer initialization with default configuration.",
          "decorators": []
        },
        {
          "name": "test_basic_analysis_execution",
          "line": 322,
          "args": [
            "self"
          ],
          "docstring": "Test basic analysis execution.",
          "decorators": []
        },
        {
          "name": "test_analysis_with_statistics_calculation",
          "line": 338,
          "args": [
            "self"
          ],
          "docstring": "Test analysis with automatic statistics calculation.",
          "decorators": []
        },
        {
          "name": "test_pattern_detection",
          "line": 356,
          "args": [
            "self"
          ],
          "docstring": "Test automatic pattern detection.",
          "decorators": []
        },
        {
          "name": "test_quality_assessment",
          "line": 370,
          "args": [
            "self"
          ],
          "docstring": "Test data quality assessment.",
          "decorators": []
        },
        {
          "name": "test_hook_system",
          "line": 384,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer hook system.",
          "decorators": []
        },
        {
          "name": "test_error_handling",
          "line": 412,
          "args": [
            "self"
          ],
          "docstring": "Test error handling in analysis.",
          "decorators": []
        },
        {
          "name": "test_analyzer_statistics_tracking",
          "line": 429,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer performance statistics tracking.",
          "decorators": []
        },
        {
          "name": "test_summarizer_initialization",
          "line": 452,
          "args": [
            "self"
          ],
          "docstring": "Test EnhancedSummarizer initialization.",
          "decorators": []
        },
        {
          "name": "test_list_data_summarization",
          "line": 460,
          "args": [
            "self"
          ],
          "docstring": "Test summarization of list data.",
          "decorators": []
        },
        {
          "name": "test_numeric_data_analysis",
          "line": 480,
          "args": [
            "self"
          ],
          "docstring": "Test numeric data analysis capabilities.",
          "decorators": []
        },
        {
          "name": "test_string_data_analysis",
          "line": 500,
          "args": [
            "self"
          ],
          "docstring": "Test string data analysis capabilities.",
          "decorators": []
        },
        {
          "name": "test_dictionary_data_analysis",
          "line": 516,
          "args": [
            "self"
          ],
          "docstring": "Test dictionary data analysis capabilities.",
          "decorators": []
        },
        {
          "name": "test_quality_assessment",
          "line": 538,
          "args": [
            "self"
          ],
          "docstring": "Test data quality assessment in summarizer.",
          "decorators": []
        },
        {
          "name": "test_empty_data_handling",
          "line": 556,
          "args": [
            "self"
          ],
          "docstring": "Test handling of empty data.",
          "decorators": []
        },
        {
          "name": "setup_method",
          "line": 576,
          "args": [
            "self"
          ],
          "docstring": "Setup for each test method.",
          "decorators": []
        },
        {
          "name": "teardown_method",
          "line": 581,
          "args": [
            "self"
          ],
          "docstring": "Cleanup after each test method.",
          "decorators": []
        },
        {
          "name": "test_analyzer_registration",
          "line": 586,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer registration in registry.",
          "decorators": []
        },
        {
          "name": "test_analyzer_retrieval",
          "line": 606,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer instance retrieval from registry.",
          "decorators": []
        },
        {
          "name": "test_analyzer_unregistration",
          "line": 625,
          "args": [
            "self"
          ],
          "docstring": "Test analyzer removal from registry.",
          "decorators": []
        },
        {
          "name": "test_analyzer_chain_creation",
          "line": 635,
          "args": [
            "self"
          ],
          "docstring": "Test creation of analyzer chains.",
          "decorators": []
        },
        {
          "name": "test_register_analyzer_decorator",
          "line": 664,
          "args": [
            "self"
          ],
          "docstring": "Test @register_analyzer decorator.",
          "decorators": []
        },
        {
          "name": "test_registry_error_handling",
          "line": 681,
          "args": [
            "self"
          ],
          "docstring": "Test error handling in registry operations.",
          "decorators": []
        },
        {
          "name": "test_concurrent_analysis",
          "line": 695,
          "args": [
            "self"
          ],
          "docstring": "Test concurrent analysis execution.",
          "decorators": []
        },
        {
          "name": "test_concurrent_registry_operations",
          "line": 731,
          "args": [
            "self"
          ],
          "docstring": "Test concurrent registry operations.",
          "decorators": []
        },
        {
          "name": "test_analysis_with_context_system",
          "line": 764,
          "args": [
            "self"
          ],
          "docstring": "Test analysis framework integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_analysis_with_scriptlet_framework",
          "line": 770,
          "args": [
            "self"
          ],
          "docstring": "Test analysis framework integration with Scriptlet framework.",
          "decorators": []
        },
        {
          "name": "pre_analysis_hook",
          "line": 389,
          "args": [
            "data",
            "config"
          ],
          "docstring": "Test pre-analysis hook.",
          "decorators": []
        },
        {
          "name": "post_analysis_hook",
          "line": 393,
          "args": [
            "result"
          ],
          "docstring": "Test post-analysis hook.",
          "decorators": []
        },
        {
          "name": "worker_analysis",
          "line": 701,
          "args": [
            "worker_id"
          ],
          "docstring": "Worker function for concurrent analysis.",
          "decorators": []
        },
        {
          "name": "register_worker",
          "line": 736,
          "args": [
            "worker_id"
          ],
          "docstring": "Worker function for concurrent registration.",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 416,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 610,
          "args": [
            "self",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 612,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 639,
          "args": [
            "self",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 641,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 645,
          "args": [
            "self",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 647,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "_analyze_impl",
          "line": 669,
          "args": [
            "self",
            "data",
            "config"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestAnalysisConfig",
          "line": 45,
          "bases": [],
          "docstring": "Test suite for AnalysisConfig class.",
          "methods": [
            {
              "name": "test_default_config_creation",
              "line": 48,
              "args": [
                "self"
              ],
              "docstring": "Test creation of AnalysisConfig with default values."
            },
            {
              "name": "test_config_with_custom_values",
              "line": 65,
              "args": [
                "self"
              ],
              "docstring": "Test AnalysisConfig with custom values."
            },
            {
              "name": "test_config_to_dict_conversion",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": "Test conversion of AnalysisConfig to dictionary."
            },
            {
              "name": "test_config_from_dict_creation",
              "line": 98,
              "args": [
                "self"
              ],
              "docstring": "Test creation of AnalysisConfig from dictionary."
            },
            {
              "name": "test_config_from_dict_with_invalid_keys",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Test AnalysisConfig creation from dict with invalid keys."
            }
          ]
        },
        {
          "name": "TestAnalysisResult",
          "line": 131,
          "bases": [],
          "docstring": "Test suite for AnalysisResult class.",
          "methods": [
            {
              "name": "test_basic_result_creation",
              "line": 134,
              "args": [
                "self"
              ],
              "docstring": "Test creation of basic AnalysisResult."
            },
            {
              "name": "test_result_error_handling",
              "line": 155,
              "args": [
                "self"
              ],
              "docstring": "Test error handling in AnalysisResult."
            },
            {
              "name": "test_result_warning_handling",
              "line": 167,
              "args": [
                "self"
              ],
              "docstring": "Test warning handling in AnalysisResult."
            },
            {
              "name": "test_result_statistics_management",
              "line": 181,
              "args": [
                "self"
              ],
              "docstring": "Test statistics management in AnalysisResult."
            },
            {
              "name": "test_result_pattern_management",
              "line": 194,
              "args": [
                "self"
              ],
              "docstring": "Test pattern management in AnalysisResult."
            },
            {
              "name": "test_result_to_dict_conversion",
              "line": 209,
              "args": [
                "self"
              ],
              "docstring": "Test AnalysisResult conversion to dictionary."
            }
          ]
        },
        {
          "name": "MockAnalyzer",
          "line": 237,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Mock analyzer for testing BaseAnalyzerV2 functionality.",
          "methods": [
            {
              "name": "__init__",
              "line": 240,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize mock analyzer."
            },
            {
              "name": "_analyze_impl",
              "line": 245,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Mock implementation that records calls."
            }
          ]
        },
        {
          "name": "NamedMockAnalyzer",
          "line": 262,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "Mock analyzer that accepts name in constructor for registry testing.",
          "methods": [
            {
              "name": "__init__",
              "line": 267,
              "args": [
                "self",
                "config"
              ],
              "docstring": "Initialize named mock analyzer."
            },
            {
              "name": "set_registry_name",
              "line": 275,
              "args": [
                "cls",
                "name"
              ],
              "docstring": "Set the name to use when creating instances from registry."
            },
            {
              "name": "_analyze_impl",
              "line": 279,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": "Mock implementation that records calls."
            }
          ]
        },
        {
          "name": "TestBaseAnalyzerV2",
          "line": 296,
          "bases": [],
          "docstring": "Test suite for BaseAnalyzerV2 abstract base class.",
          "methods": [
            {
              "name": "test_analyzer_initialization",
              "line": 299,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer initialization with configuration."
            },
            {
              "name": "test_analyzer_with_default_config",
              "line": 313,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer initialization with default configuration."
            },
            {
              "name": "test_basic_analysis_execution",
              "line": 322,
              "args": [
                "self"
              ],
              "docstring": "Test basic analysis execution."
            },
            {
              "name": "test_analysis_with_statistics_calculation",
              "line": 338,
              "args": [
                "self"
              ],
              "docstring": "Test analysis with automatic statistics calculation."
            },
            {
              "name": "test_pattern_detection",
              "line": 356,
              "args": [
                "self"
              ],
              "docstring": "Test automatic pattern detection."
            },
            {
              "name": "test_quality_assessment",
              "line": 370,
              "args": [
                "self"
              ],
              "docstring": "Test data quality assessment."
            },
            {
              "name": "test_hook_system",
              "line": 384,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer hook system."
            },
            {
              "name": "test_error_handling",
              "line": 412,
              "args": [
                "self"
              ],
              "docstring": "Test error handling in analysis."
            },
            {
              "name": "test_analyzer_statistics_tracking",
              "line": 429,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer performance statistics tracking."
            }
          ]
        },
        {
          "name": "TestEnhancedSummarizer",
          "line": 449,
          "bases": [],
          "docstring": "Test suite for EnhancedSummarizer analyzer.",
          "methods": [
            {
              "name": "test_summarizer_initialization",
              "line": 452,
              "args": [
                "self"
              ],
              "docstring": "Test EnhancedSummarizer initialization."
            },
            {
              "name": "test_list_data_summarization",
              "line": 460,
              "args": [
                "self"
              ],
              "docstring": "Test summarization of list data."
            },
            {
              "name": "test_numeric_data_analysis",
              "line": 480,
              "args": [
                "self"
              ],
              "docstring": "Test numeric data analysis capabilities."
            },
            {
              "name": "test_string_data_analysis",
              "line": 500,
              "args": [
                "self"
              ],
              "docstring": "Test string data analysis capabilities."
            },
            {
              "name": "test_dictionary_data_analysis",
              "line": 516,
              "args": [
                "self"
              ],
              "docstring": "Test dictionary data analysis capabilities."
            },
            {
              "name": "test_quality_assessment",
              "line": 538,
              "args": [
                "self"
              ],
              "docstring": "Test data quality assessment in summarizer."
            },
            {
              "name": "test_empty_data_handling",
              "line": 556,
              "args": [
                "self"
              ],
              "docstring": "Test handling of empty data."
            }
          ]
        },
        {
          "name": "TestAnalysisRegistry",
          "line": 573,
          "bases": [],
          "docstring": "Test suite for AnalysisRegistry system.",
          "methods": [
            {
              "name": "setup_method",
              "line": 576,
              "args": [
                "self"
              ],
              "docstring": "Setup for each test method."
            },
            {
              "name": "teardown_method",
              "line": 581,
              "args": [
                "self"
              ],
              "docstring": "Cleanup after each test method."
            },
            {
              "name": "test_analyzer_registration",
              "line": 586,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer registration in registry."
            },
            {
              "name": "test_analyzer_retrieval",
              "line": 606,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer instance retrieval from registry."
            },
            {
              "name": "test_analyzer_unregistration",
              "line": 625,
              "args": [
                "self"
              ],
              "docstring": "Test analyzer removal from registry."
            },
            {
              "name": "test_analyzer_chain_creation",
              "line": 635,
              "args": [
                "self"
              ],
              "docstring": "Test creation of analyzer chains."
            },
            {
              "name": "test_register_analyzer_decorator",
              "line": 664,
              "args": [
                "self"
              ],
              "docstring": "Test @register_analyzer decorator."
            },
            {
              "name": "test_registry_error_handling",
              "line": 681,
              "args": [
                "self"
              ],
              "docstring": "Test error handling in registry operations."
            }
          ]
        },
        {
          "name": "TestThreadSafety",
          "line": 692,
          "bases": [],
          "docstring": "Test suite for thread safety of analysis framework.",
          "methods": [
            {
              "name": "test_concurrent_analysis",
              "line": 695,
              "args": [
                "self"
              ],
              "docstring": "Test concurrent analysis execution."
            },
            {
              "name": "test_concurrent_registry_operations",
              "line": 731,
              "args": [
                "self"
              ],
              "docstring": "Test concurrent registry operations."
            }
          ]
        },
        {
          "name": "TestIntegration",
          "line": 761,
          "bases": [],
          "docstring": "Integration tests with other framework components.",
          "methods": [
            {
              "name": "test_analysis_with_context_system",
              "line": 764,
              "args": [
                "self"
              ],
              "docstring": "Test analysis framework integration with Context system."
            },
            {
              "name": "test_analysis_with_scriptlet_framework",
              "line": 770,
              "args": [
                "self"
              ],
              "docstring": "Test analysis framework integration with Scriptlet framework."
            }
          ]
        },
        {
          "name": "FailingAnalyzer",
          "line": 415,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "_analyze_impl",
              "line": 416,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "RetrievalTestAnalyzer",
          "line": 609,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 610,
              "args": [
                "self",
                "config"
              ],
              "docstring": ""
            },
            {
              "name": "_analyze_impl",
              "line": 612,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "Chain1Analyzer",
          "line": 638,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 639,
              "args": [
                "self",
                "config"
              ],
              "docstring": ""
            },
            {
              "name": "_analyze_impl",
              "line": 641,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "Chain2Analyzer",
          "line": 644,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 645,
              "args": [
                "self",
                "config"
              ],
              "docstring": ""
            },
            {
              "name": "_analyze_impl",
              "line": 647,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "DecoratedAnalyzer",
          "line": 668,
          "bases": [
            "BaseAnalyzerV2"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "_analyze_impl",
              "line": 669,
              "args": [
                "self",
                "data",
                "config"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 629,
      "complexity_score": 99,
      "last_modified": "2025-10-04T16:03:22.522742",
      "checksum": "79eab736d45fe53dc9a3f757e8dee278",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_async_integration.py": {
      "name": "tests/test_async_integration.py",
      "path": "tests/test_async_integration.py",
      "component_type": "test",
      "description": "WebSocket Async Performance Integration Tests for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/memory_bus.py",
        "orchestrator/persistence/core.py",
        "orchestrator/persistence/enhanced.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "temp_output_directory",
        "test_async_testing_module_integration",
        "test_performance_monitoring_with_async_load",
        "test_async_load_test_configuration_matrix",
        "test_async_performance_validation_criteria",
        "test_async_error_handling_and_resilience",
        "test_async_performance_comprehensive_validation",
        "get_logger",
        "validate_metric",
        "TestAsyncPerformanceIntegration"
      ],
      "imports": [
        "asyncio",
        "time",
        "json",
        "pathlib",
        "typing",
        "pytest",
        "tests.test_websocket_performance",
        "tests.test_realtime_performance",
        "tests.test_async_load_framework",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "temp_output_directory",
          "line": 48,
          "args": [
            "self",
            "tmp_path"
          ],
          "docstring": "Create temporary directory for test outputs.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_async_testing_module_integration",
          "line": 54,
          "args": [
            "self"
          ],
          "docstring": "Test that all async testing modules can be imported and initialized.",
          "decorators": []
        },
        {
          "name": "test_performance_monitoring_with_async_load",
          "line": 76,
          "args": [
            "self",
            "temp_output_directory"
          ],
          "docstring": "Test real-time performance monitoring during async load testing.",
          "decorators": []
        },
        {
          "name": "test_async_load_test_configuration_matrix",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Test various async load test configurations.",
          "decorators": []
        },
        {
          "name": "test_async_performance_validation_criteria",
          "line": 240,
          "args": [
            "self"
          ],
          "docstring": "Test async performance validation criteria and thresholds.",
          "decorators": []
        },
        {
          "name": "test_async_error_handling_and_resilience",
          "line": 299,
          "args": [
            "self"
          ],
          "docstring": "Test error handling and resilience in async performance testing.",
          "decorators": []
        },
        {
          "name": "test_async_performance_comprehensive_validation",
          "line": 340,
          "args": [
            "self",
            "temp_output_directory"
          ],
          "docstring": "Comprehensive validation test for all async performance capabilities.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 31,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "validate_metric",
          "line": 262,
          "args": [
            "value",
            "metric_name"
          ],
          "docstring": "Validate metric against criteria.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestAsyncPerformanceIntegration",
          "line": 44,
          "bases": [],
          "docstring": "Integration tests for all async performance testing capabilities.",
          "methods": [
            {
              "name": "temp_output_directory",
              "line": 48,
              "args": [
                "self",
                "tmp_path"
              ],
              "docstring": "Create temporary directory for test outputs."
            },
            {
              "name": "test_async_testing_module_integration",
              "line": 54,
              "args": [
                "self"
              ],
              "docstring": "Test that all async testing modules can be imported and initialized."
            },
            {
              "name": "test_performance_monitoring_with_async_load",
              "line": 76,
              "args": [
                "self",
                "temp_output_directory"
              ],
              "docstring": "Test real-time performance monitoring during async load testing."
            },
            {
              "name": "test_async_load_test_configuration_matrix",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Test various async load test configurations."
            },
            {
              "name": "test_async_performance_validation_criteria",
              "line": 240,
              "args": [
                "self"
              ],
              "docstring": "Test async performance validation criteria and thresholds."
            },
            {
              "name": "test_async_error_handling_and_resilience",
              "line": 299,
              "args": [
                "self"
              ],
              "docstring": "Test error handling and resilience in async performance testing."
            },
            {
              "name": "test_async_performance_comprehensive_validation",
              "line": 340,
              "args": [
                "self",
                "temp_output_directory"
              ],
              "docstring": "Comprehensive validation test for all async performance capabilities."
            }
          ]
        }
      ],
      "lines_of_code": 470,
      "complexity_score": 50,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "e8eb00dba9bbff10af87a08c121b5610",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_async_load_framework.py": {
      "name": "tests/test_async_load_framework.py",
      "path": "tests/test_async_load_framework.py",
      "component_type": "test",
      "description": "Async Load Testing Framework for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "__init__",
        "generate_async_load_report",
        "test_async_load_config_creation",
        "test_websocket_pool_management",
        "test_async_load_tester_initialization",
        "test_load_test_result_structure",
        "test_load_report_generation",
        "get_logger",
        "AsyncLoadTestConfig",
        "AsyncLoadTestResult",
        "AsyncWebSocketPool",
        "AsyncLoadTester",
        "TestAsyncLoadTestFramework"
      ],
      "imports": [
        "asyncio",
        "time",
        "json",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "statistics",
        "websockets",
        "aiohttp",
        "src.core.logger",
        "pytest",
        "logging"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 89,
          "args": [
            "self",
            "server_url",
            "pool_size"
          ],
          "docstring": "Initialize WebSocket connection pool.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 183,
          "args": [
            "self",
            "server_host",
            "server_port"
          ],
          "docstring": "Initialize async load tester.",
          "decorators": []
        },
        {
          "name": "generate_async_load_report",
          "line": 528,
          "args": [
            "self",
            "results"
          ],
          "docstring": "Generate comprehensive async load testing report.",
          "decorators": []
        },
        {
          "name": "test_async_load_config_creation",
          "line": 638,
          "args": [
            "self"
          ],
          "docstring": "Test async load test configuration creation.",
          "decorators": []
        },
        {
          "name": "test_websocket_pool_management",
          "line": 664,
          "args": [
            "self"
          ],
          "docstring": "Test WebSocket connection pool management.",
          "decorators": []
        },
        {
          "name": "test_async_load_tester_initialization",
          "line": 681,
          "args": [
            "self"
          ],
          "docstring": "Test async load tester initialization.",
          "decorators": []
        },
        {
          "name": "test_load_test_result_structure",
          "line": 699,
          "args": [
            "self"
          ],
          "docstring": "Test load test result data structure.",
          "decorators": []
        },
        {
          "name": "test_load_report_generation",
          "line": 737,
          "args": [
            "self"
          ],
          "docstring": "Test async load test report generation.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 34,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AsyncLoadTestConfig",
          "line": 48,
          "bases": [],
          "docstring": "Configuration for async load testing scenarios.",
          "methods": []
        },
        {
          "name": "AsyncLoadTestResult",
          "line": 65,
          "bases": [],
          "docstring": "Results from async load testing execution.",
          "methods": []
        },
        {
          "name": "AsyncWebSocketPool",
          "line": 86,
          "bases": [],
          "docstring": "Connection pool for managing WebSocket connections.",
          "methods": [
            {
              "name": "__init__",
              "line": 89,
              "args": [
                "self",
                "server_url",
                "pool_size"
              ],
              "docstring": "Initialize WebSocket connection pool."
            }
          ]
        },
        {
          "name": "AsyncLoadTester",
          "line": 180,
          "bases": [],
          "docstring": "Async load testing framework for comprehensive performance validation.",
          "methods": [
            {
              "name": "__init__",
              "line": 183,
              "args": [
                "self",
                "server_host",
                "server_port"
              ],
              "docstring": "Initialize async load tester."
            },
            {
              "name": "generate_async_load_report",
              "line": 528,
              "args": [
                "self",
                "results"
              ],
              "docstring": "Generate comprehensive async load testing report."
            }
          ]
        },
        {
          "name": "TestAsyncLoadTestFramework",
          "line": 635,
          "bases": [],
          "docstring": "Test class for async load testing functionality.",
          "methods": [
            {
              "name": "test_async_load_config_creation",
              "line": 638,
              "args": [
                "self"
              ],
              "docstring": "Test async load test configuration creation."
            },
            {
              "name": "test_websocket_pool_management",
              "line": 664,
              "args": [
                "self"
              ],
              "docstring": "Test WebSocket connection pool management."
            },
            {
              "name": "test_async_load_tester_initialization",
              "line": 681,
              "args": [
                "self"
              ],
              "docstring": "Test async load tester initialization."
            },
            {
              "name": "test_load_test_result_structure",
              "line": 699,
              "args": [
                "self"
              ],
              "docstring": "Test load test result data structure."
            },
            {
              "name": "test_load_report_generation",
              "line": 737,
              "args": [
                "self"
              ],
              "docstring": "Test async load test report generation."
            }
          ]
        }
      ],
      "lines_of_code": 742,
      "complexity_score": 72,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "dc82b323be3af54b939d28c432a66774",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_basic_performance.py": {
      "name": "tests/test_basic_performance.py",
      "path": "tests/test_basic_performance.py",
      "component_type": "test",
      "description": "Basic Performance Testing for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "test_basic_performance",
        "test_file_operations_performance",
        "test_memory_usage_estimation",
        "__init__",
        "measure_execution_time",
        "simulate_concurrent_operations",
        "analyze_performance_results",
        "simple_computation",
        "mock_operation",
        "write_operation",
        "read_operation",
        "file_operation",
        "get_logger",
        "worker",
        "BasicPerformanceTest"
      ],
      "imports": [
        "time",
        "os",
        "threading",
        "pathlib",
        "src.core.logger",
        "sys",
        "logging",
        "json",
        "json",
        "json",
        "tempfile",
        "gc",
        "gc"
      ],
      "functions": [
        {
          "name": "test_basic_performance",
          "line": 137,
          "args": [],
          "docstring": "Test basic performance measurement capabilities.",
          "decorators": []
        },
        {
          "name": "test_file_operations_performance",
          "line": 186,
          "args": [],
          "docstring": "Test file operations performance.",
          "decorators": []
        },
        {
          "name": "test_memory_usage_estimation",
          "line": 256,
          "args": [],
          "docstring": "Test memory usage estimation.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 37,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "measure_execution_time",
          "line": 40,
          "args": [
            "self",
            "func"
          ],
          "docstring": "Measure execution time of a function.",
          "decorators": []
        },
        {
          "name": "simulate_concurrent_operations",
          "line": 49,
          "args": [
            "self",
            "operation_func",
            "num_threads",
            "ops_per_thread"
          ],
          "docstring": "Simulate concurrent operations without requiring a server.",
          "decorators": []
        },
        {
          "name": "analyze_performance_results",
          "line": 94,
          "args": [
            "self",
            "results"
          ],
          "docstring": "Analyze performance test results.",
          "decorators": []
        },
        {
          "name": "simple_computation",
          "line": 145,
          "args": [],
          "docstring": "Simple computation for testing.",
          "decorators": []
        },
        {
          "name": "mock_operation",
          "line": 159,
          "args": [],
          "docstring": "Mock operation for concurrent testing.",
          "decorators": []
        },
        {
          "name": "write_operation",
          "line": 198,
          "args": [],
          "docstring": "Test file write operation.",
          "decorators": []
        },
        {
          "name": "read_operation",
          "line": 210,
          "args": [],
          "docstring": "Test file read operation.",
          "decorators": []
        },
        {
          "name": "file_operation",
          "line": 222,
          "args": [],
          "docstring": "Concurrent file operation.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 21,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "worker",
          "line": 56,
          "args": [],
          "docstring": "Worker thread function.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BasicPerformanceTest",
          "line": 34,
          "bases": [],
          "docstring": "Basic performance testing utilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 37,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "measure_execution_time",
              "line": 40,
              "args": [
                "self",
                "func"
              ],
              "docstring": "Measure execution time of a function."
            },
            {
              "name": "simulate_concurrent_operations",
              "line": 49,
              "args": [
                "self",
                "operation_func",
                "num_threads",
                "ops_per_thread"
              ],
              "docstring": "Simulate concurrent operations without requiring a server."
            },
            {
              "name": "analyze_performance_results",
              "line": 94,
              "args": [
                "self",
                "results"
              ],
              "docstring": "Analyze performance test results."
            }
          ]
        }
      ],
      "lines_of_code": 244,
      "complexity_score": 37,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "a39dd90f38f44a609fc3b28e28e7821e",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_core_functionality.py": {
      "name": "tests/test_core_functionality.py",
      "path": "tests/test_core_functionality.py",
      "component_type": "test",
      "description": "Core functionality tests for Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "temp_directory",
        "mock_context",
        "test_server",
        "__init__",
        "set",
        "get",
        "delete",
        "to_dict",
        "get_history",
        "__init__",
        "dump_context",
        "test_context_set_get",
        "test_context_delete",
        "test_context_to_dict",
        "test_context_history",
        "test_json_dump",
        "test_csv_dump",
        "test_txt_dump",
        "test_pretty_dump",
        "test_server_initialization",
        "test_dump_directory_creation",
        "MockContext",
        "MockEnhancedContextServer",
        "TestContextOperations",
        "TestFileDumping",
        "TestServerConfiguration"
      ],
      "imports": [
        "json",
        "pytest",
        "tempfile",
        "pathlib",
        "typing"
      ],
      "functions": [
        {
          "name": "temp_directory",
          "line": 152,
          "args": [],
          "docstring": "Fixture providing a temporary directory for testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "mock_context",
          "line": 159,
          "args": [],
          "docstring": "Fixture providing a mock context with test data.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_server",
          "line": 170,
          "args": [
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Fixture providing a test server instance.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "__init__",
          "line": 18,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 22,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "Set a key-value pair in the context.",
          "decorators": []
        },
        {
          "name": "get",
          "line": 37,
          "args": [
            "self",
            "key"
          ],
          "docstring": "Get a value from the context.",
          "decorators": []
        },
        {
          "name": "delete",
          "line": 41,
          "args": [
            "self",
            "key",
            "who"
          ],
          "docstring": "Delete a key from the context.",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 57,
          "args": [
            "self"
          ],
          "docstring": "Convert context to dictionary.",
          "decorators": []
        },
        {
          "name": "get_history",
          "line": 61,
          "args": [
            "self"
          ],
          "docstring": "Get the change history.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 69,
          "args": [
            "self",
            "host",
            "port",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "dump_context",
          "line": 77,
          "args": [
            "self",
            "format_type",
            "filename",
            "include_history",
            "who"
          ],
          "docstring": "Mock dump context functionality.",
          "decorators": []
        },
        {
          "name": "test_context_set_get",
          "line": 181,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test basic context set and get operations.",
          "decorators": []
        },
        {
          "name": "test_context_delete",
          "line": 192,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test context delete operations.",
          "decorators": []
        },
        {
          "name": "test_context_to_dict",
          "line": 203,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test context dictionary conversion.",
          "decorators": []
        },
        {
          "name": "test_context_history",
          "line": 214,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test context change history tracking.",
          "decorators": []
        },
        {
          "name": "test_json_dump",
          "line": 240,
          "args": [
            "self",
            "test_server"
          ],
          "docstring": "Test JSON format dumping.",
          "decorators": []
        },
        {
          "name": "test_csv_dump",
          "line": 267,
          "args": [
            "self",
            "test_server"
          ],
          "docstring": "Test CSV format dumping.",
          "decorators": []
        },
        {
          "name": "test_txt_dump",
          "line": 291,
          "args": [
            "self",
            "test_server"
          ],
          "docstring": "Test TXT format dumping.",
          "decorators": []
        },
        {
          "name": "test_pretty_dump",
          "line": 315,
          "args": [
            "self",
            "test_server"
          ],
          "docstring": "Test Pretty format dumping.",
          "decorators": []
        },
        {
          "name": "test_server_initialization",
          "line": 343,
          "args": [
            "self"
          ],
          "docstring": "Test server initialization with different configurations.",
          "decorators": []
        },
        {
          "name": "test_dump_directory_creation",
          "line": 357,
          "args": [
            "self",
            "temp_directory"
          ],
          "docstring": "Test dump directory setup.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MockContext",
          "line": 15,
          "bases": [],
          "docstring": "Mock Context class for testing.",
          "methods": [
            {
              "name": "__init__",
              "line": 18,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 22,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": "Set a key-value pair in the context."
            },
            {
              "name": "get",
              "line": 37,
              "args": [
                "self",
                "key"
              ],
              "docstring": "Get a value from the context."
            },
            {
              "name": "delete",
              "line": 41,
              "args": [
                "self",
                "key",
                "who"
              ],
              "docstring": "Delete a key from the context."
            },
            {
              "name": "to_dict",
              "line": 57,
              "args": [
                "self"
              ],
              "docstring": "Convert context to dictionary."
            },
            {
              "name": "get_history",
              "line": 61,
              "args": [
                "self"
              ],
              "docstring": "Get the change history."
            }
          ]
        },
        {
          "name": "MockEnhancedContextServer",
          "line": 66,
          "bases": [],
          "docstring": "Mock Enhanced Context Server for testing.",
          "methods": [
            {
              "name": "__init__",
              "line": 69,
              "args": [
                "self",
                "host",
                "port",
                "debug"
              ],
              "docstring": ""
            },
            {
              "name": "dump_context",
              "line": 77,
              "args": [
                "self",
                "format_type",
                "filename",
                "include_history",
                "who"
              ],
              "docstring": "Mock dump context functionality."
            }
          ]
        },
        {
          "name": "TestContextOperations",
          "line": 178,
          "bases": [],
          "docstring": "Test suite for basic context operations.",
          "methods": [
            {
              "name": "test_context_set_get",
              "line": 181,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test basic context set and get operations."
            },
            {
              "name": "test_context_delete",
              "line": 192,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test context delete operations."
            },
            {
              "name": "test_context_to_dict",
              "line": 203,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test context dictionary conversion."
            },
            {
              "name": "test_context_history",
              "line": 214,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test context change history tracking."
            }
          ]
        },
        {
          "name": "TestFileDumping",
          "line": 237,
          "bases": [],
          "docstring": "Test suite for file dumping functionality.",
          "methods": [
            {
              "name": "test_json_dump",
              "line": 240,
              "args": [
                "self",
                "test_server"
              ],
              "docstring": "Test JSON format dumping."
            },
            {
              "name": "test_csv_dump",
              "line": 267,
              "args": [
                "self",
                "test_server"
              ],
              "docstring": "Test CSV format dumping."
            },
            {
              "name": "test_txt_dump",
              "line": 291,
              "args": [
                "self",
                "test_server"
              ],
              "docstring": "Test TXT format dumping."
            },
            {
              "name": "test_pretty_dump",
              "line": 315,
              "args": [
                "self",
                "test_server"
              ],
              "docstring": "Test Pretty format dumping."
            }
          ]
        },
        {
          "name": "TestServerConfiguration",
          "line": 340,
          "bases": [],
          "docstring": "Test suite for server configuration and initialization.",
          "methods": [
            {
              "name": "test_server_initialization",
              "line": 343,
              "args": [
                "self"
              ],
              "docstring": "Test server initialization with different configurations."
            },
            {
              "name": "test_dump_directory_creation",
              "line": 357,
              "args": [
                "self",
                "temp_directory"
              ],
              "docstring": "Test dump directory setup."
            }
          ]
        }
      ],
      "lines_of_code": 302,
      "complexity_score": 49,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "53f5e655593cd17ee2972a8d66b84396",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_delta_compression.py": {
      "name": "tests/test_delta_compression.py",
      "path": "tests/test_delta_compression.py",
      "component_type": "test",
      "description": "Comprehensive test suite for Delta Compression Module.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py"
      ],
      "exports": [
        "test_delta_compression_error",
        "test_initialization",
        "test_full_initialization",
        "test_repr",
        "test_to_dict_and_from_dict",
        "compressor",
        "test_states",
        "test_init_with_parameters",
        "test_calculate_delta_dict",
        "test_dict_delta_with_unchanged",
        "test_apply_delta",
        "test_create_delta_record",
        "test_empty_delta_record",
        "test_merge_deltas",
        "test_empty_merge",
        "test_serialize_deserialize",
        "chain",
        "test_states",
        "test_initial_state",
        "test_add_state",
        "test_get_state_at_index",
        "test_rebaseline",
        "test_optimization_with_rebase",
        "test_clear_chain",
        "test_extract_keys_from_delta",
        "TestDeltaRecord",
        "TestDeltaCompressor",
        "TestDeltaChain",
        "TestUtilityFunctions"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "tempfile",
        "pytest",
        "typing",
        "unittest",
        "orchestrator.persistence.delta",
        "orchestrator.persistence.core"
      ],
      "functions": [
        {
          "name": "test_delta_compression_error",
          "line": 456,
          "args": [],
          "docstring": "Test that DeltaCompressionError can be properly raised and caught.",
          "decorators": []
        },
        {
          "name": "test_initialization",
          "line": 38,
          "args": [
            "self"
          ],
          "docstring": "Test initialization of delta record.",
          "decorators": []
        },
        {
          "name": "test_full_initialization",
          "line": 55,
          "args": [
            "self"
          ],
          "docstring": "Test initialization with all parameters.",
          "decorators": []
        },
        {
          "name": "test_repr",
          "line": 75,
          "args": [
            "self"
          ],
          "docstring": "Test string representation.",
          "decorators": []
        },
        {
          "name": "test_to_dict_and_from_dict",
          "line": 87,
          "args": [
            "self"
          ],
          "docstring": "Test conversion to and from dictionary.",
          "decorators": []
        },
        {
          "name": "compressor",
          "line": 120,
          "args": [
            "self"
          ],
          "docstring": "Create a compressor with default settings.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_states",
          "line": 125,
          "args": [
            "self"
          ],
          "docstring": "Create sample test states.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_init_with_parameters",
          "line": 144,
          "args": [
            "self"
          ],
          "docstring": "Test initialization with custom parameters.",
          "decorators": []
        },
        {
          "name": "test_calculate_delta_dict",
          "line": 156,
          "args": [
            "self",
            "compressor",
            "test_states"
          ],
          "docstring": "Test dictionary delta calculation.",
          "decorators": []
        },
        {
          "name": "test_dict_delta_with_unchanged",
          "line": 183,
          "args": [
            "self",
            "test_states"
          ],
          "docstring": "Test dictionary delta with unchanged values included.",
          "decorators": []
        },
        {
          "name": "test_apply_delta",
          "line": 201,
          "args": [
            "self",
            "compressor",
            "test_states"
          ],
          "docstring": "Test applying delta to recreate state.",
          "decorators": []
        },
        {
          "name": "test_create_delta_record",
          "line": 214,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test creating a delta record.",
          "decorators": []
        },
        {
          "name": "test_empty_delta_record",
          "line": 228,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test creating an empty delta record.",
          "decorators": []
        },
        {
          "name": "test_merge_deltas",
          "line": 236,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test merging multiple deltas.",
          "decorators": []
        },
        {
          "name": "test_empty_merge",
          "line": 267,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test merging empty list of deltas.",
          "decorators": []
        },
        {
          "name": "test_serialize_deserialize",
          "line": 272,
          "args": [
            "self",
            "compressor"
          ],
          "docstring": "Test serializing and deserializing delta records.",
          "decorators": []
        },
        {
          "name": "chain",
          "line": 298,
          "args": [
            "self"
          ],
          "docstring": "Create delta chain with small max chain length for testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_states",
          "line": 303,
          "args": [
            "self"
          ],
          "docstring": "Create sample states for testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_initial_state",
          "line": 310,
          "args": [
            "self",
            "chain"
          ],
          "docstring": "Test initial state of delta chain.",
          "decorators": []
        },
        {
          "name": "test_add_state",
          "line": 318,
          "args": [
            "self",
            "chain",
            "test_states"
          ],
          "docstring": "Test adding a state to the chain.",
          "decorators": []
        },
        {
          "name": "test_get_state_at_index",
          "line": 337,
          "args": [
            "self",
            "chain",
            "test_states"
          ],
          "docstring": "Test retrieving state at specific index.",
          "decorators": []
        },
        {
          "name": "test_rebaseline",
          "line": 366,
          "args": [
            "self",
            "chain",
            "test_states"
          ],
          "docstring": "Test rebaselining the chain.",
          "decorators": []
        },
        {
          "name": "test_optimization_with_rebase",
          "line": 395,
          "args": [
            "self"
          ],
          "docstring": "Test chain optimization with rebaseline enabled.",
          "decorators": []
        },
        {
          "name": "test_clear_chain",
          "line": 413,
          "args": [
            "self",
            "chain",
            "test_states"
          ],
          "docstring": "Test clearing the chain.",
          "decorators": []
        },
        {
          "name": "test_extract_keys_from_delta",
          "line": 436,
          "args": [
            "self"
          ],
          "docstring": "Test extracting keys from delta record.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestDeltaRecord",
          "line": 35,
          "bases": [],
          "docstring": "Test cases for DeltaRecord class.",
          "methods": [
            {
              "name": "test_initialization",
              "line": 38,
              "args": [
                "self"
              ],
              "docstring": "Test initialization of delta record."
            },
            {
              "name": "test_full_initialization",
              "line": 55,
              "args": [
                "self"
              ],
              "docstring": "Test initialization with all parameters."
            },
            {
              "name": "test_repr",
              "line": 75,
              "args": [
                "self"
              ],
              "docstring": "Test string representation."
            },
            {
              "name": "test_to_dict_and_from_dict",
              "line": 87,
              "args": [
                "self"
              ],
              "docstring": "Test conversion to and from dictionary."
            }
          ]
        },
        {
          "name": "TestDeltaCompressor",
          "line": 116,
          "bases": [],
          "docstring": "Test cases for DeltaCompressor class.",
          "methods": [
            {
              "name": "compressor",
              "line": 120,
              "args": [
                "self"
              ],
              "docstring": "Create a compressor with default settings."
            },
            {
              "name": "test_states",
              "line": 125,
              "args": [
                "self"
              ],
              "docstring": "Create sample test states."
            },
            {
              "name": "test_init_with_parameters",
              "line": 144,
              "args": [
                "self"
              ],
              "docstring": "Test initialization with custom parameters."
            },
            {
              "name": "test_calculate_delta_dict",
              "line": 156,
              "args": [
                "self",
                "compressor",
                "test_states"
              ],
              "docstring": "Test dictionary delta calculation."
            },
            {
              "name": "test_dict_delta_with_unchanged",
              "line": 183,
              "args": [
                "self",
                "test_states"
              ],
              "docstring": "Test dictionary delta with unchanged values included."
            },
            {
              "name": "test_apply_delta",
              "line": 201,
              "args": [
                "self",
                "compressor",
                "test_states"
              ],
              "docstring": "Test applying delta to recreate state."
            },
            {
              "name": "test_create_delta_record",
              "line": 214,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test creating a delta record."
            },
            {
              "name": "test_empty_delta_record",
              "line": 228,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test creating an empty delta record."
            },
            {
              "name": "test_merge_deltas",
              "line": 236,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test merging multiple deltas."
            },
            {
              "name": "test_empty_merge",
              "line": 267,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test merging empty list of deltas."
            },
            {
              "name": "test_serialize_deserialize",
              "line": 272,
              "args": [
                "self",
                "compressor"
              ],
              "docstring": "Test serializing and deserializing delta records."
            }
          ]
        },
        {
          "name": "TestDeltaChain",
          "line": 294,
          "bases": [],
          "docstring": "Test cases for DeltaChain class.",
          "methods": [
            {
              "name": "chain",
              "line": 298,
              "args": [
                "self"
              ],
              "docstring": "Create delta chain with small max chain length for testing."
            },
            {
              "name": "test_states",
              "line": 303,
              "args": [
                "self"
              ],
              "docstring": "Create sample states for testing."
            },
            {
              "name": "test_initial_state",
              "line": 310,
              "args": [
                "self",
                "chain"
              ],
              "docstring": "Test initial state of delta chain."
            },
            {
              "name": "test_add_state",
              "line": 318,
              "args": [
                "self",
                "chain",
                "test_states"
              ],
              "docstring": "Test adding a state to the chain."
            },
            {
              "name": "test_get_state_at_index",
              "line": 337,
              "args": [
                "self",
                "chain",
                "test_states"
              ],
              "docstring": "Test retrieving state at specific index."
            },
            {
              "name": "test_rebaseline",
              "line": 366,
              "args": [
                "self",
                "chain",
                "test_states"
              ],
              "docstring": "Test rebaselining the chain."
            },
            {
              "name": "test_optimization_with_rebase",
              "line": 395,
              "args": [
                "self"
              ],
              "docstring": "Test chain optimization with rebaseline enabled."
            },
            {
              "name": "test_clear_chain",
              "line": 413,
              "args": [
                "self",
                "chain",
                "test_states"
              ],
              "docstring": "Test clearing the chain."
            }
          ]
        },
        {
          "name": "TestUtilityFunctions",
          "line": 433,
          "bases": [],
          "docstring": "Test cases for utility functions.",
          "methods": [
            {
              "name": "test_extract_keys_from_delta",
              "line": 436,
              "args": [
                "self"
              ],
              "docstring": "Test extracting keys from delta record."
            }
          ]
        }
      ],
      "lines_of_code": 370,
      "complexity_score": 36,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "8586bd0794924b1da82227b99278f22d",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    "tests/test_delta_module.py": {
      "name": "tests/test_delta_module.py",
      "path": "tests/test_delta_module.py",
      "component_type": "test",
      "description": "Test Runner for Delta Compression Module.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py"
      ],
      "exports": [],
      "imports": [
        "os",
        "sys",
        "pytest"
      ],
      "functions": [],
      "classes": [],
      "lines_of_code": 15,
      "complexity_score": 1,
      "last_modified": "2025-10-04T22:24:24.353392",
      "checksum": "fc00993c218f71dcb7d37ca9d55a6a8c",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    "tests/test_enhanced_analysis_framework.py": {
      "name": "tests/test_enhanced_analysis_framework.py",
      "path": "tests/test_enhanced_analysis_framework.py",
      "component_type": "test",
      "description": "Enhanced Analysis Framework Test Suite",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md"
      ],
      "exports": [
        "main",
        "__init__",
        "setup_test_environment",
        "test_enhanced_framework_initialization",
        "test_context_integration_validation",
        "test_enhanced_components_functionality",
        "test_inter_analyzer_communication",
        "test_error_handling_recovery",
        "run_comprehensive_test_suite",
        "cleanup_test_environment",
        "save_test_report",
        "EnhancedAnalysisFrameworkTester"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "tempfile",
        "shutil",
        "typing",
        "datetime",
        "src.core.logger",
        "orchestrator.context.context",
        "src.analysis.enhanced_framework",
        "src.analysis.enhanced_components",
        "src.analysis.registry"
      ],
      "functions": [
        {
          "name": "main",
          "line": 699,
          "args": [],
          "docstring": "Main function to run the enhanced analysis framework test suite.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 71,
          "args": [
            "self"
          ],
          "docstring": "Initialize test suite with logging and test environment.",
          "decorators": []
        },
        {
          "name": "setup_test_environment",
          "line": 80,
          "args": [
            "self"
          ],
          "docstring": "Set up test environment with sample data and configurations.",
          "decorators": []
        },
        {
          "name": "test_enhanced_framework_initialization",
          "line": 126,
          "args": [
            "self"
          ],
          "docstring": "Test enhanced framework initialization and basic functionality.",
          "decorators": []
        },
        {
          "name": "test_context_integration_validation",
          "line": 224,
          "args": [
            "self"
          ],
          "docstring": "Test comprehensive Context system integration.",
          "decorators": []
        },
        {
          "name": "test_enhanced_components_functionality",
          "line": 333,
          "args": [
            "self"
          ],
          "docstring": "Test enhanced component functionality and features.",
          "decorators": []
        },
        {
          "name": "test_inter_analyzer_communication",
          "line": 421,
          "args": [
            "self"
          ],
          "docstring": "Test inter-analyzer communication capabilities.",
          "decorators": []
        },
        {
          "name": "test_error_handling_recovery",
          "line": 531,
          "args": [
            "self"
          ],
          "docstring": "Test enhanced error handling and recovery mechanisms.",
          "decorators": []
        },
        {
          "name": "run_comprehensive_test_suite",
          "line": 608,
          "args": [
            "self"
          ],
          "docstring": "Run the complete enhanced analysis framework test suite.",
          "decorators": []
        },
        {
          "name": "cleanup_test_environment",
          "line": 679,
          "args": [
            "self"
          ],
          "docstring": "Clean up test environment and temporary files.",
          "decorators": []
        },
        {
          "name": "save_test_report",
          "line": 688,
          "args": [
            "self",
            "results"
          ],
          "docstring": "Save detailed test report to file.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedAnalysisFrameworkTester",
          "line": 63,
          "bases": [],
          "docstring": "Comprehensive test suite for enhanced analysis framework.\n\nProvides systematic testing of all enhanced features including Context\nintegration, advanced analytics, and framework capabilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 71,
              "args": [
                "self"
              ],
              "docstring": "Initialize test suite with logging and test environment."
            },
            {
              "name": "setup_test_environment",
              "line": 80,
              "args": [
                "self"
              ],
              "docstring": "Set up test environment with sample data and configurations."
            },
            {
              "name": "test_enhanced_framework_initialization",
              "line": 126,
              "args": [
                "self"
              ],
              "docstring": "Test enhanced framework initialization and basic functionality."
            },
            {
              "name": "test_context_integration_validation",
              "line": 224,
              "args": [
                "self"
              ],
              "docstring": "Test comprehensive Context system integration."
            },
            {
              "name": "test_enhanced_components_functionality",
              "line": 333,
              "args": [
                "self"
              ],
              "docstring": "Test enhanced component functionality and features."
            },
            {
              "name": "test_inter_analyzer_communication",
              "line": 421,
              "args": [
                "self"
              ],
              "docstring": "Test inter-analyzer communication capabilities."
            },
            {
              "name": "test_error_handling_recovery",
              "line": 531,
              "args": [
                "self"
              ],
              "docstring": "Test enhanced error handling and recovery mechanisms."
            },
            {
              "name": "run_comprehensive_test_suite",
              "line": 608,
              "args": [
                "self"
              ],
              "docstring": "Run the complete enhanced analysis framework test suite."
            },
            {
              "name": "cleanup_test_environment",
              "line": 679,
              "args": [
                "self"
              ],
              "docstring": "Clean up test environment and temporary files."
            },
            {
              "name": "save_test_report",
              "line": 688,
              "args": [
                "self",
                "results"
              ],
              "docstring": "Save detailed test report to file."
            }
          ]
        }
      ],
      "lines_of_code": 573,
      "complexity_score": 33,
      "last_modified": "2025-10-04T17:23:07.905833",
      "checksum": "b3b8614f36d743184dfcc21bff76546d",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_enhanced_context_server.py": {
      "name": "tests/test_enhanced_context_server.py",
      "path": "tests/test_enhanced_context_server.py",
      "component_type": "test",
      "description": "Comprehensive test suite for Enhanced Context Server functionality.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "temp_directory",
        "mock_context",
        "test_server_config",
        "test_server_initialization",
        "test_rest_api_post_context_endpoint",
        "test_rest_api_list_all_endpoint",
        "test_rest_api_history_endpoint",
        "test_websocket_connection_management",
        "test_websocket_context_updates",
        "test_file_dump_json_format",
        "test_file_dump_pretty_format",
        "test_file_dump_csv_format",
        "test_file_dump_txt_format",
        "test_file_dump_list_endpoint",
        "test_file_dump_download_endpoint",
        "test_file_dump_error_handling",
        "running_server",
        "test_sync_client_basic_operations",
        "test_sync_client_dump_operations",
        "test_client_error_handling",
        "test_shell_script_basic_commands",
        "test_shell_script_dump_commands",
        "test_shell_script_error_handling",
        "get_logger",
        "__init__",
        "__init__",
        "set",
        "get",
        "to_dict",
        "TestEnhancedContextServer",
        "TestPythonClientLibraries",
        "TestShellScriptIntegration",
        "EnhancedContextServer",
        "Context"
      ],
      "imports": [
        "os",
        "json",
        "tempfile",
        "asyncio",
        "pytest",
        "requests",
        "socketio",
        "pathlib",
        "typing",
        "unittest.mock",
        "threading",
        "time",
        "server.enhanced_context_server",
        "src.core.logger",
        "sys",
        "logging",
        "threading",
        "src.context_client",
        "src.context_client",
        "unittest.mock",
        "src.context_client",
        "unittest.mock",
        "unittest.mock",
        "src.context_client",
        "unittest.mock",
        "unittest.mock",
        "src.context_client",
        "unittest.mock",
        "unittest.mock",
        "subprocess",
        "unittest.mock",
        "subprocess",
        "unittest.mock",
        "subprocess",
        "csv",
        "unittest.mock",
        "requests"
      ],
      "functions": [
        {
          "name": "temp_directory",
          "line": 86,
          "args": [
            "self"
          ],
          "docstring": "Create temporary directory for test file operations.\n\nYields:\n    Path: Temporary directory path for safe file testing",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "mock_context",
          "line": 100,
          "args": [
            "self"
          ],
          "docstring": "Create mock Context instance with test data for server testing.\n\nReturns:\n    Context: Pre-populated context instance for consistent testing",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_server_config",
          "line": 137,
          "args": [
            "self"
          ],
          "docstring": "Generate test server configuration with safe defaults.\n\nReturns:\n    Dict[str, Any]: Server configuration dictionary for testing",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_server_initialization",
          "line": 153,
          "args": [
            "self",
            "test_server_config",
            "temp_directory"
          ],
          "docstring": "Test Enhanced Context Server initialization with various configurations.\n\nArgs:\n    test_server_config: Server configuration for testing\n    temp_directory: Temporary directory for file operations",
          "decorators": []
        },
        {
          "name": "test_rest_api_post_context_endpoint",
          "line": 173,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test REST API POST /ctx endpoint for setting context values with validation.\n\nArgs:\n    mock_context: Pre-populated context for testing baseline state",
          "decorators": []
        },
        {
          "name": "test_rest_api_list_all_endpoint",
          "line": 277,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test REST API GET /ctx/all endpoint for retrieving complete context state.\n\nArgs:\n    mock_context: Pre-populated context with known test data",
          "decorators": []
        },
        {
          "name": "test_rest_api_history_endpoint",
          "line": 320,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test REST API GET /ctx/history endpoint for retrieving change history.\n\nArgs:\n    mock_context: Context instance with change history",
          "decorators": []
        },
        {
          "name": "test_websocket_connection_management",
          "line": 386,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test WebSocket connection establishment, client tracking, and disconnection handling.\n\nArgs:\n    mock_context: Context instance for WebSocket testing",
          "decorators": []
        },
        {
          "name": "test_websocket_context_updates",
          "line": 455,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test WebSocket-based context updates and real-time broadcasting functionality.\n\nArgs:\n    mock_context: Context instance for update testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_json_format",
          "line": 522,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test context dumping in JSON format with complete validation.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_pretty_format",
          "line": 611,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test context dumping in human-readable pretty format.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_csv_format",
          "line": 674,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test context dumping in CSV format for spreadsheet compatibility.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_txt_format",
          "line": 742,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test context dumping in plain text format for simple parsing.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing",
          "decorators": []
        },
        {
          "name": "test_file_dump_list_endpoint",
          "line": 812,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test dump file listing functionality and metadata retrieval.\n\nArgs:\n    mock_context: Context instance for creating test dumps\n    temp_directory: Temporary directory with test dump files",
          "decorators": []
        },
        {
          "name": "test_file_dump_download_endpoint",
          "line": 900,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test dump file download functionality with different formats.\n\nArgs:\n    mock_context: Context instance for creating test dump\n    temp_directory: Temporary directory for test files",
          "decorators": []
        },
        {
          "name": "test_file_dump_error_handling",
          "line": 998,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test error handling in dump functionality with invalid requests.\n\nArgs:\n    mock_context: Context instance for testing\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "running_server",
          "line": 1066,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Fixture providing a running server instance for client testing.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for server files\n    \nYields:\n    tuple: (server_instance, host, port) for client connections",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_sync_client_basic_operations",
          "line": 1098,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test synchronous Python client basic operations (get, set, delete).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "test_sync_client_dump_operations",
          "line": 1166,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test synchronous client dump operations (dump, list, download).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "test_client_error_handling",
          "line": 1419,
          "args": [
            "self",
            "mock_context"
          ],
          "docstring": "Test client library error handling for various failure scenarios.\n\nArgs:\n    mock_context: Context instance for testing",
          "decorators": []
        },
        {
          "name": "test_shell_script_basic_commands",
          "line": 1487,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test basic shell script commands (get, set, list, status).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "test_shell_script_dump_commands",
          "line": 1563,
          "args": [
            "self",
            "mock_context",
            "temp_directory"
          ],
          "docstring": "Test shell script dump commands and file operations.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing",
          "decorators": []
        },
        {
          "name": "test_shell_script_error_handling",
          "line": 1638,
          "args": [
            "self"
          ],
          "docstring": "Test shell script error handling for various failure scenarios.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 62,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 37,
          "args": [
            "self",
            "host",
            "port",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 43,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "set",
          "line": 46,
          "args": [
            "self",
            "key",
            "value",
            "who"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "get",
          "line": 49,
          "args": [
            "self",
            "key"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "to_dict",
          "line": 52,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestEnhancedContextServer",
          "line": 71,
          "bases": [],
          "docstring": "Comprehensive test suite for Enhanced Context Server functionality.\n\nThis test class covers all aspects of the Enhanced Context Server including:\n- Server initialization and configuration validation\n- REST API endpoint functionality and error handling\n- WebSocket connection management and real-time updates\n- File dumping capabilities with multiple format support\n- Cross-client integration scenarios and compatibility\n- Performance characteristics under various load conditions\n- Security and access control mechanisms",
          "methods": [
            {
              "name": "temp_directory",
              "line": 86,
              "args": [
                "self"
              ],
              "docstring": "Create temporary directory for test file operations.\n\nYields:\n    Path: Temporary directory path for safe file testing"
            },
            {
              "name": "mock_context",
              "line": 100,
              "args": [
                "self"
              ],
              "docstring": "Create mock Context instance with test data for server testing.\n\nReturns:\n    Context: Pre-populated context instance for consistent testing"
            },
            {
              "name": "test_server_config",
              "line": 137,
              "args": [
                "self"
              ],
              "docstring": "Generate test server configuration with safe defaults.\n\nReturns:\n    Dict[str, Any]: Server configuration dictionary for testing"
            },
            {
              "name": "test_server_initialization",
              "line": 153,
              "args": [
                "self",
                "test_server_config",
                "temp_directory"
              ],
              "docstring": "Test Enhanced Context Server initialization with various configurations.\n\nArgs:\n    test_server_config: Server configuration for testing\n    temp_directory: Temporary directory for file operations"
            },
            {
              "name": "test_rest_api_post_context_endpoint",
              "line": 173,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test REST API POST /ctx endpoint for setting context values with validation.\n\nArgs:\n    mock_context: Pre-populated context for testing baseline state"
            },
            {
              "name": "test_rest_api_list_all_endpoint",
              "line": 277,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test REST API GET /ctx/all endpoint for retrieving complete context state.\n\nArgs:\n    mock_context: Pre-populated context with known test data"
            },
            {
              "name": "test_rest_api_history_endpoint",
              "line": 320,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test REST API GET /ctx/history endpoint for retrieving change history.\n\nArgs:\n    mock_context: Context instance with change history"
            },
            {
              "name": "test_websocket_connection_management",
              "line": 386,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test WebSocket connection establishment, client tracking, and disconnection handling.\n\nArgs:\n    mock_context: Context instance for WebSocket testing"
            },
            {
              "name": "test_websocket_context_updates",
              "line": 455,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test WebSocket-based context updates and real-time broadcasting functionality.\n\nArgs:\n    mock_context: Context instance for update testing"
            },
            {
              "name": "test_file_dump_json_format",
              "line": 522,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test context dumping in JSON format with complete validation.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing"
            },
            {
              "name": "test_file_dump_pretty_format",
              "line": 611,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test context dumping in human-readable pretty format.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing"
            },
            {
              "name": "test_file_dump_csv_format",
              "line": 674,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test context dumping in CSV format for spreadsheet compatibility.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing"
            },
            {
              "name": "test_file_dump_txt_format",
              "line": 742,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test context dumping in plain text format for simple parsing.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for dump file testing"
            },
            {
              "name": "test_file_dump_list_endpoint",
              "line": 812,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test dump file listing functionality and metadata retrieval.\n\nArgs:\n    mock_context: Context instance for creating test dumps\n    temp_directory: Temporary directory with test dump files"
            },
            {
              "name": "test_file_dump_download_endpoint",
              "line": 900,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test dump file download functionality with different formats.\n\nArgs:\n    mock_context: Context instance for creating test dump\n    temp_directory: Temporary directory for test files"
            },
            {
              "name": "test_file_dump_error_handling",
              "line": 998,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test error handling in dump functionality with invalid requests.\n\nArgs:\n    mock_context: Context instance for testing\n    temp_directory: Temporary directory for testing"
            }
          ]
        },
        {
          "name": "TestPythonClientLibraries",
          "line": 1059,
          "bases": [],
          "docstring": "Test suite for Python synchronous and asynchronous client libraries.\nValidates client functionality, error handling, and integration patterns.",
          "methods": [
            {
              "name": "running_server",
              "line": 1066,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Fixture providing a running server instance for client testing.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for server files\n    \nYields:\n    tuple: (server_instance, host, port) for client connections"
            },
            {
              "name": "test_sync_client_basic_operations",
              "line": 1098,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test synchronous Python client basic operations (get, set, delete).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing"
            },
            {
              "name": "test_sync_client_dump_operations",
              "line": 1166,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test synchronous client dump operations (dump, list, download).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing"
            },
            {
              "name": "test_client_error_handling",
              "line": 1419,
              "args": [
                "self",
                "mock_context"
              ],
              "docstring": "Test client library error handling for various failure scenarios.\n\nArgs:\n    mock_context: Context instance for testing"
            }
          ]
        },
        {
          "name": "TestShellScriptIntegration",
          "line": 1481,
          "bases": [],
          "docstring": "Test suite for shell script client integration and command execution.\nValidates shell client functionality and command-line interface.",
          "methods": [
            {
              "name": "test_shell_script_basic_commands",
              "line": 1487,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test basic shell script commands (get, set, list, status).\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing"
            },
            {
              "name": "test_shell_script_dump_commands",
              "line": 1563,
              "args": [
                "self",
                "mock_context",
                "temp_directory"
              ],
              "docstring": "Test shell script dump commands and file operations.\n\nArgs:\n    mock_context: Context instance with test data\n    temp_directory: Temporary directory for testing"
            },
            {
              "name": "test_shell_script_error_handling",
              "line": 1638,
              "args": [
                "self"
              ],
              "docstring": "Test shell script error handling for various failure scenarios."
            }
          ]
        },
        {
          "name": "EnhancedContextServer",
          "line": 36,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 37,
              "args": [
                "self",
                "host",
                "port",
                "debug"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "Context",
          "line": 42,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 43,
              "args": [
                "self"
              ],
              "docstring": ""
            },
            {
              "name": "set",
              "line": 46,
              "args": [
                "self",
                "key",
                "value",
                "who"
              ],
              "docstring": ""
            },
            {
              "name": "get",
              "line": 49,
              "args": [
                "self",
                "key"
              ],
              "docstring": ""
            },
            {
              "name": "to_dict",
              "line": 52,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 1338,
      "complexity_score": 94,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "b6f01a8849723f74ad854f9c0f17dfc1",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_enhanced_memory_bus.py": {
      "name": "tests/test_enhanced_memory_bus.py",
      "path": "tests/test_enhanced_memory_bus.py",
      "component_type": "test",
      "description": "Comprehensive test suite for Enhanced Memory Bus System.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "run_all_tests",
        "test_metrics_initialization",
        "test_update_operation_stats",
        "test_metrics_serialization",
        "test_event_initialization",
        "test_event_expiration",
        "test_event_serialization",
        "test_json_save_and_load",
        "test_json_delete_key",
        "test_json_backup_and_restore",
        "test_sqlite_save_and_load",
        "test_sqlite_delete_key",
        "test_sqlite_backup_and_restore",
        "test_basic_operations",
        "test_json_serializability_validation",
        "test_context_integration",
        "test_persistence_operations",
        "test_messaging_system",
        "test_backup_and_restore",
        "test_metrics_collection",
        "test_health_check",
        "test_threading_safety",
        "test_factory_functions",
        "test_context_memory_bus_coordination",
        "test_persistence_recovery_scenario",
        "event_handler",
        "worker_thread",
        "TestMemoryBusMetrics",
        "TestMessageEvent",
        "TestJSONPersistenceBackend",
        "TestSQLitePersistenceBackend",
        "TestEnhancedMemoryBus",
        "TestMemoryBusIntegration"
      ],
      "imports": [
        "os",
        "json",
        "tempfile",
        "threading",
        "time",
        "pytest",
        "pathlib",
        "unittest.mock",
        "datetime",
        "orchestrator.enhanced_memory_bus",
        "orchestrator.context.context"
      ],
      "functions": [
        {
          "name": "run_all_tests",
          "line": 653,
          "args": [],
          "docstring": "Run all enhanced memory bus tests.",
          "decorators": []
        },
        {
          "name": "test_metrics_initialization",
          "line": 37,
          "args": [
            "self"
          ],
          "docstring": "Test that metrics initialize with correct default values.",
          "decorators": []
        },
        {
          "name": "test_update_operation_stats",
          "line": 57,
          "args": [
            "self"
          ],
          "docstring": "Test operation statistics update functionality.",
          "decorators": []
        },
        {
          "name": "test_metrics_serialization",
          "line": 83,
          "args": [
            "self"
          ],
          "docstring": "Test metrics to_dict serialization.",
          "decorators": []
        },
        {
          "name": "test_event_initialization",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Test message event initialization with defaults.",
          "decorators": []
        },
        {
          "name": "test_event_expiration",
          "line": 129,
          "args": [
            "self"
          ],
          "docstring": "Test event TTL and expiration logic.",
          "decorators": []
        },
        {
          "name": "test_event_serialization",
          "line": 141,
          "args": [
            "self"
          ],
          "docstring": "Test event serialization and deserialization.",
          "decorators": []
        },
        {
          "name": "test_json_save_and_load",
          "line": 171,
          "args": [
            "self"
          ],
          "docstring": "Test JSON backend save and load functionality.",
          "decorators": []
        },
        {
          "name": "test_json_delete_key",
          "line": 190,
          "args": [
            "self"
          ],
          "docstring": "Test JSON backend key deletion.",
          "decorators": []
        },
        {
          "name": "test_json_backup_and_restore",
          "line": 211,
          "args": [
            "self"
          ],
          "docstring": "Test JSON backend backup and restore functionality.",
          "decorators": []
        },
        {
          "name": "test_sqlite_save_and_load",
          "line": 246,
          "args": [
            "self"
          ],
          "docstring": "Test SQLite backend save and load functionality.",
          "decorators": []
        },
        {
          "name": "test_sqlite_delete_key",
          "line": 265,
          "args": [
            "self"
          ],
          "docstring": "Test SQLite backend key deletion.",
          "decorators": []
        },
        {
          "name": "test_sqlite_backup_and_restore",
          "line": 286,
          "args": [
            "self"
          ],
          "docstring": "Test SQLite backend backup and restore functionality.",
          "decorators": []
        },
        {
          "name": "test_basic_operations",
          "line": 321,
          "args": [
            "self"
          ],
          "docstring": "Test basic get/set/delete operations.",
          "decorators": []
        },
        {
          "name": "test_json_serializability_validation",
          "line": 346,
          "args": [
            "self"
          ],
          "docstring": "Test that only JSON-serializable values can be stored.",
          "decorators": []
        },
        {
          "name": "test_context_integration",
          "line": 361,
          "args": [
            "self"
          ],
          "docstring": "Test integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_persistence_operations",
          "line": 379,
          "args": [
            "self"
          ],
          "docstring": "Test persistence functionality with temporary file.",
          "decorators": []
        },
        {
          "name": "test_messaging_system",
          "line": 406,
          "args": [
            "self"
          ],
          "docstring": "Test event publishing and subscription.",
          "decorators": []
        },
        {
          "name": "test_backup_and_restore",
          "line": 440,
          "args": [
            "self"
          ],
          "docstring": "Test backup and restore functionality.",
          "decorators": []
        },
        {
          "name": "test_metrics_collection",
          "line": 470,
          "args": [
            "self"
          ],
          "docstring": "Test metrics collection and reporting.",
          "decorators": []
        },
        {
          "name": "test_health_check",
          "line": 496,
          "args": [
            "self"
          ],
          "docstring": "Test comprehensive health check functionality.",
          "decorators": []
        },
        {
          "name": "test_threading_safety",
          "line": 525,
          "args": [
            "self"
          ],
          "docstring": "Test thread safety of memory bus operations.",
          "decorators": []
        },
        {
          "name": "test_factory_functions",
          "line": 569,
          "args": [
            "self"
          ],
          "docstring": "Test factory functions for creating memory bus instances.",
          "decorators": []
        },
        {
          "name": "test_context_memory_bus_coordination",
          "line": 593,
          "args": [
            "self"
          ],
          "docstring": "Test coordination between Context and EnhancedMemoryBus.",
          "decorators": []
        },
        {
          "name": "test_persistence_recovery_scenario",
          "line": 616,
          "args": [
            "self"
          ],
          "docstring": "Test realistic persistence and recovery scenario.",
          "decorators": []
        },
        {
          "name": "event_handler",
          "line": 414,
          "args": [
            "event"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "worker_thread",
          "line": 534,
          "args": [
            "thread_id"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestMemoryBusMetrics",
          "line": 34,
          "bases": [],
          "docstring": "Test suite for MemoryBusMetrics class.",
          "methods": [
            {
              "name": "test_metrics_initialization",
              "line": 37,
              "args": [
                "self"
              ],
              "docstring": "Test that metrics initialize with correct default values."
            },
            {
              "name": "test_update_operation_stats",
              "line": 57,
              "args": [
                "self"
              ],
              "docstring": "Test operation statistics update functionality."
            },
            {
              "name": "test_metrics_serialization",
              "line": 83,
              "args": [
                "self"
              ],
              "docstring": "Test metrics to_dict serialization."
            }
          ]
        },
        {
          "name": "TestMessageEvent",
          "line": 112,
          "bases": [],
          "docstring": "Test suite for MessageEvent class.",
          "methods": [
            {
              "name": "test_event_initialization",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Test message event initialization with defaults."
            },
            {
              "name": "test_event_expiration",
              "line": 129,
              "args": [
                "self"
              ],
              "docstring": "Test event TTL and expiration logic."
            },
            {
              "name": "test_event_serialization",
              "line": 141,
              "args": [
                "self"
              ],
              "docstring": "Test event serialization and deserialization."
            }
          ]
        },
        {
          "name": "TestJSONPersistenceBackend",
          "line": 168,
          "bases": [],
          "docstring": "Test suite for JSON persistence backend.",
          "methods": [
            {
              "name": "test_json_save_and_load",
              "line": 171,
              "args": [
                "self"
              ],
              "docstring": "Test JSON backend save and load functionality."
            },
            {
              "name": "test_json_delete_key",
              "line": 190,
              "args": [
                "self"
              ],
              "docstring": "Test JSON backend key deletion."
            },
            {
              "name": "test_json_backup_and_restore",
              "line": 211,
              "args": [
                "self"
              ],
              "docstring": "Test JSON backend backup and restore functionality."
            }
          ]
        },
        {
          "name": "TestSQLitePersistenceBackend",
          "line": 243,
          "bases": [],
          "docstring": "Test suite for SQLite persistence backend.",
          "methods": [
            {
              "name": "test_sqlite_save_and_load",
              "line": 246,
              "args": [
                "self"
              ],
              "docstring": "Test SQLite backend save and load functionality."
            },
            {
              "name": "test_sqlite_delete_key",
              "line": 265,
              "args": [
                "self"
              ],
              "docstring": "Test SQLite backend key deletion."
            },
            {
              "name": "test_sqlite_backup_and_restore",
              "line": 286,
              "args": [
                "self"
              ],
              "docstring": "Test SQLite backend backup and restore functionality."
            }
          ]
        },
        {
          "name": "TestEnhancedMemoryBus",
          "line": 318,
          "bases": [],
          "docstring": "Test suite for EnhancedMemoryBus class.",
          "methods": [
            {
              "name": "test_basic_operations",
              "line": 321,
              "args": [
                "self"
              ],
              "docstring": "Test basic get/set/delete operations."
            },
            {
              "name": "test_json_serializability_validation",
              "line": 346,
              "args": [
                "self"
              ],
              "docstring": "Test that only JSON-serializable values can be stored."
            },
            {
              "name": "test_context_integration",
              "line": 361,
              "args": [
                "self"
              ],
              "docstring": "Test integration with Context system."
            },
            {
              "name": "test_persistence_operations",
              "line": 379,
              "args": [
                "self"
              ],
              "docstring": "Test persistence functionality with temporary file."
            },
            {
              "name": "test_messaging_system",
              "line": 406,
              "args": [
                "self"
              ],
              "docstring": "Test event publishing and subscription."
            },
            {
              "name": "test_backup_and_restore",
              "line": 440,
              "args": [
                "self"
              ],
              "docstring": "Test backup and restore functionality."
            },
            {
              "name": "test_metrics_collection",
              "line": 470,
              "args": [
                "self"
              ],
              "docstring": "Test metrics collection and reporting."
            },
            {
              "name": "test_health_check",
              "line": 496,
              "args": [
                "self"
              ],
              "docstring": "Test comprehensive health check functionality."
            },
            {
              "name": "test_threading_safety",
              "line": 525,
              "args": [
                "self"
              ],
              "docstring": "Test thread safety of memory bus operations."
            },
            {
              "name": "test_factory_functions",
              "line": 569,
              "args": [
                "self"
              ],
              "docstring": "Test factory functions for creating memory bus instances."
            }
          ]
        },
        {
          "name": "TestMemoryBusIntegration",
          "line": 590,
          "bases": [],
          "docstring": "Integration tests for memory bus with other Framework0 components.",
          "methods": [
            {
              "name": "test_context_memory_bus_coordination",
              "line": 593,
              "args": [
                "self"
              ],
              "docstring": "Test coordination between Context and EnhancedMemoryBus."
            },
            {
              "name": "test_persistence_recovery_scenario",
              "line": 616,
              "args": [
                "self"
              ],
              "docstring": "Test realistic persistence and recovery scenario."
            }
          ]
        }
      ],
      "lines_of_code": 544,
      "complexity_score": 64,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "084ba563397b5974776d356850a539cd",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_enhanced_persistence.py": {
      "name": "tests/test_enhanced_persistence.py",
      "path": "tests/test_enhanced_persistence.py",
      "component_type": "test",
      "description": "Test case for the Enhanced Persistence Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/enhanced_memory_bus.py",
        "orchestrator/persistence/cache.py"
      ],
      "exports": [
        "setUp",
        "tearDown",
        "test_basic_persistence",
        "test_key_operations",
        "test_snapshots",
        "test_delta_snapshots",
        "test_snapshot_comparison",
        "test_import_export",
        "test_metrics",
        "test_factory_function",
        "TestEnhancedPersistence"
      ],
      "imports": [
        "os",
        "time",
        "json",
        "tempfile",
        "unittest",
        "typing",
        "orchestrator.persistence.core",
        "orchestrator.persistence.delta",
        "orchestrator.persistence.snapshot",
        "orchestrator.persistence.cache",
        "orchestrator.persistence.enhanced",
        "shutil"
      ],
      "functions": [
        {
          "name": "setUp",
          "line": 28,
          "args": [
            "self"
          ],
          "docstring": "Set up test environment before each test.",
          "decorators": []
        },
        {
          "name": "tearDown",
          "line": 65,
          "args": [
            "self"
          ],
          "docstring": "Clean up after each test.",
          "decorators": []
        },
        {
          "name": "test_basic_persistence",
          "line": 74,
          "args": [
            "self"
          ],
          "docstring": "Test basic save and load operations.",
          "decorators": []
        },
        {
          "name": "test_key_operations",
          "line": 85,
          "args": [
            "self"
          ],
          "docstring": "Test individual key operations (get, set, delete).",
          "decorators": []
        },
        {
          "name": "test_snapshots",
          "line": 115,
          "args": [
            "self"
          ],
          "docstring": "Test snapshot creation and restoration.",
          "decorators": []
        },
        {
          "name": "test_delta_snapshots",
          "line": 152,
          "args": [
            "self"
          ],
          "docstring": "Test delta snapshot creation and restoration.",
          "decorators": []
        },
        {
          "name": "test_snapshot_comparison",
          "line": 180,
          "args": [
            "self"
          ],
          "docstring": "Test snapshot comparison functionality.",
          "decorators": []
        },
        {
          "name": "test_import_export",
          "line": 210,
          "args": [
            "self"
          ],
          "docstring": "Test import and export functionality.",
          "decorators": []
        },
        {
          "name": "test_metrics",
          "line": 228,
          "args": [
            "self"
          ],
          "docstring": "Test metrics collection and reporting.",
          "decorators": []
        },
        {
          "name": "test_factory_function",
          "line": 244,
          "args": [
            "self"
          ],
          "docstring": "Test the persistence factory function.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestEnhancedPersistence",
          "line": 25,
          "bases": [
            "TestCase"
          ],
          "docstring": "Test case for Enhanced Persistence functionality.",
          "methods": [
            {
              "name": "setUp",
              "line": 28,
              "args": [
                "self"
              ],
              "docstring": "Set up test environment before each test."
            },
            {
              "name": "tearDown",
              "line": 65,
              "args": [
                "self"
              ],
              "docstring": "Clean up after each test."
            },
            {
              "name": "test_basic_persistence",
              "line": 74,
              "args": [
                "self"
              ],
              "docstring": "Test basic save and load operations."
            },
            {
              "name": "test_key_operations",
              "line": 85,
              "args": [
                "self"
              ],
              "docstring": "Test individual key operations (get, set, delete)."
            },
            {
              "name": "test_snapshots",
              "line": 115,
              "args": [
                "self"
              ],
              "docstring": "Test snapshot creation and restoration."
            },
            {
              "name": "test_delta_snapshots",
              "line": 152,
              "args": [
                "self"
              ],
              "docstring": "Test delta snapshot creation and restoration."
            },
            {
              "name": "test_snapshot_comparison",
              "line": 180,
              "args": [
                "self"
              ],
              "docstring": "Test snapshot comparison functionality."
            },
            {
              "name": "test_import_export",
              "line": 210,
              "args": [
                "self"
              ],
              "docstring": "Test import and export functionality."
            },
            {
              "name": "test_metrics",
              "line": 228,
              "args": [
                "self"
              ],
              "docstring": "Test metrics collection and reporting."
            },
            {
              "name": "test_factory_function",
              "line": 244,
              "args": [
                "self"
              ],
              "docstring": "Test the persistence factory function."
            }
          ]
        }
      ],
      "lines_of_code": 206,
      "complexity_score": 13,
      "last_modified": "2025-10-04T21:58:29.010985",
      "checksum": "c19a930e8b3b1def9f9398d948d40a2f",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    "tests/test_enhanced_recipe_parser.py": {
      "name": "tests/test_enhanced_recipe_parser.py",
      "path": "tests/test_enhanced_recipe_parser.py",
      "component_type": "test",
      "description": "Test Suite for Enhanced Recipe Parser with Context Integration.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "run_all_tests",
        "setUp",
        "test_validate_required_fields_success",
        "test_validate_missing_steps",
        "test_validate_invalid_steps_type",
        "test_validate_step_structure_success",
        "test_validate_step_missing_fields",
        "test_validate_dependency_graph_success",
        "test_validate_missing_dependency",
        "test_validate_circular_dependency",
        "test_validate_duplicate_step_names",
        "test_custom_validator",
        "setUp",
        "tearDown",
        "_create_temp_file",
        "test_detect_format_yaml",
        "test_detect_format_yml",
        "test_detect_format_json",
        "test_detect_format_unsupported",
        "test_load_yaml_file",
        "test_load_json_file",
        "test_load_nonexistent_file",
        "test_load_invalid_yaml",
        "test_load_invalid_json",
        "test_parse_recipe_success",
        "test_parse_recipe_validation_errors",
        "test_parse_recipe_caching",
        "test_context_integration",
        "test_validation_summary",
        "setUp",
        "tearDown",
        "_create_temp_file",
        "test_parse_recipe_file_function",
        "test_validate_recipe_data_function",
        "custom_validator",
        "TestRecipeValidator",
        "TestEnhancedRecipeParser",
        "TestConvenienceFunctions"
      ],
      "imports": [
        "json",
        "os",
        "tempfile",
        "unittest",
        "datetime",
        "pathlib",
        "typing",
        "unittest.mock",
        "yaml",
        "orchestrator.enhanced_recipe_parser",
        "orchestrator.context.context",
        "shutil",
        "shutil"
      ],
      "functions": [
        {
          "name": "run_all_tests",
          "line": 547,
          "args": [],
          "docstring": "Run all Enhanced Recipe Parser tests and return success status.\n\n:return: True if all tests pass, False otherwise",
          "decorators": []
        },
        {
          "name": "setUp",
          "line": 36,
          "args": [
            "self"
          ],
          "docstring": "Set up test fixtures.",
          "decorators": []
        },
        {
          "name": "test_validate_required_fields_success",
          "line": 41,
          "args": [
            "self"
          ],
          "docstring": "Test validation with all required fields present.",
          "decorators": []
        },
        {
          "name": "test_validate_missing_steps",
          "line": 60,
          "args": [
            "self"
          ],
          "docstring": "Test validation with missing steps field.",
          "decorators": []
        },
        {
          "name": "test_validate_invalid_steps_type",
          "line": 71,
          "args": [
            "self"
          ],
          "docstring": "Test validation with invalid steps field type.",
          "decorators": []
        },
        {
          "name": "test_validate_step_structure_success",
          "line": 82,
          "args": [
            "self"
          ],
          "docstring": "Test step structure validation with valid steps.",
          "decorators": []
        },
        {
          "name": "test_validate_step_missing_fields",
          "line": 106,
          "args": [
            "self"
          ],
          "docstring": "Test step validation with missing required fields.",
          "decorators": []
        },
        {
          "name": "test_validate_dependency_graph_success",
          "line": 124,
          "args": [
            "self"
          ],
          "docstring": "Test dependency validation with valid dependency graph.",
          "decorators": []
        },
        {
          "name": "test_validate_missing_dependency",
          "line": 149,
          "args": [
            "self"
          ],
          "docstring": "Test dependency validation with missing dependency.",
          "decorators": []
        },
        {
          "name": "test_validate_circular_dependency",
          "line": 169,
          "args": [
            "self"
          ],
          "docstring": "Test dependency validation with circular dependency.",
          "decorators": []
        },
        {
          "name": "test_validate_duplicate_step_names",
          "line": 195,
          "args": [
            "self"
          ],
          "docstring": "Test validation with duplicate step names.",
          "decorators": []
        },
        {
          "name": "test_custom_validator",
          "line": 219,
          "args": [
            "self"
          ],
          "docstring": "Test adding and using custom validation rules.",
          "decorators": []
        },
        {
          "name": "setUp",
          "line": 246,
          "args": [
            "self"
          ],
          "docstring": "Set up test fixtures.",
          "decorators": []
        },
        {
          "name": "tearDown",
          "line": 252,
          "args": [
            "self"
          ],
          "docstring": "Clean up test fixtures.",
          "decorators": []
        },
        {
          "name": "_create_temp_file",
          "line": 257,
          "args": [
            "self",
            "content",
            "filename"
          ],
          "docstring": "Create temporary file with given content.",
          "decorators": []
        },
        {
          "name": "test_detect_format_yaml",
          "line": 264,
          "args": [
            "self"
          ],
          "docstring": "Test format detection for YAML files.",
          "decorators": []
        },
        {
          "name": "test_detect_format_yml",
          "line": 270,
          "args": [
            "self"
          ],
          "docstring": "Test format detection for YML files.",
          "decorators": []
        },
        {
          "name": "test_detect_format_json",
          "line": 276,
          "args": [
            "self"
          ],
          "docstring": "Test format detection for JSON files.",
          "decorators": []
        },
        {
          "name": "test_detect_format_unsupported",
          "line": 282,
          "args": [
            "self"
          ],
          "docstring": "Test format detection with unsupported file type.",
          "decorators": []
        },
        {
          "name": "test_load_yaml_file",
          "line": 289,
          "args": [
            "self"
          ],
          "docstring": "Test loading YAML recipe file.",
          "decorators": []
        },
        {
          "name": "test_load_json_file",
          "line": 309,
          "args": [
            "self"
          ],
          "docstring": "Test loading JSON recipe file.",
          "decorators": []
        },
        {
          "name": "test_load_nonexistent_file",
          "line": 332,
          "args": [
            "self"
          ],
          "docstring": "Test loading nonexistent file raises appropriate error.",
          "decorators": []
        },
        {
          "name": "test_load_invalid_yaml",
          "line": 337,
          "args": [
            "self"
          ],
          "docstring": "Test loading invalid YAML content raises appropriate error.",
          "decorators": []
        },
        {
          "name": "test_load_invalid_json",
          "line": 346,
          "args": [
            "self"
          ],
          "docstring": "Test loading invalid JSON content raises appropriate error.",
          "decorators": []
        },
        {
          "name": "test_parse_recipe_success",
          "line": 355,
          "args": [
            "self"
          ],
          "docstring": "Test successful recipe parsing with all components.",
          "decorators": []
        },
        {
          "name": "test_parse_recipe_validation_errors",
          "line": 394,
          "args": [
            "self"
          ],
          "docstring": "Test recipe parsing with validation errors.",
          "decorators": []
        },
        {
          "name": "test_parse_recipe_caching",
          "line": 412,
          "args": [
            "self"
          ],
          "docstring": "Test recipe parsing caching functionality.",
          "decorators": []
        },
        {
          "name": "test_context_integration",
          "line": 434,
          "args": [
            "self"
          ],
          "docstring": "Test Context system integration.",
          "decorators": []
        },
        {
          "name": "test_validation_summary",
          "line": 460,
          "args": [
            "self"
          ],
          "docstring": "Test validation summary generation.",
          "decorators": []
        },
        {
          "name": "setUp",
          "line": 486,
          "args": [
            "self"
          ],
          "docstring": "Set up test fixtures.",
          "decorators": []
        },
        {
          "name": "tearDown",
          "line": 491,
          "args": [
            "self"
          ],
          "docstring": "Clean up test fixtures.",
          "decorators": []
        },
        {
          "name": "_create_temp_file",
          "line": 496,
          "args": [
            "self",
            "content",
            "filename"
          ],
          "docstring": "Create temporary file with given content.",
          "decorators": []
        },
        {
          "name": "test_parse_recipe_file_function",
          "line": 503,
          "args": [
            "self"
          ],
          "docstring": "Test parse_recipe_file convenience function.",
          "decorators": []
        },
        {
          "name": "test_validate_recipe_data_function",
          "line": 526,
          "args": [
            "self"
          ],
          "docstring": "Test validate_recipe_data convenience function.",
          "decorators": []
        },
        {
          "name": "custom_validator",
          "line": 221,
          "args": [
            "recipe_data"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestRecipeValidator",
          "line": 33,
          "bases": [
            "TestCase"
          ],
          "docstring": "Test cases for RecipeValidator class.",
          "methods": [
            {
              "name": "setUp",
              "line": 36,
              "args": [
                "self"
              ],
              "docstring": "Set up test fixtures."
            },
            {
              "name": "test_validate_required_fields_success",
              "line": 41,
              "args": [
                "self"
              ],
              "docstring": "Test validation with all required fields present."
            },
            {
              "name": "test_validate_missing_steps",
              "line": 60,
              "args": [
                "self"
              ],
              "docstring": "Test validation with missing steps field."
            },
            {
              "name": "test_validate_invalid_steps_type",
              "line": 71,
              "args": [
                "self"
              ],
              "docstring": "Test validation with invalid steps field type."
            },
            {
              "name": "test_validate_step_structure_success",
              "line": 82,
              "args": [
                "self"
              ],
              "docstring": "Test step structure validation with valid steps."
            },
            {
              "name": "test_validate_step_missing_fields",
              "line": 106,
              "args": [
                "self"
              ],
              "docstring": "Test step validation with missing required fields."
            },
            {
              "name": "test_validate_dependency_graph_success",
              "line": 124,
              "args": [
                "self"
              ],
              "docstring": "Test dependency validation with valid dependency graph."
            },
            {
              "name": "test_validate_missing_dependency",
              "line": 149,
              "args": [
                "self"
              ],
              "docstring": "Test dependency validation with missing dependency."
            },
            {
              "name": "test_validate_circular_dependency",
              "line": 169,
              "args": [
                "self"
              ],
              "docstring": "Test dependency validation with circular dependency."
            },
            {
              "name": "test_validate_duplicate_step_names",
              "line": 195,
              "args": [
                "self"
              ],
              "docstring": "Test validation with duplicate step names."
            },
            {
              "name": "test_custom_validator",
              "line": 219,
              "args": [
                "self"
              ],
              "docstring": "Test adding and using custom validation rules."
            }
          ]
        },
        {
          "name": "TestEnhancedRecipeParser",
          "line": 243,
          "bases": [
            "TestCase"
          ],
          "docstring": "Test cases for EnhancedRecipeParser class.",
          "methods": [
            {
              "name": "setUp",
              "line": 246,
              "args": [
                "self"
              ],
              "docstring": "Set up test fixtures."
            },
            {
              "name": "tearDown",
              "line": 252,
              "args": [
                "self"
              ],
              "docstring": "Clean up test fixtures."
            },
            {
              "name": "_create_temp_file",
              "line": 257,
              "args": [
                "self",
                "content",
                "filename"
              ],
              "docstring": "Create temporary file with given content."
            },
            {
              "name": "test_detect_format_yaml",
              "line": 264,
              "args": [
                "self"
              ],
              "docstring": "Test format detection for YAML files."
            },
            {
              "name": "test_detect_format_yml",
              "line": 270,
              "args": [
                "self"
              ],
              "docstring": "Test format detection for YML files."
            },
            {
              "name": "test_detect_format_json",
              "line": 276,
              "args": [
                "self"
              ],
              "docstring": "Test format detection for JSON files."
            },
            {
              "name": "test_detect_format_unsupported",
              "line": 282,
              "args": [
                "self"
              ],
              "docstring": "Test format detection with unsupported file type."
            },
            {
              "name": "test_load_yaml_file",
              "line": 289,
              "args": [
                "self"
              ],
              "docstring": "Test loading YAML recipe file."
            },
            {
              "name": "test_load_json_file",
              "line": 309,
              "args": [
                "self"
              ],
              "docstring": "Test loading JSON recipe file."
            },
            {
              "name": "test_load_nonexistent_file",
              "line": 332,
              "args": [
                "self"
              ],
              "docstring": "Test loading nonexistent file raises appropriate error."
            },
            {
              "name": "test_load_invalid_yaml",
              "line": 337,
              "args": [
                "self"
              ],
              "docstring": "Test loading invalid YAML content raises appropriate error."
            },
            {
              "name": "test_load_invalid_json",
              "line": 346,
              "args": [
                "self"
              ],
              "docstring": "Test loading invalid JSON content raises appropriate error."
            },
            {
              "name": "test_parse_recipe_success",
              "line": 355,
              "args": [
                "self"
              ],
              "docstring": "Test successful recipe parsing with all components."
            },
            {
              "name": "test_parse_recipe_validation_errors",
              "line": 394,
              "args": [
                "self"
              ],
              "docstring": "Test recipe parsing with validation errors."
            },
            {
              "name": "test_parse_recipe_caching",
              "line": 412,
              "args": [
                "self"
              ],
              "docstring": "Test recipe parsing caching functionality."
            },
            {
              "name": "test_context_integration",
              "line": 434,
              "args": [
                "self"
              ],
              "docstring": "Test Context system integration."
            },
            {
              "name": "test_validation_summary",
              "line": 460,
              "args": [
                "self"
              ],
              "docstring": "Test validation summary generation."
            }
          ]
        },
        {
          "name": "TestConvenienceFunctions",
          "line": 483,
          "bases": [
            "TestCase"
          ],
          "docstring": "Test cases for convenience functions.",
          "methods": [
            {
              "name": "setUp",
              "line": 486,
              "args": [
                "self"
              ],
              "docstring": "Set up test fixtures."
            },
            {
              "name": "tearDown",
              "line": 491,
              "args": [
                "self"
              ],
              "docstring": "Clean up test fixtures."
            },
            {
              "name": "_create_temp_file",
              "line": 496,
              "args": [
                "self",
                "content",
                "filename"
              ],
              "docstring": "Create temporary file with given content."
            },
            {
              "name": "test_parse_recipe_file_function",
              "line": 503,
              "args": [
                "self"
              ],
              "docstring": "Test parse_recipe_file convenience function."
            },
            {
              "name": "test_validate_recipe_data_function",
              "line": 526,
              "args": [
                "self"
              ],
              "docstring": "Test validate_recipe_data convenience function."
            }
          ]
        }
      ],
      "lines_of_code": 483,
      "complexity_score": 50,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "d76497190d5e3190541aca74c0cc700f",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_framework0_integration.py": {
      "name": "tests/test_framework0_integration.py",
      "path": "tests/test_framework0_integration.py",
      "component_type": "test",
      "description": "Framework0 Integration Test Suite - Complete System Validation.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md"
      ],
      "exports": [
        "run_integration_tests",
        "setUp",
        "tearDown",
        "_create_test_recipe",
        "_create_test_files",
        "test_context_system_integration",
        "test_memory_bus_context_integration",
        "test_recipe_parser_context_integration",
        "test_analysis_framework_integration",
        "test_workspace_cleaner_integration",
        "test_cross_component_data_flow",
        "test_framework_persistence_and_recovery",
        "test_framework_performance_metrics",
        "test_framework_error_handling",
        "__init__",
        "TestFramework0Integration",
        "NonSerializable"
      ],
      "imports": [
        "json",
        "os",
        "tempfile",
        "time",
        "unittest",
        "datetime",
        "pathlib",
        "typing",
        "unittest.mock",
        "orchestrator.context.context",
        "orchestrator.enhanced_memory_bus",
        "orchestrator.enhanced_recipe_parser",
        "src.analysis.enhanced_framework",
        "tools.workspace_cleaner_v2",
        "shutil",
        "src.analysis.registry"
      ],
      "functions": [
        {
          "name": "run_integration_tests",
          "line": 379,
          "args": [],
          "docstring": "Run all Framework0 integration tests and return success status.\n\n:return: True if all tests pass, False otherwise",
          "decorators": []
        },
        {
          "name": "setUp",
          "line": 35,
          "args": [
            "self"
          ],
          "docstring": "Set up comprehensive test environment.",
          "decorators": []
        },
        {
          "name": "tearDown",
          "line": 55,
          "args": [
            "self"
          ],
          "docstring": "Clean up test environment.",
          "decorators": []
        },
        {
          "name": "_create_test_recipe",
          "line": 64,
          "args": [
            "self"
          ],
          "docstring": "Create test recipe file for integration testing.",
          "decorators": []
        },
        {
          "name": "_create_test_files",
          "line": 100,
          "args": [
            "self"
          ],
          "docstring": "Create test files for workspace cleaning.",
          "decorators": []
        },
        {
          "name": "test_context_system_integration",
          "line": 126,
          "args": [
            "self"
          ],
          "docstring": "Test Context system integration across all components.",
          "decorators": []
        },
        {
          "name": "test_memory_bus_context_integration",
          "line": 156,
          "args": [
            "self"
          ],
          "docstring": "Test Enhanced Memory Bus integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_recipe_parser_context_integration",
          "line": 184,
          "args": [
            "self"
          ],
          "docstring": "Test Enhanced Recipe Parser integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_analysis_framework_integration",
          "line": 206,
          "args": [
            "self"
          ],
          "docstring": "Test Enhanced Analysis Framework integration with Context.",
          "decorators": []
        },
        {
          "name": "test_workspace_cleaner_integration",
          "line": 229,
          "args": [
            "self"
          ],
          "docstring": "Test WorkspaceCleanerV2 integration with Context system.",
          "decorators": []
        },
        {
          "name": "test_cross_component_data_flow",
          "line": 259,
          "args": [
            "self"
          ],
          "docstring": "Test data flow between all Framework0 components.",
          "decorators": []
        },
        {
          "name": "test_framework_persistence_and_recovery",
          "line": 297,
          "args": [
            "self"
          ],
          "docstring": "Test Framework0 persistence and recovery capabilities.",
          "decorators": []
        },
        {
          "name": "test_framework_performance_metrics",
          "line": 325,
          "args": [
            "self"
          ],
          "docstring": "Test Framework0 performance monitoring and metrics.",
          "decorators": []
        },
        {
          "name": "test_framework_error_handling",
          "line": 350,
          "args": [
            "self"
          ],
          "docstring": "Test Framework0 error handling and resilience.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 366,
          "args": [
            "self"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestFramework0Integration",
          "line": 32,
          "bases": [
            "TestCase"
          ],
          "docstring": "Comprehensive integration tests for Framework0 system.",
          "methods": [
            {
              "name": "setUp",
              "line": 35,
              "args": [
                "self"
              ],
              "docstring": "Set up comprehensive test environment."
            },
            {
              "name": "tearDown",
              "line": 55,
              "args": [
                "self"
              ],
              "docstring": "Clean up test environment."
            },
            {
              "name": "_create_test_recipe",
              "line": 64,
              "args": [
                "self"
              ],
              "docstring": "Create test recipe file for integration testing."
            },
            {
              "name": "_create_test_files",
              "line": 100,
              "args": [
                "self"
              ],
              "docstring": "Create test files for workspace cleaning."
            },
            {
              "name": "test_context_system_integration",
              "line": 126,
              "args": [
                "self"
              ],
              "docstring": "Test Context system integration across all components."
            },
            {
              "name": "test_memory_bus_context_integration",
              "line": 156,
              "args": [
                "self"
              ],
              "docstring": "Test Enhanced Memory Bus integration with Context system."
            },
            {
              "name": "test_recipe_parser_context_integration",
              "line": 184,
              "args": [
                "self"
              ],
              "docstring": "Test Enhanced Recipe Parser integration with Context system."
            },
            {
              "name": "test_analysis_framework_integration",
              "line": 206,
              "args": [
                "self"
              ],
              "docstring": "Test Enhanced Analysis Framework integration with Context."
            },
            {
              "name": "test_workspace_cleaner_integration",
              "line": 229,
              "args": [
                "self"
              ],
              "docstring": "Test WorkspaceCleanerV2 integration with Context system."
            },
            {
              "name": "test_cross_component_data_flow",
              "line": 259,
              "args": [
                "self"
              ],
              "docstring": "Test data flow between all Framework0 components."
            },
            {
              "name": "test_framework_persistence_and_recovery",
              "line": 297,
              "args": [
                "self"
              ],
              "docstring": "Test Framework0 persistence and recovery capabilities."
            },
            {
              "name": "test_framework_performance_metrics",
              "line": 325,
              "args": [
                "self"
              ],
              "docstring": "Test Framework0 performance monitoring and metrics."
            },
            {
              "name": "test_framework_error_handling",
              "line": 350,
              "args": [
                "self"
              ],
              "docstring": "Test Framework0 error handling and resilience."
            }
          ]
        },
        {
          "name": "NonSerializable",
          "line": 365,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 366,
              "args": [
                "self"
              ],
              "docstring": ""
            }
          ]
        }
      ],
      "lines_of_code": 346,
      "complexity_score": 29,
      "last_modified": "2025-10-04T17:52:12.017822",
      "checksum": "6a3059bb04e469663dd5a12fc3cffe7c",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_integration.py": {
      "name": "tests/test_integration.py",
      "path": "tests/test_integration.py",
      "component_type": "test",
      "description": "Integration and End-to-End Testing for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "test_server_instance",
        "test_basic_server_functionality",
        "test_shell_client_integration",
        "test_python_client_integration",
        "test_file_dump_integration",
        "test_complete_workflow_scenario",
        "test_error_handling_integration",
        "test_concurrent_access_integration",
        "get_logger",
        "worker_thread",
        "TestIntegrationWorkflows"
      ],
      "imports": [
        "os",
        "time",
        "subprocess",
        "pytest",
        "requests",
        "pathlib",
        "src.core.logger",
        "logging",
        "threading",
        "queue",
        "sys",
        "src.context_client"
      ],
      "functions": [
        {
          "name": "test_server_instance",
          "line": 41,
          "args": [
            "self"
          ],
          "docstring": "Start a real server instance for integration testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_basic_server_functionality",
          "line": 107,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test basic server functionality with real HTTP requests.",
          "decorators": []
        },
        {
          "name": "test_shell_client_integration",
          "line": 146,
          "args": [
            "self"
          ],
          "docstring": "Test shell script client integration with real server.",
          "decorators": []
        },
        {
          "name": "test_python_client_integration",
          "line": 195,
          "args": [
            "self"
          ],
          "docstring": "Test Python client library integration.",
          "decorators": []
        },
        {
          "name": "test_file_dump_integration",
          "line": 228,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test file dumping integration with real server.",
          "decorators": []
        },
        {
          "name": "test_complete_workflow_scenario",
          "line": 277,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test a complete realistic workflow scenario.",
          "decorators": []
        },
        {
          "name": "test_error_handling_integration",
          "line": 371,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test error handling in realistic scenarios.",
          "decorators": []
        },
        {
          "name": "test_concurrent_access_integration",
          "line": 411,
          "args": [
            "self",
            "test_server_instance"
          ],
          "docstring": "Test concurrent access scenarios with real server.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 24,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "worker_thread",
          "line": 427,
          "args": [
            "thread_id"
          ],
          "docstring": "Worker function for concurrent operations.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestIntegrationWorkflows",
          "line": 37,
          "bases": [],
          "docstring": "Integration tests for complete Framework0 workflows.",
          "methods": [
            {
              "name": "test_server_instance",
              "line": 41,
              "args": [
                "self"
              ],
              "docstring": "Start a real server instance for integration testing."
            },
            {
              "name": "test_basic_server_functionality",
              "line": 107,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test basic server functionality with real HTTP requests."
            },
            {
              "name": "test_shell_client_integration",
              "line": 146,
              "args": [
                "self"
              ],
              "docstring": "Test shell script client integration with real server."
            },
            {
              "name": "test_python_client_integration",
              "line": 195,
              "args": [
                "self"
              ],
              "docstring": "Test Python client library integration."
            },
            {
              "name": "test_file_dump_integration",
              "line": 228,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test file dumping integration with real server."
            },
            {
              "name": "test_complete_workflow_scenario",
              "line": 277,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test a complete realistic workflow scenario."
            },
            {
              "name": "test_error_handling_integration",
              "line": 371,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test error handling in realistic scenarios."
            },
            {
              "name": "test_concurrent_access_integration",
              "line": 411,
              "args": [
                "self",
                "test_server_instance"
              ],
              "docstring": "Test concurrent access scenarios with real server."
            }
          ]
        }
      ],
      "lines_of_code": 407,
      "complexity_score": 34,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "ea0b3b249657c0f38dc30b4d3f4a797a",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_performance_load.py": {
      "name": "tests/test_performance_load.py",
      "path": "tests/test_performance_load.py",
      "component_type": "test",
      "description": "Performance and Load Testing Suite for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "generate_performance_report",
        "__post_init__",
        "success_rate",
        "avg_response_time_ms",
        "p95_response_time_ms",
        "p99_response_time_ms",
        "__init__",
        "_monitor_resources",
        "_make_request",
        "run_concurrent_load_test",
        "performance_runner",
        "temp_dump_directory",
        "test_concurrent_context_reads",
        "test_concurrent_context_writes",
        "test_mixed_read_write_workload",
        "test_file_dump_performance",
        "test_memory_usage_under_load",
        "test_response_time_percentiles",
        "get_logger",
        "read_request_generator",
        "write_request_generator",
        "mixed_request_generator",
        "dump_request_generator",
        "memory_stress_generator",
        "percentile_test_generator",
        "PerformanceMetrics",
        "PerformanceTestRunner",
        "TestPerformanceAndLoad"
      ],
      "imports": [
        "os",
        "time",
        "asyncio",
        "threading",
        "statistics",
        "psutil",
        "pytest",
        "requests",
        "json",
        "pathlib",
        "typing",
        "concurrent.futures",
        "datetime",
        "dataclasses",
        "tempfile",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "generate_performance_report",
          "line": 665,
          "args": [
            "test_results",
            "output_file"
          ],
          "docstring": "Generate comprehensive performance test report.\n\nArgs:\n    test_results: List of performance metrics from various tests\n    output_file: Optional file path to save the report\n    \nReturns:\n    String containing the formatted performance report",
          "decorators": []
        },
        {
          "name": "__post_init__",
          "line": 75,
          "args": [
            "self"
          ],
          "docstring": "Calculate derived metrics after initialization.",
          "decorators": []
        },
        {
          "name": "success_rate",
          "line": 82,
          "args": [
            "self"
          ],
          "docstring": "Calculate success rate as percentage.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "avg_response_time_ms",
          "line": 89,
          "args": [
            "self"
          ],
          "docstring": "Calculate average response time in milliseconds.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "p95_response_time_ms",
          "line": 96,
          "args": [
            "self"
          ],
          "docstring": "Calculate 95th percentile response time in milliseconds.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "p99_response_time_ms",
          "line": 103,
          "args": [
            "self"
          ],
          "docstring": "Calculate 99th percentile response time in milliseconds.",
          "decorators": [
            "property"
          ]
        },
        {
          "name": "__init__",
          "line": 118,
          "args": [
            "self",
            "server_host",
            "server_port",
            "debug"
          ],
          "docstring": "Initialize performance test runner with server configuration.\n\nArgs:\n    server_host: Host address of the context server to test\n    server_port: Port number of the context server to test\n    debug: Enable debug logging for detailed test tracing",
          "decorators": []
        },
        {
          "name": "_monitor_resources",
          "line": 148,
          "args": [
            "self",
            "duration_seconds"
          ],
          "docstring": "Monitor system resources during performance testing.\n\nArgs:\n    duration_seconds: Duration to monitor resources",
          "decorators": []
        },
        {
          "name": "_make_request",
          "line": 174,
          "args": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "docstring": "Make a single HTTP request and measure response time.\n\nArgs:\n    method: HTTP method (GET, POST, DELETE, etc.)\n    endpoint: API endpoint to call (relative to base URL)\n    data: Optional JSON data for POST requests\n    \nReturns:\n    Tuple of (success_flag, response_time_ms)",
          "decorators": []
        },
        {
          "name": "run_concurrent_load_test",
          "line": 215,
          "args": [
            "self",
            "operation_type",
            "num_clients",
            "operations_per_client",
            "request_generator"
          ],
          "docstring": "Run concurrent load test with multiple simulated clients.\n\nArgs:\n    operation_type: Type of operation being tested (for metrics)\n    num_clients: Number of concurrent clients to simulate\n    operations_per_client: Number of operations each client performs\n    request_generator: Function that generates (method, endpoint, data) tuples\n    \nReturns:\n    PerformanceMetrics object with detailed test results",
          "decorators": []
        },
        {
          "name": "performance_runner",
          "line": 319,
          "args": [
            "self"
          ],
          "docstring": "Fixture providing configured performance test runner.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "temp_dump_directory",
          "line": 329,
          "args": [
            "self"
          ],
          "docstring": "Fixture providing temporary directory for dump testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "test_concurrent_context_reads",
          "line": 334,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test concurrent context read operations under load.\n\nArgs:\n    performance_runner: Configured performance test runner",
          "decorators": []
        },
        {
          "name": "test_concurrent_context_writes",
          "line": 377,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test concurrent context write operations under load.\n\nArgs:\n    performance_runner: Configured performance test runner",
          "decorators": []
        },
        {
          "name": "test_mixed_read_write_workload",
          "line": 427,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test mixed read/write workload simulating realistic usage patterns.\n\nArgs:\n    performance_runner: Configured performance test runner",
          "decorators": []
        },
        {
          "name": "test_file_dump_performance",
          "line": 489,
          "args": [
            "self",
            "performance_runner",
            "temp_dump_directory"
          ],
          "docstring": "Test file dumping performance under concurrent load.\n\nArgs:\n    performance_runner: Configured performance test runner\n    temp_dump_directory: Temporary directory for dump files",
          "decorators": []
        },
        {
          "name": "test_memory_usage_under_load",
          "line": 553,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test memory usage behavior under sustained load.\n\nArgs:\n    performance_runner: Configured performance test runner  ",
          "decorators": []
        },
        {
          "name": "test_response_time_percentiles",
          "line": 611,
          "args": [
            "self",
            "performance_runner"
          ],
          "docstring": "Test response time percentiles to ensure consistent performance.\n\nArgs:\n    performance_runner: Configured performance test runner",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 35,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Fallback logger when core logger unavailable.",
          "decorators": []
        },
        {
          "name": "read_request_generator",
          "line": 348,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate GET requests for context reading.",
          "decorators": []
        },
        {
          "name": "write_request_generator",
          "line": 391,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate POST requests for context writing.",
          "decorators": []
        },
        {
          "name": "mixed_request_generator",
          "line": 441,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate mixed read/write requests (80% reads, 20% writes).",
          "decorators": []
        },
        {
          "name": "dump_request_generator",
          "line": 523,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate context dump requests with various formats.",
          "decorators": []
        },
        {
          "name": "memory_stress_generator",
          "line": 567,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate requests designed to test memory usage.",
          "decorators": []
        },
        {
          "name": "percentile_test_generator",
          "line": 625,
          "args": [
            "client_id",
            "op_id"
          ],
          "docstring": "Generate varied requests for percentile analysis.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PerformanceMetrics",
          "line": 50,
          "bases": [],
          "docstring": "Structure for storing performance test metrics and results.\n\nAttributes:\n    operation_type: Type of operation being measured (get/set/dump/etc)\n    total_operations: Total number of operations performed\n    duration_seconds: Total time taken for all operations\n    success_count: Number of successful operations\n    error_count: Number of failed operations\n    response_times: List of individual response times in milliseconds\n    throughput_ops_sec: Operations per second (calculated)\n    memory_usage_mb: Peak memory usage during test in MB\n    cpu_usage_percent: Average CPU usage during test",
          "methods": [
            {
              "name": "__post_init__",
              "line": 75,
              "args": [
                "self"
              ],
              "docstring": "Calculate derived metrics after initialization."
            },
            {
              "name": "success_rate",
              "line": 82,
              "args": [
                "self"
              ],
              "docstring": "Calculate success rate as percentage."
            },
            {
              "name": "avg_response_time_ms",
              "line": 89,
              "args": [
                "self"
              ],
              "docstring": "Calculate average response time in milliseconds."
            },
            {
              "name": "p95_response_time_ms",
              "line": 96,
              "args": [
                "self"
              ],
              "docstring": "Calculate 95th percentile response time in milliseconds."
            },
            {
              "name": "p99_response_time_ms",
              "line": 103,
              "args": [
                "self"
              ],
              "docstring": "Calculate 99th percentile response time in milliseconds."
            }
          ]
        },
        {
          "name": "PerformanceTestRunner",
          "line": 110,
          "bases": [],
          "docstring": "Advanced performance test runner for comprehensive load testing.\n\nProvides methods for concurrent client simulation, memory monitoring,\nand detailed performance metric collection and analysis.",
          "methods": [
            {
              "name": "__init__",
              "line": 118,
              "args": [
                "self",
                "server_host",
                "server_port",
                "debug"
              ],
              "docstring": "Initialize performance test runner with server configuration.\n\nArgs:\n    server_host: Host address of the context server to test\n    server_port: Port number of the context server to test\n    debug: Enable debug logging for detailed test tracing"
            },
            {
              "name": "_monitor_resources",
              "line": 148,
              "args": [
                "self",
                "duration_seconds"
              ],
              "docstring": "Monitor system resources during performance testing.\n\nArgs:\n    duration_seconds: Duration to monitor resources"
            },
            {
              "name": "_make_request",
              "line": 174,
              "args": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "docstring": "Make a single HTTP request and measure response time.\n\nArgs:\n    method: HTTP method (GET, POST, DELETE, etc.)\n    endpoint: API endpoint to call (relative to base URL)\n    data: Optional JSON data for POST requests\n    \nReturns:\n    Tuple of (success_flag, response_time_ms)"
            },
            {
              "name": "run_concurrent_load_test",
              "line": 215,
              "args": [
                "self",
                "operation_type",
                "num_clients",
                "operations_per_client",
                "request_generator"
              ],
              "docstring": "Run concurrent load test with multiple simulated clients.\n\nArgs:\n    operation_type: Type of operation being tested (for metrics)\n    num_clients: Number of concurrent clients to simulate\n    operations_per_client: Number of operations each client performs\n    request_generator: Function that generates (method, endpoint, data) tuples\n    \nReturns:\n    PerformanceMetrics object with detailed test results"
            }
          ]
        },
        {
          "name": "TestPerformanceAndLoad",
          "line": 310,
          "bases": [],
          "docstring": "Comprehensive performance and load testing suite.\n\nTests various scenarios including concurrent access, memory usage,\nresponse times, and system limits under production-like loads.",
          "methods": [
            {
              "name": "performance_runner",
              "line": 319,
              "args": [
                "self"
              ],
              "docstring": "Fixture providing configured performance test runner."
            },
            {
              "name": "temp_dump_directory",
              "line": 329,
              "args": [
                "self"
              ],
              "docstring": "Fixture providing temporary directory for dump testing."
            },
            {
              "name": "test_concurrent_context_reads",
              "line": 334,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test concurrent context read operations under load.\n\nArgs:\n    performance_runner: Configured performance test runner"
            },
            {
              "name": "test_concurrent_context_writes",
              "line": 377,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test concurrent context write operations under load.\n\nArgs:\n    performance_runner: Configured performance test runner"
            },
            {
              "name": "test_mixed_read_write_workload",
              "line": 427,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test mixed read/write workload simulating realistic usage patterns.\n\nArgs:\n    performance_runner: Configured performance test runner"
            },
            {
              "name": "test_file_dump_performance",
              "line": 489,
              "args": [
                "self",
                "performance_runner",
                "temp_dump_directory"
              ],
              "docstring": "Test file dumping performance under concurrent load.\n\nArgs:\n    performance_runner: Configured performance test runner\n    temp_dump_directory: Temporary directory for dump files"
            },
            {
              "name": "test_memory_usage_under_load",
              "line": 553,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test memory usage behavior under sustained load.\n\nArgs:\n    performance_runner: Configured performance test runner  "
            },
            {
              "name": "test_response_time_percentiles",
              "line": 611,
              "args": [
                "self",
                "performance_runner"
              ],
              "docstring": "Test response time percentiles to ensure consistent performance.\n\nArgs:\n    performance_runner: Configured performance test runner"
            }
          ]
        }
      ],
      "lines_of_code": 633,
      "complexity_score": 64,
      "last_modified": "2025-10-04T23:56:02.906419",
      "checksum": "cbc68a46f2f6282ce28ed50ee459f94b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_realtime_performance.py": {
      "name": "tests/test_realtime_performance.py",
      "path": "tests/test_realtime_performance.py",
      "component_type": "test",
      "description": "Real-time Performance Monitoring for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "_default_thresholds",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_loop",
        "_collect_performance_snapshot",
        "_get_simulated_connections",
        "_get_simulated_response_time",
        "_get_simulated_error_rate",
        "_get_simulated_context_size",
        "_get_simulated_websocket_count",
        "_check_performance_thresholds",
        "_log_performance_summary",
        "get_current_performance",
        "get_performance_history",
        "get_pending_alerts",
        "acknowledge_alert",
        "set_threshold",
        "generate_performance_report",
        "_calculate_trend",
        "export_performance_data",
        "test_performance_monitor_initialization",
        "test_performance_snapshot_collection",
        "test_performance_monitoring_lifecycle",
        "test_performance_alerting",
        "test_performance_reporting",
        "test_performance_data_export",
        "get_logger",
        "calculate_stats",
        "PerformanceSnapshot",
        "PerformanceAlert",
        "RealTimePerformanceMonitor",
        "TestRealTimePerformanceMonitoring"
      ],
      "imports": [
        "time",
        "json",
        "threading",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "queue",
        "src.core.logger",
        "logging",
        "random",
        "random",
        "random",
        "random",
        "random",
        "psutil",
        "csv"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 70,
          "args": [
            "self",
            "monitoring_interval"
          ],
          "docstring": "Initialize real-time performance monitor.",
          "decorators": []
        },
        {
          "name": "_default_thresholds",
          "line": 81,
          "args": [
            "self"
          ],
          "docstring": "Define default performance thresholds for alerting.",
          "decorators": []
        },
        {
          "name": "start_monitoring",
          "line": 92,
          "args": [
            "self"
          ],
          "docstring": "Start real-time performance monitoring.",
          "decorators": []
        },
        {
          "name": "stop_monitoring",
          "line": 112,
          "args": [
            "self"
          ],
          "docstring": "Stop real-time performance monitoring.",
          "decorators": []
        },
        {
          "name": "_monitoring_loop",
          "line": 125,
          "args": [
            "self"
          ],
          "docstring": "Main monitoring loop for collecting performance snapshots.",
          "decorators": []
        },
        {
          "name": "_collect_performance_snapshot",
          "line": 156,
          "args": [
            "self"
          ],
          "docstring": "Collect current performance metrics snapshot.",
          "decorators": []
        },
        {
          "name": "_get_simulated_connections",
          "line": 204,
          "args": [
            "self"
          ],
          "docstring": "Get simulated connection count (replace with real server state).",
          "decorators": []
        },
        {
          "name": "_get_simulated_response_time",
          "line": 212,
          "args": [
            "self"
          ],
          "docstring": "Get simulated response time (replace with real metrics).",
          "decorators": []
        },
        {
          "name": "_get_simulated_error_rate",
          "line": 220,
          "args": [
            "self"
          ],
          "docstring": "Get simulated error rate (replace with real metrics).",
          "decorators": []
        },
        {
          "name": "_get_simulated_context_size",
          "line": 228,
          "args": [
            "self"
          ],
          "docstring": "Get simulated context size (replace with real server state).",
          "decorators": []
        },
        {
          "name": "_get_simulated_websocket_count",
          "line": 236,
          "args": [
            "self"
          ],
          "docstring": "Get simulated WebSocket connection count.",
          "decorators": []
        },
        {
          "name": "_check_performance_thresholds",
          "line": 242,
          "args": [
            "self",
            "snapshot"
          ],
          "docstring": "Check performance metrics against thresholds and generate alerts.",
          "decorators": []
        },
        {
          "name": "_log_performance_summary",
          "line": 303,
          "args": [
            "self"
          ],
          "docstring": "Log periodic performance summary.",
          "decorators": []
        },
        {
          "name": "get_current_performance",
          "line": 322,
          "args": [
            "self"
          ],
          "docstring": "Get the most recent performance snapshot.",
          "decorators": []
        },
        {
          "name": "get_performance_history",
          "line": 328,
          "args": [
            "self",
            "minutes"
          ],
          "docstring": "Get performance history for specified time period.",
          "decorators": []
        },
        {
          "name": "get_pending_alerts",
          "line": 336,
          "args": [
            "self"
          ],
          "docstring": "Get all pending performance alerts.",
          "decorators": []
        },
        {
          "name": "acknowledge_alert",
          "line": 346,
          "args": [
            "self",
            "alert_id"
          ],
          "docstring": "Acknowledge a performance alert.",
          "decorators": []
        },
        {
          "name": "set_threshold",
          "line": 351,
          "args": [
            "self",
            "metric_name",
            "threshold_type",
            "value"
          ],
          "docstring": "Set custom performance threshold.",
          "decorators": []
        },
        {
          "name": "generate_performance_report",
          "line": 361,
          "args": [
            "self",
            "hours"
          ],
          "docstring": "Generate comprehensive performance report for specified time period.",
          "decorators": []
        },
        {
          "name": "_calculate_trend",
          "line": 423,
          "args": [
            "self",
            "values"
          ],
          "docstring": "Calculate performance trend (increasing/decreasing/stable).",
          "decorators": []
        },
        {
          "name": "export_performance_data",
          "line": 444,
          "args": [
            "self",
            "filepath",
            "format_type"
          ],
          "docstring": "Export performance data to file.",
          "decorators": []
        },
        {
          "name": "test_performance_monitor_initialization",
          "line": 482,
          "args": [
            "self"
          ],
          "docstring": "Test performance monitor initialization and configuration.",
          "decorators": []
        },
        {
          "name": "test_performance_snapshot_collection",
          "line": 502,
          "args": [
            "self"
          ],
          "docstring": "Test performance snapshot data collection.",
          "decorators": []
        },
        {
          "name": "test_performance_monitoring_lifecycle",
          "line": 523,
          "args": [
            "self"
          ],
          "docstring": "Test performance monitoring start/stop lifecycle.",
          "decorators": []
        },
        {
          "name": "test_performance_alerting",
          "line": 552,
          "args": [
            "self"
          ],
          "docstring": "Test performance threshold alerting system.",
          "decorators": []
        },
        {
          "name": "test_performance_reporting",
          "line": 595,
          "args": [
            "self"
          ],
          "docstring": "Test performance report generation.",
          "decorators": []
        },
        {
          "name": "test_performance_data_export",
          "line": 638,
          "args": [
            "self",
            "tmp_path"
          ],
          "docstring": "Test performance data export functionality.",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 26,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "calculate_stats",
          "line": 379,
          "args": [
            "values"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PerformanceSnapshot",
          "line": 40,
          "bases": [],
          "docstring": "Real-time performance snapshot data.",
          "methods": []
        },
        {
          "name": "PerformanceAlert",
          "line": 54,
          "bases": [],
          "docstring": "Performance alert data structure.",
          "methods": []
        },
        {
          "name": "RealTimePerformanceMonitor",
          "line": 67,
          "bases": [],
          "docstring": "Real-time performance monitoring system.",
          "methods": [
            {
              "name": "__init__",
              "line": 70,
              "args": [
                "self",
                "monitoring_interval"
              ],
              "docstring": "Initialize real-time performance monitor."
            },
            {
              "name": "_default_thresholds",
              "line": 81,
              "args": [
                "self"
              ],
              "docstring": "Define default performance thresholds for alerting."
            },
            {
              "name": "start_monitoring",
              "line": 92,
              "args": [
                "self"
              ],
              "docstring": "Start real-time performance monitoring."
            },
            {
              "name": "stop_monitoring",
              "line": 112,
              "args": [
                "self"
              ],
              "docstring": "Stop real-time performance monitoring."
            },
            {
              "name": "_monitoring_loop",
              "line": 125,
              "args": [
                "self"
              ],
              "docstring": "Main monitoring loop for collecting performance snapshots."
            },
            {
              "name": "_collect_performance_snapshot",
              "line": 156,
              "args": [
                "self"
              ],
              "docstring": "Collect current performance metrics snapshot."
            },
            {
              "name": "_get_simulated_connections",
              "line": 204,
              "args": [
                "self"
              ],
              "docstring": "Get simulated connection count (replace with real server state)."
            },
            {
              "name": "_get_simulated_response_time",
              "line": 212,
              "args": [
                "self"
              ],
              "docstring": "Get simulated response time (replace with real metrics)."
            },
            {
              "name": "_get_simulated_error_rate",
              "line": 220,
              "args": [
                "self"
              ],
              "docstring": "Get simulated error rate (replace with real metrics)."
            },
            {
              "name": "_get_simulated_context_size",
              "line": 228,
              "args": [
                "self"
              ],
              "docstring": "Get simulated context size (replace with real server state)."
            },
            {
              "name": "_get_simulated_websocket_count",
              "line": 236,
              "args": [
                "self"
              ],
              "docstring": "Get simulated WebSocket connection count."
            },
            {
              "name": "_check_performance_thresholds",
              "line": 242,
              "args": [
                "self",
                "snapshot"
              ],
              "docstring": "Check performance metrics against thresholds and generate alerts."
            },
            {
              "name": "_log_performance_summary",
              "line": 303,
              "args": [
                "self"
              ],
              "docstring": "Log periodic performance summary."
            },
            {
              "name": "get_current_performance",
              "line": 322,
              "args": [
                "self"
              ],
              "docstring": "Get the most recent performance snapshot."
            },
            {
              "name": "get_performance_history",
              "line": 328,
              "args": [
                "self",
                "minutes"
              ],
              "docstring": "Get performance history for specified time period."
            },
            {
              "name": "get_pending_alerts",
              "line": 336,
              "args": [
                "self"
              ],
              "docstring": "Get all pending performance alerts."
            },
            {
              "name": "acknowledge_alert",
              "line": 346,
              "args": [
                "self",
                "alert_id"
              ],
              "docstring": "Acknowledge a performance alert."
            },
            {
              "name": "set_threshold",
              "line": 351,
              "args": [
                "self",
                "metric_name",
                "threshold_type",
                "value"
              ],
              "docstring": "Set custom performance threshold."
            },
            {
              "name": "generate_performance_report",
              "line": 361,
              "args": [
                "self",
                "hours"
              ],
              "docstring": "Generate comprehensive performance report for specified time period."
            },
            {
              "name": "_calculate_trend",
              "line": 423,
              "args": [
                "self",
                "values"
              ],
              "docstring": "Calculate performance trend (increasing/decreasing/stable)."
            },
            {
              "name": "export_performance_data",
              "line": 444,
              "args": [
                "self",
                "filepath",
                "format_type"
              ],
              "docstring": "Export performance data to file."
            }
          ]
        },
        {
          "name": "TestRealTimePerformanceMonitoring",
          "line": 479,
          "bases": [],
          "docstring": "Test class for real-time performance monitoring functionality.",
          "methods": [
            {
              "name": "test_performance_monitor_initialization",
              "line": 482,
              "args": [
                "self"
              ],
              "docstring": "Test performance monitor initialization and configuration."
            },
            {
              "name": "test_performance_snapshot_collection",
              "line": 502,
              "args": [
                "self"
              ],
              "docstring": "Test performance snapshot data collection."
            },
            {
              "name": "test_performance_monitoring_lifecycle",
              "line": 523,
              "args": [
                "self"
              ],
              "docstring": "Test performance monitoring start/stop lifecycle."
            },
            {
              "name": "test_performance_alerting",
              "line": 552,
              "args": [
                "self"
              ],
              "docstring": "Test performance threshold alerting system."
            },
            {
              "name": "test_performance_reporting",
              "line": 595,
              "args": [
                "self"
              ],
              "docstring": "Test performance report generation."
            },
            {
              "name": "test_performance_data_export",
              "line": 638,
              "args": [
                "self",
                "tmp_path"
              ],
              "docstring": "Test performance data export functionality."
            }
          ]
        }
      ],
      "lines_of_code": 591,
      "complexity_score": 80,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "c818f77dd512630feb97e94e481c0e32",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_scriptlet_framework.py": {
      "name": "tests/test_scriptlet_framework.py",
      "path": "tests/test_scriptlet_framework.py",
      "component_type": "test",
      "description": "Comprehensive test suite for the unified IAF0 Scriptlet Framework.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        "docs/api_reference.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "test_default_configuration",
        "test_configuration_validation",
        "test_result_creation",
        "test_result_serialization",
        "setup_method",
        "test_scriptlet_registration",
        "test_registry_listing",
        "test_registry_error_handling",
        "test_scriptlet_initialization",
        "test_scriptlet_execution_lifecycle",
        "test_scriptlet_validation",
        "test_scriptlet_error_handling",
        "test_scriptlet_thread_safety",
        "test_compute_scriptlet",
        "test_io_scriptlet",
        "test_execution_context_basic",
        "test_dependency_resolution_error",
        "test_resource_monitor_decorator",
        "test_debug_trace_decorator",
        "test_retry_decorator",
        "test_scriptlet_compliance_validation",
        "test_factory_functions",
        "test_complete_workflow_integration",
        "worker_thread",
        "test_function",
        "test_function",
        "failing_function",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "__init__",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "run",
        "TestScriptletConfig",
        "TestScriptletResult",
        "TestScriptletRegistry",
        "TestBaseScriptlet",
        "TestSpecializedScriptlets",
        "TestExecutionContext",
        "TestDecorators",
        "TestUtilityFunctions",
        "TestIntegration",
        "TestComputeScriptlet",
        "ComputeTest",
        "IOTest",
        "TestScriptlet",
        "TestScriptlet",
        "TestScriptlet",
        "FailingScriptlet",
        "ThreadTestScriptlet",
        "TestComputeScriptlet",
        "TestIOScriptlet",
        "ScriptletA",
        "ScriptletB",
        "TestScriptlet",
        "CompliantScriptlet",
        "NonCompliantScriptlet",
        "TestComputeScriptlet",
        "TestIOScriptlet",
        "DataLoaderScriptlet",
        "ProcessorScriptlet",
        "OutputScriptlet",
        "InvalidClass"
      ],
      "imports": [
        "os",
        "json",
        "time",
        "threading",
        "pytest",
        "unittest.mock",
        "typing",
        "scriptlets.framework",
        "orchestrator.context.context"
      ],
      "functions": [
        {
          "name": "test_default_configuration",
          "line": 43,
          "args": [
            "self"
          ],
          "docstring": "Test that default configuration is valid and complete.",
          "decorators": []
        },
        {
          "name": "test_configuration_validation",
          "line": 57,
          "args": [
            "self"
          ],
          "docstring": "Test configuration validation catches invalid settings.",
          "decorators": []
        },
        {
          "name": "test_result_creation",
          "line": 89,
          "args": [
            "self"
          ],
          "docstring": "Test ScriptletResult creation and serialization.",
          "decorators": []
        },
        {
          "name": "test_result_serialization",
          "line": 106,
          "args": [
            "self"
          ],
          "docstring": "Test ScriptletResult to_dict serialization.",
          "decorators": []
        },
        {
          "name": "setup_method",
          "line": 135,
          "args": [
            "self"
          ],
          "docstring": "Set up test environment before each test.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_registration",
          "line": 140,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet registration and retrieval.",
          "decorators": []
        },
        {
          "name": "test_registry_listing",
          "line": 158,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet listing and filtering.",
          "decorators": []
        },
        {
          "name": "test_registry_error_handling",
          "line": 183,
          "args": [
            "self"
          ],
          "docstring": "Test registry error handling for invalid operations.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_initialization",
          "line": 200,
          "args": [
            "self"
          ],
          "docstring": "Test BaseScriptlet initialization and configuration.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_execution_lifecycle",
          "line": 218,
          "args": [
            "self"
          ],
          "docstring": "Test complete scriptlet execution lifecycle.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_validation",
          "line": 244,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet parameter validation.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_error_handling",
          "line": 273,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet error handling and recovery.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_thread_safety",
          "line": 291,
          "args": [
            "self"
          ],
          "docstring": "Test thread-safe scriptlet execution.",
          "decorators": []
        },
        {
          "name": "test_compute_scriptlet",
          "line": 336,
          "args": [
            "self"
          ],
          "docstring": "Test ComputeScriptlet specialization.",
          "decorators": []
        },
        {
          "name": "test_io_scriptlet",
          "line": 362,
          "args": [
            "self"
          ],
          "docstring": "Test IOScriptlet specialization.",
          "decorators": []
        },
        {
          "name": "test_execution_context_basic",
          "line": 394,
          "args": [
            "self"
          ],
          "docstring": "Test basic ExecutionContext operations.",
          "decorators": []
        },
        {
          "name": "test_dependency_resolution_error",
          "line": 430,
          "args": [
            "self"
          ],
          "docstring": "Test dependency resolution error handling.",
          "decorators": []
        },
        {
          "name": "test_resource_monitor_decorator",
          "line": 450,
          "args": [
            "self"
          ],
          "docstring": "Test resource monitoring decorator.",
          "decorators": []
        },
        {
          "name": "test_debug_trace_decorator",
          "line": 475,
          "args": [
            "self"
          ],
          "docstring": "Test debug tracing decorator.",
          "decorators": []
        },
        {
          "name": "test_retry_decorator",
          "line": 495,
          "args": [
            "self"
          ],
          "docstring": "Test retry decorator functionality.",
          "decorators": []
        },
        {
          "name": "test_scriptlet_compliance_validation",
          "line": 523,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet compliance validation.",
          "decorators": []
        },
        {
          "name": "test_factory_functions",
          "line": 546,
          "args": [
            "self"
          ],
          "docstring": "Test scriptlet factory functions.",
          "decorators": []
        },
        {
          "name": "test_complete_workflow_integration",
          "line": 583,
          "args": [
            "self"
          ],
          "docstring": "Test complete workflow with multiple scriptlets.",
          "decorators": []
        },
        {
          "name": "worker_thread",
          "line": 308,
          "args": [
            "thread_id"
          ],
          "docstring": "Worker function for thread testing.",
          "decorators": []
        },
        {
          "name": "test_function",
          "line": 454,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Test function for resource monitoring.",
          "decorators": [
            "resource_monitor"
          ]
        },
        {
          "name": "test_function",
          "line": 479,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Test function for debug tracing.",
          "decorators": [
            "debug_trace"
          ]
        },
        {
          "name": "failing_function",
          "line": 500,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "Function that fails first two times.",
          "decorators": [
            "retry_on_failure"
          ]
        },
        {
          "name": "run",
          "line": 147,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 163,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 168,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 207,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 222,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 253,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 277,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 295,
          "args": [
            "self",
            "config"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 299,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 340,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 366,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 400,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 405,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 435,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 528,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 535,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 551,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 567,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 589,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 597,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        },
        {
          "name": "run",
          "line": 610,
          "args": [
            "self",
            "context",
            "params"
          ],
          "docstring": "",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TestScriptletConfig",
          "line": 40,
          "bases": [],
          "docstring": "Test suite for ScriptletConfig functionality.",
          "methods": [
            {
              "name": "test_default_configuration",
              "line": 43,
              "args": [
                "self"
              ],
              "docstring": "Test that default configuration is valid and complete."
            },
            {
              "name": "test_configuration_validation",
              "line": 57,
              "args": [
                "self"
              ],
              "docstring": "Test configuration validation catches invalid settings."
            }
          ]
        },
        {
          "name": "TestScriptletResult",
          "line": 86,
          "bases": [],
          "docstring": "Test suite for ScriptletResult functionality.",
          "methods": [
            {
              "name": "test_result_creation",
              "line": 89,
              "args": [
                "self"
              ],
              "docstring": "Test ScriptletResult creation and serialization."
            },
            {
              "name": "test_result_serialization",
              "line": 106,
              "args": [
                "self"
              ],
              "docstring": "Test ScriptletResult to_dict serialization."
            }
          ]
        },
        {
          "name": "TestScriptletRegistry",
          "line": 132,
          "bases": [],
          "docstring": "Test suite for scriptlet registry functionality.",
          "methods": [
            {
              "name": "setup_method",
              "line": 135,
              "args": [
                "self"
              ],
              "docstring": "Set up test environment before each test."
            },
            {
              "name": "test_scriptlet_registration",
              "line": 140,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet registration and retrieval."
            },
            {
              "name": "test_registry_listing",
              "line": 158,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet listing and filtering."
            },
            {
              "name": "test_registry_error_handling",
              "line": 183,
              "args": [
                "self"
              ],
              "docstring": "Test registry error handling for invalid operations."
            }
          ]
        },
        {
          "name": "TestBaseScriptlet",
          "line": 197,
          "bases": [],
          "docstring": "Test suite for BaseScriptlet functionality.",
          "methods": [
            {
              "name": "test_scriptlet_initialization",
              "line": 200,
              "args": [
                "self"
              ],
              "docstring": "Test BaseScriptlet initialization and configuration."
            },
            {
              "name": "test_scriptlet_execution_lifecycle",
              "line": 218,
              "args": [
                "self"
              ],
              "docstring": "Test complete scriptlet execution lifecycle."
            },
            {
              "name": "test_scriptlet_validation",
              "line": 244,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet parameter validation."
            },
            {
              "name": "test_scriptlet_error_handling",
              "line": 273,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet error handling and recovery."
            },
            {
              "name": "test_scriptlet_thread_safety",
              "line": 291,
              "args": [
                "self"
              ],
              "docstring": "Test thread-safe scriptlet execution."
            }
          ]
        },
        {
          "name": "TestSpecializedScriptlets",
          "line": 333,
          "bases": [],
          "docstring": "Test suite for specialized scriptlet classes.",
          "methods": [
            {
              "name": "test_compute_scriptlet",
              "line": 336,
              "args": [
                "self"
              ],
              "docstring": "Test ComputeScriptlet specialization."
            },
            {
              "name": "test_io_scriptlet",
              "line": 362,
              "args": [
                "self"
              ],
              "docstring": "Test IOScriptlet specialization."
            }
          ]
        },
        {
          "name": "TestExecutionContext",
          "line": 391,
          "bases": [],
          "docstring": "Test suite for ExecutionContext functionality.",
          "methods": [
            {
              "name": "test_execution_context_basic",
              "line": 394,
              "args": [
                "self"
              ],
              "docstring": "Test basic ExecutionContext operations."
            },
            {
              "name": "test_dependency_resolution_error",
              "line": 430,
              "args": [
                "self"
              ],
              "docstring": "Test dependency resolution error handling."
            }
          ]
        },
        {
          "name": "TestDecorators",
          "line": 447,
          "bases": [],
          "docstring": "Test suite for decorator functionality.",
          "methods": [
            {
              "name": "test_resource_monitor_decorator",
              "line": 450,
              "args": [
                "self"
              ],
              "docstring": "Test resource monitoring decorator."
            },
            {
              "name": "test_debug_trace_decorator",
              "line": 475,
              "args": [
                "self"
              ],
              "docstring": "Test debug tracing decorator."
            },
            {
              "name": "test_retry_decorator",
              "line": 495,
              "args": [
                "self"
              ],
              "docstring": "Test retry decorator functionality."
            }
          ]
        },
        {
          "name": "TestUtilityFunctions",
          "line": 520,
          "bases": [],
          "docstring": "Test suite for utility functions.",
          "methods": [
            {
              "name": "test_scriptlet_compliance_validation",
              "line": 523,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet compliance validation."
            },
            {
              "name": "test_factory_functions",
              "line": 546,
              "args": [
                "self"
              ],
              "docstring": "Test scriptlet factory functions."
            }
          ]
        },
        {
          "name": "TestIntegration",
          "line": 580,
          "bases": [],
          "docstring": "Integration tests for complete framework functionality.",
          "methods": [
            {
              "name": "test_complete_workflow_integration",
              "line": 583,
              "args": [
                "self"
              ],
              "docstring": "Test complete workflow with multiple scriptlets."
            }
          ]
        },
        {
          "name": "TestComputeScriptlet",
          "line": 144,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "Test scriptlet for registration testing.",
          "methods": [
            {
              "name": "run",
              "line": 147,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ComputeTest",
          "line": 162,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 163,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "IOTest",
          "line": 167,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 168,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestScriptlet",
          "line": 206,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 207,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestScriptlet",
          "line": 221,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 222,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestScriptlet",
          "line": 252,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 253,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "FailingScriptlet",
          "line": 276,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 277,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ThreadTestScriptlet",
          "line": 294,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "__init__",
              "line": 295,
              "args": [
                "self",
                "config"
              ],
              "docstring": ""
            },
            {
              "name": "run",
              "line": 299,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestComputeScriptlet",
          "line": 339,
          "bases": [
            "ComputeScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 340,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestIOScriptlet",
          "line": 365,
          "bases": [
            "IOScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 366,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ScriptletA",
          "line": 399,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 400,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ScriptletB",
          "line": 404,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 405,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestScriptlet",
          "line": 434,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 435,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "CompliantScriptlet",
          "line": 527,
          "bases": [
            "BaseScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 528,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "NonCompliantScriptlet",
          "line": 534,
          "bases": [],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 535,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestComputeScriptlet",
          "line": 550,
          "bases": [
            "ComputeScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 551,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "TestIOScriptlet",
          "line": 566,
          "bases": [
            "IOScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 567,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "DataLoaderScriptlet",
          "line": 588,
          "bases": [
            "IOScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 589,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "ProcessorScriptlet",
          "line": 596,
          "bases": [
            "ComputeScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 597,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "OutputScriptlet",
          "line": 609,
          "bases": [
            "IOScriptlet"
          ],
          "docstring": "",
          "methods": [
            {
              "name": "run",
              "line": 610,
              "args": [
                "self",
                "context",
                "params"
              ],
              "docstring": ""
            }
          ]
        },
        {
          "name": "InvalidClass",
          "line": 193,
          "bases": [],
          "docstring": "",
          "methods": []
        }
      ],
      "lines_of_code": 530,
      "complexity_score": 118,
      "last_modified": "2025-10-04T14:19:09.599127",
      "checksum": "b6002038d4c06cef5189912df2b05266",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "tests/test_simple_validation.py": {
      "name": "tests/test_simple_validation.py",
      "path": "tests/test_simple_validation.py",
      "component_type": "test",
      "description": "Simple validation test to ensure test infrastructure works correctly.",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "test_basic_functionality",
        "test_json_operations",
        "test_path_operations",
        "test_mock_context"
      ],
      "imports": [
        "pytest",
        "json",
        "pathlib"
      ],
      "functions": [
        {
          "name": "test_basic_functionality",
          "line": 11,
          "args": [],
          "docstring": "Basic test to validate pytest framework is working.",
          "decorators": []
        },
        {
          "name": "test_json_operations",
          "line": 16,
          "args": [],
          "docstring": "Test JSON serialization operations.",
          "decorators": []
        },
        {
          "name": "test_path_operations",
          "line": 24,
          "args": [],
          "docstring": "Test Path operations for cross-platform compatibility.",
          "decorators": []
        },
        {
          "name": "test_mock_context",
          "line": 30,
          "args": [],
          "docstring": "Test mock context creation.",
          "decorators": []
        }
      ],
      "classes": [],
      "lines_of_code": 33,
      "complexity_score": 5,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "63af92571ebb319d0024482c6cb854fc",
      "framework_role": "testing_framework",
      "stability": "stable"
    },
    "tests/test_visualization_system.py": {
      "name": "tests/test_visualization_system.py",
      "path": "tests/test_visualization_system.py",
      "component_type": "test",
      "description": "Comprehensive Visualization System Test for Framework0",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "orchestrator/dependency_graph.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        "orchestrator/dependency_graph.py"
      ],
      "exports": [
        "create_sample_recipe_data",
        "create_sample_execution_timeline",
        "create_sample_flow_graph",
        "simulate_performance_metrics",
        "test_enhanced_visualizer",
        "test_execution_flow_visualizer",
        "test_performance_dashboard",
        "test_timeline_visualizer",
        "main"
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "random",
        "datetime",
        "pathlib",
        "typing",
        "orchestrator.context.context",
        "src.core.logger",
        "src.visualization",
        "src.visualization.enhanced_visualizer",
        "src.visualization.execution_flow",
        "src.visualization.performance_dashboard",
        "src.visualization.timeline_visualizer",
        "random",
        "math",
        "random",
        "traceback"
      ],
      "functions": [
        {
          "name": "create_sample_recipe_data",
          "line": 37,
          "args": [],
          "docstring": "Create comprehensive sample recipe data for visualization testing.",
          "decorators": []
        },
        {
          "name": "create_sample_execution_timeline",
          "line": 179,
          "args": [],
          "docstring": "Create sample timeline events for visualization testing.",
          "decorators": []
        },
        {
          "name": "create_sample_flow_graph",
          "line": 259,
          "args": [],
          "docstring": "Create sample flow nodes and edges for dependency visualization.",
          "decorators": []
        },
        {
          "name": "simulate_performance_metrics",
          "line": 387,
          "args": [
            "dashboard",
            "duration_minutes"
          ],
          "docstring": "Simulate realistic performance metrics for dashboard testing.",
          "decorators": []
        },
        {
          "name": "test_enhanced_visualizer",
          "line": 475,
          "args": [],
          "docstring": "Test the Enhanced Visualizer with recipe execution graphs.",
          "decorators": []
        },
        {
          "name": "test_execution_flow_visualizer",
          "line": 544,
          "args": [],
          "docstring": "Test the Execution Flow Visualizer with timeline creation.",
          "decorators": []
        },
        {
          "name": "test_performance_dashboard",
          "line": 631,
          "args": [],
          "docstring": "Test the Performance Dashboard with real-time metrics.",
          "decorators": []
        },
        {
          "name": "test_timeline_visualizer",
          "line": 685,
          "args": [],
          "docstring": "Test the Timeline Visualizer with Gantt charts and flow diagrams.",
          "decorators": []
        },
        {
          "name": "main",
          "line": 737,
          "args": [],
          "docstring": "Run comprehensive visualization system tests.",
          "decorators": []
        }
      ],
      "classes": [],
      "lines_of_code": 706,
      "complexity_score": 26,
      "last_modified": "2025-10-04T18:17:50.507299",
      "checksum": "6dda0b24dd53b21b794eeeebc456b71b",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_websocket_performance.py": {
      "name": "tests/test_websocket_performance.py",
      "path": "tests/test_websocket_performance.py",
      "component_type": "test",
      "description": "WebSocket Performance Testing for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/orchestrator/memory_bus.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/memory_bus.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "__init__",
        "generate_websocket_performance_report",
        "websocket_tester",
        "temp_report_directory",
        "get_logger",
        "WebSocketMetrics",
        "WebSocketTestResult",
        "AsyncWebSocketTester",
        "TestWebSocketPerformance"
      ],
      "imports": [
        "asyncio",
        "time",
        "json",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "pytest",
        "websockets",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "__init__",
          "line": 79,
          "args": [
            "self",
            "server_host",
            "server_port"
          ],
          "docstring": "Initialize async WebSocket tester with server configuration.",
          "decorators": []
        },
        {
          "name": "generate_websocket_performance_report",
          "line": 538,
          "args": [
            "self",
            "test_results"
          ],
          "docstring": "Generate comprehensive WebSocket performance report.",
          "decorators": []
        },
        {
          "name": "websocket_tester",
          "line": 642,
          "args": [
            "self"
          ],
          "docstring": "Create WebSocket tester instance for testing.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "temp_report_directory",
          "line": 647,
          "args": [
            "self",
            "tmp_path"
          ],
          "docstring": "Create temporary directory for test reports.",
          "decorators": [
            "fixture"
          ]
        },
        {
          "name": "get_logger",
          "line": 31,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Fallback logger implementation.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WebSocketMetrics",
          "line": 46,
          "bases": [],
          "docstring": "Data class for storing WebSocket performance metrics.",
          "methods": []
        },
        {
          "name": "WebSocketTestResult",
          "line": 61,
          "bases": [],
          "docstring": "Data class for storing WebSocket test execution results.",
          "methods": []
        },
        {
          "name": "AsyncWebSocketTester",
          "line": 76,
          "bases": [],
          "docstring": "Async WebSocket testing framework for performance validation.",
          "methods": [
            {
              "name": "__init__",
              "line": 79,
              "args": [
                "self",
                "server_host",
                "server_port"
              ],
              "docstring": "Initialize async WebSocket tester with server configuration."
            },
            {
              "name": "generate_websocket_performance_report",
              "line": 538,
              "args": [
                "self",
                "test_results"
              ],
              "docstring": "Generate comprehensive WebSocket performance report."
            }
          ]
        },
        {
          "name": "TestWebSocketPerformance",
          "line": 638,
          "bases": [],
          "docstring": "Test class for WebSocket performance validation with async support.",
          "methods": [
            {
              "name": "websocket_tester",
              "line": 642,
              "args": [
                "self"
              ],
              "docstring": "Create WebSocket tester instance for testing."
            },
            {
              "name": "temp_report_directory",
              "line": 647,
              "args": [
                "self",
                "tmp_path"
              ],
              "docstring": "Create temporary directory for test reports."
            }
          ]
        }
      ],
      "lines_of_code": 789,
      "complexity_score": 53,
      "last_modified": "2025-10-05T00:19:37.541815",
      "checksum": "b94b4c964e0d7b58f5e557a91572d402",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tests/test_workspace_cleaner_v2.py": {
      "name": "tests/test_workspace_cleaner_v2.py",
      "path": "tests/test_workspace_cleaner_v2.py",
      "component_type": "test",
      "description": "Comprehensive Test Suite for WorkspaceCleanerV2",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        "docs/api_reference.md",
        "docs/method_index.md",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "_create_test_files",
        "run_test",
        "test_cleaner_initialization",
        "test_add_standard_rules",
        "test_configuration_save_load",
        "test_dry_run_execution",
        "test_context_integration",
        "test_error_handling",
        "test_backup_system",
        "run_all_tests",
        "cleanup",
        "WorkspaceCleanerTester"
      ],
      "imports": [
        "os",
        "sys",
        "tempfile",
        "shutil",
        "json",
        "time",
        "pathlib",
        "typing",
        "tools.workspace_cleaner_v2",
        "orchestrator.context.context",
        "src.core.logger"
      ],
      "functions": [
        {
          "name": "main",
          "line": 578,
          "args": [],
          "docstring": "Main function to execute comprehensive WorkspaceCleanerV2 testing.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 45,
          "args": [
            "self"
          ],
          "docstring": "Initialize test environment with temporary workspace.",
          "decorators": []
        },
        {
          "name": "_create_test_files",
          "line": 58,
          "args": [
            "self"
          ],
          "docstring": "Create comprehensive test file structure for validation.",
          "decorators": []
        },
        {
          "name": "run_test",
          "line": 143,
          "args": [
            "self",
            "test_name",
            "test_func"
          ],
          "docstring": "Execute individual test with error handling and result tracking.\n\nArgs:\n    test_name: Human-readable name of the test\n    test_func: Function to execute for the test\n    \nReturns:\n    bool: True if test passed, False if failed",
          "decorators": []
        },
        {
          "name": "test_cleaner_initialization",
          "line": 174,
          "args": [
            "self"
          ],
          "docstring": "Test WorkspaceCleanerV2 initialization and basic functionality.",
          "decorators": []
        },
        {
          "name": "test_add_standard_rules",
          "line": 198,
          "args": [
            "self"
          ],
          "docstring": "Test adding and validating standard cleanup rules.",
          "decorators": []
        },
        {
          "name": "test_configuration_save_load",
          "line": 234,
          "args": [
            "self"
          ],
          "docstring": "Test JSON configuration system for saving and loading rules.",
          "decorators": []
        },
        {
          "name": "test_dry_run_execution",
          "line": 305,
          "args": [
            "self"
          ],
          "docstring": "Test dry-run mode execution without making actual changes.",
          "decorators": []
        },
        {
          "name": "test_context_integration",
          "line": 346,
          "args": [
            "self"
          ],
          "docstring": "Test comprehensive Context system integration and state tracking.",
          "decorators": []
        },
        {
          "name": "test_error_handling",
          "line": 414,
          "args": [
            "self"
          ],
          "docstring": "Test comprehensive error handling and recovery mechanisms.",
          "decorators": []
        },
        {
          "name": "test_backup_system",
          "line": 478,
          "args": [
            "self"
          ],
          "docstring": "Test backup creation and management system.",
          "decorators": []
        },
        {
          "name": "run_all_tests",
          "line": 509,
          "args": [
            "self"
          ],
          "docstring": "Execute complete test suite and return comprehensive results.\n\nReturns:\n    Dict[str, Any]: Complete test results and statistics",
          "decorators": []
        },
        {
          "name": "cleanup",
          "line": 568,
          "args": [
            "self"
          ],
          "docstring": "Clean up test environment and temporary files.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceCleanerTester",
          "line": 36,
          "bases": [],
          "docstring": "Comprehensive test suite for WorkspaceCleanerV2 functionality.\n\nThis class provides systematic testing of all cleaner features including\ninitialization, rule management, configuration system, execution, and\nintegration with the Framework0 Context system.",
          "methods": [
            {
              "name": "__init__",
              "line": 45,
              "args": [
                "self"
              ],
              "docstring": "Initialize test environment with temporary workspace."
            },
            {
              "name": "_create_test_files",
              "line": 58,
              "args": [
                "self"
              ],
              "docstring": "Create comprehensive test file structure for validation."
            },
            {
              "name": "run_test",
              "line": 143,
              "args": [
                "self",
                "test_name",
                "test_func"
              ],
              "docstring": "Execute individual test with error handling and result tracking.\n\nArgs:\n    test_name: Human-readable name of the test\n    test_func: Function to execute for the test\n    \nReturns:\n    bool: True if test passed, False if failed"
            },
            {
              "name": "test_cleaner_initialization",
              "line": 174,
              "args": [
                "self"
              ],
              "docstring": "Test WorkspaceCleanerV2 initialization and basic functionality."
            },
            {
              "name": "test_add_standard_rules",
              "line": 198,
              "args": [
                "self"
              ],
              "docstring": "Test adding and validating standard cleanup rules."
            },
            {
              "name": "test_configuration_save_load",
              "line": 234,
              "args": [
                "self"
              ],
              "docstring": "Test JSON configuration system for saving and loading rules."
            },
            {
              "name": "test_dry_run_execution",
              "line": 305,
              "args": [
                "self"
              ],
              "docstring": "Test dry-run mode execution without making actual changes."
            },
            {
              "name": "test_context_integration",
              "line": 346,
              "args": [
                "self"
              ],
              "docstring": "Test comprehensive Context system integration and state tracking."
            },
            {
              "name": "test_error_handling",
              "line": 414,
              "args": [
                "self"
              ],
              "docstring": "Test comprehensive error handling and recovery mechanisms."
            },
            {
              "name": "test_backup_system",
              "line": 478,
              "args": [
                "self"
              ],
              "docstring": "Test backup creation and management system."
            },
            {
              "name": "run_all_tests",
              "line": 509,
              "args": [
                "self"
              ],
              "docstring": "Execute complete test suite and return comprehensive results.\n\nReturns:\n    Dict[str, Any]: Complete test results and statistics"
            },
            {
              "name": "cleanup",
              "line": 568,
              "args": [
                "self"
              ],
              "docstring": "Clean up test environment and temporary files."
            }
          ]
        }
      ],
      "lines_of_code": 480,
      "complexity_score": 44,
      "last_modified": "2025-10-04T17:23:07.901833",
      "checksum": "b327d8751e5d042ca2a77a015e400772",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tools/__init__.py": {
      "name": "tools/__init__.py",
      "path": "tools/__init__.py",
      "component_type": "development_tool",
      "description": "Framework0 package initializer",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1,
      "complexity_score": 0,
      "last_modified": "2025-10-05T00:50:45.703975",
      "checksum": "6f3997601d8c1c43c83608fe7ff049fe",
      "framework_role": "module_initialization",
      "stability": "stable"
    },
    "tools/baseline_documentation_updater.py": {
      "name": "tools/baseline_documentation_updater.py",
      "path": "tools/baseline_documentation_updater.py",
      "component_type": "development_tool",
      "description": "Baseline Documentation Updater for Framework0 Workspace",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
        ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
        ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
        ".restructuring_backup/README.md",
        ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/configs/server_config.py",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/delta_compression.md",
        ".restructuring_backup/docs/deployment_guide.md",
        ".restructuring_backup/docs/getting_started.md",
        ".restructuring_backup/docs/integration_patterns.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/docs/troubleshooting.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/examples/README.md",
        ".restructuring_backup/examples/basic_usage.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/examples/integration_demo.py",
        ".restructuring_backup/examples/shell_demo.sh",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/orchestrator/__init__.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/__init__.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/orchestrator/recipe_parser.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/orchestrator/runner.py",
        ".restructuring_backup/pyproject.toml",
        ".restructuring_backup/requirements.txt",
        ".restructuring_backup/scriptlets/__init__.py",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/setup.cfg",
        ".restructuring_backup/src/__init__.py",
        ".restructuring_backup/src/analysis/__init__.py",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/src/analysis/registry.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/core/__init__.py",
        ".restructuring_backup/src/core/logger.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/__init__.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/start_server.sh",
        ".restructuring_backup/test_delta_module.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        ".restructuring_backup/test_enhanced_recipe_parser.py",
        ".restructuring_backup/test_execution_report.md",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/test_visualization_system.py",
        ".restructuring_backup/test_workspace_cleaner_v2.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_integration.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_basic_performance.py",
        ".restructuring_backup/tests/test_core_functionality.py",
        ".restructuring_backup/tests/test_delta_compression.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        ".restructuring_backup/tests/test_integration.py",
        ".restructuring_backup/tests/test_performance_load.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tests/test_simple_validation.py",
        ".restructuring_backup/tests/test_websocket_performance.py",
        ".restructuring_backup/tools/baseline_documentation_updater.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        ".restructuring_backup/tools/context.sh",
        ".restructuring_backup/tools/documentation_updater.py",
        ".restructuring_backup/tools/phased_restructurer.py",
        ".restructuring_backup/tools/workspace_cleaner.py",
        ".restructuring_backup/tools/workspace_cleaner_clean.py",
        ".restructuring_backup/tools/workspace_cleaner_v2.py",
        ".restructuring_backup/tools/workspace_restructurer.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/delta_compression.md",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "docs/test_execution_report.md",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/enhanced_recipe_parser.py",
        "orchestrator/persistence/core.py",
        "orchestrator/recipe_parser.py",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        "requirements.txt",
        "src/analysis/registry.py",
        "src/core/__init__.py",
        "src/core/logger.py",
        "tests/test_core_functionality.py",
        "tests/test_delta_compression.py",
        "tests/test_enhanced_recipe_parser.py",
        "tests/test_realtime_performance.py",
        "tools/phased_restructurer.py",
        "tools/post_restructure_validator.py",
        "tools/workspace_restructurer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "_detect_framework_version",
        "update_readme_baseline_framework",
        "_generate_consolidated_readme",
        "_generate_readme_header",
        "_generate_readme_overview",
        "_generate_readme_status",
        "_generate_readme_architecture",
        "_generate_readme_features",
        "_generate_readme_getting_started",
        "_generate_readme_documentation_links",
        "_generate_readme_contributing",
        "_generate_readme_footer",
        "save_updated_documentation",
        "DocumentationSection",
        "BaselineDocumentationStructure",
        "BaselineDocumentationUpdater"
      ],
      "imports": [
        "os",
        "json",
        "re",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "main",
          "line": 529,
          "args": [],
          "docstring": "Main function to execute baseline documentation updates.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 69,
          "args": [
            "self",
            "workspace_root"
          ],
          "docstring": "Initialize baseline documentation updater with workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory",
          "decorators": []
        },
        {
          "name": "_detect_framework_version",
          "line": 97,
          "args": [
            "self"
          ],
          "docstring": "Detect current framework version from project configuration files.\n\nReturns:\n    str: Framework version string or default baseline version",
          "decorators": []
        },
        {
          "name": "update_readme_baseline_framework",
          "line": 137,
          "args": [
            "self"
          ],
          "docstring": "Update README.md to reflect current baseline framework status.\n\nReturns:\n    str: Updated README.md content",
          "decorators": []
        },
        {
          "name": "_generate_consolidated_readme",
          "line": 174,
          "args": [
            "self",
            "baseline_data"
          ],
          "docstring": "Generate consolidated README content with baseline framework information.\n\nArgs:\n    baseline_data: Baseline framework analysis data\n    \nReturns:\n    str: Complete consolidated README content",
          "decorators": []
        },
        {
          "name": "_generate_readme_header",
          "line": 212,
          "args": [
            "self",
            "version"
          ],
          "docstring": "Generate README header section with baseline framework branding.",
          "decorators": []
        },
        {
          "name": "_generate_readme_overview",
          "line": 222,
          "args": [
            "self"
          ],
          "docstring": "Generate framework overview section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_status",
          "line": 237,
          "args": [
            "self",
            "total_components",
            "component_types",
            "total_loc",
            "avg_complexity",
            "architecture_layers"
          ],
          "docstring": "Generate current baseline framework status section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_architecture",
          "line": 293,
          "args": [
            "self",
            "baseline_data"
          ],
          "docstring": "Generate architecture section with framework structure.",
          "decorators": []
        },
        {
          "name": "_generate_readme_features",
          "line": 340,
          "args": [
            "self"
          ],
          "docstring": "Generate key features section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_getting_started",
          "line": 374,
          "args": [
            "self"
          ],
          "docstring": "Generate getting started section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_documentation_links",
          "line": 433,
          "args": [
            "self"
          ],
          "docstring": "Generate documentation links section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_contributing",
          "line": 458,
          "args": [
            "self"
          ],
          "docstring": "Generate contributing section.",
          "decorators": []
        },
        {
          "name": "_generate_readme_footer",
          "line": 494,
          "args": [
            "self"
          ],
          "docstring": "Generate README footer section.",
          "decorators": []
        },
        {
          "name": "save_updated_documentation",
          "line": 509,
          "args": [
            "self"
          ],
          "docstring": "Save all updated documentation files to workspace.\n\nReturns:\n    Dict[str, str]: Map of updated files to their new content",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DocumentationSection",
          "line": 34,
          "bases": [],
          "docstring": "Data class representing a documentation section with metadata and content.",
          "methods": []
        },
        {
          "name": "BaselineDocumentationStructure",
          "line": 50,
          "bases": [],
          "docstring": "Complete baseline documentation structure with all sections and metadata.",
          "methods": []
        },
        {
          "name": "BaselineDocumentationUpdater",
          "line": 64,
          "bases": [],
          "docstring": "Comprehensive documentation updater for Framework0 baseline framework.",
          "methods": [
            {
              "name": "__init__",
              "line": 69,
              "args": [
                "self",
                "workspace_root"
              ],
              "docstring": "Initialize baseline documentation updater with workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory"
            },
            {
              "name": "_detect_framework_version",
              "line": 97,
              "args": [
                "self"
              ],
              "docstring": "Detect current framework version from project configuration files.\n\nReturns:\n    str: Framework version string or default baseline version"
            },
            {
              "name": "update_readme_baseline_framework",
              "line": 137,
              "args": [
                "self"
              ],
              "docstring": "Update README.md to reflect current baseline framework status.\n\nReturns:\n    str: Updated README.md content"
            },
            {
              "name": "_generate_consolidated_readme",
              "line": 174,
              "args": [
                "self",
                "baseline_data"
              ],
              "docstring": "Generate consolidated README content with baseline framework information.\n\nArgs:\n    baseline_data: Baseline framework analysis data\n    \nReturns:\n    str: Complete consolidated README content"
            },
            {
              "name": "_generate_readme_header",
              "line": 212,
              "args": [
                "self",
                "version"
              ],
              "docstring": "Generate README header section with baseline framework branding."
            },
            {
              "name": "_generate_readme_overview",
              "line": 222,
              "args": [
                "self"
              ],
              "docstring": "Generate framework overview section."
            },
            {
              "name": "_generate_readme_status",
              "line": 237,
              "args": [
                "self",
                "total_components",
                "component_types",
                "total_loc",
                "avg_complexity",
                "architecture_layers"
              ],
              "docstring": "Generate current baseline framework status section."
            },
            {
              "name": "_generate_readme_architecture",
              "line": 293,
              "args": [
                "self",
                "baseline_data"
              ],
              "docstring": "Generate architecture section with framework structure."
            },
            {
              "name": "_generate_readme_features",
              "line": 340,
              "args": [
                "self"
              ],
              "docstring": "Generate key features section."
            },
            {
              "name": "_generate_readme_getting_started",
              "line": 374,
              "args": [
                "self"
              ],
              "docstring": "Generate getting started section."
            },
            {
              "name": "_generate_readme_documentation_links",
              "line": 433,
              "args": [
                "self"
              ],
              "docstring": "Generate documentation links section."
            },
            {
              "name": "_generate_readme_contributing",
              "line": 458,
              "args": [
                "self"
              ],
              "docstring": "Generate contributing section."
            },
            {
              "name": "_generate_readme_footer",
              "line": 494,
              "args": [
                "self"
              ],
              "docstring": "Generate README footer section."
            },
            {
              "name": "save_updated_documentation",
              "line": 509,
              "args": [
                "self"
              ],
              "docstring": "Save all updated documentation files to workspace.\n\nReturns:\n    Dict[str, str]: Map of updated files to their new content"
            }
          ]
        }
      ],
      "lines_of_code": 455,
      "complexity_score": 42,
      "last_modified": "2025-10-05T00:38:11.105652",
      "checksum": "cab9bae93d5d29eff5886cd3dfe4f830",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tools/baseline_framework_analyzer.py": {
      "name": "tools/baseline_framework_analyzer.py",
      "path": "tools/baseline_framework_analyzer.py",
      "component_type": "development_tool",
      "description": "Baseline Framework Analyzer for Framework0 Workspace",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
        ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
        ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
        ".restructuring_backup/README.md",
        ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/configs/server_config.py",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/delta_compression.md",
        ".restructuring_backup/docs/deployment_guide.md",
        ".restructuring_backup/docs/getting_started.md",
        ".restructuring_backup/docs/integration_patterns.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/docs/troubleshooting.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/examples/README.md",
        ".restructuring_backup/examples/basic_usage.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/examples/integration_demo.py",
        ".restructuring_backup/examples/shell_demo.sh",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/orchestrator/__init__.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/__init__.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/orchestrator/recipe_parser.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/orchestrator/runner.py",
        ".restructuring_backup/pyproject.toml",
        ".restructuring_backup/requirements.txt",
        ".restructuring_backup/scriptlets/__init__.py",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/setup.cfg",
        ".restructuring_backup/src/__init__.py",
        ".restructuring_backup/src/analysis/__init__.py",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/src/analysis/registry.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/core/__init__.py",
        ".restructuring_backup/src/core/logger.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/__init__.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/start_server.sh",
        ".restructuring_backup/test_delta_module.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        ".restructuring_backup/test_enhanced_recipe_parser.py",
        ".restructuring_backup/test_execution_report.md",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/test_visualization_system.py",
        ".restructuring_backup/test_workspace_cleaner_v2.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_integration.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_basic_performance.py",
        ".restructuring_backup/tests/test_core_functionality.py",
        ".restructuring_backup/tests/test_delta_compression.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        ".restructuring_backup/tests/test_integration.py",
        ".restructuring_backup/tests/test_performance_load.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tests/test_simple_validation.py",
        ".restructuring_backup/tests/test_websocket_performance.py",
        ".restructuring_backup/tools/baseline_documentation_updater.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        ".restructuring_backup/tools/context.sh",
        ".restructuring_backup/tools/documentation_updater.py",
        ".restructuring_backup/tools/phased_restructurer.py",
        ".restructuring_backup/tools/workspace_cleaner.py",
        ".restructuring_backup/tools/workspace_cleaner_clean.py",
        ".restructuring_backup/tools/workspace_cleaner_v2.py",
        ".restructuring_backup/tools/workspace_restructurer.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/delta_compression.md",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "docs/test_execution_report.md",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/enhanced_recipe_parser.py",
        "orchestrator/persistence/core.py",
        "orchestrator/recipe_parser.py",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        "requirements.txt",
        "src/analysis/registry.py",
        "src/core/__init__.py",
        "src/core/logger.py",
        "tests/test_core_functionality.py",
        "tests/test_delta_compression.py",
        "tests/test_enhanced_recipe_parser.py",
        "tests/test_realtime_performance.py",
        "tools/phased_restructurer.py",
        "tools/post_restructure_validator.py",
        "tools/workspace_restructurer.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "_detect_framework_version",
        "analyze_workspace",
        "_discover_framework_files",
        "_analyze_component",
        "_classify_component_type",
        "_extract_component_description",
        "_determine_framework_role",
        "_analyze_python_component",
        "_analyze_yaml_component",
        "_analyze_shell_component",
        "_analyze_markdown_component",
        "_get_decorator_name",
        "_get_base_name",
        "_calculate_python_complexity",
        "_build_architecture_layers",
        "_analyze_dependencies",
        "_identify_patterns_and_extensions",
        "_generate_analysis_metrics",
        "save_baseline_documentation",
        "BaselineComponent",
        "BaselineFramework",
        "BaselineFrameworkAnalyzer"
      ],
      "imports": [
        "os",
        "ast",
        "json",
        "yaml",
        "re",
        "sys",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "subprocess",
        "hashlib",
        "src.core.logger",
        "logging",
        "tomli"
      ],
      "functions": [
        {
          "name": "main",
          "line": 795,
          "args": [],
          "docstring": "Main function to execute baseline framework analysis and documentation.\n\nThis function orchestrates the complete baseline analysis process,\ngenerates comprehensive documentation, and saves results for future use.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 94,
          "args": [
            "self",
            "workspace_root"
          ],
          "docstring": "Initialize baseline framework analyzer with workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory",
          "decorators": []
        },
        {
          "name": "_detect_framework_version",
          "line": 136,
          "args": [
            "self"
          ],
          "docstring": "Detect current framework version from multiple sources.\n\nReturns:\n    str: Framework version string or default if not found",
          "decorators": []
        },
        {
          "name": "analyze_workspace",
          "line": 185,
          "args": [
            "self"
          ],
          "docstring": "Perform comprehensive workspace analysis to establish baseline framework.\n\nReturns:\n    BaselineFramework: Complete baseline framework structure",
          "decorators": []
        },
        {
          "name": "_discover_framework_files",
          "line": 227,
          "args": [
            "self"
          ],
          "docstring": "Discover all framework-relevant files in the workspace.\n\nReturns:\n    List[Path]: List of paths to framework files",
          "decorators": []
        },
        {
          "name": "_analyze_component",
          "line": 278,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Analyze individual component file and extract metadata.\n\nArgs:\n    file_path: Path to component file for analysis\n    \nReturns:\n    Optional[BaselineComponent]: Component analysis result or None if failed",
          "decorators": []
        },
        {
          "name": "_classify_component_type",
          "line": 329,
          "args": [
            "self",
            "file_path",
            "content"
          ],
          "docstring": "Classify component type based on path and content analysis.\n\nArgs:\n    file_path: Path to component file\n    content: File content for analysis\n    \nReturns:\n    str: Component type classification",
          "decorators": []
        },
        {
          "name": "_extract_component_description",
          "line": 368,
          "args": [
            "self",
            "content"
          ],
          "docstring": "Extract component description from file content.\n\nArgs:\n    content: File content to analyze\n    \nReturns:\n    str: Extracted description or default message",
          "decorators": []
        },
        {
          "name": "_determine_framework_role",
          "line": 401,
          "args": [
            "self",
            "file_path",
            "content"
          ],
          "docstring": "Determine the specific role of component within Framework0.\n\nArgs:\n    file_path: Path to component file\n    content: File content for analysis\n    \nReturns:\n    str: Framework role classification",
          "decorators": []
        },
        {
          "name": "_analyze_python_component",
          "line": 444,
          "args": [
            "self",
            "component",
            "content"
          ],
          "docstring": "Perform detailed analysis of Python component.\n\nArgs:\n    component: Component to analyze and update\n    content: Python source code content",
          "decorators": []
        },
        {
          "name": "_analyze_yaml_component",
          "line": 510,
          "args": [
            "self",
            "component",
            "content"
          ],
          "docstring": "Analyze YAML configuration component.\n\nArgs:\n    component: Component to analyze and update\n    content: YAML content",
          "decorators": []
        },
        {
          "name": "_analyze_shell_component",
          "line": 525,
          "args": [
            "self",
            "component",
            "content"
          ],
          "docstring": "Analyze shell script component.\n\nArgs:\n    component: Component to analyze and update\n    content: Shell script content",
          "decorators": []
        },
        {
          "name": "_analyze_markdown_component",
          "line": 546,
          "args": [
            "self",
            "component",
            "content"
          ],
          "docstring": "Analyze markdown documentation component.\n\nArgs:\n    component: Component to analyze and update\n    content: Markdown content",
          "decorators": []
        },
        {
          "name": "_get_decorator_name",
          "line": 562,
          "args": [
            "self",
            "decorator"
          ],
          "docstring": "Extract decorator name from AST node.\n\nArgs:\n    decorator: AST decorator node\n    \nReturns:\n    str: Decorator name",
          "decorators": []
        },
        {
          "name": "_get_base_name",
          "line": 581,
          "args": [
            "self",
            "base"
          ],
          "docstring": "Extract base class name from AST node.\n\nArgs:\n    base: AST base class node\n    \nReturns:\n    str: Base class name",
          "decorators": []
        },
        {
          "name": "_calculate_python_complexity",
          "line": 597,
          "args": [
            "self",
            "tree"
          ],
          "docstring": "Calculate complexity score for Python code.\n\nArgs:\n    tree: Python AST tree\n    \nReturns:\n    int: Complexity score",
          "decorators": []
        },
        {
          "name": "_build_architecture_layers",
          "line": 622,
          "args": [
            "self"
          ],
          "docstring": "Build architectural layer organization from components.",
          "decorators": []
        },
        {
          "name": "_analyze_dependencies",
          "line": 633,
          "args": [
            "self"
          ],
          "docstring": "Analyze component dependencies and build dependency graph.",
          "decorators": []
        },
        {
          "name": "_identify_patterns_and_extensions",
          "line": 650,
          "args": [
            "self"
          ],
          "docstring": "Identify framework patterns and extension points.",
          "decorators": []
        },
        {
          "name": "_generate_analysis_metrics",
          "line": 685,
          "args": [
            "self"
          ],
          "docstring": "Generate comprehensive analysis metrics.",
          "decorators": []
        },
        {
          "name": "save_baseline_documentation",
          "line": 738,
          "args": [
            "self",
            "output_path"
          ],
          "docstring": "Save comprehensive baseline framework documentation.\n\nArgs:\n    output_path: Optional custom output path\n    \nReturns:\n    Path: Path to saved documentation file",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BaselineComponent",
          "line": 39,
          "bases": [],
          "docstring": "Data class representing a baseline framework component with metadata.\n\nThis class encapsulates all information about a framework component\nincluding its location, purpose, dependencies, and analysis metrics.",
          "methods": []
        },
        {
          "name": "BaselineFramework",
          "line": 64,
          "bases": [],
          "docstring": "Complete baseline framework structure with all components and metadata.\n\nThis class represents the entire Framework0 baseline including all\ncomponents, their relationships, and comprehensive analysis results.",
          "methods": []
        },
        {
          "name": "BaselineFrameworkAnalyzer",
          "line": 85,
          "bases": [],
          "docstring": "Comprehensive analyzer for establishing Framework0 baseline documentation.\n\nThis class performs deep analysis of the workspace structure, components,\nand relationships to create authoritative baseline documentation that\nserves as the foundation for all framework operations and extensions.",
          "methods": [
            {
              "name": "__init__",
              "line": 94,
              "args": [
                "self",
                "workspace_root"
              ],
              "docstring": "Initialize baseline framework analyzer with workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory"
            },
            {
              "name": "_detect_framework_version",
              "line": 136,
              "args": [
                "self"
              ],
              "docstring": "Detect current framework version from multiple sources.\n\nReturns:\n    str: Framework version string or default if not found"
            },
            {
              "name": "analyze_workspace",
              "line": 185,
              "args": [
                "self"
              ],
              "docstring": "Perform comprehensive workspace analysis to establish baseline framework.\n\nReturns:\n    BaselineFramework: Complete baseline framework structure"
            },
            {
              "name": "_discover_framework_files",
              "line": 227,
              "args": [
                "self"
              ],
              "docstring": "Discover all framework-relevant files in the workspace.\n\nReturns:\n    List[Path]: List of paths to framework files"
            },
            {
              "name": "_analyze_component",
              "line": 278,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Analyze individual component file and extract metadata.\n\nArgs:\n    file_path: Path to component file for analysis\n    \nReturns:\n    Optional[BaselineComponent]: Component analysis result or None if failed"
            },
            {
              "name": "_classify_component_type",
              "line": 329,
              "args": [
                "self",
                "file_path",
                "content"
              ],
              "docstring": "Classify component type based on path and content analysis.\n\nArgs:\n    file_path: Path to component file\n    content: File content for analysis\n    \nReturns:\n    str: Component type classification"
            },
            {
              "name": "_extract_component_description",
              "line": 368,
              "args": [
                "self",
                "content"
              ],
              "docstring": "Extract component description from file content.\n\nArgs:\n    content: File content to analyze\n    \nReturns:\n    str: Extracted description or default message"
            },
            {
              "name": "_determine_framework_role",
              "line": 401,
              "args": [
                "self",
                "file_path",
                "content"
              ],
              "docstring": "Determine the specific role of component within Framework0.\n\nArgs:\n    file_path: Path to component file\n    content: File content for analysis\n    \nReturns:\n    str: Framework role classification"
            },
            {
              "name": "_analyze_python_component",
              "line": 444,
              "args": [
                "self",
                "component",
                "content"
              ],
              "docstring": "Perform detailed analysis of Python component.\n\nArgs:\n    component: Component to analyze and update\n    content: Python source code content"
            },
            {
              "name": "_analyze_yaml_component",
              "line": 510,
              "args": [
                "self",
                "component",
                "content"
              ],
              "docstring": "Analyze YAML configuration component.\n\nArgs:\n    component: Component to analyze and update\n    content: YAML content"
            },
            {
              "name": "_analyze_shell_component",
              "line": 525,
              "args": [
                "self",
                "component",
                "content"
              ],
              "docstring": "Analyze shell script component.\n\nArgs:\n    component: Component to analyze and update\n    content: Shell script content"
            },
            {
              "name": "_analyze_markdown_component",
              "line": 546,
              "args": [
                "self",
                "component",
                "content"
              ],
              "docstring": "Analyze markdown documentation component.\n\nArgs:\n    component: Component to analyze and update\n    content: Markdown content"
            },
            {
              "name": "_get_decorator_name",
              "line": 562,
              "args": [
                "self",
                "decorator"
              ],
              "docstring": "Extract decorator name from AST node.\n\nArgs:\n    decorator: AST decorator node\n    \nReturns:\n    str: Decorator name"
            },
            {
              "name": "_get_base_name",
              "line": 581,
              "args": [
                "self",
                "base"
              ],
              "docstring": "Extract base class name from AST node.\n\nArgs:\n    base: AST base class node\n    \nReturns:\n    str: Base class name"
            },
            {
              "name": "_calculate_python_complexity",
              "line": 597,
              "args": [
                "self",
                "tree"
              ],
              "docstring": "Calculate complexity score for Python code.\n\nArgs:\n    tree: Python AST tree\n    \nReturns:\n    int: Complexity score"
            },
            {
              "name": "_build_architecture_layers",
              "line": 622,
              "args": [
                "self"
              ],
              "docstring": "Build architectural layer organization from components."
            },
            {
              "name": "_analyze_dependencies",
              "line": 633,
              "args": [
                "self"
              ],
              "docstring": "Analyze component dependencies and build dependency graph."
            },
            {
              "name": "_identify_patterns_and_extensions",
              "line": 650,
              "args": [
                "self"
              ],
              "docstring": "Identify framework patterns and extension points."
            },
            {
              "name": "_generate_analysis_metrics",
              "line": 685,
              "args": [
                "self"
              ],
              "docstring": "Generate comprehensive analysis metrics."
            },
            {
              "name": "save_baseline_documentation",
              "line": 738,
              "args": [
                "self",
                "output_path"
              ],
              "docstring": "Save comprehensive baseline framework documentation.\n\nArgs:\n    output_path: Optional custom output path\n    \nReturns:\n    Path: Path to saved documentation file"
            }
          ]
        }
      ],
      "lines_of_code": 703,
      "complexity_score": 136,
      "last_modified": "2025-10-05T00:34:20.983492",
      "checksum": "4bc2a0444606406eea77e0cc5e80cce3",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "tools/context.sh": {
      "name": "tools/context.sh",
      "path": "tools/context.sh",
      "component_type": "development_tool",
      "description": "Context Server Shell Client - Cross-Platform Context Management",
      "dependencies": [],
      "exports": [
        "print_help",
        "log",
        "check_dependencies",
        "validate_server_connection",
        "parse_json_value",
        "format_output",
        "make_request",
        "cmd_get",
        "cmd_set",
        "cmd_list",
        "cmd_history",
        "cmd_status",
        "cmd_monitor",
        "cmd_clear",
        "main"
      ],
      "imports": [],
      "functions": [
        {
          "name": "print_help",
          "line": 37,
          "type": "shell_function"
        },
        {
          "name": "log",
          "line": 112,
          "type": "shell_function"
        },
        {
          "name": "check_dependencies",
          "line": 139,
          "type": "shell_function"
        },
        {
          "name": "validate_server_connection",
          "line": 163,
          "type": "shell_function"
        },
        {
          "name": "parse_json_value",
          "line": 178,
          "type": "shell_function"
        },
        {
          "name": "format_output",
          "line": 201,
          "type": "shell_function"
        },
        {
          "name": "make_request",
          "line": 238,
          "type": "shell_function"
        },
        {
          "name": "cmd_get",
          "line": 288,
          "type": "shell_function"
        },
        {
          "name": "cmd_set",
          "line": 310,
          "type": "shell_function"
        },
        {
          "name": "cmd_list",
          "line": 353,
          "type": "shell_function"
        },
        {
          "name": "cmd_history",
          "line": 379,
          "type": "shell_function"
        },
        {
          "name": "cmd_status",
          "line": 393,
          "type": "shell_function"
        },
        {
          "name": "cmd_monitor",
          "line": 431,
          "type": "shell_function"
        },
        {
          "name": "cmd_clear",
          "line": 469,
          "type": "shell_function"
        },
        {
          "name": "main",
          "line": 485,
          "type": "shell_function"
        }
      ],
      "classes": [],
      "lines_of_code": 516,
      "complexity_score": 0,
      "last_modified": "2025-10-04T23:19:13.986420",
      "checksum": "3809320a77d960e7e84f968a05d18067",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tools/documentation_updater.py": {
      "name": "tools/documentation_updater.py",
      "path": "tools/documentation_updater.py",
      "component_type": "development_tool",
      "description": "Documentation Updater for Framework0 Enhanced Context Server.",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
        ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
        ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
        ".restructuring_backup/README.md",
        ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/configs/server_config.py",
        ".restructuring_backup/debug_enhanced_memory_bus.py",
        ".restructuring_backup/docker-compose.yml",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/delta_compression.md",
        ".restructuring_backup/docs/deployment_guide.md",
        ".restructuring_backup/docs/getting_started.md",
        ".restructuring_backup/docs/integration_patterns.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/docs/troubleshooting.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/examples/README.md",
        ".restructuring_backup/examples/basic_usage.py",
        ".restructuring_backup/examples/dash_demo.py",
        ".restructuring_backup/examples/integration_demo.py",
        ".restructuring_backup/examples/shell_demo.sh",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/orchestrator/__init__.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
        ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
        ".restructuring_backup/orchestrator/context/__init__.py",
        ".restructuring_backup/orchestrator/context/context.py",
        ".restructuring_backup/orchestrator/context/db_adapter.py",
        ".restructuring_backup/orchestrator/context/memory_bus.py",
        ".restructuring_backup/orchestrator/context/persistence.py",
        ".restructuring_backup/orchestrator/context/version_control.py",
        ".restructuring_backup/orchestrator/dependency_graph.py",
        ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
        ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
        ".restructuring_backup/orchestrator/memory_bus.py",
        ".restructuring_backup/orchestrator/persistence.py",
        ".restructuring_backup/orchestrator/persistence/__init__.py",
        ".restructuring_backup/orchestrator/persistence/cache.py",
        ".restructuring_backup/orchestrator/persistence/core.py",
        ".restructuring_backup/orchestrator/persistence/delta.py",
        ".restructuring_backup/orchestrator/persistence/enhanced.py",
        ".restructuring_backup/orchestrator/persistence/snapshot.py",
        ".restructuring_backup/orchestrator/recipe_parser.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/orchestrator/runner.py",
        ".restructuring_backup/pyproject.toml",
        ".restructuring_backup/requirements.txt",
        ".restructuring_backup/scriptlets/__init__.py",
        ".restructuring_backup/scriptlets/framework.py",
        ".restructuring_backup/server/enhanced_context_server.py",
        ".restructuring_backup/setup.cfg",
        ".restructuring_backup/src/__init__.py",
        ".restructuring_backup/src/analysis/__init__.py",
        ".restructuring_backup/src/analysis/components.py",
        ".restructuring_backup/src/analysis/enhanced_components.py",
        ".restructuring_backup/src/analysis/enhanced_framework.py",
        ".restructuring_backup/src/analysis/framework.py",
        ".restructuring_backup/src/analysis/registry.py",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/src/core/__init__.py",
        ".restructuring_backup/src/core/logger.py",
        ".restructuring_backup/src/dash_integration.py",
        ".restructuring_backup/src/visualization/__init__.py",
        ".restructuring_backup/src/visualization/enhanced_visualizer.py",
        ".restructuring_backup/src/visualization/execution_flow.py",
        ".restructuring_backup/src/visualization/performance_dashboard.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/start_server.sh",
        ".restructuring_backup/test_delta_module.py",
        ".restructuring_backup/test_enhanced_analysis_framework.py",
        ".restructuring_backup/test_enhanced_memory_bus.py",
        ".restructuring_backup/test_enhanced_recipe_parser.py",
        ".restructuring_backup/test_execution_report.md",
        ".restructuring_backup/test_framework0_integration.py",
        ".restructuring_backup/test_visualization_system.py",
        ".restructuring_backup/test_workspace_cleaner_v2.py",
        ".restructuring_backup/tests/test_analysis_framework.py",
        ".restructuring_backup/tests/test_async_integration.py",
        ".restructuring_backup/tests/test_async_load_framework.py",
        ".restructuring_backup/tests/test_basic_performance.py",
        ".restructuring_backup/tests/test_core_functionality.py",
        ".restructuring_backup/tests/test_delta_compression.py",
        ".restructuring_backup/tests/test_enhanced_context_server.py",
        ".restructuring_backup/tests/test_enhanced_persistence.py",
        ".restructuring_backup/tests/test_integration.py",
        ".restructuring_backup/tests/test_performance_load.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        ".restructuring_backup/tests/test_scriptlet_framework.py",
        ".restructuring_backup/tests/test_simple_validation.py",
        ".restructuring_backup/tests/test_websocket_performance.py",
        ".restructuring_backup/tools/baseline_documentation_updater.py",
        ".restructuring_backup/tools/baseline_framework_analyzer.py",
        ".restructuring_backup/tools/context.sh",
        ".restructuring_backup/tools/documentation_updater.py",
        ".restructuring_backup/tools/phased_restructurer.py",
        ".restructuring_backup/tools/workspace_cleaner.py",
        ".restructuring_backup/tools/workspace_cleaner_clean.py",
        ".restructuring_backup/tools/workspace_cleaner_v2.py",
        ".restructuring_backup/tools/workspace_restructurer.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/delta_compression.md",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "docs/test_execution_report.md",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/enhanced_recipe_parser.py",
        "orchestrator/persistence/core.py",
        "orchestrator/recipe_parser.py",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        "requirements.txt",
        "src/analysis/registry.py",
        "src/core/__init__.py",
        "src/core/logger.py",
        "tests/test_core_functionality.py",
        "tests/test_delta_compression.py",
        "tests/test_enhanced_recipe_parser.py",
        "tests/test_realtime_performance.py",
        "tools/phased_restructurer.py",
        "tools/post_restructure_validator.py",
        "tools/workspace_restructurer.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "scan_python_modules",
        "_extract_module_info",
        "_extract_class_info",
        "_extract_function_info",
        "_extract_import_info",
        "generate_api_reference",
        "_generate_module_documentation",
        "_generate_class_documentation",
        "_generate_function_documentation",
        "generate_method_index",
        "_build_signature",
        "generate_deployment_guide",
        "generate_integration_patterns",
        "generate_troubleshooting_guide",
        "update_all_documentation",
        "get_logger",
        "DocumentationGenerator"
      ],
      "imports": [
        "os",
        "json",
        "ast",
        "inspect",
        "importlib.util",
        "pathlib",
        "typing",
        "datetime",
        "re",
        "src.core.logger",
        "sys",
        "logging"
      ],
      "functions": [
        {
          "name": "main",
          "line": 1001,
          "args": [],
          "docstring": "Main entry point for documentation updater.\nHandles command-line execution and error reporting.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 49,
          "args": [
            "self",
            "project_root",
            "debug"
          ],
          "docstring": "Initialize documentation generator with project configuration.\n\nArgs:\n    project_root: Root directory of the project to document\n    debug: Enable debug logging for detailed operation traces",
          "decorators": []
        },
        {
          "name": "scan_python_modules",
          "line": 76,
          "args": [
            "self"
          ],
          "docstring": "Scan all Python modules in the project for documentation extraction.\n\nReturns:\n    Dictionary mapping module paths to extracted documentation data",
          "decorators": []
        },
        {
          "name": "_extract_module_info",
          "line": 114,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Extract documentation information from a single Python module.\n\nArgs:\n    file_path: Path to the Python file to analyze\n    \nReturns:\n    Dictionary containing module documentation data or None on error",
          "decorators": []
        },
        {
          "name": "_extract_class_info",
          "line": 162,
          "args": [
            "self",
            "node"
          ],
          "docstring": "Extract documentation information from a class definition.\n\nArgs:\n    node: AST node representing a class definition\n    \nReturns:\n    Dictionary containing class documentation data",
          "decorators": []
        },
        {
          "name": "_extract_function_info",
          "line": 203,
          "args": [
            "self",
            "node",
            "is_method"
          ],
          "docstring": "Extract documentation information from a function definition.\n\nArgs:\n    node: AST node representing a function definition\n    is_method: Whether this function is a class method\n    \nReturns:\n    Dictionary containing function documentation data",
          "decorators": []
        },
        {
          "name": "_extract_import_info",
          "line": 257,
          "args": [
            "self",
            "node"
          ],
          "docstring": "Extract import information from import statements.\n\nArgs:\n    node: AST node representing an import statement\n    \nReturns:\n    List of import information dictionaries",
          "decorators": []
        },
        {
          "name": "generate_api_reference",
          "line": 292,
          "args": [
            "self",
            "modules"
          ],
          "docstring": "Generate comprehensive API reference documentation.\n\nArgs:\n    modules: Dictionary of extracted module information\n    \nReturns:\n    Markdown-formatted API reference documentation",
          "decorators": []
        },
        {
          "name": "_generate_module_documentation",
          "line": 328,
          "args": [
            "self",
            "doc",
            "module_path",
            "module_info"
          ],
          "docstring": "Generate documentation for a single module.\n\nArgs:\n    doc: List to append documentation lines to\n    module_path: Path to the module being documented\n    module_info: Extracted module information dictionary",
          "decorators": []
        },
        {
          "name": "_generate_class_documentation",
          "line": 363,
          "args": [
            "self",
            "doc",
            "class_info"
          ],
          "docstring": "Generate documentation for a single class.\n\nArgs:\n    doc: List to append documentation lines to\n    class_info: Extracted class information dictionary",
          "decorators": []
        },
        {
          "name": "_generate_function_documentation",
          "line": 397,
          "args": [
            "self",
            "doc",
            "func_info",
            "is_class_method"
          ],
          "docstring": "Generate documentation for a single function or method.\n\nArgs:\n    doc: List to append documentation lines to\n    func_info: Extracted function information dictionary\n    is_class_method: Whether this function is a class method",
          "decorators": []
        },
        {
          "name": "generate_method_index",
          "line": 439,
          "args": [
            "self",
            "modules"
          ],
          "docstring": "Generate alphabetical index of all methods and functions.\n\nArgs:\n    modules: Dictionary of extracted module information\n    \nReturns:\n    Markdown-formatted method index documentation",
          "decorators": []
        },
        {
          "name": "_build_signature",
          "line": 515,
          "args": [
            "self",
            "func_info"
          ],
          "docstring": "Build function signature string from function information.\n\nArgs:\n    func_info: Function information dictionary\n    \nReturns:\n    String representation of function signature",
          "decorators": []
        },
        {
          "name": "generate_deployment_guide",
          "line": 545,
          "args": [
            "self"
          ],
          "docstring": "Generate deployment and configuration guide.\n\nReturns:\n    Markdown-formatted deployment guide documentation",
          "decorators": []
        },
        {
          "name": "generate_integration_patterns",
          "line": 631,
          "args": [
            "self"
          ],
          "docstring": "Generate client integration examples and patterns.\n\nReturns:\n    Markdown-formatted integration patterns documentation",
          "decorators": []
        },
        {
          "name": "generate_troubleshooting_guide",
          "line": 778,
          "args": [
            "self"
          ],
          "docstring": "Generate troubleshooting and FAQ guide.\n\nReturns:\n    Markdown-formatted troubleshooting guide",
          "decorators": []
        },
        {
          "name": "update_all_documentation",
          "line": 936,
          "args": [
            "self"
          ],
          "docstring": "Generate and update all documentation files.\n\nReturns:\n    Dictionary mapping documentation types to their file paths",
          "decorators": []
        },
        {
          "name": "get_logger",
          "line": 26,
          "args": [
            "name",
            "debug"
          ],
          "docstring": "Fallback logger when core logger unavailable.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DocumentationGenerator",
          "line": 41,
          "bases": [],
          "docstring": "Advanced documentation generator for Framework0 projects.\n\nAutomatically extracts docstrings, type hints, and method signatures\nto create comprehensive API documentation and usage guides.",
          "methods": [
            {
              "name": "__init__",
              "line": 49,
              "args": [
                "self",
                "project_root",
                "debug"
              ],
              "docstring": "Initialize documentation generator with project configuration.\n\nArgs:\n    project_root: Root directory of the project to document\n    debug: Enable debug logging for detailed operation traces"
            },
            {
              "name": "scan_python_modules",
              "line": 76,
              "args": [
                "self"
              ],
              "docstring": "Scan all Python modules in the project for documentation extraction.\n\nReturns:\n    Dictionary mapping module paths to extracted documentation data"
            },
            {
              "name": "_extract_module_info",
              "line": 114,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Extract documentation information from a single Python module.\n\nArgs:\n    file_path: Path to the Python file to analyze\n    \nReturns:\n    Dictionary containing module documentation data or None on error"
            },
            {
              "name": "_extract_class_info",
              "line": 162,
              "args": [
                "self",
                "node"
              ],
              "docstring": "Extract documentation information from a class definition.\n\nArgs:\n    node: AST node representing a class definition\n    \nReturns:\n    Dictionary containing class documentation data"
            },
            {
              "name": "_extract_function_info",
              "line": 203,
              "args": [
                "self",
                "node",
                "is_method"
              ],
              "docstring": "Extract documentation information from a function definition.\n\nArgs:\n    node: AST node representing a function definition\n    is_method: Whether this function is a class method\n    \nReturns:\n    Dictionary containing function documentation data"
            },
            {
              "name": "_extract_import_info",
              "line": 257,
              "args": [
                "self",
                "node"
              ],
              "docstring": "Extract import information from import statements.\n\nArgs:\n    node: AST node representing an import statement\n    \nReturns:\n    List of import information dictionaries"
            },
            {
              "name": "generate_api_reference",
              "line": 292,
              "args": [
                "self",
                "modules"
              ],
              "docstring": "Generate comprehensive API reference documentation.\n\nArgs:\n    modules: Dictionary of extracted module information\n    \nReturns:\n    Markdown-formatted API reference documentation"
            },
            {
              "name": "_generate_module_documentation",
              "line": 328,
              "args": [
                "self",
                "doc",
                "module_path",
                "module_info"
              ],
              "docstring": "Generate documentation for a single module.\n\nArgs:\n    doc: List to append documentation lines to\n    module_path: Path to the module being documented\n    module_info: Extracted module information dictionary"
            },
            {
              "name": "_generate_class_documentation",
              "line": 363,
              "args": [
                "self",
                "doc",
                "class_info"
              ],
              "docstring": "Generate documentation for a single class.\n\nArgs:\n    doc: List to append documentation lines to\n    class_info: Extracted class information dictionary"
            },
            {
              "name": "_generate_function_documentation",
              "line": 397,
              "args": [
                "self",
                "doc",
                "func_info",
                "is_class_method"
              ],
              "docstring": "Generate documentation for a single function or method.\n\nArgs:\n    doc: List to append documentation lines to\n    func_info: Extracted function information dictionary\n    is_class_method: Whether this function is a class method"
            },
            {
              "name": "generate_method_index",
              "line": 439,
              "args": [
                "self",
                "modules"
              ],
              "docstring": "Generate alphabetical index of all methods and functions.\n\nArgs:\n    modules: Dictionary of extracted module information\n    \nReturns:\n    Markdown-formatted method index documentation"
            },
            {
              "name": "_build_signature",
              "line": 515,
              "args": [
                "self",
                "func_info"
              ],
              "docstring": "Build function signature string from function information.\n\nArgs:\n    func_info: Function information dictionary\n    \nReturns:\n    String representation of function signature"
            },
            {
              "name": "generate_deployment_guide",
              "line": 545,
              "args": [
                "self"
              ],
              "docstring": "Generate deployment and configuration guide.\n\nReturns:\n    Markdown-formatted deployment guide documentation"
            },
            {
              "name": "generate_integration_patterns",
              "line": 631,
              "args": [
                "self"
              ],
              "docstring": "Generate client integration examples and patterns.\n\nReturns:\n    Markdown-formatted integration patterns documentation"
            },
            {
              "name": "generate_troubleshooting_guide",
              "line": 778,
              "args": [
                "self"
              ],
              "docstring": "Generate troubleshooting and FAQ guide.\n\nReturns:\n    Markdown-formatted troubleshooting guide"
            },
            {
              "name": "update_all_documentation",
              "line": 936,
              "args": [
                "self"
              ],
              "docstring": "Generate and update all documentation files.\n\nReturns:\n    Dictionary mapping documentation types to their file paths"
            }
          ]
        }
      ],
      "lines_of_code": 874,
      "complexity_score": 95,
      "last_modified": "2025-10-04T23:43:38.323999",
      "checksum": "05c26519e54ae7bc2e715a701e9d0d36",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tools/phased_restructurer.py": {
      "name": "tools/phased_restructurer.py",
      "path": "tools/phased_restructurer.py",
      "component_type": "development_tool",
      "description": "Framework0 Phased Workspace Restructurer",
      "dependencies": [
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "load_restructuring_plan",
        "get_current_status",
        "_save_status",
        "get_phase_operations",
        "execute_phase",
        "_execute_operation",
        "_create_backup",
        "_backup_git_state",
        "_create_directory",
        "_create_file",
        "_move_file",
        "_validate_operation",
        "show_status",
        "PhasedRestructurer"
      ],
      "imports": [
        "json",
        "shutil",
        "sys",
        "pathlib",
        "typing",
        "datetime",
        "core.logger",
        "argparse"
      ],
      "functions": [
        {
          "name": "main",
          "line": 488,
          "args": [],
          "docstring": "Main function for phased workspace restructuring execution.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 34,
          "args": [
            "self",
            "workspace_root"
          ],
          "docstring": "Initialize the phased restructurer.\n\nArgs:\n    workspace_root: Absolute path to workspace root directory",
          "decorators": []
        },
        {
          "name": "load_restructuring_plan",
          "line": 84,
          "args": [
            "self"
          ],
          "docstring": "Load the restructuring plan from file.\n\nReturns:\n    Optional[Dict[str, Any]]: Restructuring plan data or None if not found",
          "decorators": []
        },
        {
          "name": "get_current_status",
          "line": 104,
          "args": [
            "self"
          ],
          "docstring": "Get current restructuring status.\n\nReturns:\n    Dict[str, Any]: Current status information",
          "decorators": []
        },
        {
          "name": "_save_status",
          "line": 132,
          "args": [
            "self",
            "status"
          ],
          "docstring": "Save current restructuring status.\n\nArgs:\n    status: Status information to save",
          "decorators": []
        },
        {
          "name": "get_phase_operations",
          "line": 149,
          "args": [
            "self",
            "plan",
            "phase_number"
          ],
          "docstring": "Get operations for a specific phase.\n\nArgs:\n    plan: Complete restructuring plan\n    phase_number: Phase number (1-4)\n\nReturns:\n    List[Dict[str, Any]]: Operations for the specified phase",
          "decorators": []
        },
        {
          "name": "execute_phase",
          "line": 173,
          "args": [
            "self",
            "phase_number",
            "plan"
          ],
          "docstring": "Execute a specific phase of the restructuring plan.\n\nArgs:\n    phase_number: Phase number to execute (1-4)\n    plan: Complete restructuring plan\n\nReturns:\n    bool: True if phase executed successfully, False otherwise",
          "decorators": []
        },
        {
          "name": "_execute_operation",
          "line": 242,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Execute a single restructuring operation.\n\nArgs:\n    operation: Operation definition with type and parameters\n\nReturns:\n    bool: True if operation succeeded, False otherwise",
          "decorators": []
        },
        {
          "name": "_create_backup",
          "line": 275,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Create comprehensive backup of workspace.\n\nArgs:\n    operation: Backup operation parameters\n\nReturns:\n    bool: True if backup created successfully",
          "decorators": []
        },
        {
          "name": "_backup_git_state",
          "line": 322,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Backup current git state.\n\nArgs:\n    operation: Git backup operation parameters\n\nReturns:\n    bool: True if git state backed up successfully",
          "decorators": []
        },
        {
          "name": "_create_directory",
          "line": 351,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Create a directory.\n\nArgs:\n    operation: Directory creation operation parameters\n\nReturns:\n    bool: True if directory created successfully",
          "decorators": []
        },
        {
          "name": "_create_file",
          "line": 378,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Create a file with specified content.\n\nArgs:\n    operation: File creation operation parameters\n\nReturns:\n    bool: True if file created successfully",
          "decorators": []
        },
        {
          "name": "_move_file",
          "line": 413,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Move a file to new location.\n\nArgs:\n    operation: File move operation parameters\n\nReturns:\n    bool: True if file moved successfully",
          "decorators": []
        },
        {
          "name": "_validate_operation",
          "line": 452,
          "args": [
            "self",
            "operation"
          ],
          "docstring": "Validate restructuring operation.\n\nArgs:\n    operation: Validation operation parameters\n\nReturns:\n    bool: True if validation passed",
          "decorators": []
        },
        {
          "name": "show_status",
          "line": 466,
          "args": [
            "self"
          ],
          "docstring": "Display current restructuring status.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PhasedRestructurer",
          "line": 26,
          "bases": [],
          "docstring": "Phased workspace restructurer with user approval at each step.\n\nProvides safe, incremental restructuring of workspace to match Framework0\nbaseline layout with comprehensive validation and rollback capabilities.",
          "methods": [
            {
              "name": "__init__",
              "line": 34,
              "args": [
                "self",
                "workspace_root"
              ],
              "docstring": "Initialize the phased restructurer.\n\nArgs:\n    workspace_root: Absolute path to workspace root directory"
            },
            {
              "name": "load_restructuring_plan",
              "line": 84,
              "args": [
                "self"
              ],
              "docstring": "Load the restructuring plan from file.\n\nReturns:\n    Optional[Dict[str, Any]]: Restructuring plan data or None if not found"
            },
            {
              "name": "get_current_status",
              "line": 104,
              "args": [
                "self"
              ],
              "docstring": "Get current restructuring status.\n\nReturns:\n    Dict[str, Any]: Current status information"
            },
            {
              "name": "_save_status",
              "line": 132,
              "args": [
                "self",
                "status"
              ],
              "docstring": "Save current restructuring status.\n\nArgs:\n    status: Status information to save"
            },
            {
              "name": "get_phase_operations",
              "line": 149,
              "args": [
                "self",
                "plan",
                "phase_number"
              ],
              "docstring": "Get operations for a specific phase.\n\nArgs:\n    plan: Complete restructuring plan\n    phase_number: Phase number (1-4)\n\nReturns:\n    List[Dict[str, Any]]: Operations for the specified phase"
            },
            {
              "name": "execute_phase",
              "line": 173,
              "args": [
                "self",
                "phase_number",
                "plan"
              ],
              "docstring": "Execute a specific phase of the restructuring plan.\n\nArgs:\n    phase_number: Phase number to execute (1-4)\n    plan: Complete restructuring plan\n\nReturns:\n    bool: True if phase executed successfully, False otherwise"
            },
            {
              "name": "_execute_operation",
              "line": 242,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Execute a single restructuring operation.\n\nArgs:\n    operation: Operation definition with type and parameters\n\nReturns:\n    bool: True if operation succeeded, False otherwise"
            },
            {
              "name": "_create_backup",
              "line": 275,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Create comprehensive backup of workspace.\n\nArgs:\n    operation: Backup operation parameters\n\nReturns:\n    bool: True if backup created successfully"
            },
            {
              "name": "_backup_git_state",
              "line": 322,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Backup current git state.\n\nArgs:\n    operation: Git backup operation parameters\n\nReturns:\n    bool: True if git state backed up successfully"
            },
            {
              "name": "_create_directory",
              "line": 351,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Create a directory.\n\nArgs:\n    operation: Directory creation operation parameters\n\nReturns:\n    bool: True if directory created successfully"
            },
            {
              "name": "_create_file",
              "line": 378,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Create a file with specified content.\n\nArgs:\n    operation: File creation operation parameters\n\nReturns:\n    bool: True if file created successfully"
            },
            {
              "name": "_move_file",
              "line": 413,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Move a file to new location.\n\nArgs:\n    operation: File move operation parameters\n\nReturns:\n    bool: True if file moved successfully"
            },
            {
              "name": "_validate_operation",
              "line": 452,
              "args": [
                "self",
                "operation"
              ],
              "docstring": "Validate restructuring operation.\n\nArgs:\n    operation: Validation operation parameters\n\nReturns:\n    bool: True if validation passed"
            },
            {
              "name": "show_status",
              "line": 466,
              "args": [
                "self"
              ],
              "docstring": "Display current restructuring status."
            }
          ]
        }
      ],
      "lines_of_code": 500,
      "complexity_score": 73,
      "last_modified": "2025-10-05T00:53:57.334573",
      "checksum": "2e4294d55e74254168f04f78707c7399",
      "framework_role": "general_utility",
      "stability": "stable"
    },
    "tools/post_restructure_validator.py": {
      "name": "tools/post_restructure_validator.py",
      "path": "tools/post_restructure_validator.py",
      "component_type": "development_tool",
      "description": "Framework0 Post-Restructure Comprehensive Validation",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "discover_components",
        "_is_executable_script",
        "validate_all_components",
        "_validate_python_components",
        "_validate_python_syntax",
        "_validate_python_imports",
        "_validate_python_execution",
        "_validate_test_files",
        "_run_pytest_on_file",
        "_validate_recipe_files",
        "_validate_config_files",
        "_generate_validation_summary",
        "generate_validation_report",
        "ValidationResult",
        "ComponentValidator"
      ],
      "imports": [
        "os",
        "sys",
        "subprocess",
        "importlib.util",
        "tempfile",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "yaml",
        "json",
        "core.logger",
        "logging",
        "tomli"
      ],
      "functions": [
        {
          "name": "main",
          "line": 893,
          "args": [],
          "docstring": "Main function to execute comprehensive component validation.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 73,
          "args": [
            "self",
            "workspace_root"
          ],
          "docstring": "Initialize component validator.\n\nArgs:\n    workspace_root: Absolute path to workspace root directory",
          "decorators": []
        },
        {
          "name": "discover_components",
          "line": 97,
          "args": [
            "self"
          ],
          "docstring": "Discover all components in the workspace for validation.\n\nReturns:\n    Dict[str, List[Path]]: Components organized by type",
          "decorators": []
        },
        {
          "name": "_is_executable_script",
          "line": 184,
          "args": [
            "self",
            "py_file"
          ],
          "docstring": "Check if Python file is an executable script.\n\nArgs:\n    py_file: Python file to check\n\nReturns:\n    bool: True if file is executable script",
          "decorators": []
        },
        {
          "name": "validate_all_components",
          "line": 210,
          "args": [
            "self"
          ],
          "docstring": "Validate all discovered components.\n\nReturns:\n    Dict[str, Any]: Complete validation results",
          "decorators": []
        },
        {
          "name": "_validate_python_components",
          "line": 303,
          "args": [
            "self",
            "components",
            "component_type"
          ],
          "docstring": "Validate Python components (modules, scripts, tools, apps).\n\nArgs:\n    components: List of Python files to validate\n    component_type: Type of component being validated\n\nReturns:\n    List[ValidationResult]: Validation results for each component",
          "decorators": []
        },
        {
          "name": "_validate_python_syntax",
          "line": 369,
          "args": [
            "self",
            "py_file",
            "result"
          ],
          "docstring": "Validate Python file syntax.\n\nArgs:\n    py_file: Python file to validate\n    result: Validation result to update\n\nReturns:\n    bool: True if syntax is valid",
          "decorators": []
        },
        {
          "name": "_validate_python_imports",
          "line": 393,
          "args": [
            "self",
            "py_file",
            "result"
          ],
          "docstring": "Validate Python file imports.\n\nArgs:\n    py_file: Python file to validate\n    result: Validation result to update\n\nReturns:\n    bool: True if imports are valid",
          "decorators": []
        },
        {
          "name": "_validate_python_execution",
          "line": 429,
          "args": [
            "self",
            "py_file",
            "result",
            "component_type"
          ],
          "docstring": "Validate Python file execution.\n\nArgs:\n    py_file: Python file to validate\n    result: Validation result to update\n    component_type: Type of component\n\nReturns:\n    bool: True if execution is valid",
          "decorators": []
        },
        {
          "name": "_validate_test_files",
          "line": 477,
          "args": [
            "self",
            "test_files"
          ],
          "docstring": "Validate test files using pytest.\n\nArgs:\n    test_files: List of test files to validate\n\nReturns:\n    List[ValidationResult]: Validation results for test files",
          "decorators": []
        },
        {
          "name": "_run_pytest_on_file",
          "line": 530,
          "args": [
            "self",
            "test_file",
            "result"
          ],
          "docstring": "Run pytest on a single test file.\n\nArgs:\n    test_file: Test file to run\n    result: Validation result to update\n\nReturns:\n    bool: True if tests pass or can be executed",
          "decorators": []
        },
        {
          "name": "_validate_recipe_files",
          "line": 575,
          "args": [
            "self",
            "recipe_files"
          ],
          "docstring": "Validate YAML recipe files.\n\nArgs:\n    recipe_files: List of recipe files to validate\n\nReturns:\n    List[ValidationResult]: Validation results for recipe files",
          "decorators": []
        },
        {
          "name": "_validate_config_files",
          "line": 657,
          "args": [
            "self",
            "config_files"
          ],
          "docstring": "Validate configuration files.\n\nArgs:\n    config_files: List of configuration files to validate\n\nReturns:\n    List[ValidationResult]: Validation results for config files",
          "decorators": []
        },
        {
          "name": "_generate_validation_summary",
          "line": 730,
          "args": [
            "self",
            "validation_results"
          ],
          "docstring": "Generate comprehensive validation summary.\n\nArgs:\n    validation_results: Detailed validation results by component type\n\nReturns:\n    Dict[str, Any]: Validation summary statistics",
          "decorators": []
        },
        {
          "name": "generate_validation_report",
          "line": 802,
          "args": [
            "self",
            "validation_results"
          ],
          "docstring": "Generate human-readable validation report.\n\nArgs:\n    validation_results: Complete validation results\n\nReturns:\n    str: Formatted validation report",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ValidationResult",
          "line": 41,
          "bases": [],
          "docstring": "Data class for component validation results.\n\nStores validation outcomes for individual components including\nsyntax validation, import validation, and execution testing.",
          "methods": []
        },
        {
          "name": "ComponentValidator",
          "line": 64,
          "bases": [],
          "docstring": "Comprehensive component validator for Framework0 workspace.\n\nValidates all types of components including Python modules, scripts,\nrecipes, and configuration files to ensure they work correctly\nafter workspace restructuring.",
          "methods": [
            {
              "name": "__init__",
              "line": 73,
              "args": [
                "self",
                "workspace_root"
              ],
              "docstring": "Initialize component validator.\n\nArgs:\n    workspace_root: Absolute path to workspace root directory"
            },
            {
              "name": "discover_components",
              "line": 97,
              "args": [
                "self"
              ],
              "docstring": "Discover all components in the workspace for validation.\n\nReturns:\n    Dict[str, List[Path]]: Components organized by type"
            },
            {
              "name": "_is_executable_script",
              "line": 184,
              "args": [
                "self",
                "py_file"
              ],
              "docstring": "Check if Python file is an executable script.\n\nArgs:\n    py_file: Python file to check\n\nReturns:\n    bool: True if file is executable script"
            },
            {
              "name": "validate_all_components",
              "line": 210,
              "args": [
                "self"
              ],
              "docstring": "Validate all discovered components.\n\nReturns:\n    Dict[str, Any]: Complete validation results"
            },
            {
              "name": "_validate_python_components",
              "line": 303,
              "args": [
                "self",
                "components",
                "component_type"
              ],
              "docstring": "Validate Python components (modules, scripts, tools, apps).\n\nArgs:\n    components: List of Python files to validate\n    component_type: Type of component being validated\n\nReturns:\n    List[ValidationResult]: Validation results for each component"
            },
            {
              "name": "_validate_python_syntax",
              "line": 369,
              "args": [
                "self",
                "py_file",
                "result"
              ],
              "docstring": "Validate Python file syntax.\n\nArgs:\n    py_file: Python file to validate\n    result: Validation result to update\n\nReturns:\n    bool: True if syntax is valid"
            },
            {
              "name": "_validate_python_imports",
              "line": 393,
              "args": [
                "self",
                "py_file",
                "result"
              ],
              "docstring": "Validate Python file imports.\n\nArgs:\n    py_file: Python file to validate\n    result: Validation result to update\n\nReturns:\n    bool: True if imports are valid"
            },
            {
              "name": "_validate_python_execution",
              "line": 429,
              "args": [
                "self",
                "py_file",
                "result",
                "component_type"
              ],
              "docstring": "Validate Python file execution.\n\nArgs:\n    py_file: Python file to validate\n    result: Validation result to update\n    component_type: Type of component\n\nReturns:\n    bool: True if execution is valid"
            },
            {
              "name": "_validate_test_files",
              "line": 477,
              "args": [
                "self",
                "test_files"
              ],
              "docstring": "Validate test files using pytest.\n\nArgs:\n    test_files: List of test files to validate\n\nReturns:\n    List[ValidationResult]: Validation results for test files"
            },
            {
              "name": "_run_pytest_on_file",
              "line": 530,
              "args": [
                "self",
                "test_file",
                "result"
              ],
              "docstring": "Run pytest on a single test file.\n\nArgs:\n    test_file: Test file to run\n    result: Validation result to update\n\nReturns:\n    bool: True if tests pass or can be executed"
            },
            {
              "name": "_validate_recipe_files",
              "line": 575,
              "args": [
                "self",
                "recipe_files"
              ],
              "docstring": "Validate YAML recipe files.\n\nArgs:\n    recipe_files: List of recipe files to validate\n\nReturns:\n    List[ValidationResult]: Validation results for recipe files"
            },
            {
              "name": "_validate_config_files",
              "line": 657,
              "args": [
                "self",
                "config_files"
              ],
              "docstring": "Validate configuration files.\n\nArgs:\n    config_files: List of configuration files to validate\n\nReturns:\n    List[ValidationResult]: Validation results for config files"
            },
            {
              "name": "_generate_validation_summary",
              "line": 730,
              "args": [
                "self",
                "validation_results"
              ],
              "docstring": "Generate comprehensive validation summary.\n\nArgs:\n    validation_results: Detailed validation results by component type\n\nReturns:\n    Dict[str, Any]: Validation summary statistics"
            },
            {
              "name": "generate_validation_report",
              "line": 802,
              "args": [
                "self",
                "validation_results"
              ],
              "docstring": "Generate human-readable validation report.\n\nArgs:\n    validation_results: Complete validation results\n\nReturns:\n    str: Formatted validation report"
            }
          ]
        }
      ],
      "lines_of_code": 780,
      "complexity_score": 105,
      "last_modified": "2025-10-05T01:10:40.083540",
      "checksum": "9de3cc37e0bd2b0820a262d89cb858c8",
      "framework_role": "logging_infrastructure",
      "stability": "stable"
    },
    "tools/workspace_cleaner.py": {
      "name": "tools/workspace_cleaner.py",
      "path": "tools/workspace_cleaner.py",
      "component_type": "development_tool",
      "description": "Enhanced Workspace Cleaner for Framework0 Production System",
      "dependencies": [],
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "lines_of_code": 1216,
      "complexity_score": 0,
      "last_modified": "2025-10-04T17:05:04.032278",
      "checksum": "e985a97ad2bf2d378aba24593c044242",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "tools/workspace_cleaner_clean.py": {
      "name": "tools/workspace_cleaner_clean.py",
      "path": "tools/workspace_cleaner_clean.py",
      "component_type": "development_tool",
      "description": "Workspace Cleaner - IAF0 Framework Cleanup Tool",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py"
      ],
      "exports": [
        "main",
        "__init__",
        "run_cleanup",
        "_create_backup",
        "_remove_obsolete_files",
        "_create_fresh_directories",
        "_verify_consolidated_components",
        "_create_essential_configs",
        "_generate_fresh_documentation",
        "_verify_baseline_integrity",
        "_generate_cleanup_report",
        "WorkspaceCleaner"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "shutil",
        "pathlib",
        "datetime",
        "typing"
      ],
      "functions": [
        {
          "name": "main",
          "line": 682,
          "args": [],
          "docstring": "Main entry point for workspace cleaner.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 27,
          "args": [
            "self",
            "workspace_path"
          ],
          "docstring": "Initialize cleaner with workspace path.",
          "decorators": []
        },
        {
          "name": "run_cleanup",
          "line": 93,
          "args": [
            "self"
          ],
          "docstring": "Execute complete workspace cleanup process.",
          "decorators": []
        },
        {
          "name": "_create_backup",
          "line": 141,
          "args": [
            "self"
          ],
          "docstring": "Create backup of files that will be removed.",
          "decorators": []
        },
        {
          "name": "_remove_obsolete_files",
          "line": 177,
          "args": [
            "self"
          ],
          "docstring": "Remove obsolete files and directories.",
          "decorators": []
        },
        {
          "name": "_create_fresh_directories",
          "line": 215,
          "args": [
            "self"
          ],
          "docstring": "Create fresh baseline directory structure.",
          "decorators": []
        },
        {
          "name": "_verify_consolidated_components",
          "line": 244,
          "args": [
            "self"
          ],
          "docstring": "Verify that all consolidated components are properly in place.",
          "decorators": []
        },
        {
          "name": "_create_essential_configs",
          "line": 275,
          "args": [
            "self"
          ],
          "docstring": "Create essential configuration files for fresh baseline.",
          "decorators": []
        },
        {
          "name": "_generate_fresh_documentation",
          "line": 390,
          "args": [
            "self"
          ],
          "docstring": "Generate fresh documentation for baseline framework.",
          "decorators": []
        },
        {
          "name": "_verify_baseline_integrity",
          "line": 585,
          "args": [
            "self"
          ],
          "docstring": "Verify the integrity of the fresh baseline.",
          "decorators": []
        },
        {
          "name": "_generate_cleanup_report",
          "line": 648,
          "args": [
            "self",
            "integrity_results"
          ],
          "docstring": "Generate comprehensive cleanup report.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceCleaner",
          "line": 24,
          "bases": [],
          "docstring": "Comprehensive workspace cleanup and baseline creation tool.",
          "methods": [
            {
              "name": "__init__",
              "line": 27,
              "args": [
                "self",
                "workspace_path"
              ],
              "docstring": "Initialize cleaner with workspace path."
            },
            {
              "name": "run_cleanup",
              "line": 93,
              "args": [
                "self"
              ],
              "docstring": "Execute complete workspace cleanup process."
            },
            {
              "name": "_create_backup",
              "line": 141,
              "args": [
                "self"
              ],
              "docstring": "Create backup of files that will be removed."
            },
            {
              "name": "_remove_obsolete_files",
              "line": 177,
              "args": [
                "self"
              ],
              "docstring": "Remove obsolete files and directories."
            },
            {
              "name": "_create_fresh_directories",
              "line": 215,
              "args": [
                "self"
              ],
              "docstring": "Create fresh baseline directory structure."
            },
            {
              "name": "_verify_consolidated_components",
              "line": 244,
              "args": [
                "self"
              ],
              "docstring": "Verify that all consolidated components are properly in place."
            },
            {
              "name": "_create_essential_configs",
              "line": 275,
              "args": [
                "self"
              ],
              "docstring": "Create essential configuration files for fresh baseline."
            },
            {
              "name": "_generate_fresh_documentation",
              "line": 390,
              "args": [
                "self"
              ],
              "docstring": "Generate fresh documentation for baseline framework."
            },
            {
              "name": "_verify_baseline_integrity",
              "line": 585,
              "args": [
                "self"
              ],
              "docstring": "Verify the integrity of the fresh baseline."
            },
            {
              "name": "_generate_cleanup_report",
              "line": 648,
              "args": [
                "self",
                "integrity_results"
              ],
              "docstring": "Generate comprehensive cleanup report."
            }
          ]
        }
      ],
      "lines_of_code": 579,
      "complexity_score": 46,
      "last_modified": "2025-10-04T16:23:42.067528",
      "checksum": "9b9dd3e3616c5bd2f28d3044b0b5eb2f",
      "framework_role": "scriptlet_interface",
      "stability": "stable"
    },
    "tools/workspace_cleaner_v2.py": {
      "name": "tools/workspace_cleaner_v2.py",
      "path": "tools/workspace_cleaner_v2.py",
      "component_type": "development_tool",
      "description": "Enhanced Workspace Cleaner for Framework0 Production System",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/test_visualization_system.py",
        "tests/test_visualization_system.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/src/visualization/timeline_visualizer.py",
        ".restructuring_backup/tests/test_realtime_performance.py",
        "src/visualization/timeline_visualizer.py",
        "tests/test_realtime_performance.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
        ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
        ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
        "orchestrator/recipes/compute_median.yaml",
        "orchestrator/recipes/enhanced_example.yaml",
        "orchestrator/recipes/example_numbers.yaml",
        "orchestrator/recipes/example_numbers0.yaml"
      ],
      "exports": [
        "main",
        "__init__",
        "add_cleanup_rule",
        "add_standard_rules",
        "save_configuration",
        "load_configuration",
        "execute_cleanup",
        "_create_backup",
        "_execute_single_rule",
        "_update_rule_metrics",
        "generate_report",
        "_add_rule_impl",
        "_add_standard_impl",
        "_save_config_impl",
        "_load_config_impl",
        "_execute_cleanup_impl",
        "CleanupRule",
        "CleanupResult",
        "WorkspaceCleanerV2"
      ],
      "imports": [
        "os",
        "sys",
        "shutil",
        "json",
        "time",
        "glob",
        "argparse",
        "subprocess",
        "typing",
        "pathlib",
        "dataclasses",
        "datetime",
        "threading",
        "collections",
        "orchestrator.context.context",
        "src.core.logger",
        "yaml"
      ],
      "functions": [
        {
          "name": "main",
          "line": 983,
          "args": [],
          "docstring": "Command-line interface for WorkspaceCleanerV2.\n\nProvides comprehensive CLI for workspace cleaning with configuration management.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 126,
          "args": [
            "self",
            "workspace_path"
          ],
          "docstring": "Initialize enhanced workspace cleaner with comprehensive configuration.\n\nArgs:\n    workspace_path: Root path of workspace to clean\n    context: Optional Context instance for state management\n    enable_backups: Whether to create backups before destructive operations\n    backup_directory: Custom backup directory (defaults to .cleanup_backups)\n    max_backup_age_days: Maximum age of backups before cleanup\n    enable_metrics: Whether to collect performance and operation metrics\n\nRaises:\n    ValueError: If workspace_path does not exist or is not accessible\n    PermissionError: If insufficient permissions for workspace operations",
          "decorators": []
        },
        {
          "name": "add_cleanup_rule",
          "line": 196,
          "args": [
            "self",
            "rule"
          ],
          "docstring": "Add a custom cleanup rule to the cleaner configuration.\n\nArgs:\n    rule: CleanupRule instance defining the cleaning behavior\n\nRaises:\n    ValueError: If rule name conflicts with existing rule\n    TypeError: If rule is not a CleanupRule instance",
          "decorators": []
        },
        {
          "name": "add_standard_rules",
          "line": 247,
          "args": [
            "self"
          ],
          "docstring": "Add comprehensive standard cleanup rules for Framework0 workspace.\n\nThis method configures the most common cleanup rules that are safe\nand beneficial for typical Framework0 workspace maintenance.",
          "decorators": []
        },
        {
          "name": "save_configuration",
          "line": 364,
          "args": [
            "self",
            "config_path"
          ],
          "docstring": "Save current cleanup rules and settings to JSON/YAML configuration file.\n\nArgs:\n    config_path: Optional path for config file (defaults to workspace/.cleanup_config.json)\n    \nRaises:\n    PermissionError: If unable to write to configuration file\n    ValueError: If configuration data is invalid",
          "decorators": []
        },
        {
          "name": "load_configuration",
          "line": 440,
          "args": [
            "self",
            "config_path"
          ],
          "docstring": "Load cleanup rules and settings from JSON/YAML configuration file.\n\nArgs:\n    config_path: Optional path to config file (defaults to workspace/.cleanup_config.json)\n    \nRaises:\n    FileNotFoundError: If configuration file does not exist\n    ValueError: If configuration format is invalid or unsupported\n    PermissionError: If unable to read configuration file",
          "decorators": []
        },
        {
          "name": "execute_cleanup",
          "line": 546,
          "args": [
            "self"
          ],
          "docstring": "Execute configured cleanup rules with comprehensive safety and monitoring.\n\nArgs:\n    dry_run: Whether to perform actual cleanup or just simulate\n    rules_filter: Optional list of rule names to execute (None = all enabled rules)\n    skip_confirmation: Whether to skip user confirmation for destructive operations\n    enable_progress: Whether to display progress information during execution\n\nReturns:\n    List[CleanupResult]: Detailed results for each executed cleanup rule\n\nExample:\n    >>> cleaner = WorkspaceCleanerV2(\"/path/to/workspace\")\n    >>> cleaner.add_standard_rules()\n    >>> results = cleaner.execute_cleanup(dry_run=False, skip_confirmation=True)",
          "decorators": []
        },
        {
          "name": "_create_backup",
          "line": 683,
          "args": [
            "self"
          ],
          "docstring": "Create backup of workspace before destructive operations.\n\nReturns:\n    Path: Path to created backup directory\n    \nRaises:\n    OSError: If backup creation fails",
          "decorators": []
        },
        {
          "name": "_execute_single_rule",
          "line": 743,
          "args": [
            "self",
            "rule",
            "dry_run",
            "skip_confirmation"
          ],
          "docstring": "Execute a single cleanup rule with comprehensive error handling and metrics.\n\nArgs:\n    rule: CleanupRule to execute\n    dry_run: Whether to perform actual cleanup or simulation\n    skip_confirmation: Whether to skip user confirmation prompts\n    \nReturns:\n    CleanupResult: Detailed results of rule execution",
          "decorators": []
        },
        {
          "name": "_update_rule_metrics",
          "line": 867,
          "args": [
            "self",
            "rule_name",
            "result",
            "execution_time",
            "success"
          ],
          "docstring": "Update performance metrics for a specific cleanup rule.\n\nArgs:\n    rule_name: Name of the rule that was executed\n    result: CleanupResult containing execution details\n    execution_time: Time taken to execute the rule\n    success: Whether the rule executed successfully",
          "decorators": []
        },
        {
          "name": "generate_report",
          "line": 900,
          "args": [
            "self",
            "results",
            "output_path"
          ],
          "docstring": "Generate comprehensive cleanup report with detailed analysis and metrics.\n\nArgs:\n    results: List of CleanupResult from cleanup execution\n    output_path: Optional path to save report (defaults to workspace/cleanup_report.json)\n    \nReturns:\n    Dict[str, Any]: Comprehensive report data structure",
          "decorators": []
        },
        {
          "name": "_add_rule_impl",
          "line": 207,
          "args": [],
          "docstring": "Internal implementation with thread safety and validation.",
          "decorators": []
        },
        {
          "name": "_add_standard_impl",
          "line": 254,
          "args": [],
          "docstring": "Internal implementation of standard rule addition.",
          "decorators": []
        },
        {
          "name": "_save_config_impl",
          "line": 375,
          "args": [],
          "docstring": "Internal implementation of configuration saving.",
          "decorators": []
        },
        {
          "name": "_load_config_impl",
          "line": 452,
          "args": [],
          "docstring": "Internal implementation of configuration loading.",
          "decorators": []
        },
        {
          "name": "_execute_cleanup_impl",
          "line": 571,
          "args": [],
          "docstring": "Internal implementation of cleanup execution with comprehensive tracking.",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CleanupRule",
          "line": 54,
          "bases": [],
          "docstring": "Structured cleanup rule definition for flexible cleaning configuration.\n\nThis class defines individual cleanup rules that specify what to clean,\nhow to clean it, and what conditions must be met for safe execution.",
          "methods": []
        },
        {
          "name": "CleanupResult",
          "line": 75,
          "bases": [],
          "docstring": "Comprehensive cleanup operation result with detailed metrics and reporting.\n\nThis class captures all aspects of a cleanup operation for analysis,\nreporting, and audit trail generation.",
          "methods": []
        },
        {
          "name": "WorkspaceCleanerV2",
          "line": 92,
          "bases": [],
          "docstring": "Enhanced workspace cleaner with comprehensive Framework0 integration.\n\nThis class provides advanced workspace cleaning capabilities that integrate\nseamlessly with the consolidated Framework0 architecture. It uses the unified\nContext system for state management, enhanced logging for traceability, and\nfollows strict safety protocols to prevent data loss.\n\nThe cleaner operates on a rule-based system that allows fine-grained control\nover what gets cleaned, when it gets cleaned, and how the cleaning is performed.\nAll operations are logged and can be tracked through the Context system.\n\nKey Features:\n- Rule-based cleaning with flexible configuration and custom validation\n- Context integration for state tracking and distributed coordination\n- Comprehensive safety checks with backup creation and rollback capabilities\n- Performance monitoring and optimization with detailed analytics\n- Cross-platform compatibility with proper path handling and permissions\n- Extensible architecture supporting custom cleaning plugins and rules\n- Comprehensive error handling with graceful degradation and recovery\n- JSON/YAML configuration system for rule persistence and sharing\n\nThread Safety:\nAll operations are thread-safe when used with Context thread safety enabled.\nThe cleaner can be safely used in concurrent environments and distributed systems.\n\nExample Usage:\n    >>> cleaner = WorkspaceCleanerV2(workspace_path=\"/path/to/workspace\")\n    >>> cleaner.add_standard_rules()\n    >>> results = cleaner.execute_cleanup(dry_run=False)\n    >>> cleaner.generate_report(results)",
          "methods": [
            {
              "name": "__init__",
              "line": 126,
              "args": [
                "self",
                "workspace_path"
              ],
              "docstring": "Initialize enhanced workspace cleaner with comprehensive configuration.\n\nArgs:\n    workspace_path: Root path of workspace to clean\n    context: Optional Context instance for state management\n    enable_backups: Whether to create backups before destructive operations\n    backup_directory: Custom backup directory (defaults to .cleanup_backups)\n    max_backup_age_days: Maximum age of backups before cleanup\n    enable_metrics: Whether to collect performance and operation metrics\n\nRaises:\n    ValueError: If workspace_path does not exist or is not accessible\n    PermissionError: If insufficient permissions for workspace operations"
            },
            {
              "name": "add_cleanup_rule",
              "line": 196,
              "args": [
                "self",
                "rule"
              ],
              "docstring": "Add a custom cleanup rule to the cleaner configuration.\n\nArgs:\n    rule: CleanupRule instance defining the cleaning behavior\n\nRaises:\n    ValueError: If rule name conflicts with existing rule\n    TypeError: If rule is not a CleanupRule instance"
            },
            {
              "name": "add_standard_rules",
              "line": 247,
              "args": [
                "self"
              ],
              "docstring": "Add comprehensive standard cleanup rules for Framework0 workspace.\n\nThis method configures the most common cleanup rules that are safe\nand beneficial for typical Framework0 workspace maintenance."
            },
            {
              "name": "save_configuration",
              "line": 364,
              "args": [
                "self",
                "config_path"
              ],
              "docstring": "Save current cleanup rules and settings to JSON/YAML configuration file.\n\nArgs:\n    config_path: Optional path for config file (defaults to workspace/.cleanup_config.json)\n    \nRaises:\n    PermissionError: If unable to write to configuration file\n    ValueError: If configuration data is invalid"
            },
            {
              "name": "load_configuration",
              "line": 440,
              "args": [
                "self",
                "config_path"
              ],
              "docstring": "Load cleanup rules and settings from JSON/YAML configuration file.\n\nArgs:\n    config_path: Optional path to config file (defaults to workspace/.cleanup_config.json)\n    \nRaises:\n    FileNotFoundError: If configuration file does not exist\n    ValueError: If configuration format is invalid or unsupported\n    PermissionError: If unable to read configuration file"
            },
            {
              "name": "execute_cleanup",
              "line": 546,
              "args": [
                "self"
              ],
              "docstring": "Execute configured cleanup rules with comprehensive safety and monitoring.\n\nArgs:\n    dry_run: Whether to perform actual cleanup or just simulate\n    rules_filter: Optional list of rule names to execute (None = all enabled rules)\n    skip_confirmation: Whether to skip user confirmation for destructive operations\n    enable_progress: Whether to display progress information during execution\n\nReturns:\n    List[CleanupResult]: Detailed results for each executed cleanup rule\n\nExample:\n    >>> cleaner = WorkspaceCleanerV2(\"/path/to/workspace\")\n    >>> cleaner.add_standard_rules()\n    >>> results = cleaner.execute_cleanup(dry_run=False, skip_confirmation=True)"
            },
            {
              "name": "_create_backup",
              "line": 683,
              "args": [
                "self"
              ],
              "docstring": "Create backup of workspace before destructive operations.\n\nReturns:\n    Path: Path to created backup directory\n    \nRaises:\n    OSError: If backup creation fails"
            },
            {
              "name": "_execute_single_rule",
              "line": 743,
              "args": [
                "self",
                "rule",
                "dry_run",
                "skip_confirmation"
              ],
              "docstring": "Execute a single cleanup rule with comprehensive error handling and metrics.\n\nArgs:\n    rule: CleanupRule to execute\n    dry_run: Whether to perform actual cleanup or simulation\n    skip_confirmation: Whether to skip user confirmation prompts\n    \nReturns:\n    CleanupResult: Detailed results of rule execution"
            },
            {
              "name": "_update_rule_metrics",
              "line": 867,
              "args": [
                "self",
                "rule_name",
                "result",
                "execution_time",
                "success"
              ],
              "docstring": "Update performance metrics for a specific cleanup rule.\n\nArgs:\n    rule_name: Name of the rule that was executed\n    result: CleanupResult containing execution details\n    execution_time: Time taken to execute the rule\n    success: Whether the rule executed successfully"
            },
            {
              "name": "generate_report",
              "line": 900,
              "args": [
                "self",
                "results",
                "output_path"
              ],
              "docstring": "Generate comprehensive cleanup report with detailed analysis and metrics.\n\nArgs:\n    results: List of CleanupResult from cleanup execution\n    output_path: Optional path to save report (defaults to workspace/cleanup_report.json)\n    \nReturns:\n    Dict[str, Any]: Comprehensive report data structure"
            }
          ]
        }
      ],
      "lines_of_code": 954,
      "complexity_score": 107,
      "last_modified": "2025-10-04T17:23:07.901833",
      "checksum": "6c9d9b57777782d1fce8868e00122508",
      "framework_role": "state_management",
      "stability": "stable"
    },
    "tools/workspace_restructurer.py": {
      "name": "tools/workspace_restructurer.py",
      "path": "tools/workspace_restructurer.py",
      "component_type": "development_tool",
      "description": "Workspace Restructurer for Framework0 Baseline Compliance",
      "dependencies": [
        ".restructuring_backup/docker-compose.yml",
        "docker-compose.yml",
        "docs/post_restructure_execution_summary.md",
        "docs/post_restructure_validation_report.json",
        "tools/post_restructure_validator.py",
        ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
        ".restructuring_backup/cleanup_report.json",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/enhanced_analysis_framework_test_report.json",
        ".restructuring_backup/integrated_async_performance_demo.json",
        ".restructuring_backup/src/context_client.py",
        ".restructuring_backup/workspace_cleaner_test_report.json",
        "WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
        "docs/api_reference.md",
        "docs/cleanup_report.json",
        "docs/enhanced_analysis_framework_test_report.json",
        "docs/integrated_async_performance_demo.json",
        "docs/method_index.md",
        "docs/post_restructure_validation_report.json",
        "docs/workspace_cleaner_test_report.json",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/docs/method_index.md",
        ".restructuring_backup/src/context_client.py",
        "docs/api_reference.md",
        "docs/method_index.md",
        "orchestrator/context_client.py",
        ".restructuring_backup/docs/api_reference.md",
        ".restructuring_backup/tools/context.sh",
        "docs/api_reference.md",
        "tools/context.sh",
        ".restructuring_backup/tools/context.sh",
        "tools/context.sh"
      ],
      "exports": [
        "main",
        "__init__",
        "analyze_current_structure",
        "_analyze_compliance",
        "_determine_correct_location",
        "_get_relocation_reason",
        "_check_package_structure",
        "_calculate_compliance_score",
        "_generate_compliance_recommendations",
        "generate_restructuring_plan",
        "_generate_validation_checks",
        "_generate_rollback_plan",
        "save_restructuring_plan",
        "RestructureOperation",
        "RestructuringPlan",
        "WorkspaceRestructurer"
      ],
      "imports": [
        "os",
        "json",
        "shutil",
        "subprocess",
        "pathlib",
        "typing",
        "dataclasses",
        "datetime",
        "src.core.logger",
        "logging"
      ],
      "functions": [
        {
          "name": "main",
          "line": 614,
          "args": [],
          "docstring": "Main function to analyze workspace and generate restructuring plan.",
          "decorators": []
        },
        {
          "name": "__init__",
          "line": 69,
          "args": [
            "self",
            "workspace_root"
          ],
          "docstring": "Initialize workspace restructurer with current workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory",
          "decorators": []
        },
        {
          "name": "analyze_current_structure",
          "line": 154,
          "args": [
            "self"
          ],
          "docstring": "Analyze current workspace structure and identify all files/directories.\n\nReturns:\n    Dict[str, Any]: Complete analysis of current workspace structure",
          "decorators": []
        },
        {
          "name": "_analyze_compliance",
          "line": 233,
          "args": [
            "self",
            "files",
            "directories"
          ],
          "docstring": "Analyze current structure compliance with Framework0 baseline layout.\n\nArgs:\n    files: List of file information dictionaries\n    directories: List of directory information dictionaries\n    \nReturns:\n    Dict[str, Any]: Compliance analysis results",
          "decorators": []
        },
        {
          "name": "_determine_correct_location",
          "line": 289,
          "args": [
            "self",
            "file_path"
          ],
          "docstring": "Determine the correct location for a file based on Framework0 guidelines.\n\nArgs:\n    file_path: Current file path to analyze\n    \nReturns:\n    Optional[str]: Correct directory location or None if no relocation needed",
          "decorators": []
        },
        {
          "name": "_get_relocation_reason",
          "line": 328,
          "args": [
            "self",
            "current_path",
            "correct_location"
          ],
          "docstring": "Generate human-readable reason for file relocation.\n\nArgs:\n    current_path: Current file location\n    correct_location: Target location for file\n    \nReturns:\n    str: Human-readable relocation reason",
          "decorators": []
        },
        {
          "name": "_check_package_structure",
          "line": 354,
          "args": [
            "self"
          ],
          "docstring": "Check Python package structure compliance with Framework0 guidelines.\n\nReturns:\n    Dict[str, Any]: Package structure compliance analysis",
          "decorators": []
        },
        {
          "name": "_calculate_compliance_score",
          "line": 383,
          "args": [
            "self",
            "missing_dirs",
            "extra_dirs",
            "misplaced_files"
          ],
          "docstring": "Calculate overall compliance score as percentage.\n\nArgs:\n    missing_dirs: Set of missing directories\n    extra_dirs: Set of extra directories\n    misplaced_files: List of misplaced files\n    \nReturns:\n    float: Compliance score as percentage (0-100)",
          "decorators": []
        },
        {
          "name": "_generate_compliance_recommendations",
          "line": 407,
          "args": [
            "self",
            "missing_dirs",
            "extra_dirs",
            "misplaced_files"
          ],
          "docstring": "Generate actionable compliance recommendations.\n\nArgs:\n    missing_dirs: Set of missing directories\n    extra_dirs: Set of extra directories  \n    misplaced_files: List of misplaced files\n    \nReturns:\n    List[str]: List of actionable recommendations",
          "decorators": []
        },
        {
          "name": "generate_restructuring_plan",
          "line": 435,
          "args": [
            "self",
            "structure_analysis"
          ],
          "docstring": "Generate comprehensive restructuring plan based on structure analysis.\n\nArgs:\n    structure_analysis: Current workspace structure analysis\n    \nReturns:\n    RestructuringPlan: Complete restructuring plan with all operations",
          "decorators": []
        },
        {
          "name": "_generate_validation_checks",
          "line": 511,
          "args": [
            "self",
            "operations"
          ],
          "docstring": "Generate post-restructuring validation checks.\n\nArgs:\n    operations: List of restructuring operations\n    \nReturns:\n    List[str]: List of validation check descriptions",
          "decorators": []
        },
        {
          "name": "_generate_rollback_plan",
          "line": 540,
          "args": [
            "self",
            "operations"
          ],
          "docstring": "Generate rollback plan for failed restructuring.\n\nArgs:\n    operations: List of restructuring operations\n    \nReturns:\n    List[str]: List of rollback procedure steps",
          "decorators": []
        },
        {
          "name": "save_restructuring_plan",
          "line": 567,
          "args": [
            "self",
            "output_path"
          ],
          "docstring": "Save comprehensive restructuring plan to file for review.\n\nArgs:\n    output_path: Optional custom output path for plan file\n    \nReturns:\n    Path: Path to saved restructuring plan file",
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "RestructureOperation",
          "line": 34,
          "bases": [],
          "docstring": "Data class representing a single workspace restructuring operation.",
          "methods": []
        },
        {
          "name": "RestructuringPlan",
          "line": 50,
          "bases": [],
          "docstring": "Complete workspace restructuring plan with all operations and metadata.",
          "methods": []
        },
        {
          "name": "WorkspaceRestructurer",
          "line": 64,
          "bases": [],
          "docstring": "Comprehensive workspace restructurer for Framework0 baseline compliance.",
          "methods": [
            {
              "name": "__init__",
              "line": 69,
              "args": [
                "self",
                "workspace_root"
              ],
              "docstring": "Initialize workspace restructurer with current workspace configuration.\n\nArgs:\n    workspace_root: Absolute path to the workspace root directory"
            },
            {
              "name": "analyze_current_structure",
              "line": 154,
              "args": [
                "self"
              ],
              "docstring": "Analyze current workspace structure and identify all files/directories.\n\nReturns:\n    Dict[str, Any]: Complete analysis of current workspace structure"
            },
            {
              "name": "_analyze_compliance",
              "line": 233,
              "args": [
                "self",
                "files",
                "directories"
              ],
              "docstring": "Analyze current structure compliance with Framework0 baseline layout.\n\nArgs:\n    files: List of file information dictionaries\n    directories: List of directory information dictionaries\n    \nReturns:\n    Dict[str, Any]: Compliance analysis results"
            },
            {
              "name": "_determine_correct_location",
              "line": 289,
              "args": [
                "self",
                "file_path"
              ],
              "docstring": "Determine the correct location for a file based on Framework0 guidelines.\n\nArgs:\n    file_path: Current file path to analyze\n    \nReturns:\n    Optional[str]: Correct directory location or None if no relocation needed"
            },
            {
              "name": "_get_relocation_reason",
              "line": 328,
              "args": [
                "self",
                "current_path",
                "correct_location"
              ],
              "docstring": "Generate human-readable reason for file relocation.\n\nArgs:\n    current_path: Current file location\n    correct_location: Target location for file\n    \nReturns:\n    str: Human-readable relocation reason"
            },
            {
              "name": "_check_package_structure",
              "line": 354,
              "args": [
                "self"
              ],
              "docstring": "Check Python package structure compliance with Framework0 guidelines.\n\nReturns:\n    Dict[str, Any]: Package structure compliance analysis"
            },
            {
              "name": "_calculate_compliance_score",
              "line": 383,
              "args": [
                "self",
                "missing_dirs",
                "extra_dirs",
                "misplaced_files"
              ],
              "docstring": "Calculate overall compliance score as percentage.\n\nArgs:\n    missing_dirs: Set of missing directories\n    extra_dirs: Set of extra directories\n    misplaced_files: List of misplaced files\n    \nReturns:\n    float: Compliance score as percentage (0-100)"
            },
            {
              "name": "_generate_compliance_recommendations",
              "line": 407,
              "args": [
                "self",
                "missing_dirs",
                "extra_dirs",
                "misplaced_files"
              ],
              "docstring": "Generate actionable compliance recommendations.\n\nArgs:\n    missing_dirs: Set of missing directories\n    extra_dirs: Set of extra directories  \n    misplaced_files: List of misplaced files\n    \nReturns:\n    List[str]: List of actionable recommendations"
            },
            {
              "name": "generate_restructuring_plan",
              "line": 435,
              "args": [
                "self",
                "structure_analysis"
              ],
              "docstring": "Generate comprehensive restructuring plan based on structure analysis.\n\nArgs:\n    structure_analysis: Current workspace structure analysis\n    \nReturns:\n    RestructuringPlan: Complete restructuring plan with all operations"
            },
            {
              "name": "_generate_validation_checks",
              "line": 511,
              "args": [
                "self",
                "operations"
              ],
              "docstring": "Generate post-restructuring validation checks.\n\nArgs:\n    operations: List of restructuring operations\n    \nReturns:\n    List[str]: List of validation check descriptions"
            },
            {
              "name": "_generate_rollback_plan",
              "line": 540,
              "args": [
                "self",
                "operations"
              ],
              "docstring": "Generate rollback plan for failed restructuring.\n\nArgs:\n    operations: List of restructuring operations\n    \nReturns:\n    List[str]: List of rollback procedure steps"
            },
            {
              "name": "save_restructuring_plan",
              "line": 567,
              "args": [
                "self",
                "output_path"
              ],
              "docstring": "Save comprehensive restructuring plan to file for review.\n\nArgs:\n    output_path: Optional custom output path for plan file\n    \nReturns:\n    Path: Path to saved restructuring plan file"
            }
          ]
        }
      ],
      "lines_of_code": 557,
      "complexity_score": 60,
      "last_modified": "2025-10-05T00:53:57.334573",
      "checksum": "33b7d643921445b81c69cd87d8311a35",
      "framework_role": "state_management",
      "stability": "stable"
    }
  },
  "architecture_layers": {
    "documentation": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/delta_compression.md",
      ".restructuring_backup/docs/deployment_guide.md",
      ".restructuring_backup/docs/getting_started.md",
      ".restructuring_backup/docs/integration_patterns.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/docs/troubleshooting.md",
      "docs/PERFORMANCE_TESTING_COMPLETION.md",
      "docs/PERFORMANCE_TESTING_REPORT.md",
      "docs/PROJECT_COMPLETION_REPORT.md",
      "docs/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/__init__.py",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/delta_compression.md",
      "docs/deployment_guide.md",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/getting_started.md",
      "docs/integrated_async_performance_demo.json",
      "docs/integration_patterns.md",
      "docs/method_index.md",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "docs/test_execution_report.md",
      "docs/troubleshooting.md",
      "docs/workspace_cleaner_test_report.json"
    ],
    "core": [
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      ".restructuring_backup/src/__init__.py",
      ".restructuring_backup/src/analysis/__init__.py",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/src/analysis/registry.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/core/__init__.py",
      ".restructuring_backup/src/core/logger.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/__init__.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      "orchestrator/__init__.py",
      "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "orchestrator/context/__init__.py",
      "orchestrator/context/context.py",
      "orchestrator/context/db_adapter.py",
      "orchestrator/context/memory_bus.py",
      "orchestrator/context/persistence.py",
      "orchestrator/context/version_control.py",
      "orchestrator/context_client.py",
      "orchestrator/dependency_graph.py",
      "orchestrator/enhanced_context_server.py",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/enhanced_recipe_parser.py",
      "orchestrator/memory_bus.py",
      "orchestrator/persistence.py",
      "orchestrator/persistence/__init__.py",
      "orchestrator/persistence/cache.py",
      "orchestrator/persistence/core.py",
      "orchestrator/persistence/delta.py",
      "orchestrator/persistence/enhanced.py",
      "orchestrator/persistence/snapshot.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/runner.py",
      "src/__init__.py",
      "src/analysis/__init__.py",
      "src/analysis/components.py",
      "src/analysis/enhanced_components.py",
      "src/analysis/enhanced_framework.py",
      "src/analysis/framework.py",
      "src/analysis/registry.py",
      "src/basic_usage.py",
      "src/core/__init__.py",
      "src/core/logger.py",
      "src/dash_demo.py",
      "src/dash_integration.py",
      "src/debug_enhanced_memory_bus.py",
      "src/integration_demo.py",
      "src/visualization/__init__.py",
      "src/visualization/enhanced_visualizer.py",
      "src/visualization/execution_flow.py",
      "src/visualization/performance_dashboard.py",
      "src/visualization/timeline_visualizer.py"
    ],
    "orchestration": [
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      "orchestrator/__init__.py",
      "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "orchestrator/context/__init__.py",
      "orchestrator/context/context.py",
      "orchestrator/context/db_adapter.py",
      "orchestrator/context/memory_bus.py",
      "orchestrator/context/persistence.py",
      "orchestrator/context/version_control.py",
      "orchestrator/context_client.py",
      "orchestrator/dependency_graph.py",
      "orchestrator/enhanced_context_server.py",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/enhanced_recipe_parser.py",
      "orchestrator/memory_bus.py",
      "orchestrator/persistence.py",
      "orchestrator/persistence/__init__.py",
      "orchestrator/persistence/cache.py",
      "orchestrator/persistence/core.py",
      "orchestrator/persistence/delta.py",
      "orchestrator/persistence/enhanced.py",
      "orchestrator/persistence/snapshot.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/runner.py"
    ],
    "scriptlets": [
      ".restructuring_backup/scriptlets/__init__.py",
      ".restructuring_backup/scriptlets/framework.py",
      "scriptlets/__init__.py",
      "scriptlets/framework.py"
    ],
    "tools": [
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/tools/baseline_documentation_updater.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      ".restructuring_backup/tools/context.sh",
      ".restructuring_backup/tools/documentation_updater.py",
      ".restructuring_backup/tools/phased_restructurer.py",
      ".restructuring_backup/tools/workspace_cleaner.py",
      ".restructuring_backup/tools/workspace_cleaner_clean.py",
      ".restructuring_backup/tools/workspace_cleaner_v2.py",
      ".restructuring_backup/tools/workspace_restructurer.py",
      "cli/__init__.py",
      "orchestrator/context_client.py",
      "tools/__init__.py",
      "tools/baseline_documentation_updater.py",
      "tools/baseline_framework_analyzer.py",
      "tools/context.sh",
      "tools/documentation_updater.py",
      "tools/phased_restructurer.py",
      "tools/post_restructure_validator.py",
      "tools/workspace_cleaner.py",
      "tools/workspace_cleaner_clean.py",
      "tools/workspace_cleaner_v2.py",
      "tools/workspace_restructurer.py"
    ],
    "tests": [
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_integration.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_basic_performance.py",
      ".restructuring_backup/tests/test_core_functionality.py",
      ".restructuring_backup/tests/test_delta_compression.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      ".restructuring_backup/tests/test_integration.py",
      ".restructuring_backup/tests/test_performance_load.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tests/test_simple_validation.py",
      ".restructuring_backup/tests/test_websocket_performance.py",
      "tests/__init__.py",
      "tests/test_analysis_framework.py",
      "tests/test_async_integration.py",
      "tests/test_async_load_framework.py",
      "tests/test_basic_performance.py",
      "tests/test_core_functionality.py",
      "tests/test_delta_compression.py",
      "tests/test_delta_module.py",
      "tests/test_enhanced_analysis_framework.py",
      "tests/test_enhanced_context_server.py",
      "tests/test_enhanced_memory_bus.py",
      "tests/test_enhanced_persistence.py",
      "tests/test_enhanced_recipe_parser.py",
      "tests/test_framework0_integration.py",
      "tests/test_integration.py",
      "tests/test_performance_load.py",
      "tests/test_realtime_performance.py",
      "tests/test_scriptlet_framework.py",
      "tests/test_simple_validation.py",
      "tests/test_visualization_system.py",
      "tests/test_websocket_performance.py",
      "tests/test_workspace_cleaner_v2.py"
    ]
  },
  "dependency_graph": {
    ".github/copilot-instructions.md": [],
    ".github/prompts/Copilot-prompt.md": [],
    ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md": [],
    ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md": [],
    ".restructuring_backup/PROJECT_COMPLETION_REPORT.md": [],
    ".restructuring_backup/README.md": [],
    ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md": [],
    ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json": [],
    ".restructuring_backup/cleanup_report.json": [],
    ".restructuring_backup/configs/server_config.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/debug_enhanced_memory_bus.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md"
    ],
    ".restructuring_backup/docker-compose.yml": [],
    ".restructuring_backup/docs/api_reference.md": [],
    ".restructuring_backup/docs/delta_compression.md": [],
    ".restructuring_backup/docs/deployment_guide.md": [],
    ".restructuring_backup/docs/getting_started.md": [],
    ".restructuring_backup/docs/integration_patterns.md": [],
    ".restructuring_backup/docs/method_index.md": [],
    ".restructuring_backup/docs/troubleshooting.md": [],
    ".restructuring_backup/enhanced_analysis_framework_test_report.json": [],
    ".restructuring_backup/examples/README.md": [],
    ".restructuring_backup/examples/basic_usage.py": [
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md"
    ],
    ".restructuring_backup/examples/dash_demo.py": [
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "src/dash_demo.py",
      "src/dash_integration.py",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "src/dash_demo.py",
      "src/dash_integration.py",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/examples/integration_demo.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/examples/shell_demo.sh": [],
    ".restructuring_backup/integrated_async_performance_demo.json": [],
    ".restructuring_backup/orchestrator/__init__.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docker-compose.yml",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py": [],
    ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/context/__init__.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "orchestrator/context/__init__.py",
      "orchestrator/context/context.py",
      "orchestrator/context/db_adapter.py",
      "orchestrator/context/memory_bus.py",
      "orchestrator/context/persistence.py",
      "orchestrator/context/version_control.py",
      "orchestrator/context_client.py",
      "orchestrator/enhanced_context_server.py",
      "tests/test_enhanced_context_server.py",
      "tools/context.sh",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      "docs/method_index.md",
      "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "orchestrator/context/memory_bus.py",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/memory_bus.py",
      "src/debug_enhanced_memory_bus.py",
      "tests/test_enhanced_memory_bus.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context/persistence.py",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence.py",
      "orchestrator/persistence/__init__.py",
      "orchestrator/persistence/cache.py",
      "orchestrator/persistence/core.py",
      "orchestrator/persistence/delta.py",
      "orchestrator/persistence/enhanced.py",
      "orchestrator/persistence/snapshot.py",
      "tests/test_enhanced_persistence.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/src/context_client.py",
      "docker-compose.yml",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context/version_control.py",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/context/context.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    ".restructuring_backup/orchestrator/context/db_adapter.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/context/memory_bus.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/context/persistence.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      "docs/method_index.md",
      "orchestrator/context/db_adapter.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docker-compose.yml",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/context/version_control.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/dependency_graph.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/enhanced_memory_bus.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py"
    ],
    ".restructuring_backup/orchestrator/enhanced_recipe_parser.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      ".restructuring_backup/README.md",
      ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/configs/server_config.py",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/delta_compression.md",
      ".restructuring_backup/docs/deployment_guide.md",
      ".restructuring_backup/docs/getting_started.md",
      ".restructuring_backup/docs/integration_patterns.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/docs/troubleshooting.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/examples/README.md",
      ".restructuring_backup/examples/basic_usage.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/examples/integration_demo.py",
      ".restructuring_backup/examples/shell_demo.sh",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      ".restructuring_backup/pyproject.toml",
      ".restructuring_backup/requirements.txt",
      ".restructuring_backup/scriptlets/__init__.py",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/setup.cfg",
      ".restructuring_backup/src/__init__.py",
      ".restructuring_backup/src/analysis/__init__.py",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/src/analysis/registry.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/core/__init__.py",
      ".restructuring_backup/src/core/logger.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/__init__.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/start_server.sh",
      ".restructuring_backup/test_delta_module.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      ".restructuring_backup/test_enhanced_recipe_parser.py",
      ".restructuring_backup/test_execution_report.md",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/test_visualization_system.py",
      ".restructuring_backup/test_workspace_cleaner_v2.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_integration.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_basic_performance.py",
      ".restructuring_backup/tests/test_core_functionality.py",
      ".restructuring_backup/tests/test_delta_compression.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      ".restructuring_backup/tests/test_integration.py",
      ".restructuring_backup/tests/test_performance_load.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tests/test_simple_validation.py",
      ".restructuring_backup/tests/test_websocket_performance.py",
      ".restructuring_backup/tools/baseline_documentation_updater.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      ".restructuring_backup/tools/context.sh",
      ".restructuring_backup/tools/documentation_updater.py",
      ".restructuring_backup/tools/phased_restructurer.py",
      ".restructuring_backup/tools/workspace_cleaner.py",
      ".restructuring_backup/tools/workspace_cleaner_clean.py",
      ".restructuring_backup/tools/workspace_cleaner_v2.py",
      ".restructuring_backup/tools/workspace_restructurer.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/delta_compression.md",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "docs/test_execution_report.md",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/enhanced_recipe_parser.py",
      "orchestrator/persistence/core.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "requirements.txt",
      "src/analysis/registry.py",
      "src/core/__init__.py",
      "src/core/logger.py",
      "tests/test_core_functionality.py",
      "tests/test_delta_compression.py",
      "tests/test_enhanced_recipe_parser.py",
      "tests/test_realtime_performance.py",
      "tools/phased_restructurer.py",
      "tools/post_restructure_validator.py",
      "tools/workspace_restructurer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    ".restructuring_backup/orchestrator/memory_bus.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/persistence.py": [
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/persistence/__init__.py": [],
    ".restructuring_backup/orchestrator/persistence/cache.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py"
    ],
    ".restructuring_backup/orchestrator/persistence/core.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/persistence/delta.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py"
    ],
    ".restructuring_backup/orchestrator/persistence/enhanced.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py"
    ],
    ".restructuring_backup/orchestrator/persistence/snapshot.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py"
    ],
    ".restructuring_backup/orchestrator/recipe_parser.py": [
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/orchestrator/recipes/compute_median.yaml": [],
    ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml": [],
    ".restructuring_backup/orchestrator/recipes/example_numbers.yaml": [],
    ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml": [],
    ".restructuring_backup/orchestrator/runner.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    ".restructuring_backup/pyproject.toml": [],
    ".restructuring_backup/requirements.txt": [],
    ".restructuring_backup/scriptlets/__init__.py": [],
    ".restructuring_backup/scriptlets/framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    ".restructuring_backup/server/enhanced_context_server.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    ".restructuring_backup/setup.cfg": [],
    ".restructuring_backup/src/__init__.py": [],
    ".restructuring_backup/src/analysis/__init__.py": [
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "docs/enhanced_analysis_framework_test_report.json",
      "scriptlets/framework.py",
      "src/analysis/enhanced_framework.py",
      "src/analysis/framework.py",
      "tests/test_analysis_framework.py",
      "tests/test_async_load_framework.py",
      "tests/test_enhanced_analysis_framework.py",
      "tests/test_framework0_integration.py",
      "tests/test_scriptlet_framework.py",
      "tools/baseline_framework_analyzer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "src/analysis/components.py",
      "src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/registry.py",
      "src/analysis/registry.py"
    ],
    ".restructuring_backup/src/analysis/components.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "docs/enhanced_analysis_framework_test_report.json",
      "scriptlets/framework.py",
      "src/analysis/enhanced_framework.py",
      "src/analysis/framework.py",
      "tests/test_analysis_framework.py",
      "tests/test_async_load_framework.py",
      "tests/test_enhanced_analysis_framework.py",
      "tests/test_framework0_integration.py",
      "tests/test_scriptlet_framework.py",
      "tools/baseline_framework_analyzer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    ".restructuring_backup/src/analysis/enhanced_components.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      "docs/method_index.md",
      "src/analysis/enhanced_framework.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "src/analysis/components.py",
      "src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/registry.py",
      "src/analysis/registry.py"
    ],
    ".restructuring_backup/src/analysis/enhanced_framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "docs/enhanced_analysis_framework_test_report.json",
      "scriptlets/framework.py",
      "src/analysis/enhanced_framework.py",
      "src/analysis/framework.py",
      "tests/test_analysis_framework.py",
      "tests/test_async_load_framework.py",
      "tests/test_enhanced_analysis_framework.py",
      "tests/test_framework0_integration.py",
      "tests/test_scriptlet_framework.py",
      "tools/baseline_framework_analyzer.py",
      ".restructuring_backup/src/analysis/registry.py",
      "src/analysis/registry.py"
    ],
    ".restructuring_backup/src/analysis/framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    ".restructuring_backup/src/analysis/registry.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "docs/enhanced_analysis_framework_test_report.json",
      "scriptlets/framework.py",
      "src/analysis/enhanced_framework.py",
      "src/analysis/framework.py",
      "tests/test_analysis_framework.py",
      "tests/test_async_load_framework.py",
      "tests/test_enhanced_analysis_framework.py",
      "tests/test_framework0_integration.py",
      "tests/test_scriptlet_framework.py",
      "tools/baseline_framework_analyzer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    ".restructuring_backup/src/context_client.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/src/core/__init__.py": [],
    ".restructuring_backup/src/core/logger.py": [
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py"
    ],
    ".restructuring_backup/src/dash_integration.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "src/dash_demo.py",
      "src/dash_integration.py",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "src/dash_demo.py",
      "src/dash_integration.py",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md"
    ],
    ".restructuring_backup/src/visualization/__init__.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "src/visualization/execution_flow.py",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "docs/method_index.md",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/timeline_visualizer.py"
    ],
    ".restructuring_backup/src/visualization/enhanced_visualizer.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md"
    ],
    ".restructuring_backup/src/visualization/execution_flow.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md"
    ],
    ".restructuring_backup/src/visualization/performance_dashboard.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/src/visualization/timeline_visualizer.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/start_server.sh": [],
    ".restructuring_backup/test_delta_module.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py"
    ],
    ".restructuring_backup/test_enhanced_analysis_framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md"
    ],
    ".restructuring_backup/test_enhanced_memory_bus.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/test_enhanced_recipe_parser.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/test_execution_report.md": [],
    ".restructuring_backup/test_framework0_integration.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md"
    ],
    ".restructuring_backup/test_visualization_system.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "orchestrator/dependency_graph.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "orchestrator/dependency_graph.py"
    ],
    ".restructuring_backup/test_workspace_cleaner_v2.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    ".restructuring_backup/tests/test_analysis_framework.py": [
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md"
    ],
    ".restructuring_backup/tests/test_async_integration.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/memory_bus.py",
      "orchestrator/persistence/core.py",
      "orchestrator/persistence/enhanced.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/tests/test_async_load_framework.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/tests/test_basic_performance.py": [
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/tests/test_core_functionality.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/tests/test_delta_compression.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py"
    ],
    ".restructuring_backup/tests/test_enhanced_context_server.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/tests/test_enhanced_persistence.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py"
    ],
    ".restructuring_backup/tests/test_integration.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/tests/test_performance_load.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/tests/test_realtime_performance.py": [
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/tests/test_scriptlet_framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/tests/test_simple_validation.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/tests/test_websocket_performance.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/tools/baseline_documentation_updater.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      ".restructuring_backup/README.md",
      ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/configs/server_config.py",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/delta_compression.md",
      ".restructuring_backup/docs/deployment_guide.md",
      ".restructuring_backup/docs/getting_started.md",
      ".restructuring_backup/docs/integration_patterns.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/docs/troubleshooting.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/examples/README.md",
      ".restructuring_backup/examples/basic_usage.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/examples/integration_demo.py",
      ".restructuring_backup/examples/shell_demo.sh",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      ".restructuring_backup/pyproject.toml",
      ".restructuring_backup/requirements.txt",
      ".restructuring_backup/scriptlets/__init__.py",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/setup.cfg",
      ".restructuring_backup/src/__init__.py",
      ".restructuring_backup/src/analysis/__init__.py",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/src/analysis/registry.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/core/__init__.py",
      ".restructuring_backup/src/core/logger.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/__init__.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/start_server.sh",
      ".restructuring_backup/test_delta_module.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      ".restructuring_backup/test_enhanced_recipe_parser.py",
      ".restructuring_backup/test_execution_report.md",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/test_visualization_system.py",
      ".restructuring_backup/test_workspace_cleaner_v2.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_integration.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_basic_performance.py",
      ".restructuring_backup/tests/test_core_functionality.py",
      ".restructuring_backup/tests/test_delta_compression.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      ".restructuring_backup/tests/test_integration.py",
      ".restructuring_backup/tests/test_performance_load.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tests/test_simple_validation.py",
      ".restructuring_backup/tests/test_websocket_performance.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      ".restructuring_backup/tools/context.sh",
      ".restructuring_backup/tools/documentation_updater.py",
      ".restructuring_backup/tools/phased_restructurer.py",
      ".restructuring_backup/tools/workspace_cleaner.py",
      ".restructuring_backup/tools/workspace_cleaner_clean.py",
      ".restructuring_backup/tools/workspace_cleaner_v2.py",
      ".restructuring_backup/tools/workspace_restructurer.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/delta_compression.md",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "docs/test_execution_report.md",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/enhanced_recipe_parser.py",
      "orchestrator/persistence/core.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "requirements.txt",
      "src/analysis/registry.py",
      "src/core/__init__.py",
      "src/core/logger.py",
      "tests/test_core_functionality.py",
      "tests/test_delta_compression.py",
      "tests/test_enhanced_recipe_parser.py",
      "tests/test_realtime_performance.py",
      "tools/phased_restructurer.py",
      "tools/post_restructure_validator.py",
      "tools/workspace_restructurer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/tools/baseline_framework_analyzer.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      ".restructuring_backup/README.md",
      ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/configs/server_config.py",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/delta_compression.md",
      ".restructuring_backup/docs/deployment_guide.md",
      ".restructuring_backup/docs/getting_started.md",
      ".restructuring_backup/docs/integration_patterns.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/docs/troubleshooting.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/examples/README.md",
      ".restructuring_backup/examples/basic_usage.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/examples/integration_demo.py",
      ".restructuring_backup/examples/shell_demo.sh",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      ".restructuring_backup/pyproject.toml",
      ".restructuring_backup/requirements.txt",
      ".restructuring_backup/scriptlets/__init__.py",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/setup.cfg",
      ".restructuring_backup/src/__init__.py",
      ".restructuring_backup/src/analysis/__init__.py",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/src/analysis/registry.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/core/__init__.py",
      ".restructuring_backup/src/core/logger.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/__init__.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/start_server.sh",
      ".restructuring_backup/test_delta_module.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      ".restructuring_backup/test_enhanced_recipe_parser.py",
      ".restructuring_backup/test_execution_report.md",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/test_visualization_system.py",
      ".restructuring_backup/test_workspace_cleaner_v2.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_integration.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_basic_performance.py",
      ".restructuring_backup/tests/test_core_functionality.py",
      ".restructuring_backup/tests/test_delta_compression.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      ".restructuring_backup/tests/test_integration.py",
      ".restructuring_backup/tests/test_performance_load.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tests/test_simple_validation.py",
      ".restructuring_backup/tests/test_websocket_performance.py",
      ".restructuring_backup/tools/baseline_documentation_updater.py",
      ".restructuring_backup/tools/context.sh",
      ".restructuring_backup/tools/documentation_updater.py",
      ".restructuring_backup/tools/phased_restructurer.py",
      ".restructuring_backup/tools/workspace_cleaner.py",
      ".restructuring_backup/tools/workspace_cleaner_clean.py",
      ".restructuring_backup/tools/workspace_cleaner_v2.py",
      ".restructuring_backup/tools/workspace_restructurer.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/delta_compression.md",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "docs/test_execution_report.md",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/enhanced_recipe_parser.py",
      "orchestrator/persistence/core.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "requirements.txt",
      "src/analysis/registry.py",
      "src/core/__init__.py",
      "src/core/logger.py",
      "tests/test_core_functionality.py",
      "tests/test_delta_compression.py",
      "tests/test_enhanced_recipe_parser.py",
      "tests/test_realtime_performance.py",
      "tools/phased_restructurer.py",
      "tools/post_restructure_validator.py",
      "tools/workspace_restructurer.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/tools/context.sh": [],
    ".restructuring_backup/tools/documentation_updater.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      ".restructuring_backup/README.md",
      ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/configs/server_config.py",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/delta_compression.md",
      ".restructuring_backup/docs/deployment_guide.md",
      ".restructuring_backup/docs/getting_started.md",
      ".restructuring_backup/docs/integration_patterns.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/docs/troubleshooting.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/examples/README.md",
      ".restructuring_backup/examples/basic_usage.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/examples/integration_demo.py",
      ".restructuring_backup/examples/shell_demo.sh",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      ".restructuring_backup/pyproject.toml",
      ".restructuring_backup/requirements.txt",
      ".restructuring_backup/scriptlets/__init__.py",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/setup.cfg",
      ".restructuring_backup/src/__init__.py",
      ".restructuring_backup/src/analysis/__init__.py",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/src/analysis/registry.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/core/__init__.py",
      ".restructuring_backup/src/core/logger.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/__init__.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/start_server.sh",
      ".restructuring_backup/test_delta_module.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      ".restructuring_backup/test_enhanced_recipe_parser.py",
      ".restructuring_backup/test_execution_report.md",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/test_visualization_system.py",
      ".restructuring_backup/test_workspace_cleaner_v2.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_integration.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_basic_performance.py",
      ".restructuring_backup/tests/test_core_functionality.py",
      ".restructuring_backup/tests/test_delta_compression.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      ".restructuring_backup/tests/test_integration.py",
      ".restructuring_backup/tests/test_performance_load.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tests/test_simple_validation.py",
      ".restructuring_backup/tests/test_websocket_performance.py",
      ".restructuring_backup/tools/baseline_documentation_updater.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      ".restructuring_backup/tools/context.sh",
      ".restructuring_backup/tools/phased_restructurer.py",
      ".restructuring_backup/tools/workspace_cleaner.py",
      ".restructuring_backup/tools/workspace_cleaner_clean.py",
      ".restructuring_backup/tools/workspace_cleaner_v2.py",
      ".restructuring_backup/tools/workspace_restructurer.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/delta_compression.md",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "docs/test_execution_report.md",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/enhanced_recipe_parser.py",
      "orchestrator/persistence/core.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "requirements.txt",
      "src/analysis/registry.py",
      "src/core/__init__.py",
      "src/core/logger.py",
      "tests/test_core_functionality.py",
      "tests/test_delta_compression.py",
      "tests/test_enhanced_recipe_parser.py",
      "tests/test_realtime_performance.py",
      "tools/phased_restructurer.py",
      "tools/post_restructure_validator.py",
      "tools/workspace_restructurer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/tools/phased_restructurer.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/tools/workspace_cleaner.py": [],
    ".restructuring_backup/tools/workspace_cleaner_clean.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    ".restructuring_backup/tools/workspace_cleaner_v2.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml"
    ],
    ".restructuring_backup/tools/workspace_restructurer.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    ".restructuring_backup/workspace_cleaner_test_report.json": [],
    "README.md": [],
    "WORKSPACE_RESTRUCTURING_PLAN.json": [],
    "analysis/__init__.py": [],
    "cli/__init__.py": [],
    "docker-compose.yml": [],
    "docs/PERFORMANCE_TESTING_COMPLETION.md": [],
    "docs/PERFORMANCE_TESTING_REPORT.md": [],
    "docs/PROJECT_COMPLETION_REPORT.md": [],
    "docs/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md": [],
    "docs/WORKSPACE_RESTRUCTURING_PLAN.json": [],
    "docs/__init__.py": [],
    "docs/api_reference.md": [],
    "docs/cleanup_report.json": [],
    "docs/delta_compression.md": [],
    "docs/deployment_guide.md": [],
    "docs/enhanced_analysis_framework_test_report.json": [],
    "docs/getting_started.md": [],
    "docs/integrated_async_performance_demo.json": [],
    "docs/integration_patterns.md": [],
    "docs/method_index.md": [],
    "docs/post_restructure_execution_summary.md": [],
    "docs/post_restructure_validation_report.json": [],
    "docs/test_execution_report.md": [],
    "docs/troubleshooting.md": [],
    "docs/workspace_cleaner_test_report.json": [],
    "examples/README.md": [],
    "examples/shell_demo.sh": [],
    "orchestrator/__init__.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docker-compose.yml",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py": [],
    "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/context/__init__.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      "orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "orchestrator/context/context.py",
      "orchestrator/context/db_adapter.py",
      "orchestrator/context/memory_bus.py",
      "orchestrator/context/persistence.py",
      "orchestrator/context/version_control.py",
      "orchestrator/context_client.py",
      "orchestrator/enhanced_context_server.py",
      "tests/test_enhanced_context_server.py",
      "tools/context.sh",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      "docs/method_index.md",
      "orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      "orchestrator/context/memory_bus.py",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/memory_bus.py",
      "src/debug_enhanced_memory_bus.py",
      "tests/test_enhanced_memory_bus.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context/persistence.py",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence.py",
      "orchestrator/persistence/__init__.py",
      "orchestrator/persistence/cache.py",
      "orchestrator/persistence/core.py",
      "orchestrator/persistence/delta.py",
      "orchestrator/persistence/enhanced.py",
      "orchestrator/persistence/snapshot.py",
      "tests/test_enhanced_persistence.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/src/context_client.py",
      "docker-compose.yml",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context/version_control.py",
      "orchestrator/context_client.py"
    ],
    "orchestrator/context/context.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    "orchestrator/context/db_adapter.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/context/memory_bus.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/context/persistence.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      "docs/method_index.md",
      "orchestrator/context/db_adapter.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docker-compose.yml",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/context/version_control.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/context_client.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md"
    ],
    "orchestrator/dependency_graph.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/enhanced_context_server.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    "orchestrator/enhanced_memory_bus.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py"
    ],
    "orchestrator/enhanced_recipe_parser.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      ".restructuring_backup/README.md",
      ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/configs/server_config.py",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/delta_compression.md",
      ".restructuring_backup/docs/deployment_guide.md",
      ".restructuring_backup/docs/getting_started.md",
      ".restructuring_backup/docs/integration_patterns.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/docs/troubleshooting.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/examples/README.md",
      ".restructuring_backup/examples/basic_usage.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/examples/integration_demo.py",
      ".restructuring_backup/examples/shell_demo.sh",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      ".restructuring_backup/pyproject.toml",
      ".restructuring_backup/requirements.txt",
      ".restructuring_backup/scriptlets/__init__.py",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/setup.cfg",
      ".restructuring_backup/src/__init__.py",
      ".restructuring_backup/src/analysis/__init__.py",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/src/analysis/registry.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/core/__init__.py",
      ".restructuring_backup/src/core/logger.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/__init__.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/start_server.sh",
      ".restructuring_backup/test_delta_module.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      ".restructuring_backup/test_enhanced_recipe_parser.py",
      ".restructuring_backup/test_execution_report.md",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/test_visualization_system.py",
      ".restructuring_backup/test_workspace_cleaner_v2.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_integration.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_basic_performance.py",
      ".restructuring_backup/tests/test_core_functionality.py",
      ".restructuring_backup/tests/test_delta_compression.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      ".restructuring_backup/tests/test_integration.py",
      ".restructuring_backup/tests/test_performance_load.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tests/test_simple_validation.py",
      ".restructuring_backup/tests/test_websocket_performance.py",
      ".restructuring_backup/tools/baseline_documentation_updater.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      ".restructuring_backup/tools/context.sh",
      ".restructuring_backup/tools/documentation_updater.py",
      ".restructuring_backup/tools/phased_restructurer.py",
      ".restructuring_backup/tools/workspace_cleaner.py",
      ".restructuring_backup/tools/workspace_cleaner_clean.py",
      ".restructuring_backup/tools/workspace_cleaner_v2.py",
      ".restructuring_backup/tools/workspace_restructurer.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/delta_compression.md",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "docs/test_execution_report.md",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/persistence/core.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "requirements.txt",
      "src/analysis/registry.py",
      "src/core/__init__.py",
      "src/core/logger.py",
      "tests/test_core_functionality.py",
      "tests/test_delta_compression.py",
      "tests/test_enhanced_recipe_parser.py",
      "tests/test_realtime_performance.py",
      "tools/phased_restructurer.py",
      "tools/post_restructure_validator.py",
      "tools/workspace_restructurer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    "orchestrator/memory_bus.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/persistence.py": [
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/persistence/__init__.py": [],
    "orchestrator/persistence/cache.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py"
    ],
    "orchestrator/persistence/core.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py"
    ],
    "orchestrator/persistence/delta.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py"
    ],
    "orchestrator/persistence/enhanced.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py"
    ],
    "orchestrator/persistence/snapshot.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py"
    ],
    "orchestrator/recipe_parser.py": [
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "orchestrator/recipes/compute_median.yaml": [],
    "orchestrator/recipes/enhanced_example.yaml": [],
    "orchestrator/recipes/example_numbers.yaml": [],
    "orchestrator/recipes/example_numbers0.yaml": [],
    "orchestrator/runner.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    "pyproject.toml": [],
    "requirements.txt": [],
    "scriptlets/__init__.py": [],
    "scriptlets/framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    "server/__init__.py": [],
    "server/server_config.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "setup.cfg": [],
    "src/__init__.py": [],
    "src/analysis/__init__.py": [
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "docs/enhanced_analysis_framework_test_report.json",
      "scriptlets/framework.py",
      "src/analysis/enhanced_framework.py",
      "src/analysis/framework.py",
      "tests/test_analysis_framework.py",
      "tests/test_async_load_framework.py",
      "tests/test_enhanced_analysis_framework.py",
      "tests/test_framework0_integration.py",
      "tests/test_scriptlet_framework.py",
      "tools/baseline_framework_analyzer.py",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      "docs/method_index.md",
      "src/analysis/enhanced_framework.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "src/analysis/components.py",
      "src/analysis/enhanced_components.py"
    ],
    "src/analysis/components.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "docs/enhanced_analysis_framework_test_report.json",
      "scriptlets/framework.py",
      "src/analysis/enhanced_framework.py",
      "src/analysis/framework.py",
      "tests/test_analysis_framework.py",
      "tests/test_async_load_framework.py",
      "tests/test_enhanced_analysis_framework.py",
      "tests/test_framework0_integration.py",
      "tests/test_scriptlet_framework.py",
      "tools/baseline_framework_analyzer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    "src/analysis/enhanced_components.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      "docs/method_index.md",
      "src/analysis/enhanced_framework.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "src/analysis/components.py",
      ".restructuring_backup/src/analysis/registry.py",
      "src/analysis/registry.py"
    ],
    "src/analysis/enhanced_framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "docs/enhanced_analysis_framework_test_report.json",
      "scriptlets/framework.py",
      "src/analysis/framework.py",
      "tests/test_analysis_framework.py",
      "tests/test_async_load_framework.py",
      "tests/test_enhanced_analysis_framework.py",
      "tests/test_framework0_integration.py",
      "tests/test_scriptlet_framework.py",
      "tools/baseline_framework_analyzer.py",
      ".restructuring_backup/src/analysis/registry.py",
      "src/analysis/registry.py"
    ],
    "src/analysis/framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    "src/analysis/registry.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      "docs/enhanced_analysis_framework_test_report.json",
      "scriptlets/framework.py",
      "src/analysis/enhanced_framework.py",
      "src/analysis/framework.py",
      "tests/test_analysis_framework.py",
      "tests/test_async_load_framework.py",
      "tests/test_enhanced_analysis_framework.py",
      "tests/test_framework0_integration.py",
      "tests/test_scriptlet_framework.py",
      "tools/baseline_framework_analyzer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    "src/basic_usage.py": [
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md"
    ],
    "src/core/__init__.py": [],
    "src/core/logger.py": [
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py"
    ],
    "src/dash_demo.py": [
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "src/dash_integration.py",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "src/dash_integration.py",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "src/dash_integration.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "src/dash_demo.py",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "src/dash_demo.py",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md"
    ],
    "src/debug_enhanced_memory_bus.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md"
    ],
    "src/integration_demo.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "src/visualization/__init__.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      "docs/method_index.md",
      "src/visualization/performance_dashboard.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "src/visualization/execution_flow.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/timeline_visualizer.py"
    ],
    "src/visualization/enhanced_visualizer.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md"
    ],
    "src/visualization/execution_flow.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md"
    ],
    "src/visualization/performance_dashboard.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "src/visualization/timeline_visualizer.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/dependency_graph.py",
      "src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "start_server.sh": [],
    "storage/__init__.py": [],
    "tests/__init__.py": [],
    "tests/test_analysis_framework.py": [
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md"
    ],
    "tests/test_async_integration.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/memory_bus.py",
      "orchestrator/persistence/core.py",
      "orchestrator/persistence/enhanced.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tests/test_async_load_framework.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tests/test_basic_performance.py": [
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py"
    ],
    "tests/test_core_functionality.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "tests/test_delta_compression.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py"
    ],
    "tests/test_delta_module.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py"
    ],
    "tests/test_enhanced_analysis_framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md"
    ],
    "tests/test_enhanced_context_server.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "tests/test_enhanced_memory_bus.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "tests/test_enhanced_persistence.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/enhanced_memory_bus.py",
      "orchestrator/persistence/cache.py"
    ],
    "tests/test_enhanced_recipe_parser.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "tests/test_framework0_integration.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md"
    ],
    "tests/test_integration.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "tests/test_performance_load.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tests/test_realtime_performance.py": [
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tests/test_scriptlet_framework.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      "docs/api_reference.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "tests/test_simple_validation.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py"
    ],
    "tests/test_visualization_system.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "orchestrator/dependency_graph.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      "orchestrator/dependency_graph.py"
    ],
    "tests/test_websocket_performance.py": [
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/orchestrator/memory_bus.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/memory_bus.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tests/test_workspace_cleaner_v2.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      "docs/api_reference.md",
      "docs/method_index.md",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh"
    ],
    "tools/__init__.py": [],
    "tools/baseline_documentation_updater.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      ".restructuring_backup/README.md",
      ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/configs/server_config.py",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/delta_compression.md",
      ".restructuring_backup/docs/deployment_guide.md",
      ".restructuring_backup/docs/getting_started.md",
      ".restructuring_backup/docs/integration_patterns.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/docs/troubleshooting.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/examples/README.md",
      ".restructuring_backup/examples/basic_usage.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/examples/integration_demo.py",
      ".restructuring_backup/examples/shell_demo.sh",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      ".restructuring_backup/pyproject.toml",
      ".restructuring_backup/requirements.txt",
      ".restructuring_backup/scriptlets/__init__.py",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/setup.cfg",
      ".restructuring_backup/src/__init__.py",
      ".restructuring_backup/src/analysis/__init__.py",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/src/analysis/registry.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/core/__init__.py",
      ".restructuring_backup/src/core/logger.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/__init__.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/start_server.sh",
      ".restructuring_backup/test_delta_module.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      ".restructuring_backup/test_enhanced_recipe_parser.py",
      ".restructuring_backup/test_execution_report.md",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/test_visualization_system.py",
      ".restructuring_backup/test_workspace_cleaner_v2.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_integration.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_basic_performance.py",
      ".restructuring_backup/tests/test_core_functionality.py",
      ".restructuring_backup/tests/test_delta_compression.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      ".restructuring_backup/tests/test_integration.py",
      ".restructuring_backup/tests/test_performance_load.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tests/test_simple_validation.py",
      ".restructuring_backup/tests/test_websocket_performance.py",
      ".restructuring_backup/tools/baseline_documentation_updater.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      ".restructuring_backup/tools/context.sh",
      ".restructuring_backup/tools/documentation_updater.py",
      ".restructuring_backup/tools/phased_restructurer.py",
      ".restructuring_backup/tools/workspace_cleaner.py",
      ".restructuring_backup/tools/workspace_cleaner_clean.py",
      ".restructuring_backup/tools/workspace_cleaner_v2.py",
      ".restructuring_backup/tools/workspace_restructurer.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/delta_compression.md",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "docs/test_execution_report.md",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/enhanced_recipe_parser.py",
      "orchestrator/persistence/core.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "requirements.txt",
      "src/analysis/registry.py",
      "src/core/__init__.py",
      "src/core/logger.py",
      "tests/test_core_functionality.py",
      "tests/test_delta_compression.py",
      "tests/test_enhanced_recipe_parser.py",
      "tests/test_realtime_performance.py",
      "tools/phased_restructurer.py",
      "tools/post_restructure_validator.py",
      "tools/workspace_restructurer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tools/baseline_framework_analyzer.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      ".restructuring_backup/README.md",
      ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/configs/server_config.py",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/delta_compression.md",
      ".restructuring_backup/docs/deployment_guide.md",
      ".restructuring_backup/docs/getting_started.md",
      ".restructuring_backup/docs/integration_patterns.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/docs/troubleshooting.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/examples/README.md",
      ".restructuring_backup/examples/basic_usage.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/examples/integration_demo.py",
      ".restructuring_backup/examples/shell_demo.sh",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      ".restructuring_backup/pyproject.toml",
      ".restructuring_backup/requirements.txt",
      ".restructuring_backup/scriptlets/__init__.py",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/setup.cfg",
      ".restructuring_backup/src/__init__.py",
      ".restructuring_backup/src/analysis/__init__.py",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/src/analysis/registry.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/core/__init__.py",
      ".restructuring_backup/src/core/logger.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/__init__.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/start_server.sh",
      ".restructuring_backup/test_delta_module.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      ".restructuring_backup/test_enhanced_recipe_parser.py",
      ".restructuring_backup/test_execution_report.md",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/test_visualization_system.py",
      ".restructuring_backup/test_workspace_cleaner_v2.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_integration.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_basic_performance.py",
      ".restructuring_backup/tests/test_core_functionality.py",
      ".restructuring_backup/tests/test_delta_compression.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      ".restructuring_backup/tests/test_integration.py",
      ".restructuring_backup/tests/test_performance_load.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tests/test_simple_validation.py",
      ".restructuring_backup/tests/test_websocket_performance.py",
      ".restructuring_backup/tools/baseline_documentation_updater.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      ".restructuring_backup/tools/context.sh",
      ".restructuring_backup/tools/documentation_updater.py",
      ".restructuring_backup/tools/phased_restructurer.py",
      ".restructuring_backup/tools/workspace_cleaner.py",
      ".restructuring_backup/tools/workspace_cleaner_clean.py",
      ".restructuring_backup/tools/workspace_cleaner_v2.py",
      ".restructuring_backup/tools/workspace_restructurer.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/delta_compression.md",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "docs/test_execution_report.md",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/enhanced_recipe_parser.py",
      "orchestrator/persistence/core.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "requirements.txt",
      "src/analysis/registry.py",
      "src/core/__init__.py",
      "src/core/logger.py",
      "tests/test_core_functionality.py",
      "tests/test_delta_compression.py",
      "tests/test_enhanced_recipe_parser.py",
      "tests/test_realtime_performance.py",
      "tools/phased_restructurer.py",
      "tools/post_restructure_validator.py",
      "tools/workspace_restructurer.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tools/context.sh": [],
    "tools/documentation_updater.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
      ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
      ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
      ".restructuring_backup/README.md",
      ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/configs/server_config.py",
      ".restructuring_backup/debug_enhanced_memory_bus.py",
      ".restructuring_backup/docker-compose.yml",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/delta_compression.md",
      ".restructuring_backup/docs/deployment_guide.md",
      ".restructuring_backup/docs/getting_started.md",
      ".restructuring_backup/docs/integration_patterns.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/docs/troubleshooting.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/examples/README.md",
      ".restructuring_backup/examples/basic_usage.py",
      ".restructuring_backup/examples/dash_demo.py",
      ".restructuring_backup/examples/integration_demo.py",
      ".restructuring_backup/examples/shell_demo.sh",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/orchestrator/__init__.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/__init__-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/context-checkpoint.py",
      ".restructuring_backup/orchestrator/context/.ipynb_checkpoints/memory_bus-checkpoint.py",
      ".restructuring_backup/orchestrator/context/__init__.py",
      ".restructuring_backup/orchestrator/context/context.py",
      ".restructuring_backup/orchestrator/context/db_adapter.py",
      ".restructuring_backup/orchestrator/context/memory_bus.py",
      ".restructuring_backup/orchestrator/context/persistence.py",
      ".restructuring_backup/orchestrator/context/version_control.py",
      ".restructuring_backup/orchestrator/dependency_graph.py",
      ".restructuring_backup/orchestrator/enhanced_memory_bus.py",
      ".restructuring_backup/orchestrator/enhanced_recipe_parser.py",
      ".restructuring_backup/orchestrator/memory_bus.py",
      ".restructuring_backup/orchestrator/persistence.py",
      ".restructuring_backup/orchestrator/persistence/__init__.py",
      ".restructuring_backup/orchestrator/persistence/cache.py",
      ".restructuring_backup/orchestrator/persistence/core.py",
      ".restructuring_backup/orchestrator/persistence/delta.py",
      ".restructuring_backup/orchestrator/persistence/enhanced.py",
      ".restructuring_backup/orchestrator/persistence/snapshot.py",
      ".restructuring_backup/orchestrator/recipe_parser.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/orchestrator/runner.py",
      ".restructuring_backup/pyproject.toml",
      ".restructuring_backup/requirements.txt",
      ".restructuring_backup/scriptlets/__init__.py",
      ".restructuring_backup/scriptlets/framework.py",
      ".restructuring_backup/server/enhanced_context_server.py",
      ".restructuring_backup/setup.cfg",
      ".restructuring_backup/src/__init__.py",
      ".restructuring_backup/src/analysis/__init__.py",
      ".restructuring_backup/src/analysis/components.py",
      ".restructuring_backup/src/analysis/enhanced_components.py",
      ".restructuring_backup/src/analysis/enhanced_framework.py",
      ".restructuring_backup/src/analysis/framework.py",
      ".restructuring_backup/src/analysis/registry.py",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/src/core/__init__.py",
      ".restructuring_backup/src/core/logger.py",
      ".restructuring_backup/src/dash_integration.py",
      ".restructuring_backup/src/visualization/__init__.py",
      ".restructuring_backup/src/visualization/enhanced_visualizer.py",
      ".restructuring_backup/src/visualization/execution_flow.py",
      ".restructuring_backup/src/visualization/performance_dashboard.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/start_server.sh",
      ".restructuring_backup/test_delta_module.py",
      ".restructuring_backup/test_enhanced_analysis_framework.py",
      ".restructuring_backup/test_enhanced_memory_bus.py",
      ".restructuring_backup/test_enhanced_recipe_parser.py",
      ".restructuring_backup/test_execution_report.md",
      ".restructuring_backup/test_framework0_integration.py",
      ".restructuring_backup/test_visualization_system.py",
      ".restructuring_backup/test_workspace_cleaner_v2.py",
      ".restructuring_backup/tests/test_analysis_framework.py",
      ".restructuring_backup/tests/test_async_integration.py",
      ".restructuring_backup/tests/test_async_load_framework.py",
      ".restructuring_backup/tests/test_basic_performance.py",
      ".restructuring_backup/tests/test_core_functionality.py",
      ".restructuring_backup/tests/test_delta_compression.py",
      ".restructuring_backup/tests/test_enhanced_context_server.py",
      ".restructuring_backup/tests/test_enhanced_persistence.py",
      ".restructuring_backup/tests/test_integration.py",
      ".restructuring_backup/tests/test_performance_load.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      ".restructuring_backup/tests/test_scriptlet_framework.py",
      ".restructuring_backup/tests/test_simple_validation.py",
      ".restructuring_backup/tests/test_websocket_performance.py",
      ".restructuring_backup/tools/baseline_documentation_updater.py",
      ".restructuring_backup/tools/baseline_framework_analyzer.py",
      ".restructuring_backup/tools/context.sh",
      ".restructuring_backup/tools/documentation_updater.py",
      ".restructuring_backup/tools/phased_restructurer.py",
      ".restructuring_backup/tools/workspace_cleaner.py",
      ".restructuring_backup/tools/workspace_cleaner_clean.py",
      ".restructuring_backup/tools/workspace_cleaner_v2.py",
      ".restructuring_backup/tools/workspace_restructurer.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/delta_compression.md",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "docs/test_execution_report.md",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/enhanced_recipe_parser.py",
      "orchestrator/persistence/core.py",
      "orchestrator/recipe_parser.py",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      "requirements.txt",
      "src/analysis/registry.py",
      "src/core/__init__.py",
      "src/core/logger.py",
      "tests/test_core_functionality.py",
      "tests/test_delta_compression.py",
      "tests/test_enhanced_recipe_parser.py",
      "tests/test_realtime_performance.py",
      "tools/phased_restructurer.py",
      "tools/post_restructure_validator.py",
      "tools/workspace_restructurer.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tools/phased_restructurer.py": [
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tools/post_restructure_validator.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ],
    "tools/workspace_cleaner.py": [],
    "tools/workspace_cleaner_clean.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py"
    ],
    "tools/workspace_cleaner_v2.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/test_visualization_system.py",
      "tests/test_visualization_system.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/src/visualization/timeline_visualizer.py",
      ".restructuring_backup/tests/test_realtime_performance.py",
      "src/visualization/timeline_visualizer.py",
      "tests/test_realtime_performance.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/orchestrator/recipes/compute_median.yaml",
      ".restructuring_backup/orchestrator/recipes/enhanced_example.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers.yaml",
      ".restructuring_backup/orchestrator/recipes/example_numbers0.yaml",
      "orchestrator/recipes/compute_median.yaml",
      "orchestrator/recipes/enhanced_example.yaml",
      "orchestrator/recipes/example_numbers.yaml",
      "orchestrator/recipes/example_numbers0.yaml"
    ],
    "tools/workspace_restructurer.py": [
      ".restructuring_backup/docker-compose.yml",
      "docker-compose.yml",
      "docs/post_restructure_execution_summary.md",
      "docs/post_restructure_validation_report.json",
      "tools/post_restructure_validator.py",
      ".restructuring_backup/WORKSPACE_RESTRUCTURING_PLAN.json",
      ".restructuring_backup/cleanup_report.json",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/enhanced_analysis_framework_test_report.json",
      ".restructuring_backup/integrated_async_performance_demo.json",
      ".restructuring_backup/src/context_client.py",
      ".restructuring_backup/workspace_cleaner_test_report.json",
      "WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/WORKSPACE_RESTRUCTURING_PLAN.json",
      "docs/api_reference.md",
      "docs/cleanup_report.json",
      "docs/enhanced_analysis_framework_test_report.json",
      "docs/integrated_async_performance_demo.json",
      "docs/method_index.md",
      "docs/post_restructure_validation_report.json",
      "docs/workspace_cleaner_test_report.json",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/docs/method_index.md",
      ".restructuring_backup/src/context_client.py",
      "docs/api_reference.md",
      "docs/method_index.md",
      "orchestrator/context_client.py",
      ".restructuring_backup/docs/api_reference.md",
      ".restructuring_backup/tools/context.sh",
      "docs/api_reference.md",
      "tools/context.sh",
      ".restructuring_backup/tools/context.sh",
      "tools/context.sh"
    ]
  },
  "core_patterns": [
    "Factory Pattern",
    "Adapter Pattern",
    "Context Pattern"
  ],
  "extension_points": [
    "test_register_analyzer_decorator - .restructuring_backup/tests/test_analysis_framework.py",
    "handle_client_register - orchestrator/enhanced_context_server.py",
    "TestBaseAnalyzerV2 - .restructuring_backup/tests/test_analysis_framework.py",
    "register_callback - orchestrator/context/context.py",
    "test_register_analyzer_decorator - tests/test_analysis_framework.py",
    "BaselineFramework - tools/baseline_framework_analyzer.py",
    "unregister - src/analysis/registry.py",
    "register_analyzer - src/analysis/registry.py",
    "BaseScriptlet - .restructuring_backup/scriptlets/framework.py",
    "handle_client_register - .restructuring_backup/server/enhanced_context_server.py",
    "unregister - .restructuring_backup/src/analysis/registry.py",
    "register_callback - .restructuring_backup/orchestrator/context/context.py",
    "TestBaseScriptlet - .restructuring_backup/tests/test_scriptlet_framework.py",
    "BaseAnalyzerV2 - .restructuring_backup/src/analysis/framework.py",
    "PersistenceBase - .restructuring_backup/orchestrator/persistence/core.py",
    "BaselineFrameworkAnalyzer - .restructuring_backup/tools/baseline_framework_analyzer.py",
    "BaselineComponent - tools/baseline_framework_analyzer.py",
    "register_worker - .restructuring_backup/tests/test_analysis_framework.py",
    "register_analyzer - .restructuring_backup/src/analysis/registry.py",
    "TestBaseScriptlet - tests/test_scriptlet_framework.py",
    "BaselineDocumentationUpdater - .restructuring_backup/tools/baseline_documentation_updater.py",
    "PersistenceBase - orchestrator/persistence/core.py",
    "register_scriptlet - scriptlets/framework.py",
    "TestBaseAnalyzerV2 - tests/test_analysis_framework.py",
    "register_worker - tests/test_analysis_framework.py",
    "register - .restructuring_backup/src/analysis/registry.py",
    "BaseScriptlet - scriptlets/framework.py",
    "register_scriptlet - .restructuring_backup/scriptlets/framework.py",
    "BaselineDocumentationStructure - tools/baseline_documentation_updater.py",
    "BaselineFramework - .restructuring_backup/tools/baseline_framework_analyzer.py",
    "BaseAnalyzerV2 - src/analysis/framework.py",
    "BaselineComponent - .restructuring_backup/tools/baseline_framework_analyzer.py",
    "BaselineFrameworkAnalyzer - tools/baseline_framework_analyzer.py",
    "BaselineDocumentationUpdater - tools/baseline_documentation_updater.py",
    "register - src/analysis/registry.py",
    "BaselineDocumentationStructure - .restructuring_backup/tools/baseline_documentation_updater.py"
  ],
  "configuration_files": [
    ".restructuring_backup/docker-compose.yml",
    "docker-compose.yml"
  ],
  "documentation_files": [
    ".github/copilot-instructions.md",
    ".github/prompts/Copilot-prompt.md",
    ".restructuring_backup/PERFORMANCE_TESTING_COMPLETION.md",
    ".restructuring_backup/PERFORMANCE_TESTING_REPORT.md",
    ".restructuring_backup/PROJECT_COMPLETION_REPORT.md",
    ".restructuring_backup/README.md",
    ".restructuring_backup/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
    ".restructuring_backup/docs/api_reference.md",
    ".restructuring_backup/docs/delta_compression.md",
    ".restructuring_backup/docs/deployment_guide.md",
    ".restructuring_backup/docs/getting_started.md",
    ".restructuring_backup/docs/integration_patterns.md",
    ".restructuring_backup/docs/method_index.md",
    ".restructuring_backup/docs/troubleshooting.md",
    ".restructuring_backup/examples/README.md",
    ".restructuring_backup/test_execution_report.md",
    "README.md",
    "docs/PERFORMANCE_TESTING_COMPLETION.md",
    "docs/PERFORMANCE_TESTING_REPORT.md",
    "docs/PROJECT_COMPLETION_REPORT.md",
    "docs/WEBSOCKET_ASYNC_PERFORMANCE_COMPLETION.md",
    "docs/api_reference.md",
    "docs/delta_compression.md",
    "docs/deployment_guide.md",
    "docs/getting_started.md",
    "docs/integration_patterns.md",
    "docs/method_index.md",
    "docs/post_restructure_execution_summary.md",
    "docs/test_execution_report.md",
    "docs/troubleshooting.md",
    "examples/README.md"
  ],
  "test_files": [
    ".restructuring_backup/tests/test_analysis_framework.py",
    ".restructuring_backup/tests/test_async_integration.py",
    ".restructuring_backup/tests/test_async_load_framework.py",
    ".restructuring_backup/tests/test_basic_performance.py",
    ".restructuring_backup/tests/test_core_functionality.py",
    ".restructuring_backup/tests/test_delta_compression.py",
    ".restructuring_backup/tests/test_enhanced_context_server.py",
    ".restructuring_backup/tests/test_enhanced_persistence.py",
    ".restructuring_backup/tests/test_integration.py",
    ".restructuring_backup/tests/test_performance_load.py",
    ".restructuring_backup/tests/test_realtime_performance.py",
    ".restructuring_backup/tests/test_scriptlet_framework.py",
    ".restructuring_backup/tests/test_simple_validation.py",
    ".restructuring_backup/tests/test_websocket_performance.py",
    "tests/__init__.py",
    "tests/test_analysis_framework.py",
    "tests/test_async_integration.py",
    "tests/test_async_load_framework.py",
    "tests/test_basic_performance.py",
    "tests/test_core_functionality.py",
    "tests/test_delta_compression.py",
    "tests/test_delta_module.py",
    "tests/test_enhanced_analysis_framework.py",
    "tests/test_enhanced_context_server.py",
    "tests/test_enhanced_memory_bus.py",
    "tests/test_enhanced_persistence.py",
    "tests/test_enhanced_recipe_parser.py",
    "tests/test_framework0_integration.py",
    "tests/test_integration.py",
    "tests/test_performance_load.py",
    "tests/test_realtime_performance.py",
    "tests/test_scriptlet_framework.py",
    "tests/test_simple_validation.py",
    "tests/test_visualization_system.py",
    "tests/test_websocket_performance.py",
    "tests/test_workspace_cleaner_v2.py"
  ],
  "analysis_metrics": {
    "total_components": 225,
    "component_types": {
      "documentation": 31,
      "utility": 64,
      "configuration": 2,
      "shell_script": 4,
      "orchestration": 56,
      "scriptlet": 4,
      "server_infrastructure": 3,
      "core_framework": 4,
      "test": 36,
      "development_tool": 20,
      "command_line_interface": 1
    },
    "total_lines_of_code": 107679,
    "total_complexity_score": 8389,
    "average_complexity": 37.28,
    "average_lines_of_code": 478.57,
    "architecture_layers": 6,
    "core_patterns": 3,
    "extension_points": 36
  }
}