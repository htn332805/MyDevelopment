# Framework0 Context Server Docker Compose Configuration
#
# This docker-compose.yml file provides easy deployment options for the
# Framework0 Enhanced Context Server with supporting services and configurations.

version: '3.8'

services:
  # Main context server service
  context-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: framework0/context-server:latest
    container_name: framework0-context-server
    restart: unless-stopped
    
    # Port mapping for server access
    ports:
      - "${CONTEXT_SERVER_PORT:-8080}:8080"
    
    # Environment configuration
    environment:
      CONTEXT_SERVER_HOST: 0.0.0.0
      CONTEXT_SERVER_PORT: 8080
      CONTEXT_LOG_LEVEL: ${CONTEXT_LOG_LEVEL:-INFO}
      CONTEXT_DASHBOARD_ENABLED: ${CONTEXT_DASHBOARD_ENABLED:-true}
      CONTEXT_WEBSOCKET_ENABLED: ${CONTEXT_WEBSOCKET_ENABLED:-true}
      CONTEXT_MAX_HISTORY: ${CONTEXT_MAX_HISTORY:-10000}
      CONTEXT_AUTO_CLEANUP: ${CONTEXT_AUTO_CLEANUP:-true}
    
    # Volume mounts for persistence and configuration
    volumes:
      - context-data:/app/data          # Persistent data storage
      - context-logs:/app/logs          # Log file storage
      - ./configs:/app/configs:ro       # Configuration files (read-only)
    
    # Resource limits for production deployment
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Networks
    networks:
      - framework0-network

  # Optional: Dash dashboard service (separate container)
  context-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    image: framework0/context-dashboard:latest
    container_name: framework0-context-dashboard
    restart: unless-stopped
    
    # Port mapping for dashboard access
    ports:
      - "${CONTEXT_DASHBOARD_PORT:-8050}:8050"
    
    # Environment configuration
    environment:
      CONTEXT_SERVER_HOST: context-server
      CONTEXT_SERVER_PORT: 8080
      DASH_HOST: 0.0.0.0
      DASH_PORT: 8050
      DASH_DEBUG: ${DASH_DEBUG:-false}
    
    # Dependency on context server
    depends_on:
      context-server:
        condition: service_healthy
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Networks
    networks:
      - framework0-network

  # Optional: Redis for distributed context storage
  redis:
    image: redis:7-alpine
    container_name: framework0-redis
    restart: unless-stopped
    
    # Configuration for Redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Volume for Redis persistence
    volumes:
      - redis-data:/data
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Networks
    networks:
      - framework0-network
    
    # Only start if explicitly enabled
    profiles:
      - redis

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: framework0-prometheus
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    # Configuration
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # Command configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    
    # Networks
    networks:
      - framework0-network
    
    # Only start if monitoring profile is enabled
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: framework0-grafana
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    # Environment configuration
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    
    # Volumes
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Networks
    networks:
      - framework0-network
    
    # Only start if monitoring profile is enabled
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  context-data:
    driver: local
  context-logs:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Networks for service communication
networks:
  framework0-network:
    driver: bridge